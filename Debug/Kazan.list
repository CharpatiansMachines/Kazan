
Kazan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000209c  0800a110  0800a110  0001a110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1ac  0800c1ac  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b4  0800c1b4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0800c1b4  0800c1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c1d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001ec  0800c3bc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800c3bc  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ad0  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d45  00000000  00000000  00041d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  00047a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102f  00000000  00000000  00048f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0ea  00000000  00000000  00049fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9da  00000000  00000000  000740b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e22d8  00000000  00000000  00092a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066ac  00000000  00000000  00174d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0017b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0f8 	.word	0x0800a0f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800a0f8 	.word	0x0800a0f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0da      	sub	sp, #360	; 0x168
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fe77 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f817 	bl	8000f20 <_Z18SystemClock_Configv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */


  MX_GPIO_Init();
 8000ef2:	f000 fab9 	bl	8001468 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000ef6:	f000 f895 	bl	8001024 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000efa:	f000 f94f 	bl	800119c <_ZL12MX_ADC2_Initv>
  MX_I2C2_Init();
 8000efe:	f000 f9e7 	bl	80012d0 <_ZL12MX_I2C2_Initv>
  MX_UART4_Init();
 8000f02:	f000 fa55 	bl	80013b0 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8000f06:	f000 fa17 	bl	8001338 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000f0a:	f000 fa7f 	bl	800140c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Application application;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fc33 	bl	800477c <_ZN11ApplicationC1Ev>

  while (1)
  {
	  application.run();
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fc7d 	bl	8004818 <_ZN11Application3runEv>
 8000f1e:	e7fa      	b.n	8000f16 <main+0x32>

08000f20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	; 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2234      	movs	r2, #52	; 0x34
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 fff9 	bl	8007f26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b34      	ldr	r3, [pc, #208]	; (800101c <_Z18SystemClock_Configv+0xfc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a33      	ldr	r2, [pc, #204]	; (800101c <_Z18SystemClock_Configv+0xfc>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <_Z18SystemClock_Configv+0xfc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2300      	movs	r3, #0
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <_Z18SystemClock_Configv+0x100>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <_Z18SystemClock_Configv+0x100>)
 8000f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <_Z18SystemClock_Configv+0x100>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f84:	2310      	movs	r3, #16
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f94:	23b4      	movs	r3, #180	; 0xb4
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fcd9 	bl	8003960 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000fbe:	f000 fad9 	bl	8001574 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc2:	f002 f9b9 	bl	8003338 <HAL_PWREx_EnableOverDrive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000fd6:	f000 facd 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 f9ed 	bl	80033d8 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800100e:	f000 fab1 	bl	8001574 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	; 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b56      	ldr	r3, [pc, #344]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001038:	4a56      	ldr	r2, [pc, #344]	; (8001194 <_ZL12MX_ADC1_Initv+0x170>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103c:	4b54      	ldr	r3, [pc, #336]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 800103e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001042:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001046:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800104a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 800104e:	2201      	movs	r2, #1
 8001050:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001052:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001054:	2201      	movs	r2, #1
 8001056:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001060:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001062:	2200      	movs	r2, #0
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001066:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001068:	4a4b      	ldr	r2, [pc, #300]	; (8001198 <_ZL12MX_ADC1_Initv+0x174>)
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106c:	4b48      	ldr	r3, [pc, #288]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001074:	2206      	movs	r2, #6
 8001076:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001078:	4b45      	ldr	r3, [pc, #276]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001082:	2201      	movs	r2, #1
 8001084:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001086:	4842      	ldr	r0, [pc, #264]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001088:	f000 fe3e 	bl	8001d08 <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <_ZL12MX_ADC1_Initv+0x7c>
  {
    Error_Handler();
 800109c:	f000 fa6a 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4837      	ldr	r0, [pc, #220]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 80010b2:	f001 f80b 	bl	80020cc <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 80010c6:	f000 fa55 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	482e      	ldr	r0, [pc, #184]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 80010d8:	f000 fff8 	bl	80020cc <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <_ZL12MX_ADC1_Initv+0xcc>
  {
    Error_Handler();
 80010ec:	f000 fa42 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010f0:	2303      	movs	r3, #3
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010f4:	2303      	movs	r3, #3
 80010f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4824      	ldr	r0, [pc, #144]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 80010fe:	f000 ffe5 	bl	80020cc <HAL_ADC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf14      	ite	ne
 8001108:	2301      	movne	r3, #1
 800110a:	2300      	moveq	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <_ZL12MX_ADC1_Initv+0xf2>
  {
    Error_Handler();
 8001112:	f000 fa2f 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001116:	2305      	movs	r3, #5
 8001118:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800111a:	2304      	movs	r3, #4
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001124:	f000 ffd2 	bl	80020cc <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	bf14      	ite	ne
 800112e:	2301      	movne	r3, #1
 8001130:	2300      	moveq	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 8001138:	f000 fa1c 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800113c:	2306      	movs	r3, #6
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001140:	2305      	movs	r3, #5
 8001142:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 800114a:	f000 ffbf 	bl	80020cc <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf14      	ite	ne
 8001154:	2301      	movne	r3, #1
 8001156:	2300      	moveq	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <_ZL12MX_ADC1_Initv+0x13e>
  {
    Error_Handler();
 800115e:	f000 fa09 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001162:	2307      	movs	r3, #7
 8001164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001166:	2306      	movs	r3, #6
 8001168:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <_ZL12MX_ADC1_Initv+0x16c>)
 8001170:	f000 ffac 	bl	80020cc <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	bf14      	ite	ne
 800117a:	2301      	movne	r3, #1
 800117c:	2300      	moveq	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <_ZL12MX_ADC1_Initv+0x164>
  {
    Error_Handler();
 8001184:	f000 f9f6 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000208 	.word	0x20000208
 8001194:	40012000 	.word	0x40012000
 8001198:	0f000001 	.word	0x0f000001

0800119c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011ae:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011b0:	4a45      	ldr	r2, [pc, #276]	; (80012c8 <_ZL12MX_ADC2_Initv+0x12c>)
 80011b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80011c2:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011de:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <_ZL12MX_ADC2_Initv+0x130>)
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011fc:	4831      	ldr	r0, [pc, #196]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80011fe:	f000 fd83 	bl	8001d08 <HAL_ADC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 8001212:	f000 f9af 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001216:	2304      	movs	r3, #4
 8001218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800121e:	2302      	movs	r3, #2
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4827      	ldr	r0, [pc, #156]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 8001228:	f000 ff50 	bl	80020cc <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 800123c:	f000 f99a 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001240:	2308      	movs	r3, #8
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	481c      	ldr	r0, [pc, #112]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 8001252:	f000 ff3b 	bl	80020cc <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <_ZL12MX_ADC2_Initv+0xce>
  {
    Error_Handler();
 8001266:	f000 f985 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800126a:	2309      	movs	r3, #9
 800126c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800126e:	2303      	movs	r3, #3
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 8001278:	f000 ff28 	bl	80020cc <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf14      	ite	ne
 8001282:	2301      	movne	r3, #1
 8001284:	2300      	moveq	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZL12MX_ADC2_Initv+0xf4>
  {
    Error_Handler();
 800128c:	f000 f972 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001290:	230a      	movs	r3, #10
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001298:	2302      	movs	r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <_ZL12MX_ADC2_Initv+0x128>)
 80012a2:	f000 ff13 	bl	80020cc <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <_ZL12MX_ADC2_Initv+0x11e>
  {
    Error_Handler();
 80012b6:	f000 f95d 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000250 	.word	0x20000250
 80012c8:	40012100 	.word	0x40012100
 80012cc:	0f000001 	.word	0x0f000001

080012d0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <_ZL12MX_I2C2_Initv+0x60>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 80012dc:	4a15      	ldr	r2, [pc, #84]	; (8001334 <_ZL12MX_I2C2_Initv+0x64>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 80012ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <_ZL12MX_I2C2_Initv+0x5c>)
 800130e:	f001 fbb7 	bl	8002a80 <HAL_I2C_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001322:	f000 f927 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000298 	.word	0x20000298
 8001330:	40005800 	.word	0x40005800
 8001334:	000186a0 	.word	0x000186a0

08001338 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 800133e:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <_ZL12MX_SPI1_Initv+0x74>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 8001344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 8001384:	220a      	movs	r2, #10
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <_ZL12MX_SPI1_Initv+0x70>)
 800138a:	f002 fd87 	bl	8003e9c <HAL_SPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800139e:	f000 f8e9 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200002ec 	.word	0x200002ec
 80013ac:	40013000 	.word	0x40013000

080013b0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
	huart4_data.Instance = UART4;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_ZL13MX_UART4_Initv+0x58>)
 80013b8:	601a      	str	r2, [r3, #0]
	huart4_data.Init.BaudRate = 115200;
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
	huart4_data.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
	huart4_data.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
	huart4_data.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
	huart4_data.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
	huart4_data.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
	huart4_data.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart4_data) != HAL_OK)
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <_ZL13MX_UART4_Initv+0x54>)
 80013e8:	f002 fde1 	bl	8003fae <HAL_HalfDuplex_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf14      	ite	ne
 80013f2:	2301      	movne	r3, #1
 80013f4:	2300      	moveq	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <_ZL13MX_UART4_Initv+0x50>
	{
		Error_Handler();
 80013fc:	f000 f8ba 	bl	8001574 <Error_Handler>
	}
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000344 	.word	0x20000344
 8001408:	40004c00 	.word	0x40004c00

0800140c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1_motor.Instance = USART1;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001412:	4a14      	ldr	r2, [pc, #80]	; (8001464 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001414:	601a      	str	r2, [r3, #0]
  huart1_motor.Init.BaudRate = 115200;
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart1_motor.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart1_motor.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart1_motor.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart1_motor.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart1_motor.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart1_motor.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1_motor) != HAL_OK)
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001444:	f002 fdb3 	bl	8003fae <HAL_HalfDuplex_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf14      	ite	ne
 800144e:	2301      	movne	r3, #1
 8001450:	2300      	moveq	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001458:	f000 f88c 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000388 	.word	0x20000388
 8001464:	40011000 	.word	0x40011000

08001468 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b38      	ldr	r3, [pc, #224]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a37      	ldr	r2, [pc, #220]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a22      	ldr	r2, [pc, #136]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <_ZL12MX_GPIO_Initv+0xfc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : START_MODULE_Pin */

  HAL_GPIO_WritePin(CEVA_LED_GPIO_Port, CEVA_LED_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2104      	movs	r1, #4
 80014f2:	481d      	ldr	r0, [pc, #116]	; (8001568 <_ZL12MX_GPIO_Initv+0x100>)
 80014f4:	f001 faaa 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : START_MODULE_Pin */
  GPIO_InitStruct.Pin = START_MODULE_Pin;
 80014f8:	2302      	movs	r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_MODULE_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4817      	ldr	r0, [pc, #92]	; (8001568 <_ZL12MX_GPIO_Initv+0x100>)
 800150c:	f001 f8f2 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENEMY_SENSOR_0_Pin ENEMY_SENSOR_5_Pin ENEMY_SENSOR_6_Pin ENEMY_SENSOR_7_Pin
                           ENEMY_SENSOR_1_Pin ENEMY_SENSOR_2_Pin ENEMY_SENSOR_3_Pin ENEMY_SENSOR_4_Pin */
  GPIO_InitStruct.Pin = ENEMY_SENSOR_0_Pin|ENEMY_SENSOR_5_Pin|ENEMY_SENSOR_6_Pin|ENEMY_SENSOR_7_Pin
 8001510:	f24e 33c4 	movw	r3, #58308	; 0xe3c4
 8001514:	617b      	str	r3, [r7, #20]
                          |ENEMY_SENSOR_1_Pin|ENEMY_SENSOR_2_Pin|ENEMY_SENSOR_3_Pin|ENEMY_SENSOR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <_ZL12MX_GPIO_Initv+0x104>)
 8001526:	f001 f8e5 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B0_UP_Pin */
  GPIO_InitStruct.Pin = B0_UP_Pin;
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B0_UP_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <_ZL12MX_GPIO_Initv+0x100>)
 800153e:	f001 f8d9 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_DOWN_Pin B1_SELECT_Pin */
  GPIO_InitStruct.Pin = B2_DOWN_Pin|B1_SELECT_Pin;
 8001542:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154c:	2301      	movs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <_ZL12MX_GPIO_Initv+0x108>)
 8001558:	f001 f8cc 	bl	80026f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020800 	.word	0x40020800
 800156c:	40020400 	.word	0x40020400
 8001570:	40020000 	.word	0x40020000

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	e7fe      	b.n	800157c <Error_Handler+0x8>
	...

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	; 0x38
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_ADC_MspInit+0x140>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d128      	bne.n	8001644 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_ADC_MspInit+0x144>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_ADC_MspInit+0x144>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	623b      	str	r3, [r7, #32]
 800160c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = LINE_SENSOR_2_1_Pin|LINE_SENSOR_2_2_Pin|LINE_SENSOR_2_3_Pin|LINE_SENSOR_3_1_Pin
 800162a:	23ee      	movs	r3, #238	; 0xee
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LINE_SENSOR_3_2_Pin|LINE_SENSOR_3_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162e:	2303      	movs	r3, #3
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4836      	ldr	r0, [pc, #216]	; (8001718 <HAL_ADC_MspInit+0x148>)
 800163e:	f001 f859 	bl	80026f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001642:	e060      	b.n	8001706 <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a34      	ldr	r2, [pc, #208]	; (800171c <HAL_ADC_MspInit+0x14c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d15b      	bne.n	8001706 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a28      	ldr	r2, [pc, #160]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_ADC_MspInit+0x144>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_ADC_MspInit+0x144>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a21      	ldr	r2, [pc, #132]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_ADC_MspInit+0x144>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_ADC_MspInit+0x144>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_ADC_MspInit+0x144>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_ADC_MspInit+0x144>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRIMPOT_0_Pin;
 80016be:	2301      	movs	r3, #1
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRIMPOT_0_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <HAL_ADC_MspInit+0x150>)
 80016d2:	f001 f80f 	bl	80026f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TRIMPOT_1_Pin;
 80016d6:	2310      	movs	r3, #16
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	2303      	movs	r3, #3
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRIMPOT_1_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <HAL_ADC_MspInit+0x148>)
 80016ea:	f001 f803 	bl	80026f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINE_SENSOR_0_Pin|LINE_SENSOR_1_Pin;
 80016ee:	2303      	movs	r3, #3
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f2:	2303      	movs	r3, #3
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <HAL_ADC_MspInit+0x154>)
 8001702:	f000 fff7 	bl	80026f4 <HAL_GPIO_Init>
}
 8001706:	bf00      	nop
 8001708:	3738      	adds	r7, #56	; 0x38
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40012000 	.word	0x40012000
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	40012100 	.word	0x40012100
 8001720:	40020800 	.word	0x40020800
 8001724:	40020400 	.word	0x40020400

08001728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <HAL_I2C_MspInit+0xc4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d14b      	bne.n	80017e2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001794:	2304      	movs	r3, #4
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4815      	ldr	r0, [pc, #84]	; (80017f4 <HAL_I2C_MspInit+0xcc>)
 80017a0:	f000 ffa8 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017aa:	2312      	movs	r3, #18
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017b6:	2304      	movs	r3, #4
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <HAL_I2C_MspInit+0xd0>)
 80017c2:	f000 ff97 	bl	80026f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 80017d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40005800 	.word	0x40005800
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020800 	.word	0x40020800

080017fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_SPI_MspInit+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12b      	bne.n	8001876 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_SPI_MspInit+0x88>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_SPI_MspInit+0x88>)
 8001828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_SPI_MspInit+0x88>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_SPI_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_SPI_MspInit+0x88>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_SPI_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001856:	2338      	movs	r3, #56	; 0x38
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001866:	2305      	movs	r3, #5
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 8001872:	f000 ff3f 	bl	80026f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40013000 	.word	0x40013000
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400

0800188c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a32      	ldr	r2, [pc, #200]	; (8001974 <HAL_UART_MspInit+0xe8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12c      	bne.n	8001908 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <HAL_UART_MspInit+0xec>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a30      	ldr	r2, [pc, #192]	; (8001978 <HAL_UART_MspInit+0xec>)
 80018b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_UART_MspInit+0xec>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_UART_MspInit+0xec>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a29      	ldr	r2, [pc, #164]	; (8001978 <HAL_UART_MspInit+0xec>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_UART_MspInit+0xec>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART4_TX_DATA_Pin;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ea:	2312      	movs	r3, #18
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018f6:	2308      	movs	r3, #8
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART4_TX_DATA_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	481e      	ldr	r0, [pc, #120]	; (800197c <HAL_UART_MspInit+0xf0>)
 8001902:	f000 fef7 	bl	80026f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001906:	e031      	b.n	800196c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_UART_MspInit+0xf4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12c      	bne.n	800196c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UART_MspInit+0xec>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_UART_MspInit+0xec>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_MspInit+0xec>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0xec>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_UART_MspInit+0xec>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_UART_MspInit+0xec>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_SABERTOOTH_Pin;
 800194a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001950:	2312      	movs	r3, #18
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800195c:	2307      	movs	r3, #7
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_SABERTOOTH_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <HAL_UART_MspInit+0xf0>)
 8001968:	f000 fec4 	bl	80026f4 <HAL_GPIO_Init>
}
 800196c:	bf00      	nop
 800196e:	3730      	adds	r7, #48	; 0x30
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40004c00 	.word	0x40004c00
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40011000 	.word	0x40011000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 f956 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return 1;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_kill>:

int _kill(int pid, int sig)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f2:	f006 faf7 	bl	8007fe4 <__errno>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2216      	movs	r2, #22
 80019fa:	601a      	str	r2, [r3, #0]
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_exit>:

void _exit (int status)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ffe7 	bl	80019e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1a:	e7fe      	b.n	8001a1a <_exit+0x12>

08001a1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e00a      	b.n	8001a44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a2e:	f3af 8000 	nop.w
 8001a32:	4601      	mov	r1, r0
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	b2ca      	uxtb	r2, r1
 8001a3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbf0      	blt.n	8001a2e <_read+0x12>
  }

  return len;
 8001a4c:	687b      	ldr	r3, [r7, #4]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	e009      	b.n	8001a7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf1      	blt.n	8001a68 <_write+0x12>
  }
  return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_close>:

int _close(int file)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_isatty>:

int _isatty(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <_sbrk+0x5c>)
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <_sbrk+0x60>)
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <_sbrk+0x64>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <_sbrk+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d207      	bcs.n	8001b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b28:	f006 fa5c 	bl	8007fe4 <__errno>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	220c      	movs	r2, #12
 8001b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	e009      	b.n	8001b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <_sbrk+0x64>)
 8001b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20020000 	.word	0x20020000
 8001b58:	00000400 	.word	0x00000400
 8001b5c:	200003cc 	.word	0x200003cc
 8001b60:	20000940 	.word	0x20000940

08001b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <SystemInit+0x20>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <SystemInit+0x20>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b8e:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ba4:	4c0b      	ldr	r4, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bb2:	f7ff ffd7 	bl	8001b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f006 fa1b 	bl	8007ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7ff f993 	bl	8000ee4 <main>
  bx  lr    
 8001bbe:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001bcc:	0800c1d0 	.word	0x0800c1d0
  ldr r2, =_sbss
 8001bd0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001bd4:	2000093c 	.word	0x2000093c

08001bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_Init+0x40>)
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_Init+0x40>)
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x40>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 fd41 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fcb6 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fd4b 	bl	80026da <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 fd21 	bl	80026a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	200003d0 	.word	0x200003d0

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200003d0 	.word	0x200003d0

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008

08001d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e033      	b.n	8001d86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fc52 	bl	80015d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d4e:	f023 0302 	bic.w	r3, r3, #2
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fae8 	bl	8002330 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f023 0303 	bic.w	r3, r3, #3
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
 8001d76:	e001      	b.n	8001d7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Start+0x1a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0b2      	b.n	8001f10 <HAL_ADC_Start+0x180>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d018      	beq.n	8001df2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd0:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <HAL_ADC_Start+0x18c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_ADC_Start+0x190>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9a      	lsrs	r2, r3, #18
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001de4:	e002      	b.n	8001dec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d17a      	bne.n	8001ef6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f023 0206 	bic.w	r2, r3, #6
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_ADC_Start+0x194>)
 8001e5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d12a      	bne.n	8001ecc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_ADC_Start+0x198>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d015      	beq.n	8001eac <HAL_ADC_Start+0x11c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_ADC_Start+0x19c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d105      	bne.n	8001e96 <HAL_ADC_Start+0x106>
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_ADC_Start+0x194>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <HAL_ADC_Start+0x1a0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d136      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
 8001ea0:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_ADC_Start+0x194>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d130      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d129      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	e020      	b.n	8001f0e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_ADC_Start+0x198>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d11b      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d114      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e00b      	b.n	8001f0e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	431bde83 	.word	0x431bde83
 8001f24:	40012300 	.word	0x40012300
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	40012100 	.word	0x40012100
 8001f30:	40012200 	.word	0x40012200

08001f34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Stop+0x16>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e021      	b.n	8001f8e <HAL_ADC_Stop+0x5a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb6:	d113      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e063      	b.n	80020a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001fe0:	f7ff fe62 	bl	8001ca8 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fe6:	e021      	b.n	800202c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fee:	d01d      	beq.n	800202c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_ADC_PollForConversion+0x6c>
 8001ff6:	f7ff fe57 	bl	8001ca8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d212      	bcs.n	800202c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b02      	cmp	r3, #2
 8002012:	d00b      	beq.n	800202c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e03d      	b.n	80020a8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b02      	cmp	r3, #2
 8002038:	d1d6      	bne.n	8001fe8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f06f 0212 	mvn.w	r2, #18
 8002042:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d123      	bne.n	80020a6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11f      	bne.n	80020a6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800207e:	2b00      	cmp	r3, #0
 8002080:	d111      	bne.n	80020a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1c>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e113      	b.n	8002310 <HAL_ADC_ConfigChannel+0x244>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d925      	bls.n	8002144 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68d9      	ldr	r1, [r3, #12]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	3b1e      	subs	r3, #30
 800210e:	2207      	movs	r2, #7
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43da      	mvns	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	400a      	ands	r2, r1
 800211c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68d9      	ldr	r1, [r3, #12]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	4618      	mov	r0, r3
 8002130:	4603      	mov	r3, r0
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4403      	add	r3, r0
 8002136:	3b1e      	subs	r3, #30
 8002138:	409a      	lsls	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	e022      	b.n	800218a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	2207      	movs	r2, #7
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	4603      	mov	r3, r0
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4403      	add	r3, r0
 8002180:	409a      	lsls	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d824      	bhi.n	80021dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b05      	subs	r3, #5
 80021a4:	221f      	movs	r2, #31
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	400a      	ands	r2, r1
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b05      	subs	r3, #5
 80021ce:	fa00 f203 	lsl.w	r2, r0, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
 80021da:	e04c      	b.n	8002276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d824      	bhi.n	800222e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3b23      	subs	r3, #35	; 0x23
 80021f6:	221f      	movs	r2, #31
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43da      	mvns	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	400a      	ands	r2, r1
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4618      	mov	r0, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b23      	subs	r3, #35	; 0x23
 8002220:	fa00 f203 	lsl.w	r2, r0, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
 800222c:	e023      	b.n	8002276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b41      	subs	r3, #65	; 0x41
 8002240:	221f      	movs	r2, #31
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	400a      	ands	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4618      	mov	r0, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3b41      	subs	r3, #65	; 0x41
 800226a:	fa00 f203 	lsl.w	r2, r0, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_ADC_ConfigChannel+0x250>)
 8002278:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_ADC_ConfigChannel+0x254>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d10f      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b12      	cmp	r3, #18
 800228a:	d10b      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_ADC_ConfigChannel+0x254>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12b      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x23a>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_ADC_ConfigChannel+0x258>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x1f4>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b11      	cmp	r3, #17
 80022be:	d122      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_ADC_ConfigChannel+0x258>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d111      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_ADC_ConfigChannel+0x25c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_ADC_ConfigChannel+0x260>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	0c9a      	lsrs	r2, r3, #18
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022f8:	e002      	b.n	8002300 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f9      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40012300 	.word	0x40012300
 8002320:	40012000 	.word	0x40012000
 8002324:	10000012 	.word	0x10000012
 8002328:	20000000 	.word	0x20000000
 800232c:	431bde83 	.word	0x431bde83

08002330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002338:	4b79      	ldr	r3, [pc, #484]	; (8002520 <ADC_Init+0x1f0>)
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	431a      	orrs	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	4a58      	ldr	r2, [pc, #352]	; (8002524 <ADC_Init+0x1f4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e00f      	b.n	800242e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800241c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800242c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0202 	bic.w	r2, r2, #2
 800243c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7e1b      	ldrb	r3, [r3, #24]
 8002448:	005a      	lsls	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01b      	beq.n	8002494 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800247a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	3b01      	subs	r3, #1
 8002488:	035a      	lsls	r2, r3, #13
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	e007      	b.n	80024a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	3b01      	subs	r3, #1
 80024c0:	051a      	lsls	r2, r3, #20
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024e6:	025a      	lsls	r2, r3, #9
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	029a      	lsls	r2, r3, #10
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40012300 	.word	0x40012300
 8002524:	0f000001 	.word	0x0f000001

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	; (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	; (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff47 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b4:	f7ff ff5c 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff8e 	bl	80025e0 <NVIC_EncodePriority>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff5d 	bl	800258c <__NVIC_SetPriority>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffb0 	bl	8002648 <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e165      	b.n	80029dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 8154 	bne.w	80029d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d005      	beq.n	8002746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002742:	2b02      	cmp	r3, #2
 8002744:	d130      	bne.n	80027a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 0201 	and.w	r2, r3, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d017      	beq.n	80027e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d123      	bne.n	8002838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80ae 	beq.w	80029d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <HAL_GPIO_Init+0x300>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002896:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_GPIO_Init+0x304>)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	220f      	movs	r2, #15
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <HAL_GPIO_Init+0x308>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d025      	beq.n	800290e <HAL_GPIO_Init+0x21a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4e      	ldr	r2, [pc, #312]	; (8002a00 <HAL_GPIO_Init+0x30c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <HAL_GPIO_Init+0x216>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <HAL_GPIO_Init+0x310>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0x212>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <HAL_GPIO_Init+0x314>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x20e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4b      	ldr	r2, [pc, #300]	; (8002a0c <HAL_GPIO_Init+0x318>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x20a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_GPIO_Init+0x31c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x206>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <HAL_GPIO_Init+0x320>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x202>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00c      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e00a      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 80028fa:	2305      	movs	r3, #5
 80028fc:	e008      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 80028fe:	2304      	movs	r3, #4
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 8002902:	2303      	movs	r3, #3
 8002904:	e004      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 8002906:	2302      	movs	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 800290e:	2300      	movs	r3, #0
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4093      	lsls	r3, r2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002920:	4935      	ldr	r1, [pc, #212]	; (80029f8 <HAL_GPIO_Init+0x304>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_GPIO_Init+0x324>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_GPIO_Init+0x324>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_GPIO_Init+0x324>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x324>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002982:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_GPIO_Init+0x324>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_GPIO_Init+0x324>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_GPIO_Init+0x324>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <HAL_GPIO_Init+0x324>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	f67f ae96 	bls.w	8002710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40021400 	.word	0x40021400
 8002a14:	40021800 	.word	0x40021800
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e001      	b.n	8002a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a68:	e003      	b.n	8002a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e12b      	b.n	8002cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fe3e 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f000 fd6a 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a81      	ldr	r2, [pc, #516]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d807      	bhi.n	8002b04 <HAL_I2C_Init+0x84>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_I2C_Init+0x278>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e006      	b.n	8002b12 <HAL_I2C_Init+0x92>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a7d      	ldr	r2, [pc, #500]	; (8002cfc <HAL_I2C_Init+0x27c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e7      	b.n	8002cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a78      	ldr	r2, [pc, #480]	; (8002d00 <HAL_I2C_Init+0x280>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d802      	bhi.n	8002b54 <HAL_I2C_Init+0xd4>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3301      	adds	r3, #1
 8002b52:	e009      	b.n	8002b68 <HAL_I2C_Init+0xe8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <HAL_I2C_Init+0x284>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	3301      	adds	r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d819      	bhi.n	8002bbc <HAL_I2C_Init+0x13c>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e59      	subs	r1, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_I2C_Init+0x138>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e59      	subs	r1, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb6:	e051      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e04f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <HAL_I2C_Init+0x168>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e012      	b.n	8002c0e <HAL_I2C_Init+0x18e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Init+0x196>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10e      	bne.n	8002c3c <HAL_I2C_Init+0x1bc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1e58      	subs	r0, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	440b      	add	r3, r1
 8002c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3a:	e00f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e58      	subs	r0, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	0099      	lsls	r1, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	6809      	ldr	r1, [r1, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6911      	ldr	r1, [r2, #16]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	000186a0 	.word	0x000186a0
 8002cf8:	001e847f 	.word	0x001e847f
 8002cfc:	003d08ff 	.word	0x003d08ff
 8002d00:	431bde83 	.word	0x431bde83
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d22:	f7fe ffc1 	bl	8001ca8 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	f040 80d9 	bne.w	8002ee8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2319      	movs	r3, #25
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	496d      	ldr	r1, [pc, #436]	; (8002ef4 <HAL_I2C_Mem_Write+0x1ec>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f971 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0cc      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Mem_Write+0x56>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0c5      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d007      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2221      	movs	r2, #33	; 0x21
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a4d      	ldr	r2, [pc, #308]	; (8002ef8 <HAL_I2C_Mem_Write+0x1f0>)
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc6:	88f8      	ldrh	r0, [r7, #6]
 8002dc8:	893a      	ldrh	r2, [r7, #8]
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f890 	bl	8002efc <I2C_RequestMemoryWrite>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d052      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e081      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f9f2 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d107      	bne.n	8002e0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06b      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d11b      	bne.n	8002e88 <HAL_I2C_Mem_Write+0x180>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d017      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1aa      	bne.n	8002de6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f9de 	bl	8003256 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d107      	bne.n	8002eb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e016      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	00100002 	.word	0x00100002
 8002ef8:	ffff0000 	.word	0xffff0000

08002efc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f878 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4c:	d103      	bne.n	8002f56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e05f      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	492d      	ldr	r1, [pc, #180]	; (8003024 <I2C_RequestMemoryWrite+0x128>)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f8b0 	bl	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04c      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f91a 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d107      	bne.n	8002fbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02b      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	e021      	b.n	8003018 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fd4:	893b      	ldrh	r3, [r7, #8]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f8f4 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d107      	bne.n	800300a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e005      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	00010002 	.word	0x00010002

08003028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003038:	e025      	b.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d021      	beq.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe fe31 	bl	8001ca8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e023      	b.n	80030ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10d      	bne.n	80030ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4013      	ands	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	e00c      	b.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4013      	ands	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d0b6      	beq.n	800303a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e4:	e051      	b.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f4:	d123      	bne.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0204 	orr.w	r2, r3, #4
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e046      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d021      	beq.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fdaf 	bl	8001ca8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e020      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10c      	bne.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf14      	ite	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	2300      	moveq	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e00b      	b.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d18d      	bne.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	e02d      	b.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f878 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e02d      	b.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d021      	beq.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fd55 	bl	8001ca8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e007      	b.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d1ca      	bne.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003262:	e02d      	b.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f837 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e02d      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d021      	beq.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327c:	f7fe fd14 	bl	8001ca8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d1ca      	bne.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d11b      	bne.n	8003328 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a1f      	ldr	r2, [pc, #124]	; (80033c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_PWREx_EnableOverDrive+0x94>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003364:	f7fe fca0 	bl	8001ca8 <HAL_GetTick>
 8003368:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800336a:	e009      	b.n	8003380 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800336c:	f7fe fc9c 	bl	8001ca8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337a:	d901      	bls.n	8003380 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e01f      	b.n	80033c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d1ee      	bne.n	800336c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003394:	f7fe fc88 	bl	8001ca8 <HAL_GetTick>
 8003398:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800339a:	e009      	b.n	80033b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800339c:	f7fe fc84 	bl	8001ca8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033aa:	d901      	bls.n	80033b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e007      	b.n	80033c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033bc:	d1ee      	bne.n	800339c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	420e0040 	.word	0x420e0040
 80033d0:	40007000 	.word	0x40007000
 80033d4:	420e0044 	.word	0x420e0044

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0cc      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b68      	ldr	r3, [pc, #416]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d90c      	bls.n	8003414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b63      	ldr	r3, [pc, #396]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0b8      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800342c:	4b59      	ldr	r3, [pc, #356]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a58      	ldr	r2, [pc, #352]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003444:	4b53      	ldr	r3, [pc, #332]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a52      	ldr	r2, [pc, #328]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800344e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003450:	4b50      	ldr	r3, [pc, #320]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	494d      	ldr	r1, [pc, #308]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d044      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d119      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e07f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d003      	beq.n	8003496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003492:	2b03      	cmp	r3, #3
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e067      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 0203 	bic.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4934      	ldr	r1, [pc, #208]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c8:	f7fe fbee 	bl	8001ca8 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7fe fbea 	bl	8001ca8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e04f      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 020c 	and.w	r2, r3, #12
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1eb      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d20c      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e032      	b.n	8003586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4916      	ldr	r1, [pc, #88]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	490e      	ldr	r1, [pc, #56]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800355e:	f000 f855 	bl	800360c <HAL_RCC_GetSysClockFreq>
 8003562:	4602      	mov	r2, r0
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	490a      	ldr	r1, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	5ccb      	ldrb	r3, [r1, r3]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	4a09      	ldr	r2, [pc, #36]	; (800359c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fb4e 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00
 8003594:	40023800 	.word	0x40023800
 8003598:	0800a36c 	.word	0x0800a36c
 800359c:	20000000 	.word	0x20000000
 80035a0:	20000004 	.word	0x20000004

080035a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000000 	.word	0x20000000

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff fff0 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0a9b      	lsrs	r3, r3, #10
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0800a37c 	.word	0x0800a37c

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035e8:	f7ff ffdc 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0b5b      	lsrs	r3, r3, #13
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	0800a37c 	.word	0x0800a37c

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b0a6      	sub	sp, #152	; 0x98
 8003612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003632:	4bc8      	ldr	r3, [pc, #800]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b0c      	cmp	r3, #12
 800363c:	f200 817e 	bhi.w	800393c <HAL_RCC_GetSysClockFreq+0x330>
 8003640:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	0800367d 	.word	0x0800367d
 800364c:	0800393d 	.word	0x0800393d
 8003650:	0800393d 	.word	0x0800393d
 8003654:	0800393d 	.word	0x0800393d
 8003658:	08003685 	.word	0x08003685
 800365c:	0800393d 	.word	0x0800393d
 8003660:	0800393d 	.word	0x0800393d
 8003664:	0800393d 	.word	0x0800393d
 8003668:	0800368d 	.word	0x0800368d
 800366c:	0800393d 	.word	0x0800393d
 8003670:	0800393d 	.word	0x0800393d
 8003674:	0800393d 	.word	0x0800393d
 8003678:	080037f7 	.word	0x080037f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4bb6      	ldr	r3, [pc, #728]	; (8003958 <HAL_RCC_GetSysClockFreq+0x34c>)
 800367e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003682:	e15f      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003684:	4bb5      	ldr	r3, [pc, #724]	; (800395c <HAL_RCC_GetSysClockFreq+0x350>)
 8003686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800368a:	e15b      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800368c:	4bb1      	ldr	r3, [pc, #708]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003698:	4bae      	ldr	r3, [pc, #696]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d031      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a4:	4bab      	ldr	r3, [pc, #684]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	2200      	movs	r2, #0
 80036ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	663b      	str	r3, [r7, #96]	; 0x60
 80036b8:	2300      	movs	r3, #0
 80036ba:	667b      	str	r3, [r7, #100]	; 0x64
 80036bc:	4ba7      	ldr	r3, [pc, #668]	; (800395c <HAL_RCC_GetSysClockFreq+0x350>)
 80036be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80036c2:	462a      	mov	r2, r5
 80036c4:	fb03 f202 	mul.w	r2, r3, r2
 80036c8:	2300      	movs	r3, #0
 80036ca:	4621      	mov	r1, r4
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	4aa2      	ldr	r2, [pc, #648]	; (800395c <HAL_RCC_GetSysClockFreq+0x350>)
 80036d4:	4621      	mov	r1, r4
 80036d6:	fba1 1202 	umull	r1, r2, r1, r2
 80036da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036dc:	460a      	mov	r2, r1
 80036de:	67ba      	str	r2, [r7, #120]	; 0x78
 80036e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036e2:	4413      	add	r3, r2
 80036e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ea:	2200      	movs	r2, #0
 80036ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036f8:	f7fd fa76 	bl	8000be8 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003706:	e064      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003708:	4b92      	ldr	r3, [pc, #584]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	2200      	movs	r2, #0
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
 8003712:	657a      	str	r2, [r7, #84]	; 0x54
 8003714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
 800371c:	2300      	movs	r3, #0
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003720:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003724:	4622      	mov	r2, r4
 8003726:	462b      	mov	r3, r5
 8003728:	f04f 0000 	mov.w	r0, #0
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	0159      	lsls	r1, r3, #5
 8003732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003736:	0150      	lsls	r0, r2, #5
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4621      	mov	r1, r4
 800373e:	1a51      	subs	r1, r2, r1
 8003740:	6139      	str	r1, [r7, #16]
 8003742:	4629      	mov	r1, r5
 8003744:	eb63 0301 	sbc.w	r3, r3, r1
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003756:	4659      	mov	r1, fp
 8003758:	018b      	lsls	r3, r1, #6
 800375a:	4651      	mov	r1, sl
 800375c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003760:	4651      	mov	r1, sl
 8003762:	018a      	lsls	r2, r1, #6
 8003764:	4651      	mov	r1, sl
 8003766:	ebb2 0801 	subs.w	r8, r2, r1
 800376a:	4659      	mov	r1, fp
 800376c:	eb63 0901 	sbc.w	r9, r3, r1
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003780:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003784:	4690      	mov	r8, r2
 8003786:	4699      	mov	r9, r3
 8003788:	4623      	mov	r3, r4
 800378a:	eb18 0303 	adds.w	r3, r8, r3
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	462b      	mov	r3, r5
 8003792:	eb49 0303 	adc.w	r3, r9, r3
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037a4:	4629      	mov	r1, r5
 80037a6:	028b      	lsls	r3, r1, #10
 80037a8:	4621      	mov	r1, r4
 80037aa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ae:	4621      	mov	r1, r4
 80037b0:	028a      	lsls	r2, r1, #10
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ba:	2200      	movs	r2, #0
 80037bc:	643b      	str	r3, [r7, #64]	; 0x40
 80037be:	647a      	str	r2, [r7, #68]	; 0x44
 80037c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037c4:	f7fd fa10 	bl	8000be8 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4613      	mov	r3, r2
 80037ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d2:	4b60      	ldr	r3, [pc, #384]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	3301      	adds	r3, #1
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80037e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80037f4:	e0a6      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f6:	4b57      	ldr	r3, [pc, #348]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003802:	4b54      	ldr	r3, [pc, #336]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02a      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380e:	4b51      	ldr	r3, [pc, #324]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	099b      	lsrs	r3, r3, #6
 8003814:	2200      	movs	r2, #0
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
 8003818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003820:	2100      	movs	r1, #0
 8003822:	4b4e      	ldr	r3, [pc, #312]	; (800395c <HAL_RCC_GetSysClockFreq+0x350>)
 8003824:	fb03 f201 	mul.w	r2, r3, r1
 8003828:	2300      	movs	r3, #0
 800382a:	fb00 f303 	mul.w	r3, r0, r3
 800382e:	4413      	add	r3, r2
 8003830:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_RCC_GetSysClockFreq+0x350>)
 8003832:	fba0 1202 	umull	r1, r2, r0, r2
 8003836:	677a      	str	r2, [r7, #116]	; 0x74
 8003838:	460a      	mov	r2, r1
 800383a:	673a      	str	r2, [r7, #112]	; 0x70
 800383c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800383e:	4413      	add	r3, r2
 8003840:	677b      	str	r3, [r7, #116]	; 0x74
 8003842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003846:	2200      	movs	r2, #0
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
 800384a:	637a      	str	r2, [r7, #52]	; 0x34
 800384c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003850:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003854:	f7fd f9c8 	bl	8000be8 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4613      	mov	r3, r2
 800385e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003862:	e05b      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003864:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	2200      	movs	r2, #0
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
 800386e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	0159      	lsls	r1, r3, #5
 800388e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003892:	0150      	lsls	r0, r2, #5
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4641      	mov	r1, r8
 800389a:	ebb2 0a01 	subs.w	sl, r2, r1
 800389e:	4649      	mov	r1, r9
 80038a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038b8:	ebb2 040a 	subs.w	r4, r2, sl
 80038bc:	eb63 050b 	sbc.w	r5, r3, fp
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	00eb      	lsls	r3, r5, #3
 80038ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ce:	00e2      	lsls	r2, r4, #3
 80038d0:	4614      	mov	r4, r2
 80038d2:	461d      	mov	r5, r3
 80038d4:	4643      	mov	r3, r8
 80038d6:	18e3      	adds	r3, r4, r3
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	464b      	mov	r3, r9
 80038dc:	eb45 0303 	adc.w	r3, r5, r3
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ee:	4629      	mov	r1, r5
 80038f0:	028b      	lsls	r3, r1, #10
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f8:	4621      	mov	r1, r4
 80038fa:	028a      	lsls	r2, r1, #10
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003904:	2200      	movs	r2, #0
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800390e:	f7fd f96b 	bl	8000be8 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4613      	mov	r3, r2
 8003918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <HAL_RCC_GetSysClockFreq+0x348>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0f1b      	lsrs	r3, r3, #28
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800392a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800392e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800393a:	e003      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_GetSysClockFreq+0x34c>)
 800393e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003948:	4618      	mov	r0, r3
 800394a:	3798      	adds	r7, #152	; 0x98
 800394c:	46bd      	mov	sp, r7
 800394e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	00f42400 	.word	0x00f42400
 800395c:	017d7840 	.word	0x017d7840

08003960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e28d      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8083 	beq.w	8003a86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003980:	4b94      	ldr	r3, [pc, #592]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b04      	cmp	r3, #4
 800398a:	d019      	beq.n	80039c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800398c:	4b91      	ldr	r3, [pc, #580]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003994:	2b08      	cmp	r3, #8
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003998:	4b8e      	ldr	r3, [pc, #568]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a4:	d00c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a6:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d112      	bne.n	80039d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b2:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039be:	d10b      	bne.n	80039d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	4b84      	ldr	r3, [pc, #528]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d05b      	beq.n	8003a84 <HAL_RCC_OscConfig+0x124>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d157      	bne.n	8003a84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e25a      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e0:	d106      	bne.n	80039f0 <HAL_RCC_OscConfig+0x90>
 80039e2:	4b7c      	ldr	r3, [pc, #496]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7b      	ldr	r2, [pc, #492]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e01d      	b.n	8003a2c <HAL_RCC_OscConfig+0xcc>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0xb4>
 80039fa:	4b76      	ldr	r3, [pc, #472]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a75      	ldr	r2, [pc, #468]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b73      	ldr	r3, [pc, #460]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a72      	ldr	r2, [pc, #456]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0xcc>
 8003a14:	4b6f      	ldr	r3, [pc, #444]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6e      	ldr	r2, [pc, #440]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b6c      	ldr	r3, [pc, #432]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6b      	ldr	r2, [pc, #428]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe f938 	bl	8001ca8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe f934 	bl	8001ca8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e21f      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b61      	ldr	r3, [pc, #388]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe f924 	bl	8001ca8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe f920 	bl	8001ca8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e20b      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	4b57      	ldr	r3, [pc, #348]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x104>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d06f      	beq.n	8003b72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a92:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a9e:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b44      	ldr	r3, [pc, #272]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x186>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1d3      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4937      	ldr	r1, [pc, #220]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	e03a      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_OscConfig+0x278>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe f8cd 	bl	8001ca8 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe f8c9 	bl	8001ca8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1b4      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4925      	ldr	r1, [pc, #148]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_OscConfig+0x278>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fe f8ac 	bl	8001ca8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b54:	f7fe f8a8 	bl	8001ca8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e193      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d036      	beq.n	8003bec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_RCC_OscConfig+0x27c>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fe f88c 	bl	8001ca8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fe f888 	bl	8001ca8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e173      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x234>
 8003bb2:	e01b      	b.n	8003bec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_OscConfig+0x27c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bba:	f7fe f875 	bl	8001ca8 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fe f871 	bl	8001ca8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d907      	bls.n	8003be0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e15c      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	42470000 	.word	0x42470000
 8003bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	4b8a      	ldr	r3, [pc, #552]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ea      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8097 	beq.w	8003d28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b83      	ldr	r3, [pc, #524]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a7e      	ldr	r2, [pc, #504]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b7c      	ldr	r3, [pc, #496]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d118      	bne.n	8003c68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c42:	f7fe f831 	bl	8001ca8 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4a:	f7fe f82d 	bl	8001ca8 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e118      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <HAL_RCC_OscConfig+0x4b0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x31e>
 8003c70:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	4a65      	ldr	r2, [pc, #404]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x358>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x340>
 8003c86:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a60      	ldr	r2, [pc, #384]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a5d      	ldr	r2, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x358>
 8003ca0:	4b5a      	ldr	r3, [pc, #360]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a59      	ldr	r2, [pc, #356]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	4b57      	ldr	r3, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a56      	ldr	r2, [pc, #344]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd fff2 	bl	8001ca8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd ffee 	bl	8001ca8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0d7      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x368>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fd ffdc 	bl	8001ca8 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fd ffd8 	bl	8001ca8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0c1      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0a:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ee      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	4a3a      	ldr	r2, [pc, #232]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80ad 	beq.w	8003e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d32:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d060      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d145      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <HAL_RCC_OscConfig+0x4b4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd ffac 	bl	8001ca8 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd ffa8 	bl	8001ca8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e093      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	491b      	ldr	r1, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x4b4>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd ff7d 	bl	8001ca8 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fd ff79 	bl	8001ca8 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e064      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x452>
 8003dd0:	e05c      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCC_OscConfig+0x4b4>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fd ff66 	bl	8001ca8 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd ff62 	bl	8001ca8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e04d      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_OscConfig+0x4ac>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x480>
 8003dfe:	e045      	b.n	8003e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e040      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
 8003e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <HAL_RCC_OscConfig+0x538>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d030      	beq.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d129      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d122      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d119      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10f      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800

08003e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07b      	b.n	8003fa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d108      	bne.n	8003ec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ebe:	d009      	beq.n	8003ed4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61da      	str	r2, [r3, #28]
 8003ec6:	e005      	b.n	8003ed4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd fc84 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	ea42 0103 	orr.w	r1, r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0104 	and.w	r1, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0210 	and.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e047      	b.n	8004050 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fd fc59 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2224      	movs	r2, #36	; 0x24
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f930 	bl	8004258 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004006:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004016:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0208 	orr.w	r2, r2, #8
 8004026:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004036:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	d17c      	bne.n	8004172 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_UART_Transmit+0x2c>
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e075      	b.n	8004174 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_UART_Transmit+0x3e>
 8004092:	2302      	movs	r3, #2
 8004094:	e06e      	b.n	8004174 <HAL_UART_Transmit+0x11c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2221      	movs	r2, #33	; 0x21
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ac:	f7fd fdfc 	bl	8001ca8 <HAL_GetTick>
 80040b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d108      	bne.n	80040da <HAL_UART_Transmit+0x82>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e003      	b.n	80040e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040ea:	e02a      	b.n	8004142 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f840 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e036      	b.n	8004174 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	3302      	adds	r3, #2
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	e007      	b.n	8004134 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1cf      	bne.n	80040ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f810 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e006      	b.n	8004174 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b090      	sub	sp, #64	; 0x40
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	e050      	b.n	8004230 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d04c      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <UART_WaitOnFlagUntilTimeout+0x30>
 800419c:	f7fd fd84 	bl	8001ca8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d241      	bcs.n	8004230 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041cc:	637a      	str	r2, [r7, #52]	; 0x34
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e5      	bne.n	80041ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	613b      	str	r3, [r7, #16]
   return(result);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3314      	adds	r3, #20
 80041fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004200:	623a      	str	r2, [r7, #32]
 8004202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69f9      	ldr	r1, [r7, #28]
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	61bb      	str	r3, [r7, #24]
   return(result);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e00f      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	d09f      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3740      	adds	r7, #64	; 0x40
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800425c:	b0c0      	sub	sp, #256	; 0x100
 800425e:	af00      	add	r7, sp, #0
 8004260:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	68d9      	ldr	r1, [r3, #12]
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	ea40 0301 	orr.w	r3, r0, r1
 8004280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	431a      	orrs	r2, r3
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	431a      	orrs	r2, r3
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042b0:	f021 010c 	bic.w	r1, r1, #12
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042be:	430b      	orrs	r3, r1
 80042c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	6999      	ldr	r1, [r3, #24]
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	ea40 0301 	orr.w	r3, r0, r1
 80042de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b8f      	ldr	r3, [pc, #572]	; (8004524 <UART_SetConfig+0x2cc>)
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d005      	beq.n	80042f8 <UART_SetConfig+0xa0>
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b8d      	ldr	r3, [pc, #564]	; (8004528 <UART_SetConfig+0x2d0>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d104      	bne.n	8004302 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042f8:	f7ff f974 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 80042fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004300:	e003      	b.n	800430a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004302:	f7ff f95b 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004306:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004314:	f040 810c 	bne.w	8004530 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431c:	2200      	movs	r2, #0
 800431e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004322:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004326:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800432a:	4622      	mov	r2, r4
 800432c:	462b      	mov	r3, r5
 800432e:	1891      	adds	r1, r2, r2
 8004330:	65b9      	str	r1, [r7, #88]	; 0x58
 8004332:	415b      	adcs	r3, r3
 8004334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800433a:	4621      	mov	r1, r4
 800433c:	eb12 0801 	adds.w	r8, r2, r1
 8004340:	4629      	mov	r1, r5
 8004342:	eb43 0901 	adc.w	r9, r3, r1
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800435a:	4690      	mov	r8, r2
 800435c:	4699      	mov	r9, r3
 800435e:	4623      	mov	r3, r4
 8004360:	eb18 0303 	adds.w	r3, r8, r3
 8004364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004368:	462b      	mov	r3, r5
 800436a:	eb49 0303 	adc.w	r3, r9, r3
 800436e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800437e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004382:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004386:	460b      	mov	r3, r1
 8004388:	18db      	adds	r3, r3, r3
 800438a:	653b      	str	r3, [r7, #80]	; 0x50
 800438c:	4613      	mov	r3, r2
 800438e:	eb42 0303 	adc.w	r3, r2, r3
 8004392:	657b      	str	r3, [r7, #84]	; 0x54
 8004394:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004398:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800439c:	f7fc fc24 	bl	8000be8 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b61      	ldr	r3, [pc, #388]	; (800452c <UART_SetConfig+0x2d4>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011c      	lsls	r4, r3, #4
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80043c8:	415b      	adcs	r3, r3
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043d0:	4641      	mov	r1, r8
 80043d2:	eb12 0a01 	adds.w	sl, r2, r1
 80043d6:	4649      	mov	r1, r9
 80043d8:	eb43 0b01 	adc.w	fp, r3, r1
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f0:	4692      	mov	sl, r2
 80043f2:	469b      	mov	fp, r3
 80043f4:	4643      	mov	r3, r8
 80043f6:	eb1a 0303 	adds.w	r3, sl, r3
 80043fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043fe:	464b      	mov	r3, r9
 8004400:	eb4b 0303 	adc.w	r3, fp, r3
 8004404:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004414:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004418:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800441c:	460b      	mov	r3, r1
 800441e:	18db      	adds	r3, r3, r3
 8004420:	643b      	str	r3, [r7, #64]	; 0x40
 8004422:	4613      	mov	r3, r2
 8004424:	eb42 0303 	adc.w	r3, r2, r3
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
 800442a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800442e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004432:	f7fc fbd9 	bl	8000be8 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4611      	mov	r1, r2
 800443c:	4b3b      	ldr	r3, [pc, #236]	; (800452c <UART_SetConfig+0x2d4>)
 800443e:	fba3 2301 	umull	r2, r3, r3, r1
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	2264      	movs	r2, #100	; 0x64
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	1acb      	subs	r3, r1, r3
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <UART_SetConfig+0x2d4>)
 8004454:	fba3 2302 	umull	r2, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004460:	441c      	add	r4, r3
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800446c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004470:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	63b9      	str	r1, [r7, #56]	; 0x38
 800447c:	415b      	adcs	r3, r3
 800447e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6339      	str	r1, [r7, #48]	; 0x30
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044d8:	460b      	mov	r3, r1
 80044da:	18db      	adds	r3, r3, r3
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044de:	4613      	mov	r3, r2
 80044e0:	eb42 0303 	adc.w	r3, r2, r3
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044ee:	f7fc fb7b 	bl	8000be8 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4b0d      	ldr	r3, [pc, #52]	; (800452c <UART_SetConfig+0x2d4>)
 80044f8:	fba3 1302 	umull	r1, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	2164      	movs	r1, #100	; 0x64
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	3332      	adds	r3, #50	; 0x32
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <UART_SetConfig+0x2d4>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	f003 0207 	and.w	r2, r3, #7
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4422      	add	r2, r4
 800451e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004520:	e106      	b.n	8004730 <UART_SetConfig+0x4d8>
 8004522:	bf00      	nop
 8004524:	40011000 	.word	0x40011000
 8004528:	40011400 	.word	0x40011400
 800452c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800453a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800453e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004542:	4642      	mov	r2, r8
 8004544:	464b      	mov	r3, r9
 8004546:	1891      	adds	r1, r2, r2
 8004548:	6239      	str	r1, [r7, #32]
 800454a:	415b      	adcs	r3, r3
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004552:	4641      	mov	r1, r8
 8004554:	1854      	adds	r4, r2, r1
 8004556:	4649      	mov	r1, r9
 8004558:	eb43 0501 	adc.w	r5, r3, r1
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	00eb      	lsls	r3, r5, #3
 8004566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800456a:	00e2      	lsls	r2, r4, #3
 800456c:	4614      	mov	r4, r2
 800456e:	461d      	mov	r5, r3
 8004570:	4643      	mov	r3, r8
 8004572:	18e3      	adds	r3, r4, r3
 8004574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004578:	464b      	mov	r3, r9
 800457a:	eb45 0303 	adc.w	r3, r5, r3
 800457e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800458e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800459e:	4629      	mov	r1, r5
 80045a0:	008b      	lsls	r3, r1, #2
 80045a2:	4621      	mov	r1, r4
 80045a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a8:	4621      	mov	r1, r4
 80045aa:	008a      	lsls	r2, r1, #2
 80045ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045b0:	f7fc fb1a 	bl	8000be8 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4b60      	ldr	r3, [pc, #384]	; (800473c <UART_SetConfig+0x4e4>)
 80045ba:	fba3 2302 	umull	r2, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	011c      	lsls	r4, r3, #4
 80045c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	61b9      	str	r1, [r7, #24]
 80045dc:	415b      	adcs	r3, r3
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e4:	4641      	mov	r1, r8
 80045e6:	1851      	adds	r1, r2, r1
 80045e8:	6139      	str	r1, [r7, #16]
 80045ea:	4649      	mov	r1, r9
 80045ec:	414b      	adcs	r3, r1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045fc:	4659      	mov	r1, fp
 80045fe:	00cb      	lsls	r3, r1, #3
 8004600:	4651      	mov	r1, sl
 8004602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004606:	4651      	mov	r1, sl
 8004608:	00ca      	lsls	r2, r1, #3
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	4603      	mov	r3, r0
 8004610:	4642      	mov	r2, r8
 8004612:	189b      	adds	r3, r3, r2
 8004614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004618:	464b      	mov	r3, r9
 800461a:	460a      	mov	r2, r1
 800461c:	eb42 0303 	adc.w	r3, r2, r3
 8004620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	67bb      	str	r3, [r7, #120]	; 0x78
 800462e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800463c:	4649      	mov	r1, r9
 800463e:	008b      	lsls	r3, r1, #2
 8004640:	4641      	mov	r1, r8
 8004642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004646:	4641      	mov	r1, r8
 8004648:	008a      	lsls	r2, r1, #2
 800464a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800464e:	f7fc facb 	bl	8000be8 <__aeabi_uldivmod>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4611      	mov	r1, r2
 8004658:	4b38      	ldr	r3, [pc, #224]	; (800473c <UART_SetConfig+0x4e4>)
 800465a:	fba3 2301 	umull	r2, r3, r3, r1
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2264      	movs	r2, #100	; 0x64
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	1acb      	subs	r3, r1, r3
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	3332      	adds	r3, #50	; 0x32
 800466c:	4a33      	ldr	r2, [pc, #204]	; (800473c <UART_SetConfig+0x4e4>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004678:	441c      	add	r4, r3
 800467a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800467e:	2200      	movs	r2, #0
 8004680:	673b      	str	r3, [r7, #112]	; 0x70
 8004682:	677a      	str	r2, [r7, #116]	; 0x74
 8004684:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004688:	4642      	mov	r2, r8
 800468a:	464b      	mov	r3, r9
 800468c:	1891      	adds	r1, r2, r2
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	415b      	adcs	r3, r3
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004698:	4641      	mov	r1, r8
 800469a:	1851      	adds	r1, r2, r1
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	4649      	mov	r1, r9
 80046a0:	414b      	adcs	r3, r1
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046b0:	4659      	mov	r1, fp
 80046b2:	00cb      	lsls	r3, r1, #3
 80046b4:	4651      	mov	r1, sl
 80046b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ba:	4651      	mov	r1, sl
 80046bc:	00ca      	lsls	r2, r1, #3
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	4642      	mov	r2, r8
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ca:	464b      	mov	r3, r9
 80046cc:	460a      	mov	r2, r1
 80046ce:	eb42 0303 	adc.w	r3, r2, r3
 80046d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	663b      	str	r3, [r7, #96]	; 0x60
 80046de:	667a      	str	r2, [r7, #100]	; 0x64
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046ec:	4649      	mov	r1, r9
 80046ee:	008b      	lsls	r3, r1, #2
 80046f0:	4641      	mov	r1, r8
 80046f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f6:	4641      	mov	r1, r8
 80046f8:	008a      	lsls	r2, r1, #2
 80046fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046fe:	f7fc fa73 	bl	8000be8 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <UART_SetConfig+0x4e4>)
 8004708:	fba3 1302 	umull	r1, r3, r3, r2
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	2164      	movs	r1, #100	; 0x64
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	3332      	adds	r3, #50	; 0x32
 800471a:	4a08      	ldr	r2, [pc, #32]	; (800473c <UART_SetConfig+0x4e4>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	f003 020f 	and.w	r2, r3, #15
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4422      	add	r2, r4
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004736:	46bd      	mov	sp, r7
 8004738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473c:	51eb851f 	.word	0x51eb851f

08004740 <_ZN15HardwareTestAppC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>:

Motor_Test_Screen_Type operator--(Motor_Test_Screen_Type& screen, int);

class HardwareTestApp {
	public:
	HardwareTestApp(UserInputs& userInputs,
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
					StateControl& sensorsHub,
					Motor& motor,
					Communication_Driver& comm)
	        : userInputs(userInputs),
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	601a      	str	r2, [r3, #0]
			  sensorsHub(sensorsHub),
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]
			  motor(motor),
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	609a      	str	r2, [r3, #8]
	          communication(comm),
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	60da      	str	r2, [r3, #12]
			  screen(TRIMPOTS_TEST){}
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	741a      	strb	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <_ZN11ApplicationC1Ev>:
#include "main.h"
#include "display.h"
#include "hardware_test.h"


Application::Application()
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	b0ab      	sub	sp, #172	; 0xac
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
    : userInputs(UserInputsConfig{
 8004784:	687e      	ldr	r6, [r7, #4]
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <_ZN11ApplicationC1Ev+0x8c>)
 8004788:	f107 040c 	add.w	r4, r7, #12
 800478c:	461d      	mov	r5, r3
 800478e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004796:	e895 0003 	ldmia.w	r5, {r0, r1}
 800479a:	e884 0003 	stmia.w	r4, {r0, r1}
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	4619      	mov	r1, r3
 80047a4:	4630      	mov	r0, r6
 80047a6:	f001 f99b 	bl	8005ae0 <_ZN10UserInputsC1ERK16UserInputsConfig>
          { B2_DOWN_GPIO_Port, B2_DOWN_Pin },  // backButton
          { B0_UP_GPIO_Port, B0_UP_Pin },  // nextButton
          { &hadc2, TRIMPOT_0_CHANNEL },  // trimpot0
          { &hadc2, TRIMPOT_1_CHANNEL }   // trimpot1
      }),
      stateControl(SensorsHubConfig{
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80047b0:	4a16      	ldr	r2, [pc, #88]	; (800480c <_ZN11ApplicationC1Ev+0x90>)
 80047b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047b6:	4611      	mov	r1, r2
 80047b8:	2268      	movs	r2, #104	; 0x68
 80047ba:	4618      	mov	r0, r3
 80047bc:	f003 fc3e 	bl	800803c <memcpy>
 80047c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047c4:	4619      	mov	r1, r3
 80047c6:	4620      	mov	r0, r4
 80047c8:	f001 f90c 	bl	80059e4 <_ZN12StateControlC1ERK16SensorsHubConfig>
              { ENEMY_SENSOR_6_GPIO_Port, ENEMY_SENSOR_6_Pin },
              { ENEMY_SENSOR_7_GPIO_Port, ENEMY_SENSOR_7_Pin }
          }
          /// Initialize other sensor configs here...
      }),
	  motor(SABERTOOTH_UART),
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	33cc      	adds	r3, #204	; 0xcc
 80047d0:	490f      	ldr	r1, [pc, #60]	; (8004810 <_ZN11ApplicationC1Ev+0x94>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f002 fc60 	bl	8007098 <_ZN5MotorC1EP13USART_TypeDef>
      communication(CommunicationDriverConfig{
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 748a 	add.w	r4, r3, #276	; 0x114
 80047de:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <_ZN11ApplicationC1Ev+0x98>)
 80047e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80047e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80047ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047ee:	4619      	mov	r1, r3
 80047f0:	4620      	mov	r0, r4
 80047f2:	f001 ff1f 	bl	8006634 <_ZN20Communication_DriverC1ERK25CommunicationDriverConfig>
		DATA_UART,
		START_MODULE_GPIO_Port,
		START_MODULE_Pin,
	  }),     // communication driver
      screen(Hardware_Test)      //initial screen
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
{
}
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4618      	mov	r0, r3
 8004802:	37ac      	adds	r7, #172	; 0xac
 8004804:	46bd      	mov	sp, r7
 8004806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004808:	0800a110 	.word	0x0800a110
 800480c:	0800a138 	.word	0x0800a138
 8004810:	40011000 	.word	0x40011000
 8004814:	0800a1a0 	.word	0x0800a1a0

08004818 <_ZN11Application3runEv>:

void Application::run()
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b08b      	sub	sp, #44	; 0x2c
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
	userInputs.configAll();
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	f001 f996 	bl	8005b54 <_ZN10UserInputs9configAllEv>
	communication.config();
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800482e:	4618      	mov	r0, r3
 8004830:	f001 ff2e 	bl	8006690 <_ZN20Communication_Driver6configEv>

	Display_Init();
 8004834:	f000 fd01 	bl	800523a <_Z12Display_Initv>


	while(1)
	{
		userInputs.readInputs();
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4618      	mov	r0, r3
 800483c:	f001 f9aa 	bl	8005b94 <_ZN10UserInputs10readInputsEv>

		///user input management
		if(userInputs.isBackRequest()){
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f9fd 	bl	8005c42 <_ZN10UserInputs13isBackRequestEv>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <_ZN11Application3runEv+0x44>
			screen--;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f881 	bl	800495e <_ZmmR18Application_Screeni>
		}
		if(userInputs.isNextRequest()){
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fa07 	bl	8005c72 <_ZN10UserInputs13isNextRequestEv>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <_ZN11Application3runEv+0x60>
			screen++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f856 	bl	8004924 <_ZppR18Application_Screeni>
		}

		///Screen
		switch(screen){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800487e:	2b03      	cmp	r3, #3
 8004880:	d842      	bhi.n	8004908 <_ZN11Application3runEv+0xf0>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <_ZN11Application3runEv+0x70>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	08004899 	.word	0x08004899
 800488c:	080048a9 	.word	0x080048a9
 8004890:	080048e9 	.word	0x080048e9
 8004894:	080048f9 	.word	0x080048f9
			case Information_Screen:
				Display_Title_Screen((char *)"Last Information");
 8004898:	481e      	ldr	r0, [pc, #120]	; (8004914 <_ZN11Application3runEv+0xfc>)
 800489a:	f000 fda7 	bl	80053ec <_Z20Display_Title_ScreenPc>
				if(userInputs.isSelectRequest()){
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 f9fe 	bl	8005ca2 <_ZN10UserInputs15isSelectRequestEv>

				}
				break;
 80048a6:	e033      	b.n	8004910 <_ZN11Application3runEv+0xf8>

			case Hardware_Test:
				Display_Title_Screen((char *)"Hardware Test");
 80048a8:	481b      	ldr	r0, [pc, #108]	; (8004918 <_ZN11Application3runEv+0x100>)
 80048aa:	f000 fd9f 	bl	80053ec <_Z20Display_Title_ScreenPc>

				if(userInputs.isSelectRequest())
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 f9f6 	bl	8005ca2 <_ZN10UserInputs15isSelectRequestEv>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d028      	beq.n	800490e <_ZN11Application3runEv+0xf6>
				{
					HardwareTestApp hardwareTestApp = HardwareTestApp(userInputs,stateControl,motor, communication);
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80048d0:	f107 000c 	add.w	r0, r7, #12
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	4623      	mov	r3, r4
 80048d8:	f7ff ff32 	bl	8004740 <_ZN15HardwareTestAppC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>
					hardwareTestApp.run();
 80048dc:	f107 030c 	add.w	r3, r7, #12
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 f893 	bl	8004a0c <_ZN15HardwareTestApp3runEv>

				}
				break;
 80048e6:	e012      	b.n	800490e <_ZN11Application3runEv+0xf6>
			case SoftwareTest:
				Display_Title_Screen((char *)"Software Test");
 80048e8:	480c      	ldr	r0, [pc, #48]	; (800491c <_ZN11Application3runEv+0x104>)
 80048ea:	f000 fd7f 	bl	80053ec <_Z20Display_Title_ScreenPc>
				if(userInputs.isSelectRequest()){
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 f9d6 	bl	8005ca2 <_ZN10UserInputs15isSelectRequestEv>

				}
				break;
 80048f6:	e00b      	b.n	8004910 <_ZN11Application3runEv+0xf8>
			case Battle_Application:
				Display_Title_Screen((char *)"Battle");
 80048f8:	4809      	ldr	r0, [pc, #36]	; (8004920 <_ZN11Application3runEv+0x108>)
 80048fa:	f000 fd77 	bl	80053ec <_Z20Display_Title_ScreenPc>
				if(userInputs.isSelectRequest()){
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f9ce 	bl	8005ca2 <_ZN10UserInputs15isSelectRequestEv>

				}
				break;
 8004906:	e003      	b.n	8004910 <_ZN11Application3runEv+0xf8>
			default:
				Display_Error();
 8004908:	f001 f832 	bl	8005970 <_Z13Display_Errorv>
				break;
 800490c:	e000      	b.n	8004910 <_ZN11Application3runEv+0xf8>
				break;
 800490e:	bf00      	nop
		}

	}
 8004910:	e792      	b.n	8004838 <_ZN11Application3runEv+0x20>
 8004912:	bf00      	nop
 8004914:	0800a1ac 	.word	0x0800a1ac
 8004918:	0800a1c0 	.word	0x0800a1c0
 800491c:	0800a1d0 	.word	0x0800a1d0
 8004920:	0800a1e0 	.word	0x0800a1e0

08004924 <_ZppR18Application_Screeni>:
}

inline Application_Screen operator++(Application_Screen& screen, int) {
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
    Application_Screen current = screen;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	73fb      	strb	r3, [r7, #15]

    if (screen == Battle_Application) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d103      	bne.n	8004944 <_ZppR18Application_Screeni+0x20>
        screen = Information_Screen;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e005      	b.n	8004950 <_ZppR18Application_Screeni+0x2c>
    } else {
        screen = static_cast<Application_Screen>(static_cast<int>(screen) + 1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <_ZmmR18Application_Screeni>:

inline Application_Screen operator--(Application_Screen& screen, int) {
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
    Application_Screen original = screen;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	73fb      	strb	r3, [r7, #15]
    if (screen == Information_Screen) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <_ZmmR18Application_Screeni+0x20>
        screen = Battle_Application;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e005      	b.n	800498a <_ZmmR18Application_Screeni+0x2c>
    } else {
        screen = static_cast<Application_Screen>(static_cast<int>(screen) - 1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	3b01      	subs	r3, #1
 8004984:	b2da      	uxtb	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	701a      	strb	r2, [r3, #0]
    }
    return original;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <_Z18Timer_Get_Now_Timev>:

inline void Timer_Reset_Start(){
	startTime = HAL_GetTick();
}

inline uint32_t Timer_Get_Now_Time(){
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	return HAL_GetTick() - startTime;
 800499c:	f7fd f984 	bl	8001ca8 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b02      	ldr	r3, [pc, #8]	; (80049ac <_Z18Timer_Get_Now_Timev+0x14>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	1ad3      	subs	r3, r2, r3
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200003d4 	.word	0x200003d4

080049b0 <_Z15Timer_Set_Clockm>:

inline uint32_t Timer_Set_Clock(uint32_t time) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	return Timer_Get_Now_Time() + time;
 80049b8:	f7ff ffee 	bl	8004998 <_Z18Timer_Get_Now_Timev>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4413      	add	r3, r2
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <_Z21Timer_Get_Remain_Timem>:

inline int64_t Timer_Get_Remain_Time(uint32_t clock) {
 80049ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	int64_t time = clock;
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	2000      	movs	r0, #0
 80049d8:	460a      	mov	r2, r1
 80049da:	4603      	mov	r3, r0
 80049dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	time = time - Timer_Get_Now_Time();
 80049e0:	f7ff ffda 	bl	8004998 <_Z18Timer_Get_Now_Timev>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2200      	movs	r2, #0
 80049e8:	461c      	mov	r4, r3
 80049ea:	4615      	mov	r5, r2
 80049ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f0:	ebb2 0804 	subs.w	r8, r2, r4
 80049f4:	eb63 0905 	sbc.w	r9, r3, r5
 80049f8:	e9c7 8902 	strd	r8, r9, [r7, #8]
	return time;
 80049fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004a00:	4610      	mov	r0, r2
 8004a02:	4619      	mov	r1, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004a0c <_ZN15HardwareTestApp3runEv>:

#include "display.h"
#include "timer.h"

void HardwareTestApp::run()
{
 8004a0c:	b5b0      	push	{r4, r5, r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

	while(1)
	{
		userInputs.readInputs();
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 f8bb 	bl	8005b94 <_ZN10UserInputs10readInputsEv>

		///user input management
		if(userInputs.isReturnBackRequest()){
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 f8f8 	bl	8005c18 <_ZN10UserInputs19isReturnBackRequestEv>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d17e      	bne.n	8004b2c <_ZN15HardwareTestApp3runEv+0x120>
			return;
		}
		if(userInputs.isBackRequest()){
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f905 	bl	8005c42 <_ZN10UserInputs13isBackRequestEv>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <_ZN15HardwareTestApp3runEv+0x3e>
			screen--;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3310      	adds	r3, #16
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 faf4 	bl	8005032 <_ZmmR25Hardware_Test_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 f90f 	bl	8005c72 <_ZN10UserInputs13isNextRequestEv>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <_ZN15HardwareTestApp3runEv+0x5a>
			screen++;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fac9 	bl	8004ff8 <_ZppR25Hardware_Test_Screen_Typei>
		}

		/// UI Displayinh
		switch(screen){
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7c1b      	ldrb	r3, [r3, #16]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d855      	bhi.n	8004b1a <_ZN15HardwareTestApp3runEv+0x10e>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <_ZN15HardwareTestApp3runEv+0x68>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004ac1 	.word	0x08004ac1
 8004a7c:	08004adf 	.word	0x08004adf
 8004a80:	08004afd 	.word	0x08004afd
			case TRIMPOTS_TEST:
				Display_2_Numbers(
						(char *)"Trimpots values",
						(double) userInputs.getData0() ,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 f935 	bl	8005cf8 <_ZNK10UserInputs8getData0Ev>
 8004a8e:	4603      	mov	r3, r0
				Display_2_Numbers(
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fd57 	bl	8000544 <__aeabi_ui2d>
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
						(double) userInputs.getData1()
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 f938 	bl	8005d14 <_ZNK10UserInputs8getData1Ev>
 8004aa4:	4603      	mov	r3, r0
				Display_2_Numbers(
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fd4c 	bl	8000544 <__aeabi_ui2d>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	ec43 2b11 	vmov	d1, r2, r3
 8004ab4:	ec45 4b10 	vmov	d0, r4, r5
 8004ab8:	481e      	ldr	r0, [pc, #120]	; (8004b34 <_ZN15HardwareTestApp3runEv+0x128>)
 8004aba:	f000 fd01 	bl	80054c0 <_Z17Display_2_NumbersPcdd>
						);
				break;
 8004abe:	e034      	b.n	8004b2a <_ZN15HardwareTestApp3runEv+0x11e>
			case LINE_SENSORS_TEST:
				Display_Small_Title_Screen((char *)"Line Detection Output Test");
 8004ac0:	481d      	ldr	r0, [pc, #116]	; (8004b38 <_ZN15HardwareTestApp3runEv+0x12c>)
 8004ac2:	f000 fcc9 	bl	8005458 <_Z26Display_Small_Title_ScreenPc>
				if(userInputs.isSelectRequest()){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 f8e9 	bl	8005ca2 <_ZN10UserInputs15isSelectRequestEv>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d024      	beq.n	8004b20 <_ZN15HardwareTestApp3runEv+0x114>
					runLineDetectionTest();
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8bc 	bl	8004c54 <_ZN15HardwareTestApp20runLineDetectionTestEv>
				}
				break;
 8004adc:	e020      	b.n	8004b20 <_ZN15HardwareTestApp3runEv+0x114>
			case ENEMY_SENSORS_TEST:
				Display_Title_Screen((char *)"Enemy Sensor Test");
 8004ade:	4817      	ldr	r0, [pc, #92]	; (8004b3c <_ZN15HardwareTestApp3runEv+0x130>)
 8004ae0:	f000 fc84 	bl	80053ec <_Z20Display_Title_ScreenPc>
				if(userInputs.isSelectRequest()){
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f8da 	bl	8005ca2 <_ZN10UserInputs15isSelectRequestEv>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d017      	beq.n	8004b24 <_ZN15HardwareTestApp3runEv+0x118>
					runEnemySensorsTest();
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f825 	bl	8004b44 <_ZN15HardwareTestApp19runEnemySensorsTestEv>
				}
				break;
 8004afa:	e013      	b.n	8004b24 <_ZN15HardwareTestApp3runEv+0x118>
			case MOTOR_TEST:
				Display_Title_Screen((char *)"Motor Test");
 8004afc:	4810      	ldr	r0, [pc, #64]	; (8004b40 <_ZN15HardwareTestApp3runEv+0x134>)
 8004afe:	f000 fc75 	bl	80053ec <_Z20Display_Title_ScreenPc>
				if(userInputs.isSelectRequest()){
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f8cb 	bl	8005ca2 <_ZN10UserInputs15isSelectRequestEv>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <_ZN15HardwareTestApp3runEv+0x11c>
					runMotorTest();
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f962 	bl	8004ddc <_ZN15HardwareTestApp12runMotorTestEv>
				}
				break;
 8004b18:	e006      	b.n	8004b28 <_ZN15HardwareTestApp3runEv+0x11c>
			default:
				Display_Error();
 8004b1a:	f000 ff29 	bl	8005970 <_Z13Display_Errorv>
				break;
 8004b1e:	e004      	b.n	8004b2a <_ZN15HardwareTestApp3runEv+0x11e>
				break;
 8004b20:	bf00      	nop
 8004b22:	e777      	b.n	8004a14 <_ZN15HardwareTestApp3runEv+0x8>
				break;
 8004b24:	bf00      	nop
 8004b26:	e775      	b.n	8004a14 <_ZN15HardwareTestApp3runEv+0x8>
				break;
 8004b28:	bf00      	nop
		userInputs.readInputs();
 8004b2a:	e773      	b.n	8004a14 <_ZN15HardwareTestApp3runEv+0x8>
			return;
 8004b2c:	bf00      	nop
		}


	}
}
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bdb0      	pop	{r4, r5, r7, pc}
 8004b34:	0800a1e8 	.word	0x0800a1e8
 8004b38:	0800a1f8 	.word	0x0800a1f8
 8004b3c:	0800a214 	.word	0x0800a214
 8004b40:	0800a228 	.word	0x0800a228

08004b44 <_ZN15HardwareTestApp19runEnemySensorsTestEv>:
void HardwareTestApp::runEnemySensorsTest(){
 8004b44:	b5b0      	push	{r4, r5, r7, lr}
 8004b46:	b09c      	sub	sp, #112	; 0x70
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	///Extract components

	EnemyDetection enemyDetection = sensorsHub.enemyDetection;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004b54:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8004b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	Enemy_Detection_Screen_Type  enemySensorsScren = ENEMY_SENSORS_OUTPUT_SCREEN;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while(true)
	{
		userInputs.readInputs();
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 f80e 	bl	8005b94 <_ZN10UserInputs10readInputsEv>

		///user input management
		if(userInputs.isReturnBackRequest()){
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 f84b 	bl	8005c18 <_ZN10UserInputs19isReturnBackRequestEv>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d161      	bne.n	8004c4c <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x108>
			return;
		}
		if(userInputs.isBackRequest()){
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 f858 	bl	8005c42 <_ZN10UserInputs13isBackRequestEv>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x60>
			enemySensorsScren--;
 8004b98:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fabb 	bl	800511a <_ZmmR27Enemy_Detection_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 f862 	bl	8005c72 <_ZN10UserInputs13isNextRequestEv>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x7c>
			enemySensorsScren++;
 8004bb4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fa90 	bl	80050e0 <_ZppR27Enemy_Detection_Screen_Typei>
		}


		 switch(enemySensorsScren) {
 8004bc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x8a>
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d02d      	beq.n	8004c28 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0xe4>
 8004bcc:	e03a      	b.n	8004c44 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x100>
				case ENEMY_SENSORS_OUTPUT_SCREEN:
				{
					uint32_t sensorsValues = enemyDetection.readSensors();
 8004bce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fd92 	bl	80066fc <_ZN14EnemyDetection11readSensorsEv>
 8004bd8:	66b8      	str	r0, [r7, #104]	; 0x68
					uint8_t values[EnemyDetection::NUMBER_OF_SENSORS];
					for(uint8_t i = 0; i < EnemyDetection::NUMBER_OF_SENSORS; i ++){
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004be0:	e017      	b.n	8004c12 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0xce>
						values[i] = (sensorsValues & (1 << i)) != 0;
 8004be2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004be6:	2201      	movs	r2, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c00:	3370      	adds	r3, #112	; 0x70
 8004c02:	443b      	add	r3, r7
 8004c04:	f803 2c44 	strb.w	r2, [r3, #-68]
					for(uint8_t i = 0; i < EnemyDetection::NUMBER_OF_SENSORS; i ++){
 8004c08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004c12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c16:	2b07      	cmp	r3, #7
 8004c18:	d9e3      	bls.n	8004be2 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x9e>
					}
					Display_N_Values_Screen(values, EnemyDetection::NUMBER_OF_SENSORS);
 8004c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c1e:	2108      	movs	r1, #8
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fd53 	bl	80056cc <_Z23Display_N_Values_ScreenPhh>
					break;
 8004c26:	e010      	b.n	8004c4a <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x106>
				}

				case ENEMY_POSITION_VOTING_SCREEN:
				{
					int8_t votes[EnemyPosition::KNOWN_POSITIONS_NO];
					enemyDetection.readAndTakeSensorsVotes(votes);
 8004c28:	f107 020c 	add.w	r2, r7, #12
 8004c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 fd92 	bl	800675c <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa>
					Display_Enemy_Sensors_Votes(votes);
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fcbb 	bl	80055b8 <_Z27Display_Enemy_Sensors_VotesPa>

					break;
 8004c42:	e002      	b.n	8004c4a <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x106>
				}


				default:
					Display_Error();
 8004c44:	f000 fe94 	bl	8005970 <_Z13Display_Errorv>
					break;
 8004c48:	bf00      	nop
			}
	}
 8004c4a:	e790      	b.n	8004b6e <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x2a>
			return;
 8004c4c:	bf00      	nop
}
 8004c4e:	3770      	adds	r7, #112	; 0x70
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bdb0      	pop	{r4, r5, r7, pc}

08004c54 <_ZN15HardwareTestApp20runLineDetectionTestEv>:

void HardwareTestApp::runLineDetectionTest()
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	; 0x28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

	LineDetection& lineDetecion = sensorsHub.lineDetection;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
	Line_Detection_Screen_Type lineDetectionScreen = LINE_POSITION_SCREEN;
 8004c62:	2300      	movs	r3, #0
 8004c64:	76fb      	strb	r3, [r7, #27]

	///LOOP
	while(true)
	{
		userInputs.readInputs();
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 ff92 	bl	8005b94 <_ZN10UserInputs10readInputsEv>

		///user input management
		if(userInputs.isReturnBackRequest()){
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 ffcf 	bl	8005c18 <_ZN10UserInputs19isReturnBackRequestEv>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 80a1 	bne.w	8004dc4 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x170>
			return;
		}
		if(userInputs.isBackRequest()){
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ffdb 	bl	8005c42 <_ZN10UserInputs13isBackRequestEv>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <_ZN15HardwareTestApp20runLineDetectionTestEv+0x4a>
			lineDetectionScreen--;
 8004c92:	f107 031b 	add.w	r3, r7, #27
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fa04 	bl	80050a6 <_ZmmR26Line_Detection_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ffe5 	bl	8005c72 <_ZN10UserInputs13isNextRequestEv>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <_ZN15HardwareTestApp20runLineDetectionTestEv+0x66>
			lineDetectionScreen++;
 8004cae:	f107 031b 	add.w	r3, r7, #27
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 f9d9 	bl	800506c <_ZppR26Line_Detection_Screen_Typei>
		}

		///UI
		switch(lineDetectionScreen){
 8004cba:	7efb      	ldrb	r3, [r7, #27]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d06d      	beq.n	8004d9c <_ZN15HardwareTestApp20runLineDetectionTestEv+0x148>
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	dc78      	bgt.n	8004db6 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x162>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <_ZN15HardwareTestApp20runLineDetectionTestEv+0x7a>
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d019      	beq.n	8004d00 <_ZN15HardwareTestApp20runLineDetectionTestEv+0xac>
 8004ccc:	e073      	b.n	8004db6 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x162>
			case LINE_POSITION_SCREEN:
			{
				/// Line Position Screen
				LinePosition linePosition = lineDetecion.readAndConvertToLinePosition();
 8004cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cd0:	f002 f8e2 	bl	8006e98 <_ZN13LineDetection28readAndConvertToLinePositionEv>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	617b      	str	r3, [r7, #20]
				Display_Line_Position_Screen(
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	7819      	ldrb	r1, [r3, #0]
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	785a      	ldrb	r2, [r3, #1]
 8004ce0:	4b3a      	ldr	r3, [pc, #232]	; (8004dcc <_ZN15HardwareTestApp20runLineDetectionTestEv+0x178>)
 8004ce2:	6978      	ldr	r0, [r7, #20]
 8004ce4:	f000 fd3a 	bl	800575c <_Z28Display_Line_Position_Screen12LinePositionhhPc>
							linePosition,
							lineDetecion.isWhiteFilter, //whiteFilter
							lineDetecion.isBlackFilter, //BlackFilter
							(char *)"Hstart to reset>"     //description
				);
				if(userInputs.isSetValueRequest()){
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 ffef 	bl	8005cd0 <_ZN10UserInputs17isSetValueRequestEv>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d061      	beq.n	8004dbc <_ZN15HardwareTestApp20runLineDetectionTestEv+0x168>
					lineDetecion.resetFiltersToDefault();
 8004cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cfa:	f002 f87e 	bl	8006dfa <_ZN13LineDetection21resetFiltersToDefaultEv>
				}
				break;
 8004cfe:	e05d      	b.n	8004dbc <_ZN15HardwareTestApp20runLineDetectionTestEv+0x168>


			case FILTER_CHANGE_SCREEN:
			{
				///Change Filter Screen;
				LinePosition linePosition = lineDetecion.readAndConvertToLinePosition();
 8004d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d02:	f002 f8c9 	bl	8006e98 <_ZN13LineDetection28readAndConvertToLinePositionEv>
 8004d06:	4603      	mov	r3, r0
 8004d08:	613b      	str	r3, [r7, #16]
				float data0 = userInputs.getData0(0, 255);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	eddf 0a30 	vldr	s1, [pc, #192]	; 8004dd0 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x17c>
 8004d12:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8004dd4 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x180>
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f80a 	bl	8005d30 <_ZNK10UserInputs8getData0Eff>
 8004d1c:	ed87 0a08 	vstr	s0, [r7, #32]
				float data1 = userInputs.getData1(0, 255);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8004dd0 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x17c>
 8004d28:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8004dd4 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x180>
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 f817 	bl	8005d60 <_ZNK10UserInputs8getData1Eff>
 8004d32:	ed87 0a07 	vstr	s0, [r7, #28]

				Display_Line_Position_Screen(
 8004d36:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3e:	edc7 7a00 	vstr	s15, [r7]
 8004d42:	783b      	ldrb	r3, [r7, #0]
 8004d44:	b2d9      	uxtb	r1, r3
 8004d46:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4e:	edc7 7a00 	vstr	s15, [r7]
 8004d52:	783b      	ldrb	r3, [r7, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x184>)
 8004d58:	6938      	ldr	r0, [r7, #16]
 8004d5a:	f000 fcff 	bl	800575c <_Z28Display_Line_Position_Screen12LinePositionhhPc>
						linePosition,
						data0, //whiteFilter
						data1, //BlackFilter
						(char *)"Hstart to change>"              //description
				);
				if(userInputs.isSetValueRequest()){
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 ffb4 	bl	8005cd0 <_ZN10UserInputs17isSetValueRequestEv>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d028      	beq.n	8004dc0 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x16c>
					lineDetecion.isWhiteFilter = data0;
 8004d6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d76:	edc7 7a00 	vstr	s15, [r7]
 8004d7a:	783b      	ldrb	r3, [r7, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	701a      	strb	r2, [r3, #0]
					lineDetecion.isBlackFilter = data1;
 8004d82:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8a:	edc7 7a00 	vstr	s15, [r7]
 8004d8e:	783b      	ldrb	r3, [r7, #0]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	705a      	strb	r2, [r3, #1]
					lineDetectionScreen = LINE_POSITION_SCREEN;
 8004d96:	2300      	movs	r3, #0
 8004d98:	76fb      	strb	r3, [r7, #27]
				}
				break;
 8004d9a:	e011      	b.n	8004dc0 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x16c>

			case SENSORS_OUTPUT_SCREEN:
			{
				///Sensors Output View
				uint8_t sensorsValues[LineDetection::LINE_SENSORS_NUMBER];
				lineDetecion.readAll(sensorsValues);
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	4619      	mov	r1, r3
 8004da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da4:	f002 f839 	bl	8006e1a <_ZN13LineDetection7readAllEPh>
				Display_N_Values_Screen(sensorsValues, LineDetection::LINE_SENSORS_NUMBER);
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	2108      	movs	r1, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fc8c 	bl	80056cc <_Z23Display_N_Values_ScreenPhh>

			}
				break;
 8004db4:	e005      	b.n	8004dc2 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x16e>
			default:
				Display_Error();
 8004db6:	f000 fddb 	bl	8005970 <_Z13Display_Errorv>
 8004dba:	e754      	b.n	8004c66 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x12>
				break;
 8004dbc:	bf00      	nop
 8004dbe:	e752      	b.n	8004c66 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x12>
				break;
 8004dc0:	bf00      	nop
		}

	}
 8004dc2:	e750      	b.n	8004c66 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x12>
			return;
 8004dc4:	bf00      	nop
}
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	0800a234 	.word	0x0800a234
 8004dd0:	437f0000 	.word	0x437f0000
 8004dd4:	00000000 	.word	0x00000000
 8004dd8:	0800a248 	.word	0x0800a248

08004ddc <_ZN15HardwareTestApp12runMotorTestEv>:

void HardwareTestApp::runMotorTest()
{
 8004ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004de0:	b090      	sub	sp, #64	; 0x40
 8004de2:	af04      	add	r7, sp, #16
 8004de4:	6078      	str	r0, [r7, #4]
	const uint32_t MIN_TIMER = 500;
 8004de6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t MAX_TIMER = 10000;
 8004dec:	f242 7310 	movw	r3, #10000	; 0x2710
 8004df0:	623b      	str	r3, [r7, #32]
	uint32_t timer = MIN_TIMER * 2;           ///Set Default Timer
 8004df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t clock;
	Motor_Test_Screen_Type motorScreen = MOTOR_SET_POWER_SCREEN;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
	///LOOP
	while(true)
	{
		userInputs.readInputs();
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fec7 	bl	8005b94 <_ZN10UserInputs10readInputsEv>
		///user input management
		if(userInputs.isReturnBackRequest()){
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 ff04 	bl	8005c18 <_ZN10UserInputs19isReturnBackRequestEv>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <_ZN15HardwareTestApp12runMotorTestEv+0x46>
			motor.stop();
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f002 f953 	bl	80070c6 <_ZN5Motor4stopEv>
			return;
 8004e20:	e0d2      	b.n	8004fc8 <_ZN15HardwareTestApp12runMotorTestEv+0x1ec>
		}
		if(userInputs.isBackRequest()){
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 ff0b 	bl	8005c42 <_ZN10UserInputs13isBackRequestEv>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <_ZN15HardwareTestApp12runMotorTestEv+0x62>
			motorScreen--;
 8004e32:	f107 030f 	add.w	r3, r7, #15
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f9b1 	bl	80051a0 <_ZmmR22Motor_Test_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 ff15 	bl	8005c72 <_ZN10UserInputs13isNextRequestEv>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <_ZN15HardwareTestApp12runMotorTestEv+0x7e>
			motorScreen++;
 8004e4e:	f107 030f 	add.w	r3, r7, #15
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f97d 	bl	8005154 <_ZppR22Motor_Test_Screen_Typei>
		}
		int8_t leftPower = userInputs.getData0(Motor::MAX_REVERSE_POWER, Motor::MAX_POWER);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8004fd0 <_ZN15HardwareTestApp12runMotorTestEv+0x1f4>
 8004e62:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8004fd4 <_ZN15HardwareTestApp12runMotorTestEv+0x1f8>
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 ff62 	bl	8005d30 <_ZNK10UserInputs8getData0Eff>
 8004e6c:	eef0 7a40 	vmov.f32	s15, s0
 8004e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e74:	edc7 7a00 	vstr	s15, [r7]
 8004e78:	783b      	ldrb	r3, [r7, #0]
 8004e7a:	77fb      	strb	r3, [r7, #31]
		int8_t rightPower = userInputs.getData1(Motor::MAX_REVERSE_POWER,Motor::MAX_POWER);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004fd0 <_ZN15HardwareTestApp12runMotorTestEv+0x1f4>
 8004e84:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8004fd4 <_ZN15HardwareTestApp12runMotorTestEv+0x1f8>
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 ff69 	bl	8005d60 <_ZNK10UserInputs8getData1Eff>
 8004e8e:	eef0 7a40 	vmov.f32	s15, s0
 8004e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e96:	edc7 7a00 	vstr	s15, [r7]
 8004e9a:	783b      	ldrb	r3, [r7, #0]
 8004e9c:	77bb      	strb	r3, [r7, #30]

	    switch(motorScreen) {
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d060      	beq.n	8004f66 <_ZN15HardwareTestApp12runMotorTestEv+0x18a>
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	dca9      	bgt.n	8004dfc <_ZN15HardwareTestApp12runMotorTestEv+0x20>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <_ZN15HardwareTestApp12runMotorTestEv+0xd6>
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d01f      	beq.n	8004ef0 <_ZN15HardwareTestApp12runMotorTestEv+0x114>
 8004eb0:	e089      	b.n	8004fc6 <_ZN15HardwareTestApp12runMotorTestEv+0x1ea>
	        case MOTOR_SET_POWER_SCREEN:
	        	Display_Motor_Test_Screen((char *)"Start Motor", leftPower, rightPower, timer, (char *)"Hstart to start");
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	461c      	mov	r4, r3
 8004eb8:	4615      	mov	r5, r2
 8004eba:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004ebe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ec2:	4945      	ldr	r1, [pc, #276]	; (8004fd8 <_ZN15HardwareTestApp12runMotorTestEv+0x1fc>)
 8004ec4:	9102      	str	r1, [sp, #8]
 8004ec6:	e9cd 4500 	strd	r4, r5, [sp]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4843      	ldr	r0, [pc, #268]	; (8004fdc <_ZN15HardwareTestApp12runMotorTestEv+0x200>)
 8004ece:	f000 fceb 	bl	80058a8 <_Z25Display_Motor_Test_ScreenPcaaxS_>
	        	if(userInputs.isSetValueRequest()){
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fefa 	bl	8005cd0 <_ZN10UserInputs17isSetValueRequestEv>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d06e      	beq.n	8004fc0 <_ZN15HardwareTestApp12runMotorTestEv+0x1e4>
	        		motorScreen = MOTOR_RUN_SCREEN;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
	        		clock = Timer_Set_Clock(timer);
 8004ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ee8:	f7ff fd62 	bl	80049b0 <_Z15Timer_Set_Clockm>
 8004eec:	62b8      	str	r0, [r7, #40]	; 0x28
	        	}
	            break;
 8004eee:	e067      	b.n	8004fc0 <_ZN15HardwareTestApp12runMotorTestEv+0x1e4>
	        case MOTOR_RUN_SCREEN:
	        {
	        	int64_t remainTime = Timer_Get_Remain_Time(clock);
 8004ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef2:	f7ff fd6a 	bl	80049ca <_Z21Timer_Get_Remain_Timem>
 8004ef6:	e9c7 0104 	strd	r0, r1, [r7, #16]
	        	if(!userInputs.isAnyKey() && remainTime > 0){
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fe68 	bl	8005bd4 <_ZN10UserInputs8isAnyKeyEv>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f083 0301 	eor.w	r3, r3, #1
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <_ZN15HardwareTestApp12runMotorTestEv+0x144>
 8004f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f14:	2a01      	cmp	r2, #1
 8004f16:	f173 0300 	sbcs.w	r3, r3, #0
 8004f1a:	db01      	blt.n	8004f20 <_ZN15HardwareTestApp12runMotorTestEv+0x144>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <_ZN15HardwareTestApp12runMotorTestEv+0x146>
 8004f20:	2300      	movs	r3, #0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d017      	beq.n	8004f56 <_ZN15HardwareTestApp12runMotorTestEv+0x17a>
	        		Display_Motor_Test_Screen((char *)"Motor On", leftPower, rightPower, remainTime,(char *) "Any key to stop");
 8004f26:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8004f2a:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <_ZN15HardwareTestApp12runMotorTestEv+0x204>)
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f36:	e9cd 2300 	strd	r2, r3, [sp]
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4829      	ldr	r0, [pc, #164]	; (8004fe4 <_ZN15HardwareTestApp12runMotorTestEv+0x208>)
 8004f3e:	f000 fcb3 	bl	80058a8 <_Z25Display_Motor_Test_ScreenPcaaxS_>
	        		motor.changePower(leftPower, rightPower);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004f4a:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f002 f8c6 	bl	80070e0 <_ZN5Motor11changePowerEaa>
	        	}else{
	        		motor.stop();
	        		motorScreen = MOTOR_SET_POWER_SCREEN;
	        	}
	        	break;
 8004f54:	e037      	b.n	8004fc6 <_ZN15HardwareTestApp12runMotorTestEv+0x1ea>
	        		motor.stop();
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 f8b3 	bl	80070c6 <_ZN5Motor4stopEv>
	        		motorScreen = MOTOR_SET_POWER_SCREEN;
 8004f60:	2300      	movs	r3, #0
 8004f62:	73fb      	strb	r3, [r7, #15]
	        	break;
 8004f64:	e02f      	b.n	8004fc6 <_ZN15HardwareTestApp12runMotorTestEv+0x1ea>
	        }
	        case MOTOR_SET_TIMER_SCREEN:
	        {
	        	uint32_t setTime = userInputs.getData0(MIN_TIMER,MAX_TIMER);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004fe8 <_ZN15HardwareTestApp12runMotorTestEv+0x20c>
 8004f6e:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004fec <_ZN15HardwareTestApp12runMotorTestEv+0x210>
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fedc 	bl	8005d30 <_ZNK10UserInputs8getData0Eff>
 8004f78:	eef0 7a40 	vmov.f32	s15, s0
 8004f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f80:	ee17 3a90 	vmov	r3, s15
 8004f84:	61bb      	str	r3, [r7, #24]
	        	Display_Motor_Test_Screen((char *)"Set Timer", leftPower, rightPower, setTime, (char *)"Hstart to set");
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4698      	mov	r8, r3
 8004f8c:	4691      	mov	r9, r2
 8004f8e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004f92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f96:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <_ZN15HardwareTestApp12runMotorTestEv+0x214>)
 8004f98:	9102      	str	r1, [sp, #8]
 8004f9a:	e9cd 8900 	strd	r8, r9, [sp]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4814      	ldr	r0, [pc, #80]	; (8004ff4 <_ZN15HardwareTestApp12runMotorTestEv+0x218>)
 8004fa2:	f000 fc81 	bl	80058a8 <_Z25Display_Motor_Test_ScreenPcaaxS_>
	        	if(userInputs.isSetValueRequest()){
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fe90 	bl	8005cd0 <_ZN10UserInputs17isSetValueRequestEv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d006      	beq.n	8004fc4 <_ZN15HardwareTestApp12runMotorTestEv+0x1e8>
	        		timer = setTime;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	        		motorScreen = MOTOR_SET_POWER_SCREEN;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
	        	}
	        	break;
 8004fbe:	e001      	b.n	8004fc4 <_ZN15HardwareTestApp12runMotorTestEv+0x1e8>
	            break;
 8004fc0:	bf00      	nop
 8004fc2:	e71b      	b.n	8004dfc <_ZN15HardwareTestApp12runMotorTestEv+0x20>
	        	break;
 8004fc4:	bf00      	nop
	        }
	    }
	}
 8004fc6:	e719      	b.n	8004dfc <_ZN15HardwareTestApp12runMotorTestEv+0x20>
}
 8004fc8:	3730      	adds	r7, #48	; 0x30
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004fd0:	42c80000 	.word	0x42c80000
 8004fd4:	c2c80000 	.word	0xc2c80000
 8004fd8:	0800a268 	.word	0x0800a268
 8004fdc:	0800a25c 	.word	0x0800a25c
 8004fe0:	0800a284 	.word	0x0800a284
 8004fe4:	0800a278 	.word	0x0800a278
 8004fe8:	461c4000 	.word	0x461c4000
 8004fec:	43fa0000 	.word	0x43fa0000
 8004ff0:	0800a2a0 	.word	0x0800a2a0
 8004ff4:	0800a294 	.word	0x0800a294

08004ff8 <_ZppR25Hardware_Test_Screen_Typei>:

///                       Implementation of Types Operations
///
///
Hardware_Test_Screen_Type operator++(Hardware_Test_Screen_Type& screen, int) {
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
    Hardware_Test_Screen_Type current = screen;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	73fb      	strb	r3, [r7, #15]

    if (screen == MOTOR_TEST) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d103      	bne.n	8005018 <_ZppR25Hardware_Test_Screen_Typei+0x20>
        screen = TRIMPOTS_TEST;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e005      	b.n	8005024 <_ZppR25Hardware_Test_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Hardware_Test_Screen_Type>(static_cast<int>(screen) + 1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <_ZmmR25Hardware_Test_Screen_Typei>:

// The actual implementation
Hardware_Test_Screen_Type operator--(Hardware_Test_Screen_Type& screen, int) {
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
    Hardware_Test_Screen_Type current = screen;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	73fb      	strb	r3, [r7, #15]

    if (screen == TRIMPOTS_TEST) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <_ZmmR25Hardware_Test_Screen_Typei+0x20>
        screen = MOTOR_TEST;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2203      	movs	r2, #3
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	e005      	b.n	800505e <_ZmmR25Hardware_Test_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Hardware_Test_Screen_Type>(static_cast<int>(screen) - 1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	3b01      	subs	r3, #1
 8005058:	b2da      	uxtb	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <_ZppR26Line_Detection_Screen_Typei>:

// Increment (++) operator
Line_Detection_Screen_Type operator++(Line_Detection_Screen_Type& screen, int) {
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
    Line_Detection_Screen_Type current = screen;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	73fb      	strb	r3, [r7, #15]

    if (screen == SENSORS_OUTPUT_SCREEN) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d103      	bne.n	800508c <_ZppR26Line_Detection_Screen_Typei+0x20>
        screen = LINE_POSITION_SCREEN;  // loop back to the start if at the end
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e005      	b.n	8005098 <_ZppR26Line_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Line_Detection_Screen_Type>(static_cast<int>(screen) + 1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <_ZmmR26Line_Detection_Screen_Typei>:

// Decrement (--) operator
Line_Detection_Screen_Type operator--(Line_Detection_Screen_Type& screen, int) {
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
    Line_Detection_Screen_Type current = screen;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	73fb      	strb	r3, [r7, #15]

    if (screen == LINE_POSITION_SCREEN) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <_ZmmR26Line_Detection_Screen_Typei+0x20>
        screen = SENSORS_OUTPUT_SCREEN;  // loop back to the end if at the start
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e005      	b.n	80050d2 <_ZmmR26Line_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Line_Detection_Screen_Type>(static_cast<int>(screen) - 1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix decrement
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <_ZppR27Enemy_Detection_Screen_Typei>:

Enemy_Detection_Screen_Type operator++(Enemy_Detection_Screen_Type& screen, int) {
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
    Enemy_Detection_Screen_Type current = screen;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	73fb      	strb	r3, [r7, #15]

    if (screen == ENEMY_POSITION_VOTING_SCREEN) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d103      	bne.n	8005100 <_ZppR27Enemy_Detection_Screen_Typei+0x20>
        screen = ENEMY_SENSORS_OUTPUT_SCREEN;  // loop back to the start if at the end
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e005      	b.n	800510c <_ZppR27Enemy_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Enemy_Detection_Screen_Type>(static_cast<int>(screen) + 1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <_ZmmR27Enemy_Detection_Screen_Typei>:

Enemy_Detection_Screen_Type operator--(Enemy_Detection_Screen_Type& screen, int) {
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
    Enemy_Detection_Screen_Type current = screen;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	73fb      	strb	r3, [r7, #15]

    if (screen == ENEMY_SENSORS_OUTPUT_SCREEN) {
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <_ZmmR27Enemy_Detection_Screen_Typei+0x20>
        screen = ENEMY_POSITION_VOTING_SCREEN;  // loop back to the end if at the start
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e005      	b.n	8005146 <_ZmmR27Enemy_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Enemy_Detection_Screen_Type>(static_cast<int>(screen) - 1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	b2da      	uxtb	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix decrement
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <_ZppR22Motor_Test_Screen_Typei>:

// Increment (++) operator
Motor_Test_Screen_Type operator++(Motor_Test_Screen_Type& screen, int) {
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
    Motor_Test_Screen_Type current = screen;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	73fb      	strb	r3, [r7, #15]
    switch(screen) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d00e      	beq.n	800518a <_ZppR22Motor_Test_Screen_Typei+0x36>
 800516c:	2b02      	cmp	r3, #2
 800516e:	dc10      	bgt.n	8005192 <_ZppR22Motor_Test_Screen_Typei+0x3e>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <_ZppR22Motor_Test_Screen_Typei+0x26>
 8005174:	2b01      	cmp	r3, #1
 8005176:	d004      	beq.n	8005182 <_ZppR22Motor_Test_Screen_Typei+0x2e>
 8005178:	e00b      	b.n	8005192 <_ZppR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_POWER_SCREEN:
            screen = MOTOR_SET_TIMER_SCREEN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	701a      	strb	r2, [r3, #0]
            break;
 8005180:	e007      	b.n	8005192 <_ZppR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_RUN_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
            break;
 8005188:	e003      	b.n	8005192 <_ZppR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_TIMER_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;  // loop back to the start
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
            break;
 8005190:	bf00      	nop
    }
    return current; // Return old value for postfix increment
 8005192:	7bfb      	ldrb	r3, [r7, #15]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <_ZmmR22Motor_Test_Screen_Typei>:

// Decrement (--) operator
Motor_Test_Screen_Type operator--(Motor_Test_Screen_Type& screen, int) {
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
    Motor_Test_Screen_Type current = screen;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	73fb      	strb	r3, [r7, #15]
    switch(screen) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d00e      	beq.n	80051d6 <_ZmmR22Motor_Test_Screen_Typei+0x36>
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	dc10      	bgt.n	80051de <_ZmmR22Motor_Test_Screen_Typei+0x3e>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <_ZmmR22Motor_Test_Screen_Typei+0x26>
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d004      	beq.n	80051ce <_ZmmR22Motor_Test_Screen_Typei+0x2e>
 80051c4:	e00b      	b.n	80051de <_ZmmR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_POWER_SCREEN:
            screen = MOTOR_SET_TIMER_SCREEN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	701a      	strb	r2, [r3, #0]
            break;
 80051cc:	e007      	b.n	80051de <_ZmmR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_RUN_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
            break;
 80051d4:	e003      	b.n	80051de <_ZmmR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_TIMER_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;  // loop back to the start
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
            break;
 80051dc:	bf00      	nop
    }
    return current; //
 80051de:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <_Z41__static_initialization_and_destruction_0ii>:
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d109      	bne.n	8005210 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005202:	4293      	cmp	r3, r2
 8005204:	d104      	bne.n	8005210 <_Z41__static_initialization_and_destruction_0ii+0x24>
static uint32_t startTime = HAL_GetTick();
 8005206:	f7fc fd4f 	bl	8001ca8 <HAL_GetTick>
 800520a:	4603      	mov	r3, r0
 800520c:	4a02      	ldr	r2, [pc, #8]	; (8005218 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200003d4 	.word	0x200003d4

0800521c <_GLOBAL__sub_I__ZN15HardwareTestApp3runEv>:
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
 8005220:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005224:	2001      	movs	r0, #1
 8005226:	f7ff ffe1 	bl	80051ec <_Z41__static_initialization_and_destruction_0ii>
 800522a:	bd80      	pop	{r7, pc}

0800522c <_Z13Display_Clearv>:
#include "ssd1306.h"
#include "stdio.h"
#include "string.h"
#include <cmath>

void Display_Clear(){
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8005230:	2000      	movs	r0, #0
 8005232:	f000 ff95 	bl	8006160 <ssd1306_Fill>
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}

0800523a <_Z12Display_Initv>:

void Display_Init(){
 800523a:	b580      	push	{r7, lr}
 800523c:	af00      	add	r7, sp, #0
	ssd1306_Init();
 800523e:	f000 ff25 	bl	800608c <ssd1306_Init>
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <_Z16Draw_Center_TextPcP7FontDeft>:

void Draw_Center_Text( char *text, FontDef* font, uint16_t height){
 8005248:	b580      	push	{r7, lr}
 800524a:	b094      	sub	sp, #80	; 0x50
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
	uint16_t length = strlen(text);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7fb f82a 	bl	80002b0 <strlen>
 800525c:	4603      	mov	r3, r0
 800525e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t textWidth = length * font->FontWidth;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800526c:	fb12 f303 	smulbb	r3, r2, r3
 8005270:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

    if(textWidth <= SSD1306_WIDTH) {
 8005274:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005278:	2b80      	cmp	r3, #128	; 0x80
 800527a:	d824      	bhi.n	80052c6 <_Z16Draw_Center_TextPcP7FontDeft+0x7e>
    	uint16_t startX = (SSD1306_WIDTH - textWidth) / 2;
 800527c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005280:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005284:	0fda      	lsrs	r2, r3, #31
 8005286:	4413      	add	r3, r2
 8005288:	105b      	asrs	r3, r3, #1
 800528a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    	ssd1306_SetCursor (startX, height);
 800528e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005292:	b2db      	uxtb	r3, r3
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f001 f8ae 	bl	80063fc <ssd1306_SetCursor>
    	ssd1306_WriteString(text, *font, White);
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	2301      	movs	r3, #1
 80052a4:	ca06      	ldmia	r2, {r1, r2}
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f001 f882 	bl	80063b0 <ssd1306_WriteString>
    	ssd1306_SetCursor (0, height + font->FontHeight + 1);
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	4413      	add	r3, r2
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	2000      	movs	r0, #0
 80052c0:	f001 f89c 	bl	80063fc <ssd1306_SetCursor>

    	}else{
        	Draw_Left_Text(text, font, height);
    	}
    }
}
 80052c4:	e028      	b.n	8005318 <_Z16Draw_Center_TextPcP7FontDeft+0xd0>
    	char* secondText = strchr(text, ' ');
 80052c6:	2120      	movs	r1, #32
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f002 fe34 	bl	8007f36 <strchr>
 80052ce:	64b8      	str	r0, [r7, #72]	; 0x48
    	if(secondText != NULL){
 80052d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01a      	beq.n	800530c <_Z16Draw_Center_TextPcP7FontDeft+0xc4>
    		int k = secondText - text;
 80052d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
    		sprintf(firstText, "%.*s", k, text);
 80052de:	f107 0010 	add.w	r0, r7, #16
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e6:	490e      	ldr	r1, [pc, #56]	; (8005320 <_Z16Draw_Center_TextPcP7FontDeft+0xd8>)
 80052e8:	f002 fda0 	bl	8007e2c <siprintf>
    		Draw_Center_Text(firstText, font, height);
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	f107 0310 	add.w	r3, r7, #16
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff ffa7 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
    		Draw_Center_Text(secondText + 1, font, SSD1306.CurrentY);
 80052fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fc:	3301      	adds	r3, #1
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <_Z16Draw_Center_TextPcP7FontDeft+0xdc>)
 8005300:	8852      	ldrh	r2, [r2, #2]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff9f 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
}
 800530a:	e005      	b.n	8005318 <_Z16Draw_Center_TextPcP7FontDeft+0xd0>
        	Draw_Left_Text(text, font, height);
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	461a      	mov	r2, r3
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f808 	bl	8005328 <_Z14Draw_Left_TextPcP7FontDeft>
}
 8005318:	bf00      	nop
 800531a:	3750      	adds	r7, #80	; 0x50
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	0800a2b0 	.word	0x0800a2b0
 8005324:	200007e8 	.word	0x200007e8

08005328 <_Z14Draw_Left_TextPcP7FontDeft>:

void Draw_Left_Text(char *text, FontDef* font, uint16_t height){
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
	ssd1306_SetCursor (0, height);
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	4619      	mov	r1, r3
 800533c:	2000      	movs	r0, #0
 800533e:	f001 f85d 	bl	80063fc <ssd1306_SetCursor>
	ssd1306_WriteString(text, *font, White);
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	2301      	movs	r3, #1
 8005346:	ca06      	ldmia	r2, {r1, r2}
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f001 f831 	bl	80063b0 <ssd1306_WriteString>
	ssd1306_SetCursor (0, height + font->FontHeight + 1);
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	b2da      	uxtb	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	4413      	add	r3, r2
 8005358:	b2db      	uxtb	r3, r3
 800535a:	3301      	adds	r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	4619      	mov	r1, r3
 8005360:	2000      	movs	r0, #0
 8005362:	f001 f84b 	bl	80063fc <ssd1306_SetCursor>
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <_Z15Draw_Right_TextPcP7FontDeft>:

void Draw_Right_Text(char *text, FontDef* font, uint16_t height){
 800536e:	b580      	push	{r7, lr}
 8005370:	b086      	sub	sp, #24
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	4613      	mov	r3, r2
 800537a:	80fb      	strh	r3, [r7, #6]
	uint16_t length = strlen(text);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7fa ff97 	bl	80002b0 <strlen>
 8005382:	4603      	mov	r3, r0
 8005384:	82fb      	strh	r3, [r7, #22]
	uint16_t textWidth = length * font->FontWidth;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	8afa      	ldrh	r2, [r7, #22]
 800538e:	fb12 f303 	smulbb	r3, r2, r3
 8005392:	82bb      	strh	r3, [r7, #20]
	if(textWidth <= SSD1306_WIDTH){
 8005394:	8abb      	ldrh	r3, [r7, #20]
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d81e      	bhi.n	80053d8 <_Z15Draw_Right_TextPcP7FontDeft+0x6a>
		uint16_t startX = (SSD1306_WIDTH - textWidth -1);
 800539a:	8abb      	ldrh	r3, [r7, #20]
 800539c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80053a0:	827b      	strh	r3, [r7, #18]
		ssd1306_SetCursor (startX, height);
 80053a2:	8a7b      	ldrh	r3, [r7, #18]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 f825 	bl	80063fc <ssd1306_SetCursor>
		ssd1306_WriteString(text, *font, White);
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	2301      	movs	r3, #1
 80053b6:	ca06      	ldmia	r2, {r1, r2}
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fff9 	bl	80063b0 <ssd1306_WriteString>
		ssd1306_SetCursor (0, height + font->FontHeight + 1);
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	4413      	add	r3, r2
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	3301      	adds	r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	2000      	movs	r0, #0
 80053d2:	f001 f813 	bl	80063fc <ssd1306_SetCursor>

	}else{
		Draw_Left_Text(text, font, height);
	}
}
 80053d6:	e005      	b.n	80053e4 <_Z15Draw_Right_TextPcP7FontDeft+0x76>
		Draw_Left_Text(text, font, height);
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	461a      	mov	r2, r3
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff ffa2 	bl	8005328 <_Z14Draw_Left_TextPcP7FontDeft>
}
 80053e4:	bf00      	nop
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <_Z20Display_Title_ScreenPc>:

void Display_Title_Screen(char * title){
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	Display_Clear();
 80053f4:	f7ff ff1a 	bl	800522c <_Z13Display_Clearv>

	Draw_Center_Text((char *)"Start", &Font_7x10, 0);
 80053f8:	2200      	movs	r2, #0
 80053fa:	4911      	ldr	r1, [pc, #68]	; (8005440 <_Z20Display_Title_ScreenPc+0x54>)
 80053fc:	4811      	ldr	r0, [pc, #68]	; (8005444 <_Z20Display_Title_ScreenPc+0x58>)
 80053fe:	f7ff ff23 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	Draw_Center_Text(title, &Font_11x18, SSD1306.CurrentY);
 8005402:	4b11      	ldr	r3, [pc, #68]	; (8005448 <_Z20Display_Title_ScreenPc+0x5c>)
 8005404:	885b      	ldrh	r3, [r3, #2]
 8005406:	461a      	mov	r2, r3
 8005408:	4910      	ldr	r1, [pc, #64]	; (800544c <_Z20Display_Title_ScreenPc+0x60>)
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff1c 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	uint16_t yPosition = Display_Get_Bottom_YPosition(&Font_7x10);
 8005410:	480b      	ldr	r0, [pc, #44]	; (8005440 <_Z20Display_Title_ScreenPc+0x54>)
 8005412:	f000 fab7 	bl	8005984 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 8005416:	4603      	mov	r3, r0
 8005418:	81fb      	strh	r3, [r7, #14]

	Draw_Left_Text ((char *)"<Back", &Font_7x10, yPosition);
 800541a:	89fb      	ldrh	r3, [r7, #14]
 800541c:	461a      	mov	r2, r3
 800541e:	4908      	ldr	r1, [pc, #32]	; (8005440 <_Z20Display_Title_ScreenPc+0x54>)
 8005420:	480b      	ldr	r0, [pc, #44]	; (8005450 <_Z20Display_Title_ScreenPc+0x64>)
 8005422:	f7ff ff81 	bl	8005328 <_Z14Draw_Left_TextPcP7FontDeft>

	Draw_Right_Text ((char *)"Next>", &Font_7x10, yPosition);
 8005426:	89fb      	ldrh	r3, [r7, #14]
 8005428:	461a      	mov	r2, r3
 800542a:	4905      	ldr	r1, [pc, #20]	; (8005440 <_Z20Display_Title_ScreenPc+0x54>)
 800542c:	4809      	ldr	r0, [pc, #36]	; (8005454 <_Z20Display_Title_ScreenPc+0x68>)
 800542e:	f7ff ff9e 	bl	800536e <_Z15Draw_Right_TextPcP7FontDeft>

	ssd1306_UpdateScreen();
 8005432:	f000 feb9 	bl	80061a8 <ssd1306_UpdateScreen>
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000014 	.word	0x20000014
 8005444:	0800a2b8 	.word	0x0800a2b8
 8005448:	200007e8 	.word	0x200007e8
 800544c:	2000001c 	.word	0x2000001c
 8005450:	0800a2c0 	.word	0x0800a2c0
 8005454:	0800a2c8 	.word	0x0800a2c8

08005458 <_Z26Display_Small_Title_ScreenPc>:

void Display_Small_Title_Screen(char*  title){
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	Display_Clear();
 8005460:	f7ff fee4 	bl	800522c <_Z13Display_Clearv>

	Draw_Center_Text((char *)"Start", &Font_7x10, 0);
 8005464:	2200      	movs	r2, #0
 8005466:	4911      	ldr	r1, [pc, #68]	; (80054ac <_Z26Display_Small_Title_ScreenPc+0x54>)
 8005468:	4811      	ldr	r0, [pc, #68]	; (80054b0 <_Z26Display_Small_Title_ScreenPc+0x58>)
 800546a:	f7ff feed 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	Draw_Center_Text(title, &Font_7x10, SSD1306.CurrentY);
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <_Z26Display_Small_Title_ScreenPc+0x5c>)
 8005470:	885b      	ldrh	r3, [r3, #2]
 8005472:	461a      	mov	r2, r3
 8005474:	490d      	ldr	r1, [pc, #52]	; (80054ac <_Z26Display_Small_Title_ScreenPc+0x54>)
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fee6 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	uint16_t yPosition = Display_Get_Bottom_YPosition(&Font_7x10);
 800547c:	480b      	ldr	r0, [pc, #44]	; (80054ac <_Z26Display_Small_Title_ScreenPc+0x54>)
 800547e:	f000 fa81 	bl	8005984 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 8005482:	4603      	mov	r3, r0
 8005484:	81fb      	strh	r3, [r7, #14]

	Draw_Left_Text ((char *)"<Back", &Font_7x10, yPosition);
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	461a      	mov	r2, r3
 800548a:	4908      	ldr	r1, [pc, #32]	; (80054ac <_Z26Display_Small_Title_ScreenPc+0x54>)
 800548c:	480a      	ldr	r0, [pc, #40]	; (80054b8 <_Z26Display_Small_Title_ScreenPc+0x60>)
 800548e:	f7ff ff4b 	bl	8005328 <_Z14Draw_Left_TextPcP7FontDeft>

	Draw_Right_Text ((char *)"Next>", &Font_7x10, yPosition);
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	461a      	mov	r2, r3
 8005496:	4905      	ldr	r1, [pc, #20]	; (80054ac <_Z26Display_Small_Title_ScreenPc+0x54>)
 8005498:	4808      	ldr	r0, [pc, #32]	; (80054bc <_Z26Display_Small_Title_ScreenPc+0x64>)
 800549a:	f7ff ff68 	bl	800536e <_Z15Draw_Right_TextPcP7FontDeft>

	ssd1306_UpdateScreen();
 800549e:	f000 fe83 	bl	80061a8 <ssd1306_UpdateScreen>
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000014 	.word	0x20000014
 80054b0:	0800a2b8 	.word	0x0800a2b8
 80054b4:	200007e8 	.word	0x200007e8
 80054b8:	0800a2c0 	.word	0x0800a2c0
 80054bc:	0800a2c8 	.word	0x0800a2c8

080054c0 <_Z17Display_2_NumbersPcdd>:

void Display_2_Numbers(char * title, double number1, double number2){
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b090      	sub	sp, #64	; 0x40
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6178      	str	r0, [r7, #20]
 80054c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80054cc:	ed87 1b00 	vstr	d1, [r7]
	char s[40];

	Display_Clear();
 80054d0:	f7ff feac 	bl	800522c <_Z13Display_Clearv>

	Draw_Center_Text(title, &Font_7x10, 0);
 80054d4:	2200      	movs	r2, #0
 80054d6:	4914      	ldr	r1, [pc, #80]	; (8005528 <_Z17Display_2_NumbersPcdd+0x68>)
 80054d8:	6978      	ldr	r0, [r7, #20]
 80054da:	f7ff feb5 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	sprintf(s,"%f", number1);
 80054de:	f107 0018 	add.w	r0, r7, #24
 80054e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054e6:	4911      	ldr	r1, [pc, #68]	; (800552c <_Z17Display_2_NumbersPcdd+0x6c>)
 80054e8:	f002 fca0 	bl	8007e2c <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <_Z17Display_2_NumbersPcdd+0x70>)
 80054ee:	885a      	ldrh	r2, [r3, #2]
 80054f0:	f107 0318 	add.w	r3, r7, #24
 80054f4:	490c      	ldr	r1, [pc, #48]	; (8005528 <_Z17Display_2_NumbersPcdd+0x68>)
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fea6 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>


	sprintf(s,"%f", number2);
 80054fc:	f107 0018 	add.w	r0, r7, #24
 8005500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005504:	4909      	ldr	r1, [pc, #36]	; (800552c <_Z17Display_2_NumbersPcdd+0x6c>)
 8005506:	f002 fc91 	bl	8007e2c <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <_Z17Display_2_NumbersPcdd+0x70>)
 800550c:	885a      	ldrh	r2, [r3, #2]
 800550e:	f107 0318 	add.w	r3, r7, #24
 8005512:	4905      	ldr	r1, [pc, #20]	; (8005528 <_Z17Display_2_NumbersPcdd+0x68>)
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fe97 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	ssd1306_UpdateScreen();
 800551a:	f000 fe45 	bl	80061a8 <ssd1306_UpdateScreen>
}
 800551e:	bf00      	nop
 8005520:	3740      	adds	r7, #64	; 0x40
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000014 	.word	0x20000014
 800552c:	0800a2d0 	.word	0x0800a2d0
 8005530:	200007e8 	.word	0x200007e8

08005534 <_Z18Draw_3_Points_LinePbPcS0_t>:


void Draw_3_Points_Line(bool t[3], char* trueString, char*falseString,uint16_t height){
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	807b      	strh	r3, [r7, #2]
	if(t[0]){
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d006      	beq.n	8005558 <_Z18Draw_3_Points_LinePbPcS0_t+0x24>
		Draw_Left_Text(trueString,&Font_7x10, height);
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	461a      	mov	r2, r3
 800554e:	4919      	ldr	r1, [pc, #100]	; (80055b4 <_Z18Draw_3_Points_LinePbPcS0_t+0x80>)
 8005550:	68b8      	ldr	r0, [r7, #8]
 8005552:	f7ff fee9 	bl	8005328 <_Z14Draw_Left_TextPcP7FontDeft>
 8005556:	e005      	b.n	8005564 <_Z18Draw_3_Points_LinePbPcS0_t+0x30>
	}else{
		Draw_Left_Text(falseString, &Font_7x10, height);
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	461a      	mov	r2, r3
 800555c:	4915      	ldr	r1, [pc, #84]	; (80055b4 <_Z18Draw_3_Points_LinePbPcS0_t+0x80>)
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff fee2 	bl	8005328 <_Z14Draw_Left_TextPcP7FontDeft>
	}
	if(t[1]){
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d006      	beq.n	800557c <_Z18Draw_3_Points_LinePbPcS0_t+0x48>
		Draw_Center_Text(trueString,&Font_7x10, height);
 800556e:	887b      	ldrh	r3, [r7, #2]
 8005570:	461a      	mov	r2, r3
 8005572:	4910      	ldr	r1, [pc, #64]	; (80055b4 <_Z18Draw_3_Points_LinePbPcS0_t+0x80>)
 8005574:	68b8      	ldr	r0, [r7, #8]
 8005576:	f7ff fe67 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
 800557a:	e005      	b.n	8005588 <_Z18Draw_3_Points_LinePbPcS0_t+0x54>
	}else{
		Draw_Center_Text(falseString, &Font_7x10, height);
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	461a      	mov	r2, r3
 8005580:	490c      	ldr	r1, [pc, #48]	; (80055b4 <_Z18Draw_3_Points_LinePbPcS0_t+0x80>)
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fe60 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
	}
	if(t[2]){
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3302      	adds	r3, #2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <_Z18Draw_3_Points_LinePbPcS0_t+0x6c>
		Draw_Right_Text(trueString,&Font_7x10, height);
 8005592:	887b      	ldrh	r3, [r7, #2]
 8005594:	461a      	mov	r2, r3
 8005596:	4907      	ldr	r1, [pc, #28]	; (80055b4 <_Z18Draw_3_Points_LinePbPcS0_t+0x80>)
 8005598:	68b8      	ldr	r0, [r7, #8]
 800559a:	f7ff fee8 	bl	800536e <_Z15Draw_Right_TextPcP7FontDeft>
	}else{
		Draw_Right_Text(falseString, &Font_7x10, height);
	}

}
 800559e:	e005      	b.n	80055ac <_Z18Draw_3_Points_LinePbPcS0_t+0x78>
		Draw_Right_Text(falseString, &Font_7x10, height);
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	461a      	mov	r2, r3
 80055a4:	4903      	ldr	r1, [pc, #12]	; (80055b4 <_Z18Draw_3_Points_LinePbPcS0_t+0x80>)
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fee1 	bl	800536e <_Z15Draw_Right_TextPcP7FontDeft>
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000014 	.word	0x20000014

080055b8 <_Z27Display_Enemy_Sensors_VotesPa>:
//		strcat(s, temp);
//	}
//	strcpy(s,"");
//}

void Display_Enemy_Sensors_Votes(int8_t votes[EnemyPosition::KNOWN_POSITIONS_NO]){
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08c      	sub	sp, #48	; 0x30
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	FontDef font = Font_6x8;
 80055c0:	4a41      	ldr	r2, [pc, #260]	; (80056c8 <_Z27Display_Enemy_Sensors_VotesPa+0x110>)
 80055c2:	f107 030c 	add.w	r3, r7, #12
 80055c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055ca:	e883 0003 	stmia.w	r3, {r0, r1}
	Display_Clear();
 80055ce:	f7ff fe2d 	bl	800522c <_Z13Display_Clearv>
	float hDistance = SSD1306_HEIGHT;
 80055d2:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
	hDistance/= EnemyPosition::PROXIMITY_NO;
 80055d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80055dc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80055e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float wDistance = SSD1306_WIDTH;
 80055e8:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
	wDistance /= EnemyPosition::DIRECTIONS_NO;
 80055ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80055f2:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 80055f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float rowHeight = 2;
 80055fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005602:	623b      	str	r3, [r7, #32]



	for(uint8_t id = 0; id <EnemyPosition::KNOWN_POSITIONS_NO; id++)
 8005604:	2300      	movs	r3, #0
 8005606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800560a:	e052      	b.n	80056b2 <_Z27Display_Enemy_Sensors_VotesPa+0xfa>
	{
		EnemyPosition pos(id);
 800560c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fbcc 	bl	8005db4 <_ZN13EnemyPositionC1Eh>
		uint8_t x = pos.direction * wDistance;
 800561c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005628:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800562c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005634:	edc7 7a00 	vstr	s15, [r7]
 8005638:	783b      	ldrb	r3, [r7, #0]
 800563a:	77fb      	strb	r3, [r7, #31]
		float yBase = (EnemyPosition::PROXIMITY_NO - pos.proximity -1) * hDistance;
 800563c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005640:	f1c3 0302 	rsb	r3, r3, #2
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005654:	edc7 7a06 	vstr	s15, [r7, #24]
		uint8_t y = yBase + pos.getDistanceFromCenterDirection() * rowHeight;
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fbfc 	bl	8005e5a <_ZN13EnemyPosition30getDistanceFromCenterDirectionEv>
 8005662:	4603      	mov	r3, r0
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800566c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005674:	edd7 7a06 	vldr	s15, [r7, #24]
 8005678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005680:	edc7 7a00 	vstr	s15, [r7]
 8005684:	783b      	ldrb	r3, [r7, #0]
 8005686:	75fb      	strb	r3, [r7, #23]

		ssd1306_SetCursor((uint8_t)x, (uint8_t) y);
 8005688:	7dfa      	ldrb	r2, [r7, #23]
 800568a:	7ffb      	ldrb	r3, [r7, #31]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f000 feb4 	bl	80063fc <ssd1306_SetCursor>
		ssd1306_WriteChar('a' + id, font, White);
 8005694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005698:	3361      	adds	r3, #97	; 0x61
 800569a:	b2d8      	uxtb	r0, r3
 800569c:	2301      	movs	r3, #1
 800569e:	f107 020c 	add.w	r2, r7, #12
 80056a2:	ca06      	ldmia	r2, {r1, r2}
 80056a4:	f000 fdfc 	bl	80062a0 <ssd1306_WriteChar>
	for(uint8_t id = 0; id <EnemyPosition::KNOWN_POSITIONS_NO; id++)
 80056a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056ac:	3301      	adds	r3, #1
 80056ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80056b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056b6:	2b1f      	cmp	r3, #31
 80056b8:	d9a8      	bls.n	800560c <_Z27Display_Enemy_Sensors_VotesPa+0x54>
	}
	ssd1306_UpdateScreen();
 80056ba:	f000 fd75 	bl	80061a8 <ssd1306_UpdateScreen>

}
 80056be:	bf00      	nop
 80056c0:	3730      	adds	r7, #48	; 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	2000000c 	.word	0x2000000c

080056cc <_Z23Display_N_Values_ScreenPhh>:



void Display_N_Values_Screen(uint8_t *values, uint8_t valuesNo){
 80056cc:	b5b0      	push	{r4, r5, r7, lr}
 80056ce:	b09a      	sub	sp, #104	; 0x68
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
	Display_Clear();
 80056d8:	f7ff fda8 	bl	800522c <_Z13Display_Clearv>
	ssd1306_SetCursor (0, 0);
 80056dc:	2100      	movs	r1, #0
 80056de:	2000      	movs	r0, #0
 80056e0:	f000 fe8c 	bl	80063fc <ssd1306_SetCursor>
	for(uint8_t i = 0; i < valuesNo; i+=2)
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80056ea:	e026      	b.n	800573a <_Z23Display_N_Values_ScreenPhh+0x6e>
	{
		char s[80];
		sprintf(s, "s%d = %d, s%d =%d", i, values[i],i+1,values[i+1]);
 80056ec:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 80056f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	4413      	add	r3, r2
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	461d      	mov	r5, r3
 80056fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005700:	3301      	adds	r3, #1
 8005702:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8005706:	3201      	adds	r2, #1
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	440a      	add	r2, r1
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	f107 000c 	add.w	r0, r7, #12
 8005712:	9201      	str	r2, [sp, #4]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	462b      	mov	r3, r5
 8005718:	4622      	mov	r2, r4
 800571a:	490d      	ldr	r1, [pc, #52]	; (8005750 <_Z23Display_N_Values_ScreenPhh+0x84>)
 800571c:	f002 fb86 	bl	8007e2c <siprintf>
		Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <_Z23Display_N_Values_ScreenPhh+0x88>)
 8005722:	885a      	ldrh	r2, [r3, #2]
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	490b      	ldr	r1, [pc, #44]	; (8005758 <_Z23Display_N_Values_ScreenPhh+0x8c>)
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fd8c 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
	for(uint8_t i = 0; i < valuesNo; i+=2)
 8005730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005734:	3302      	adds	r3, #2
 8005736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800573a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	429a      	cmp	r2, r3
 8005742:	d3d3      	bcc.n	80056ec <_Z23Display_N_Values_ScreenPhh+0x20>
	}

	ssd1306_UpdateScreen();
 8005744:	f000 fd30 	bl	80061a8 <ssd1306_UpdateScreen>
}
 8005748:	bf00      	nop
 800574a:	3760      	adds	r7, #96	; 0x60
 800574c:	46bd      	mov	sp, r7
 800574e:	bdb0      	pop	{r4, r5, r7, pc}
 8005750:	0800a31c 	.word	0x0800a31c
 8005754:	200007e8 	.word	0x200007e8
 8005758:	20000014 	.word	0x20000014

0800575c <_Z28Display_Line_Position_Screen12LinePositionhhPc>:

void Display_Line_Position_Screen(LinePosition lineOutput,uint8_t whiteFilter, uint8_t darkFilter, char *descrition){
 800575c:	b580      	push	{r7, lr}
 800575e:	b094      	sub	sp, #80	; 0x50
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	72fb      	strb	r3, [r7, #11]
 800576a:	4613      	mov	r3, r2
 800576c:	72bb      	strb	r3, [r7, #10]
	char X[] = "X";
 800576e:	2358      	movs	r3, #88	; 0x58
 8005770:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	char O[] = "O";
 8005774:	234f      	movs	r3, #79	; 0x4f
 8005776:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	char s[40];



	Display_Clear();
 800577a:	f7ff fd57 	bl	800522c <_Z13Display_Clearv>

	bool values1[] = {lineOutput.isFrontLeft(),lineOutput.isFront(), lineOutput.isFrontRight()};
 800577e:	f107 030c 	add.w	r3, r7, #12
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fb9d 	bl	8005ec2 <_ZNK12LinePosition11isFrontLeftEv>
 8005788:	4603      	mov	r3, r0
 800578a:	773b      	strb	r3, [r7, #28]
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fba7 	bl	8005ee4 <_ZNK12LinePosition7isFrontEv>
 8005796:	4603      	mov	r3, r0
 8005798:	777b      	strb	r3, [r7, #29]
 800579a:	f107 030c 	add.w	r3, r7, #12
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fbb1 	bl	8005f06 <_ZNK12LinePosition12isFrontRightEv>
 80057a4:	4603      	mov	r3, r0
 80057a6:	77bb      	strb	r3, [r7, #30]
	bool values2[] = {lineOutput.isLeft(),lineOutput.isNone(), lineOutput.isRight()};
 80057a8:	f107 030c 	add.w	r3, r7, #12
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fbee 	bl	8005f8e <_ZNK12LinePosition6isLeftEv>
 80057b2:	4603      	mov	r3, r0
 80057b4:	763b      	strb	r3, [r7, #24]
 80057b6:	f107 030c 	add.w	r3, r7, #12
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fc09 	bl	8005fd2 <_ZNK12LinePosition6isNoneEv>
 80057c0:	4603      	mov	r3, r0
 80057c2:	767b      	strb	r3, [r7, #25]
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fbf1 	bl	8005fb0 <_ZNK12LinePosition7isRightEv>
 80057ce:	4603      	mov	r3, r0
 80057d0:	76bb      	strb	r3, [r7, #26]
	bool values3[] = {lineOutput.isBackLeft(),lineOutput.isBack(), lineOutput.isBackRight()};
 80057d2:	f107 030c 	add.w	r3, r7, #12
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fba6 	bl	8005f28 <_ZNK12LinePosition10isBackLeftEv>
 80057dc:	4603      	mov	r3, r0
 80057de:	753b      	strb	r3, [r7, #20]
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fbb0 	bl	8005f4a <_ZNK12LinePosition6isBackEv>
 80057ea:	4603      	mov	r3, r0
 80057ec:	757b      	strb	r3, [r7, #21]
 80057ee:	f107 030c 	add.w	r3, r7, #12
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fbba 	bl	8005f6c <_ZNK12LinePosition11isBackRightEv>
 80057f8:	4603      	mov	r3, r0
 80057fa:	75bb      	strb	r3, [r7, #22]
	Draw_3_Points_Line(values1, X, O, 0);
 80057fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005800:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005804:	f107 001c 	add.w	r0, r7, #28
 8005808:	2300      	movs	r3, #0
 800580a:	f7ff fe93 	bl	8005534 <_Z18Draw_3_Points_LinePbPcS0_t>

	sprintf(s,"white = %d", whiteFilter);
 800580e:	7afa      	ldrb	r2, [r7, #11]
 8005810:	f107 0320 	add.w	r3, r7, #32
 8005814:	4920      	ldr	r1, [pc, #128]	; (8005898 <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x13c>)
 8005816:	4618      	mov	r0, r3
 8005818:	f002 fb08 	bl	8007e2c <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 800581c:	4b1f      	ldr	r3, [pc, #124]	; (800589c <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x140>)
 800581e:	885a      	ldrh	r2, [r3, #2]
 8005820:	f107 0320 	add.w	r3, r7, #32
 8005824:	491e      	ldr	r1, [pc, #120]	; (80058a0 <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x144>)
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fd0e 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
	Draw_3_Points_Line(values2, X, O,  SSD1306.CurrentY);
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x140>)
 800582e:	885b      	ldrh	r3, [r3, #2]
 8005830:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005834:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005838:	f107 0018 	add.w	r0, r7, #24
 800583c:	f7ff fe7a 	bl	8005534 <_Z18Draw_3_Points_LinePbPcS0_t>

	sprintf(s,"black = %d", darkFilter);
 8005840:	7aba      	ldrb	r2, [r7, #10]
 8005842:	f107 0320 	add.w	r3, r7, #32
 8005846:	4917      	ldr	r1, [pc, #92]	; (80058a4 <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x148>)
 8005848:	4618      	mov	r0, r3
 800584a:	f002 faef 	bl	8007e2c <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x140>)
 8005850:	885a      	ldrh	r2, [r3, #2]
 8005852:	f107 0320 	add.w	r3, r7, #32
 8005856:	4912      	ldr	r1, [pc, #72]	; (80058a0 <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x144>)
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fcf5 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	if(descrition != NULL){
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d006      	beq.n	8005872 <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x116>
		Draw_Center_Text(descrition, &Font_7x10, SSD1306.CurrentY);
 8005864:	4b0d      	ldr	r3, [pc, #52]	; (800589c <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x140>)
 8005866:	885b      	ldrh	r3, [r3, #2]
 8005868:	461a      	mov	r2, r3
 800586a:	490d      	ldr	r1, [pc, #52]	; (80058a0 <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x144>)
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff fceb 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
	}


	Draw_3_Points_Line(values3, X, O, Display_Get_Bottom_YPosition(&Font_7x10));
 8005872:	480b      	ldr	r0, [pc, #44]	; (80058a0 <_Z28Display_Line_Position_Screen12LinePositionhhPc+0x144>)
 8005874:	f000 f886 	bl	8005984 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 8005878:	4603      	mov	r3, r0
 800587a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800587e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005882:	f107 0014 	add.w	r0, r7, #20
 8005886:	f7ff fe55 	bl	8005534 <_Z18Draw_3_Points_LinePbPcS0_t>


	ssd1306_UpdateScreen();
 800588a:	f000 fc8d 	bl	80061a8 <ssd1306_UpdateScreen>
}
 800588e:	bf00      	nop
 8005890:	3750      	adds	r7, #80	; 0x50
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	0800a330 	.word	0x0800a330
 800589c:	200007e8 	.word	0x200007e8
 80058a0:	20000014 	.word	0x20000014
 80058a4:	0800a33c 	.word	0x0800a33c

080058a8 <_Z25Display_Motor_Test_ScreenPcaaxS_>:
void Display_Motor_Test_Screen(char * titleScreen, int8_t leftPower, int8_t rightPower,int64_t time,char * actionDescriptionText){
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b092      	sub	sp, #72	; 0x48
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
 80058b4:	4613      	mov	r3, r2
 80058b6:	70bb      	strb	r3, [r7, #2]
	char s[50];
	FontDef font = Font_7x10;
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <_Z25Display_Motor_Test_ScreenPcaaxS_+0xb4>)
 80058ba:	f107 030c 	add.w	r3, r7, #12
 80058be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058c2:	e883 0003 	stmia.w	r3, {r0, r1}
	Display_Clear();
 80058c6:	f7ff fcb1 	bl	800522c <_Z13Display_Clearv>
	Draw_Center_Text(titleScreen, &Font_11x18, 0);
 80058ca:	2200      	movs	r2, #0
 80058cc:	4924      	ldr	r1, [pc, #144]	; (8005960 <_Z25Display_Motor_Test_ScreenPcaaxS_+0xb8>)
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff fcba 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	sprintf(s,"%d  %d",leftPower,rightPower);
 80058d4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80058d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058dc:	f107 0014 	add.w	r0, r7, #20
 80058e0:	4920      	ldr	r1, [pc, #128]	; (8005964 <_Z25Display_Motor_Test_ScreenPcaaxS_+0xbc>)
 80058e2:	f002 faa3 	bl	8007e2c <siprintf>
	Draw_Center_Text(s, &font, SSD1306.CurrentY + Font_7x10.FontHeight /2);
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <_Z25Display_Motor_Test_ScreenPcaaxS_+0xc0>)
 80058e8:	885a      	ldrh	r2, [r3, #2]
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <_Z25Display_Motor_Test_ScreenPcaaxS_+0xb4>)
 80058ec:	785b      	ldrb	r3, [r3, #1]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	f107 010c 	add.w	r1, r7, #12
 80058fc:	f107 0314 	add.w	r3, r7, #20
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fca1 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

//	sprintf(s,"Right Power = %d",rightPower);
//	Draw_Center_Text(s, &font, SSD1306.CurrentY);

	sprintf(s,"Timer = %d",time);
 8005906:	f107 0014 	add.w	r0, r7, #20
 800590a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800590e:	4917      	ldr	r1, [pc, #92]	; (800596c <_Z25Display_Motor_Test_ScreenPcaaxS_+0xc4>)
 8005910:	f002 fa8c 	bl	8007e2c <siprintf>
	Draw_Center_Text(s, &font, SSD1306.CurrentY + Font_7x10.FontHeight / 2);
 8005914:	4b14      	ldr	r3, [pc, #80]	; (8005968 <_Z25Display_Motor_Test_ScreenPcaaxS_+0xc0>)
 8005916:	885a      	ldrh	r2, [r3, #2]
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <_Z25Display_Motor_Test_ScreenPcaaxS_+0xb4>)
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	b2db      	uxtb	r3, r3
 8005920:	b29b      	uxth	r3, r3
 8005922:	4413      	add	r3, r2
 8005924:	b29a      	uxth	r2, r3
 8005926:	f107 010c 	add.w	r1, r7, #12
 800592a:	f107 0314 	add.w	r3, r7, #20
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fc8a 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>

	Draw_Center_Text(actionDescriptionText, &font, Display_Get_Bottom_YPosition(&font));
 8005934:	f107 030c 	add.w	r3, r7, #12
 8005938:	4618      	mov	r0, r3
 800593a:	f000 f823 	bl	8005984 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 800593e:	4603      	mov	r3, r0
 8005940:	461a      	mov	r2, r3
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	4619      	mov	r1, r3
 8005948:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800594a:	f7ff fc7d 	bl	8005248 <_Z16Draw_Center_TextPcP7FontDeft>
	ssd1306_UpdateScreen();
 800594e:	f000 fc2b 	bl	80061a8 <ssd1306_UpdateScreen>
}
 8005952:	bf00      	nop
 8005954:	3748      	adds	r7, #72	; 0x48
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000014 	.word	0x20000014
 8005960:	2000001c 	.word	0x2000001c
 8005964:	0800a348 	.word	0x0800a348
 8005968:	200007e8 	.word	0x200007e8
 800596c:	0800a350 	.word	0x0800a350

08005970 <_Z13Display_Errorv>:


void Display_Error(){
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
	Display_Title_Screen((char *)"Default Error");
 8005974:	4802      	ldr	r0, [pc, #8]	; (8005980 <_Z13Display_Errorv+0x10>)
 8005976:	f7ff fd39 	bl	80053ec <_Z20Display_Title_ScreenPc>
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	0800a35c 	.word	0x0800a35c

08005984 <_Z28Display_Get_Bottom_YPositionP7FontDef>:


uint16_t Display_Get_Bottom_YPosition(FontDef* font){
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	return SSD1306_HEIGHT - font->FontHeight -1;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005996:	b29b      	uxth	r3, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <_Z41__static_initialization_and_destruction_0ii>:
    motor.changePower(HIGH_LEFT_POWER, CIRCLE_100_RIGHT_POWER);
}

void Motion_Circle_Left_100(Motor& motor) {
    motor.changePower(CIRCLE_100_LEFT_POWER, HIGH_RIGHT_POWER);
}
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d109      	bne.n	80059c8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d104      	bne.n	80059c8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80059be:	f7fc f973 	bl	8001ca8 <HAL_GetTick>
 80059c2:	4603      	mov	r3, r0
 80059c4:	4a02      	ldr	r2, [pc, #8]	; (80059d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200003d8 	.word	0x200003d8

080059d4 <_GLOBAL__sub_I__Z19Motion_Forward_HighR5Motor>:
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80059dc:	2001      	movs	r0, #1
 80059de:	f7ff ffe1 	bl	80059a4 <_Z41__static_initialization_and_destruction_0ii>
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <_ZN12StateControlC1ERK16SensorsHubConfig>:

#include <state_control.h>
#include "timer.h"


StateControl:: StateControl(const SensorsHubConfig& config)
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
		: lineDetection(config.lineDetectionConfig),
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 f9e3 	bl	8006dc0 <_ZN13LineDetectionC1ERKNS_19LineDetectionConfigE>
		  enemyDetection(config.enemyDetectionConfig){
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	3328      	adds	r3, #40	; 0x28
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 fe50 	bl	80066ac <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	335c      	adds	r3, #92	; 0x5c
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 faef 	bl	8005ff4 <_ZN5StateC1Ev>

}
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <_Z41__static_initialization_and_destruction_0ii>:
		state.linePositionClock = Timer_Get_Now_Time();
	}
}
State StateControl::getState()const{
	return state;
}
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d109      	bne.n	8005a44 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d104      	bne.n	8005a44 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005a3a:	f7fc f935 	bl	8001ca8 <HAL_GetTick>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a02      	ldr	r2, [pc, #8]	; (8005a4c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200003dc 	.word	0x200003dc

08005a50 <_GLOBAL__sub_I__ZN12StateControlC2ERK16SensorsHubConfig>:
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f7ff ffe1 	bl	8005a20 <_Z41__static_initialization_and_destruction_0ii>
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_Z41__static_initialization_and_destruction_0ii>:

void Strategist::runCurrentSrategy() {
    if (currentStrategy != nullptr) {
        (this->*currentStrategy)();
    }
}
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d109      	bne.n	8005a84 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d104      	bne.n	8005a84 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005a7a:	f7fc f915 	bl	8001ca8 <HAL_GetTick>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4a02      	ldr	r2, [pc, #8]	; (8005a8c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	200003e0 	.word	0x200003e0

08005a90 <_GLOBAL__sub_I__ZN10StrategistC2ER12StateControlR5Motor>:
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a98:	2001      	movs	r0, #1
 8005a9a:	f7ff ffe1 	bl	8005a60 <_Z41__static_initialization_and_destruction_0ii>
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <_Z41__static_initialization_and_destruction_0ii>:
	if(tacticStep == 1 && executesMotions()){
		STOP_CURRENT_TACTIC();
		return;
	}

}
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d109      	bne.n	8005ac4 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d104      	bne.n	8005ac4 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005aba:	f7fc f8f5 	bl	8001ca8 <HAL_GetTick>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4a02      	ldr	r2, [pc, #8]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	200003e4 	.word	0x200003e4

08005ad0 <_GLOBAL__sub_I__ZN9TacticianC2ER5Motor>:
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ad8:	2001      	movs	r0, #1
 8005ada:	f7ff ffe1 	bl	8005aa0 <_Z41__static_initialization_and_destruction_0ii>
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <_ZN10UserInputsC1ERK16UserInputsConfig>:
#include "user_inputs.h"

#include "main.h"


UserInputs::UserInputs(const UserInputsConfig& config)
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
: startButton(config.startButton.port, config.startButton.pin),
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	889b      	ldrh	r3, [r3, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	f000 fccb 	bl	8006490 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>
  backButton(config.backButton.port, config.backButton.pin),
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f103 0018 	add.w	r0, r3, #24
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6899      	ldr	r1, [r3, #8]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	899b      	ldrh	r3, [r3, #12]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f000 fcc1 	bl	8006490 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>
  nextButton(config.nextButton.port, config.nextButton.pin),
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6919      	ldr	r1, [r3, #16]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	8a9b      	ldrh	r3, [r3, #20]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f000 fcb7 	bl	8006490 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>
  trimpot0(config.trimpotLeft.hadc, config.trimpotLeft.channel),
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6999      	ldr	r1, [r3, #24]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	461a      	mov	r2, r3
 8005b32:	f001 fbb3 	bl	800729c <_ZN7TrimpotC1EP17ADC_HandleTypeDefm>
  trimpot1(config.trimpotRight.hadc, config.trimpotRight.channel)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6a19      	ldr	r1, [r3, #32]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	461a      	mov	r2, r3
 8005b46:	f001 fba9 	bl	800729c <_ZN7TrimpotC1EP17ADC_HandleTypeDefm>
{

}
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <_ZN10UserInputs9configAllEv>:

void UserInputs::configAll(){
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	startButton.config();
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fcb8 	bl	80064d4 <_ZN13ComplexButton6configEv>
	backButton.config();
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3318      	adds	r3, #24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fcb3 	bl	80064d4 <_ZN13ComplexButton6configEv>
	nextButton.config();
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3330      	adds	r3, #48	; 0x30
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fcae 	bl	80064d4 <_ZN13ComplexButton6configEv>
	trimpot0.config();
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3348      	adds	r3, #72	; 0x48
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 fba3 	bl	80072c8 <_ZN7Trimpot6configEv>
	trimpot1.config();
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3354      	adds	r3, #84	; 0x54
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fb9e 	bl	80072c8 <_ZN7Trimpot6configEv>
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZN10UserInputs10readInputsEv>:
void UserInputs::readInputs(){
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	startButton.read();
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fcc4 	bl	800652c <_ZN13ComplexButton4readEv>
	backButton.read();
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fcbf 	bl	800652c <_ZN13ComplexButton4readEv>
	nextButton.read();
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3330      	adds	r3, #48	; 0x30
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fcba 	bl	800652c <_ZN13ComplexButton4readEv>
	trimpot0.read();
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3348      	adds	r3, #72	; 0x48
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 fb8d 	bl	80072dc <_ZN7Trimpot4readEv>
	trimpot1.read();
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3354      	adds	r3, #84	; 0x54
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fb88 	bl	80072dc <_ZN7Trimpot4readEv>
}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_ZN10UserInputs8isAnyKeyEv>:

bool UserInputs::isAnyKey(){
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	return backButton.getLastValue() != NO_CLICK ||
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3318      	adds	r3, #24
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fc97 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005be6:	4603      	mov	r3, r0
			nextButton.getLastValue() != NO_CLICK ||
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10e      	bne.n	8005c0a <_ZN10UserInputs8isAnyKeyEv+0x36>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3330      	adds	r3, #48	; 0x30
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fc8f 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005bf6:	4603      	mov	r3, r0
	return backButton.getLastValue() != NO_CLICK ||
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <_ZN10UserInputs8isAnyKeyEv+0x36>
			startButton.getLastValue() != NO_CLICK;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fc88 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005c04:	4603      	mov	r3, r0
			nextButton.getLastValue() != NO_CLICK ||
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <_ZN10UserInputs8isAnyKeyEv+0x3a>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <_ZN10UserInputs8isAnyKeyEv+0x3c>
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <_ZN10UserInputs19isReturnBackRequestEv>:
bool UserInputs::isReturnBackRequest(){
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	ButtonOutput backOutput = backButton.getLastValue();
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3318      	adds	r3, #24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fc75 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]
	return backOutput == HOLD_CLICK;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <_ZN10UserInputs13isBackRequestEv>:
bool UserInputs::isBackRequest(){
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
	ButtonOutput backOutput = backButton.getLastValue();
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fc60 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]
	return backOutput == CLICK ||
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d002      	beq.n	8005c64 <_ZN10UserInputs13isBackRequestEv+0x22>
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d101      	bne.n	8005c68 <_ZN10UserInputs13isBackRequestEv+0x26>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <_ZN10UserInputs13isBackRequestEv+0x28>
 8005c68:	2300      	movs	r3, #0
			backOutput == DOUBLE_CLICK;
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <_ZN10UserInputs13isNextRequestEv>:
bool UserInputs::isNextRequest(){
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
	ButtonOutput nextOutput = nextButton.getLastValue();
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3330      	adds	r3, #48	; 0x30
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fc48 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]
	return nextOutput == CLICK ||
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d002      	beq.n	8005c94 <_ZN10UserInputs13isNextRequestEv+0x22>
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d101      	bne.n	8005c98 <_ZN10UserInputs13isNextRequestEv+0x26>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <_ZN10UserInputs13isNextRequestEv+0x28>
 8005c98:	2300      	movs	r3, #0
			nextOutput == DOUBLE_CLICK;
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <_ZN10UserInputs15isSelectRequestEv>:
bool UserInputs::isSelectRequest(){
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
	ButtonOutput startOutput = startButton.getLastValue();
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fc31 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73fb      	strb	r3, [r7, #15]
	return startOutput == CLICK ||
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d002      	beq.n	8005cc2 <_ZN10UserInputs15isSelectRequestEv+0x20>
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d101      	bne.n	8005cc6 <_ZN10UserInputs15isSelectRequestEv+0x24>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <_ZN10UserInputs15isSelectRequestEv+0x26>
 8005cc6:	2300      	movs	r3, #0
			startOutput == DOUBLE_CLICK;
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_ZN10UserInputs17isSetValueRequestEv>:
bool UserInputs::isSetValueRequest(){
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
	ButtonOutput startOutput = startButton.getLastValue();
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fc1a 	bl	8006514 <_ZNK13ComplexButton12getLastValueEv>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
	return startOutput == HOLD_CLICK;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <_ZNK10UserInputs8getData0Ev>:



uint16_t UserInputs::getData0() const {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
    return trimpot0.getData();
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3348      	adds	r3, #72	; 0x48
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 fb3e 	bl	8007386 <_ZNK7Trimpot7getDataEv>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <_ZNK10UserInputs8getData1Ev>:

uint16_t UserInputs::getData1() const {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
    return trimpot1.getData();
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3354      	adds	r3, #84	; 0x54
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 fb30 	bl	8007386 <_ZNK7Trimpot7getDataEv>
 8005d26:	4603      	mov	r3, r0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_ZNK10UserInputs8getData0Eff>:

float UserInputs::getData0(float min, float max) const {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d3c:	edc7 0a01 	vstr	s1, [r7, #4]
    return trimpot0.getData(min, max);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3348      	adds	r3, #72	; 0x48
 8005d44:	edd7 0a01 	vldr	s1, [r7, #4]
 8005d48:	ed97 0a02 	vldr	s0, [r7, #8]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fb27 	bl	80073a0 <_ZNK7Trimpot7getDataEff>
 8005d52:	eef0 7a40 	vmov.f32	s15, s0
}
 8005d56:	eeb0 0a67 	vmov.f32	s0, s15
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <_ZNK10UserInputs8getData1Eff>:

float UserInputs::getData1(float min, float max) const {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d6c:	edc7 0a01 	vstr	s1, [r7, #4]
    return trimpot1.getData(min, max);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3354      	adds	r3, #84	; 0x54
 8005d74:	edd7 0a01 	vldr	s1, [r7, #4]
 8005d78:	ed97 0a02 	vldr	s0, [r7, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fb0f 	bl	80073a0 <_ZNK7Trimpot7getDataEff>
 8005d82:	eef0 7a40 	vmov.f32	s15, s0
}
 8005d86:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <_ZN13EnemyPositionC1Ev>:
#include "enemy_position.h"

#include <cstdlib>
#include <cstdio>

EnemyPosition::EnemyPosition() : direction(0), proximity(PROXIMITY_NO) {}
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2203      	movs	r2, #3
 8005da2:	705a      	strb	r2, [r3, #1]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <_ZN13EnemyPositionC1Eh>:

EnemyPosition::EnemyPosition(int8_t dir, int8_t prox) : direction(dir), proximity(prox) {}

EnemyPosition::EnemyPosition(uint8_t enemyPositionId) {
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
	if(enemyPositionId >= NOT_KNOWN_POSITION_ID) {
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	2b1f      	cmp	r3, #31
 8005dc4:	d903      	bls.n	8005dce <_ZN13EnemyPositionC1Eh+0x1a>
	        proximity = PROXIMITY_NO;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2203      	movs	r2, #3
 8005dca:	705a      	strb	r2, [r3, #1]
	        return;
 8005dcc:	e031      	b.n	8005e32 <_ZN13EnemyPositionC1Eh+0x7e>
	}
	proximity = enemyPositionId / DIRECTIONS_NO;
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <_ZN13EnemyPositionC1Eh+0x8c>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	b25a      	sxtb	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	705a      	strb	r2, [r3, #1]
	direction = enemyPositionId % DIRECTIONS_NO;
 8005de0:	78f9      	ldrb	r1, [r7, #3]
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <_ZN13EnemyPositionC1Eh+0x8c>)
 8005de4:	fba3 2301 	umull	r2, r3, r3, r1
 8005de8:	089a      	lsrs	r2, r3, #2
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	1acb      	subs	r3, r1, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	b25a      	sxtb	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	701a      	strb	r2, [r3, #0]
	if(proximity == 2) {
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d114      	bne.n	8005e32 <_ZN13EnemyPositionC1Eh+0x7e>
		if(direction > 2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	dd08      	ble.n	8005e24 <_ZN13EnemyPositionC1Eh+0x70>
			direction++;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f993 3000 	ldrsb.w	r3, [r3]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	b25a      	sxtb	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	701a      	strb	r2, [r3, #0]
		direction = direction << 1;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f993 3000 	ldrsb.w	r3, [r3]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	b25a      	sxtb	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	701a      	strb	r2, [r3, #0]
	}
}
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	4ec4ec4f 	.word	0x4ec4ec4f

08005e44 <_ZN13EnemyPosition18getCenterDirectionEv>:
        newDirection = newDirection >> 1;
    }
    return proximity * DIRECTIONS_NO + newDirection;
}

uint8_t EnemyPosition::getCenterDirection() {
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
    // Assuming center direction is halfway through DIRECTIONS_NO
    return DIRECTIONS_NO / 2;
 8005e4c:	2306      	movs	r3, #6
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <_ZN13EnemyPosition30getDistanceFromCenterDirectionEv>:

uint8_t EnemyPosition::getDistanceFromCenterDirection() {
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
    int8_t center = getCenterDirection();
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ffee 	bl	8005e44 <_ZN13EnemyPosition18getCenterDirectionEv>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
    return std::abs(direction - center);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bfb8      	it	lt
 8005e7e:	425b      	neglt	r3, r3
 8005e80:	b2db      	uxtb	r3, r3
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <_ZN12LinePositionC1Ev>:
 *      Author: BRG
 */

#include "line_position.h"

LinePosition::LinePosition() : linePosition(LinePositionType::None) {}
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2208      	movs	r2, #8
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>:

void LinePosition::setLinePosition(LinePositionType position) {
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
    linePosition = position;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <_ZNK12LinePosition11isFrontLeftEv>:

bool LinePosition::operator!=(const LinePosition& other) const {
    return !(*this == other);
}

bool LinePosition::isFrontLeft() const {
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::FrontLeft;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	2300      	movne	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <_ZNK12LinePosition7isFrontEv>:

bool LinePosition::isFront() const {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Front;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <_ZNK12LinePosition12isFrontRightEv>:

bool LinePosition::isFrontRight() const {
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::FrontRight;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	bf0c      	ite	eq
 8005f16:	2301      	moveq	r3, #1
 8005f18:	2300      	movne	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <_ZNK12LinePosition10isBackLeftEv>:

bool LinePosition::isBackLeft() const {
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::BackLeft;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	bf0c      	ite	eq
 8005f38:	2301      	moveq	r3, #1
 8005f3a:	2300      	movne	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <_ZNK12LinePosition6isBackEv>:

bool LinePosition::isBack() const {
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Back;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	bf0c      	ite	eq
 8005f5a:	2301      	moveq	r3, #1
 8005f5c:	2300      	movne	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <_ZNK12LinePosition11isBackRightEv>:

bool LinePosition::isBackRight() const {
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::BackRight;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	bf0c      	ite	eq
 8005f7c:	2301      	moveq	r3, #1
 8005f7e:	2300      	movne	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <_ZNK12LinePosition6isLeftEv>:

bool LinePosition::isLeft() const {
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Left;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <_ZNK12LinePosition7isRightEv>:

bool LinePosition::isRight() const {
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Right;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b07      	cmp	r3, #7
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <_ZNK12LinePosition6isNoneEv>:

bool LinePosition::isNone() const {
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::None;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	bf0c      	ite	eq
 8005fe2:	2301      	moveq	r3, #1
 8005fe4:	2300      	movne	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <_ZN5StateC1Ev>:
 *  Created on: Aug 17, 2023
 *      Author: BRG
 */
#include "state.h"

State::State(){
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff ff42 	bl	8005e8a <_ZN12LinePositionC1Ev>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	330c      	adds	r3, #12
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fec0 	bl	8005d90 <_ZN13EnemyPositionC1Ev>

}
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800601a:	b480      	push	{r7}
 800601c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800601e:	bf00      	nop
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af04      	add	r7, sp, #16
 800602e:	4603      	mov	r3, r0
 8006030:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	9302      	str	r3, [sp, #8]
 8006038:	2301      	movs	r3, #1
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	1dfb      	adds	r3, r7, #7
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2301      	movs	r3, #1
 8006042:	2200      	movs	r2, #0
 8006044:	2178      	movs	r1, #120	; 0x78
 8006046:	4803      	ldr	r0, [pc, #12]	; (8006054 <ssd1306_WriteCommand+0x2c>)
 8006048:	f7fc fe5e 	bl	8002d08 <HAL_I2C_Mem_Write>
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000298 	.word	0x20000298

08006058 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af04      	add	r7, sp, #16
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	9202      	str	r2, [sp, #8]
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	2301      	movs	r3, #1
 8006074:	2240      	movs	r2, #64	; 0x40
 8006076:	2178      	movs	r1, #120	; 0x78
 8006078:	4803      	ldr	r0, [pc, #12]	; (8006088 <ssd1306_WriteData+0x30>)
 800607a:	f7fc fe45 	bl	8002d08 <HAL_I2C_Mem_Write>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000298 	.word	0x20000298

0800608c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006090:	f7ff ffc3 	bl	800601a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006094:	2064      	movs	r0, #100	; 0x64
 8006096:	f7fb fe13 	bl	8001cc0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800609a:	2000      	movs	r0, #0
 800609c:	f000 f9da 	bl	8006454 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80060a0:	2020      	movs	r0, #32
 80060a2:	f7ff ffc1 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80060a6:	2000      	movs	r0, #0
 80060a8:	f7ff ffbe 	bl	8006028 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80060ac:	20b0      	movs	r0, #176	; 0xb0
 80060ae:	f7ff ffbb 	bl	8006028 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80060b2:	20c8      	movs	r0, #200	; 0xc8
 80060b4:	f7ff ffb8 	bl	8006028 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80060b8:	2000      	movs	r0, #0
 80060ba:	f7ff ffb5 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80060be:	2010      	movs	r0, #16
 80060c0:	f7ff ffb2 	bl	8006028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80060c4:	2040      	movs	r0, #64	; 0x40
 80060c6:	f7ff ffaf 	bl	8006028 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80060ca:	20ff      	movs	r0, #255	; 0xff
 80060cc:	f000 f9ae 	bl	800642c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80060d0:	20a1      	movs	r0, #161	; 0xa1
 80060d2:	f7ff ffa9 	bl	8006028 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80060d6:	20a6      	movs	r0, #166	; 0xa6
 80060d8:	f7ff ffa6 	bl	8006028 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80060dc:	20a8      	movs	r0, #168	; 0xa8
 80060de:	f7ff ffa3 	bl	8006028 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80060e2:	203f      	movs	r0, #63	; 0x3f
 80060e4:	f7ff ffa0 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80060e8:	20a4      	movs	r0, #164	; 0xa4
 80060ea:	f7ff ff9d 	bl	8006028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80060ee:	20d3      	movs	r0, #211	; 0xd3
 80060f0:	f7ff ff9a 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80060f4:	2000      	movs	r0, #0
 80060f6:	f7ff ff97 	bl	8006028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80060fa:	20d5      	movs	r0, #213	; 0xd5
 80060fc:	f7ff ff94 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006100:	20f0      	movs	r0, #240	; 0xf0
 8006102:	f7ff ff91 	bl	8006028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006106:	20d9      	movs	r0, #217	; 0xd9
 8006108:	f7ff ff8e 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800610c:	2022      	movs	r0, #34	; 0x22
 800610e:	f7ff ff8b 	bl	8006028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006112:	20da      	movs	r0, #218	; 0xda
 8006114:	f7ff ff88 	bl	8006028 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006118:	2012      	movs	r0, #18
 800611a:	f7ff ff85 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800611e:	20db      	movs	r0, #219	; 0xdb
 8006120:	f7ff ff82 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006124:	2020      	movs	r0, #32
 8006126:	f7ff ff7f 	bl	8006028 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800612a:	208d      	movs	r0, #141	; 0x8d
 800612c:	f7ff ff7c 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006130:	2014      	movs	r0, #20
 8006132:	f7ff ff79 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006136:	2001      	movs	r0, #1
 8006138:	f000 f98c 	bl	8006454 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800613c:	2000      	movs	r0, #0
 800613e:	f000 f80f 	bl	8006160 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006142:	f000 f831 	bl	80061a8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <ssd1306_Init+0xd0>)
 8006148:	2200      	movs	r2, #0
 800614a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800614c:	4b03      	ldr	r3, [pc, #12]	; (800615c <ssd1306_Init+0xd0>)
 800614e:	2200      	movs	r2, #0
 8006150:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006152:	4b02      	ldr	r3, [pc, #8]	; (800615c <ssd1306_Init+0xd0>)
 8006154:	2201      	movs	r2, #1
 8006156:	711a      	strb	r2, [r3, #4]
}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200007e8 	.word	0x200007e8

08006160 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e00d      	b.n	800618c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <ssd1306_Fill+0x1a>
 8006176:	2100      	movs	r1, #0
 8006178:	e000      	b.n	800617c <ssd1306_Fill+0x1c>
 800617a:	21ff      	movs	r1, #255	; 0xff
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <ssd1306_Fill+0x44>)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	460a      	mov	r2, r1
 8006184:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006192:	d3ed      	bcc.n	8006170 <ssd1306_Fill+0x10>
    }
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	200003e8 	.word	0x200003e8

080061a8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80061ae:	2300      	movs	r3, #0
 80061b0:	71fb      	strb	r3, [r7, #7]
 80061b2:	e016      	b.n	80061e2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	3b50      	subs	r3, #80	; 0x50
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff ff34 	bl	8006028 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80061c0:	2000      	movs	r0, #0
 80061c2:	f7ff ff31 	bl	8006028 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80061c6:	2010      	movs	r0, #16
 80061c8:	f7ff ff2e 	bl	8006028 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	01db      	lsls	r3, r3, #7
 80061d0:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <ssd1306_UpdateScreen+0x4c>)
 80061d2:	4413      	add	r3, r2
 80061d4:	2180      	movs	r1, #128	; 0x80
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff ff3e 	bl	8006058 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	3301      	adds	r3, #1
 80061e0:	71fb      	strb	r3, [r7, #7]
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	2b07      	cmp	r3, #7
 80061e6:	d9e5      	bls.n	80061b4 <ssd1306_UpdateScreen+0xc>
    }
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200003e8 	.word	0x200003e8

080061f8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	71fb      	strb	r3, [r7, #7]
 8006202:	460b      	mov	r3, r1
 8006204:	71bb      	strb	r3, [r7, #6]
 8006206:	4613      	mov	r3, r2
 8006208:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	2b00      	cmp	r3, #0
 8006210:	db3d      	blt.n	800628e <ssd1306_DrawPixel+0x96>
 8006212:	79bb      	ldrb	r3, [r7, #6]
 8006214:	2b3f      	cmp	r3, #63	; 0x3f
 8006216:	d83a      	bhi.n	800628e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006218:	797b      	ldrb	r3, [r7, #5]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d11a      	bne.n	8006254 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800621e:	79fa      	ldrb	r2, [r7, #7]
 8006220:	79bb      	ldrb	r3, [r7, #6]
 8006222:	08db      	lsrs	r3, r3, #3
 8006224:	b2d8      	uxtb	r0, r3
 8006226:	4603      	mov	r3, r0
 8006228:	01db      	lsls	r3, r3, #7
 800622a:	4413      	add	r3, r2
 800622c:	4a1b      	ldr	r2, [pc, #108]	; (800629c <ssd1306_DrawPixel+0xa4>)
 800622e:	5cd3      	ldrb	r3, [r2, r3]
 8006230:	b25a      	sxtb	r2, r3
 8006232:	79bb      	ldrb	r3, [r7, #6]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	b25b      	sxtb	r3, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	b259      	sxtb	r1, r3
 8006244:	79fa      	ldrb	r2, [r7, #7]
 8006246:	4603      	mov	r3, r0
 8006248:	01db      	lsls	r3, r3, #7
 800624a:	4413      	add	r3, r2
 800624c:	b2c9      	uxtb	r1, r1
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <ssd1306_DrawPixel+0xa4>)
 8006250:	54d1      	strb	r1, [r2, r3]
 8006252:	e01d      	b.n	8006290 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006254:	79fa      	ldrb	r2, [r7, #7]
 8006256:	79bb      	ldrb	r3, [r7, #6]
 8006258:	08db      	lsrs	r3, r3, #3
 800625a:	b2d8      	uxtb	r0, r3
 800625c:	4603      	mov	r3, r0
 800625e:	01db      	lsls	r3, r3, #7
 8006260:	4413      	add	r3, r2
 8006262:	4a0e      	ldr	r2, [pc, #56]	; (800629c <ssd1306_DrawPixel+0xa4>)
 8006264:	5cd3      	ldrb	r3, [r2, r3]
 8006266:	b25a      	sxtb	r2, r3
 8006268:	79bb      	ldrb	r3, [r7, #6]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2101      	movs	r1, #1
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	b25b      	sxtb	r3, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	b25b      	sxtb	r3, r3
 800627a:	4013      	ands	r3, r2
 800627c:	b259      	sxtb	r1, r3
 800627e:	79fa      	ldrb	r2, [r7, #7]
 8006280:	4603      	mov	r3, r0
 8006282:	01db      	lsls	r3, r3, #7
 8006284:	4413      	add	r3, r2
 8006286:	b2c9      	uxtb	r1, r1
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <ssd1306_DrawPixel+0xa4>)
 800628a:	54d1      	strb	r1, [r2, r3]
 800628c:	e000      	b.n	8006290 <ssd1306_DrawPixel+0x98>
        return;
 800628e:	bf00      	nop
    }
}
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	200003e8 	.word	0x200003e8

080062a0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80062a0:	b590      	push	{r4, r7, lr}
 80062a2:	b089      	sub	sp, #36	; 0x24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4604      	mov	r4, r0
 80062a8:	1d38      	adds	r0, r7, #4
 80062aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80062ae:	461a      	mov	r2, r3
 80062b0:	4623      	mov	r3, r4
 80062b2:	73fb      	strb	r3, [r7, #15]
 80062b4:	4613      	mov	r3, r2
 80062b6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b1f      	cmp	r3, #31
 80062bc:	d902      	bls.n	80062c4 <ssd1306_WriteChar+0x24>
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	2b7e      	cmp	r3, #126	; 0x7e
 80062c2:	d901      	bls.n	80062c8 <ssd1306_WriteChar+0x28>
        return 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e06d      	b.n	80063a4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80062c8:	4b38      	ldr	r3, [pc, #224]	; (80063ac <ssd1306_WriteChar+0x10c>)
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	793b      	ldrb	r3, [r7, #4]
 80062d0:	4413      	add	r3, r2
 80062d2:	2b80      	cmp	r3, #128	; 0x80
 80062d4:	dc06      	bgt.n	80062e4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80062d6:	4b35      	ldr	r3, [pc, #212]	; (80063ac <ssd1306_WriteChar+0x10c>)
 80062d8:	885b      	ldrh	r3, [r3, #2]
 80062da:	461a      	mov	r2, r3
 80062dc:	797b      	ldrb	r3, [r7, #5]
 80062de:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	dd01      	ble.n	80062e8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e05d      	b.n	80063a4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80062e8:	2300      	movs	r3, #0
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e04c      	b.n	8006388 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	3b20      	subs	r3, #32
 80062f4:	7979      	ldrb	r1, [r7, #5]
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	4619      	mov	r1, r3
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	440b      	add	r3, r1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	e034      	b.n	8006378 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d012      	beq.n	8006344 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800631e:	4b23      	ldr	r3, [pc, #140]	; (80063ac <ssd1306_WriteChar+0x10c>)
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	4413      	add	r3, r2
 800632a:	b2d8      	uxtb	r0, r3
 800632c:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <ssd1306_WriteChar+0x10c>)
 800632e:	885b      	ldrh	r3, [r3, #2]
 8006330:	b2da      	uxtb	r2, r3
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	4413      	add	r3, r2
 8006338:	b2db      	uxtb	r3, r3
 800633a:	7bba      	ldrb	r2, [r7, #14]
 800633c:	4619      	mov	r1, r3
 800633e:	f7ff ff5b 	bl	80061f8 <ssd1306_DrawPixel>
 8006342:	e016      	b.n	8006372 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <ssd1306_WriteChar+0x10c>)
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	4413      	add	r3, r2
 8006350:	b2d8      	uxtb	r0, r3
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <ssd1306_WriteChar+0x10c>)
 8006354:	885b      	ldrh	r3, [r3, #2]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	4413      	add	r3, r2
 800635e:	b2d9      	uxtb	r1, r3
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	2b00      	cmp	r3, #0
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	f7ff ff43 	bl	80061f8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	3301      	adds	r3, #1
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	793b      	ldrb	r3, [r7, #4]
 800637a:	461a      	mov	r2, r3
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	4293      	cmp	r3, r2
 8006380:	d3c5      	bcc.n	800630e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	797b      	ldrb	r3, [r7, #5]
 800638a:	461a      	mov	r2, r3
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4293      	cmp	r3, r2
 8006390:	d3ad      	bcc.n	80062ee <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <ssd1306_WriteChar+0x10c>)
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	793b      	ldrb	r3, [r7, #4]
 8006398:	b29b      	uxth	r3, r3
 800639a:	4413      	add	r3, r2
 800639c:	b29a      	uxth	r2, r3
 800639e:	4b03      	ldr	r3, [pc, #12]	; (80063ac <ssd1306_WriteChar+0x10c>)
 80063a0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd90      	pop	{r4, r7, pc}
 80063ac:	200007e8 	.word	0x200007e8

080063b0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	1d38      	adds	r0, r7, #4
 80063ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80063be:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80063c0:	e012      	b.n	80063e8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	7818      	ldrb	r0, [r3, #0]
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	1d3a      	adds	r2, r7, #4
 80063ca:	ca06      	ldmia	r2, {r1, r2}
 80063cc:	f7ff ff68 	bl	80062a0 <ssd1306_WriteChar>
 80063d0:	4603      	mov	r3, r0
 80063d2:	461a      	mov	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d002      	beq.n	80063e2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	e008      	b.n	80063f4 <ssd1306_WriteString+0x44>
        }
        str++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e8      	bne.n	80063c2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	781b      	ldrb	r3, [r3, #0]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	460a      	mov	r2, r1
 8006406:	71fb      	strb	r3, [r7, #7]
 8006408:	4613      	mov	r3, r2
 800640a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	b29a      	uxth	r2, r3
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <ssd1306_SetCursor+0x2c>)
 8006412:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006414:	79bb      	ldrb	r3, [r7, #6]
 8006416:	b29a      	uxth	r2, r3
 8006418:	4b03      	ldr	r3, [pc, #12]	; (8006428 <ssd1306_SetCursor+0x2c>)
 800641a:	805a      	strh	r2, [r3, #2]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	200007e8 	.word	0x200007e8

0800642c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006436:	2381      	movs	r3, #129	; 0x81
 8006438:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fdf3 	bl	8006028 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fdef 	bl	8006028 <ssd1306_WriteCommand>
}
 800644a:	bf00      	nop
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006464:	23af      	movs	r3, #175	; 0xaf
 8006466:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006468:	4b08      	ldr	r3, [pc, #32]	; (800648c <ssd1306_SetDisplayOn+0x38>)
 800646a:	2201      	movs	r2, #1
 800646c:	715a      	strb	r2, [r3, #5]
 800646e:	e004      	b.n	800647a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006470:	23ae      	movs	r3, #174	; 0xae
 8006472:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <ssd1306_SetDisplayOn+0x38>)
 8006476:	2200      	movs	r2, #0
 8006478:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fdd3 	bl	8006028 <ssd1306_WriteCommand>
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	200007e8 	.word	0x200007e8

08006490 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>:
#include "button_driver.h"

#include "stm32f4xx_hal.h"


ComplexButton::ComplexButton(GPIO_TypeDef * GPIOX,uint16_t PIN):
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
GPIOX(GPIOX),
PIN(PIN),
clock(HAL_GetTick()),
buttonState(WaitForPress)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064ac:	805a      	strh	r2, [r3, #2]
GPIOX(GPIOX),
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]
PIN(PIN),
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	88fa      	ldrh	r2, [r7, #6]
 80064b8:	819a      	strh	r2, [r3, #12]
clock(HAL_GetTick()),
 80064ba:	f7fb fbf5 	bl	8001ca8 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	611a      	str	r2, [r3, #16]
buttonState(WaitForPress)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	751a      	strb	r2, [r3, #20]
{};
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_ZN13ComplexButton6configEv>:


void ComplexButton::config()
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064dc:	f107 030c 	add.w	r3, r7, #12
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	609a      	str	r2, [r3, #8]
 80064e8:	60da      	str	r2, [r3, #12]
 80064ea:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = PIN;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	899b      	ldrh	r3, [r3, #12]
 80064f0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064f6:	2301      	movs	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064fa:	f107 030c 	add.w	r3, r7, #12
 80064fe:	4619      	mov	r1, r3
 8006500:	4803      	ldr	r0, [pc, #12]	; (8006510 <_ZN13ComplexButton6configEv+0x3c>)
 8006502:	f7fc f8f7 	bl	80026f4 <HAL_GPIO_Init>
}
 8006506:	bf00      	nop
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40020400 	.word	0x40020400

08006514 <_ZNK13ComplexButton12getLastValueEv>:

ButtonOutput ComplexButton::getLastValue() const {
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	return lastValue;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	791b      	ldrb	r3, [r3, #4]
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <_ZN13ComplexButton4readEv>:


ButtonOutput ComplexButton::read()
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
	GPIO_PinState pinState = (HAL_GPIO_ReadPin(GPIOX, PIN) == GPIO_PIN_RESET) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	899b      	ldrh	r3, [r3, #12]
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fc fa6c 	bl	8002a1c <HAL_GPIO_ReadPin>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <_ZN13ComplexButton4readEv+0x22>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <_ZN13ComplexButton4readEv+0x24>
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]

	switch(buttonState) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	7d1b      	ldrb	r3, [r3, #20]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d863      	bhi.n	8006622 <_ZN13ComplexButton4readEv+0xf6>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <_ZN13ComplexButton4readEv+0x34>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006571 	.word	0x08006571
 8006564:	08006589 	.word	0x08006589
 8006568:	080065c3 	.word	0x080065c3
 800656c:	08006607 	.word	0x08006607
		case ButtonState::WaitForPress:
			if(pinState == GPIO_PIN_SET) {
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d14e      	bne.n	8006614 <_ZN13ComplexButton4readEv+0xe8>
				clock = HAL_GetTick(); // Capture press time
 8006576:	f7fb fb97 	bl	8001ca8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	611a      	str	r2, [r3, #16]
				buttonState = ButtonState::WaitForRelease;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	751a      	strb	r2, [r3, #20]
			}
			break;
 8006586:	e045      	b.n	8006614 <_ZN13ComplexButton4readEv+0xe8>
		case ButtonState::WaitForRelease:
			if(pinState == GPIO_PIN_RESET) {
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <_ZN13ComplexButton4readEv+0x68>
				buttonState = ButtonState::CheckDoubleClick;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	751a      	strb	r2, [r3, #20]
			}
			// Check for hold duration
			if(HAL_GetTick() - clock >= HOLD_CLICK_PRESSING_TIME_MS) {
 8006594:	f7fb fb88 	bl	8001ca8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	8812      	ldrh	r2, [r2, #0]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bf2c      	ite	cs
 80065a8:	2301      	movcs	r3, #1
 80065aa:	2300      	movcc	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d032      	beq.n	8006618 <_ZN13ComplexButton4readEv+0xec>
				buttonState = ButtonState::IdleAfterClick;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2203      	movs	r2, #3
 80065b6:	751a      	strb	r2, [r3, #20]
				lastValue = HOLD_CLICK;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	711a      	strb	r2, [r3, #4]
				return HOLD_CLICK;
 80065be:	2302      	movs	r3, #2
 80065c0:	e033      	b.n	800662a <_ZN13ComplexButton4readEv+0xfe>
			}
			break;
		case ButtonState::CheckDoubleClick:
			if(pinState == GPIO_PIN_SET) {
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d107      	bne.n	80065d8 <_ZN13ComplexButton4readEv+0xac>
				buttonState = ButtonState::IdleAfterClick;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2203      	movs	r2, #3
 80065cc:	751a      	strb	r2, [r3, #20]
				lastValue = DOUBLE_CLICK;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2203      	movs	r2, #3
 80065d2:	711a      	strb	r2, [r3, #4]
				return DOUBLE_CLICK;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e028      	b.n	800662a <_ZN13ComplexButton4readEv+0xfe>
			}
			// If no second click for a certain duration
			if(HAL_GetTick() - clock >= DOUBLE_CLICK_TIME_MS) {
 80065d8:	f7fb fb66 	bl	8001ca8 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	8852      	ldrh	r2, [r2, #2]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	bf2c      	ite	cs
 80065ec:	2301      	movcs	r3, #1
 80065ee:	2300      	movcc	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d012      	beq.n	800661c <_ZN13ComplexButton4readEv+0xf0>
				buttonState = ButtonState::WaitForPress;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	751a      	strb	r2, [r3, #20]
				lastValue = CLICK;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	711a      	strb	r2, [r3, #4]
				return CLICK;
 8006602:	2301      	movs	r3, #1
 8006604:	e011      	b.n	800662a <_ZN13ComplexButton4readEv+0xfe>
			}
			break;
		case ButtonState::IdleAfterClick:
			if(pinState == GPIO_PIN_RESET) {
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d109      	bne.n	8006620 <_ZN13ComplexButton4readEv+0xf4>
				buttonState = ButtonState::WaitForPress;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	751a      	strb	r2, [r3, #20]
			}
			break;
 8006612:	e005      	b.n	8006620 <_ZN13ComplexButton4readEv+0xf4>
			break;
 8006614:	bf00      	nop
 8006616:	e004      	b.n	8006622 <_ZN13ComplexButton4readEv+0xf6>
			break;
 8006618:	bf00      	nop
 800661a:	e002      	b.n	8006622 <_ZN13ComplexButton4readEv+0xf6>
			break;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <_ZN13ComplexButton4readEv+0xf6>
			break;
 8006620:	bf00      	nop
		}

		lastValue = ButtonOutput::NO_CLICK;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	711a      	strb	r2, [r3, #4]
		return ButtonOutput::NO_CLICK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop

08006634 <_ZN20Communication_DriverC1ERK25CommunicationDriverConfig>:
#include "stdio.h"
#include <stdarg.h>
#include "stm32f4xx_hal_uart.h"
#include "stm32f4xx_hal_def.h"

Communication_Driver::Communication_Driver(const CommunicationDriverConfig& config)
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
    : GPIOx_Start_Module(config.GPIOx_Start_Module),
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
      PIIN_Start_Module(config.PIIN_Start_Module)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	891a      	ldrh	r2, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	809a      	strh	r2, [r3, #4]
{
	huart.Instance = config.uartx;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	609a      	str	r2, [r3, #8]
	huart.Init.BaudRate = 115200;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800665c:	60da      	str	r2, [r3, #12]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	611a      	str	r2, [r3, #16]
	huart.Init.StopBits = UART_STOPBITS_1;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	615a      	str	r2, [r3, #20]
	huart.Init.Parity = UART_PARITY_NONE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE_TX_RX;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	220c      	movs	r2, #12
 8006674:	61da      	str	r2, [r3, #28]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	621a      	str	r2, [r3, #32]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <_ZN20Communication_Driver6configEv>:

HAL_StatusTypeDef Communication_Driver::config(){
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	return HAL_HalfDuplex_Init(&huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3308      	adds	r3, #8
 800669c:	4618      	mov	r0, r3
 800669e:	f7fd fc86 	bl	8003fae <HAL_HalfDuplex_Init>
 80066a2:	4603      	mov	r3, r0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig>:
 */

#include "enemy_detection.h"

// Constructor
EnemyDetection::EnemyDetection(const EnemyDetectionConfig config[NUMBER_OF_SENSORS]) {
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
    for(uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 80066b6:	2300      	movs	r3, #0
 80066b8:	73fb      	strb	r3, [r7, #15]
 80066ba:	e015      	b.n	80066e8 <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig+0x3c>
        SENSOR_GPIO[i] = config[i].gpio;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	4413      	add	r3, r2
 80066c4:	7bfa      	ldrb	r2, [r7, #15]
 80066c6:	6819      	ldr	r1, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SENSOR_PIN[i] = config[i].pin;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4413      	add	r3, r2
 80066d6:	7bfa      	ldrb	r2, [r7, #15]
 80066d8:	8899      	ldrh	r1, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3210      	adds	r2, #16
 80066de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	3301      	adds	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b07      	cmp	r3, #7
 80066ec:	d9e6      	bls.n	80066bc <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig+0x10>
    }
}
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_ZN14EnemyDetection11readSensorsEv>:
		// Example: Initialize each sensor using GPIO and pin information
	}
}

// Read the sensors and return their combined readings
uint32_t EnemyDetection::readSensors() {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 8006708:	2300      	movs	r3, #0
 800670a:	72fb      	strb	r3, [r7, #11]
 800670c:	e01e      	b.n	800674c <_ZN14EnemyDetection11readSensorsEv+0x50>
		// Read each sensor and combine their readings into result
		// This is just an example. The exact implementation depends on your sensor's behavior.
		if (HAL_GPIO_ReadPin(SENSOR_GPIO[i], SENSOR_PIN[i]) == GPIO_PIN_SET) {
 800670e:	7afa      	ldrb	r2, [r7, #11]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006716:	7afa      	ldrb	r2, [r7, #11]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3210      	adds	r2, #16
 800671c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006720:	4619      	mov	r1, r3
 8006722:	f7fc f97b 	bl	8002a1c <HAL_GPIO_ReadPin>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <_ZN14EnemyDetection11readSensorsEv+0x4a>
			result |= (1 << i);
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	2201      	movs	r2, #1
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	3301      	adds	r3, #1
 800674a:	72fb      	strb	r3, [r7, #11]
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	2b07      	cmp	r3, #7
 8006750:	d9dd      	bls.n	800670e <_ZN14EnemyDetection11readSensorsEv+0x12>
		}
	}
	return result;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa>:

// Evaluate the votes of each sensor
uint8_t EnemyDetection::readAndTakeSensorsVotes(int8_t sensors_votes[EnemyPosition::KNOWN_POSITIONS_NO]) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i <= EnemyPosition::KNOWN_POSITIONS_NO;i++){
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
 800676a:	e007      	b.n	800677c <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x20>
		sensors_votes[i] = 0;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4413      	add	r3, r2
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= EnemyPosition::KNOWN_POSITIONS_NO;i++){
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	3301      	adds	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	2b20      	cmp	r3, #32
 8006780:	d9f4      	bls.n	800676c <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x10>
	}
	uint32_t sensorsOutput = readSensors();
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff ffba 	bl	80066fc <_ZN14EnemyDetection11readSensorsEv>
 8006788:	60b8      	str	r0, [r7, #8]
	uint8_t number_of_active_sensors = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	73bb      	strb	r3, [r7, #14]

	///Sensor 0
	if(sensorsOutput & 0x01){
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d042      	beq.n	800681e <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0xc2>
		number_of_active_sensors++;
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	3301      	adds	r3, #1
 800679c:	73bb      	strb	r3, [r7, #14]
		sensors_votes[0] += FIRST_VOTE;       ///
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f993 3000 	ldrsb.w	r3, [r3]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	3307      	adds	r3, #7
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	b25a      	sxtb	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	701a      	strb	r2, [r3, #0]
		sensors_votes[13] += FIRST_VOTE;       /// center line
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	330d      	adds	r3, #13
 80067b4:	f993 3000 	ldrsb.w	r3, [r3]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	3307      	adds	r3, #7
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	330d      	adds	r3, #13
 80067c2:	b252      	sxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]
		sensors_votes[26] += FIRST_VOTE;       ///
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	331a      	adds	r3, #26
 80067ca:	f993 3000 	ldrsb.w	r3, [r3]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	3307      	adds	r3, #7
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	331a      	adds	r3, #26
 80067d8:	b252      	sxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]

		sensors_votes[1] += SECOND_VOTE;       ///
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	3301      	adds	r3, #1
 80067e0:	f993 3000 	ldrsb.w	r3, [r3]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	3306      	adds	r3, #6
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	b252      	sxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
		sensors_votes[14] += SECOND_VOTE;       ///
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	330e      	adds	r3, #14
 80067f6:	f993 3000 	ldrsb.w	r3, [r3]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	3306      	adds	r3, #6
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	330e      	adds	r3, #14
 8006804:	b252      	sxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]

		sensors_votes[2] += THIRD_VOTE;       ///
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	3302      	adds	r3, #2
 800680c:	f993 3000 	ldrsb.w	r3, [r3]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	3304      	adds	r3, #4
 8006814:	b2da      	uxtb	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	3302      	adds	r3, #2
 800681a:	b252      	sxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]

	}
	///Sensor 1
	if(sensorsOutput & 0x02){
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05a      	beq.n	80068de <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x182>
		number_of_active_sensors++;
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	3301      	adds	r3, #1
 800682c:	73bb      	strb	r3, [r7, #14]

		sensors_votes[1] += SECOND_VOTE;       ///
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	f993 3000 	ldrsb.w	r3, [r3]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	3306      	adds	r3, #6
 800683a:	b2da      	uxtb	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	b252      	sxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
		sensors_votes[14] += SECOND_VOTE;       ///
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	330e      	adds	r3, #14
 8006848:	f993 3000 	ldrsb.w	r3, [r3]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	3306      	adds	r3, #6
 8006850:	b2da      	uxtb	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	330e      	adds	r3, #14
 8006856:	b252      	sxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]

		sensors_votes[2] += FIRST_VOTE;       ///
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	3302      	adds	r3, #2
 800685e:	f993 3000 	ldrsb.w	r3, [r3]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	3307      	adds	r3, #7
 8006866:	b2da      	uxtb	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	3302      	adds	r3, #2
 800686c:	b252      	sxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
		sensors_votes[15] += FIRST_VOTE;       /// center line
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	330f      	adds	r3, #15
 8006874:	f993 3000 	ldrsb.w	r3, [r3]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	3307      	adds	r3, #7
 800687c:	b2da      	uxtb	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	330f      	adds	r3, #15
 8006882:	b252      	sxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]
		sensors_votes[27] += FIRST_VOTE;       ///
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	331b      	adds	r3, #27
 800688a:	f993 3000 	ldrsb.w	r3, [r3]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	3307      	adds	r3, #7
 8006892:	b2da      	uxtb	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	331b      	adds	r3, #27
 8006898:	b252      	sxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]

		sensors_votes[3] += SECOND_VOTE;       ///
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	3303      	adds	r3, #3
 80068a0:	f993 3000 	ldrsb.w	r3, [r3]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	3306      	adds	r3, #6
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	3303      	adds	r3, #3
 80068ae:	b252      	sxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
		sensors_votes[16] += SECOND_VOTE;       ///
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	3310      	adds	r3, #16
 80068b6:	f993 3000 	ldrsb.w	r3, [r3]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	3306      	adds	r3, #6
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	3310      	adds	r3, #16
 80068c4:	b252      	sxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]

		sensors_votes[4] += THIRD_VOTE;       ///
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	3304      	adds	r3, #4
 80068cc:	f993 3000 	ldrsb.w	r3, [r3]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	3304      	adds	r3, #4
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	3304      	adds	r3, #4
 80068da:	b252      	sxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

	}
	///Sensor 2
	if(sensorsOutput & 0x04){
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d065      	beq.n	80069b4 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x258>
		number_of_active_sensors++;
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	3301      	adds	r3, #1
 80068ec:	73bb      	strb	r3, [r7, #14]

		sensors_votes[2] += THIRD_VOTE;       ///
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	3302      	adds	r3, #2
 80068f2:	f993 3000 	ldrsb.w	r3, [r3]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	3304      	adds	r3, #4
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	3302      	adds	r3, #2
 8006900:	b252      	sxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]

		sensors_votes[3] += SECOND_VOTE;       ///
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	3303      	adds	r3, #3
 8006908:	f993 3000 	ldrsb.w	r3, [r3]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	3306      	adds	r3, #6
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	3303      	adds	r3, #3
 8006916:	b252      	sxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
		sensors_votes[16] += SECOND_VOTE;       ///
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	3310      	adds	r3, #16
 800691e:	f993 3000 	ldrsb.w	r3, [r3]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	3306      	adds	r3, #6
 8006926:	b2da      	uxtb	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	3310      	adds	r3, #16
 800692c:	b252      	sxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]

		sensors_votes[4] += FIRST_VOTE;       ///
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	3304      	adds	r3, #4
 8006934:	f993 3000 	ldrsb.w	r3, [r3]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	3307      	adds	r3, #7
 800693c:	b2da      	uxtb	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	3304      	adds	r3, #4
 8006942:	b252      	sxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
		sensors_votes[17] += FIRST_VOTE;       /// center line
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	3311      	adds	r3, #17
 800694a:	f993 3000 	ldrsb.w	r3, [r3]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	3307      	adds	r3, #7
 8006952:	b2da      	uxtb	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	3311      	adds	r3, #17
 8006958:	b252      	sxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
		sensors_votes[28] += FIRST_VOTE;       ///
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	331c      	adds	r3, #28
 8006960:	f993 3000 	ldrsb.w	r3, [r3]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	3307      	adds	r3, #7
 8006968:	b2da      	uxtb	r2, r3
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	331c      	adds	r3, #28
 800696e:	b252      	sxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]

		sensors_votes[5] += SECOND_VOTE;       ///
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	3305      	adds	r3, #5
 8006976:	f993 3000 	ldrsb.w	r3, [r3]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	3306      	adds	r3, #6
 800697e:	b2da      	uxtb	r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	3305      	adds	r3, #5
 8006984:	b252      	sxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
		sensors_votes[18] += SECOND_VOTE;       ///
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	3312      	adds	r3, #18
 800698c:	f993 3000 	ldrsb.w	r3, [r3]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	3306      	adds	r3, #6
 8006994:	b2da      	uxtb	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	3312      	adds	r3, #18
 800699a:	b252      	sxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]

		sensors_votes[6] += THIRD_VOTE;       ///
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	3306      	adds	r3, #6
 80069a2:	f993 3000 	ldrsb.w	r3, [r3]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	3304      	adds	r3, #4
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	3306      	adds	r3, #6
 80069b0:	b252      	sxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 3
	if(sensorsOutput & 0x08){
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d070      	beq.n	8006aa0 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x344>
		number_of_active_sensors++;
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	3301      	adds	r3, #1
 80069c2:	73bb      	strb	r3, [r7, #14]

		sensors_votes[3] += THIRD_VOTE;       ///
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	3303      	adds	r3, #3
 80069c8:	f993 3000 	ldrsb.w	r3, [r3]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	3304      	adds	r3, #4
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	3303      	adds	r3, #3
 80069d6:	b252      	sxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
		sensors_votes[18] += THIRD_VOTE;       ///
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	3312      	adds	r3, #18
 80069de:	f993 3000 	ldrsb.w	r3, [r3]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	3304      	adds	r3, #4
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	3312      	adds	r3, #18
 80069ec:	b252      	sxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]

		sensors_votes[4] += SECOND_VOTE;       ///
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	3304      	adds	r3, #4
 80069f4:	f993 3000 	ldrsb.w	r3, [r3]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	3306      	adds	r3, #6
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	3304      	adds	r3, #4
 8006a02:	b252      	sxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
		sensors_votes[19] += SECOND_VOTE;       ///
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	3313      	adds	r3, #19
 8006a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	3306      	adds	r3, #6
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	3313      	adds	r3, #19
 8006a18:	b252      	sxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]

		sensors_votes[5] += FIRST_VOTE;       ///
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	3305      	adds	r3, #5
 8006a20:	f993 3000 	ldrsb.w	r3, [r3]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	3307      	adds	r3, #7
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	3305      	adds	r3, #5
 8006a2e:	b252      	sxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
		sensors_votes[20] += FIRST_VOTE;       /// center line
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	3314      	adds	r3, #20
 8006a36:	f993 3000 	ldrsb.w	r3, [r3]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	3307      	adds	r3, #7
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	3314      	adds	r3, #20
 8006a44:	b252      	sxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]


		sensors_votes[6] +=  SECOND_VOTE;       ///
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	3306      	adds	r3, #6
 8006a4c:	f993 3000 	ldrsb.w	r3, [r3]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	3306      	adds	r3, #6
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	3306      	adds	r3, #6
 8006a5a:	b252      	sxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
		sensors_votes[21] += SECOND_VOTE;       ///
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	3315      	adds	r3, #21
 8006a62:	f993 3000 	ldrsb.w	r3, [r3]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	3306      	adds	r3, #6
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	3315      	adds	r3, #21
 8006a70:	b252      	sxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
		sensors_votes[29] += SECOND_VOTE;       ///
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	331d      	adds	r3, #29
 8006a78:	f993 3000 	ldrsb.w	r3, [r3]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	3306      	adds	r3, #6
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	331d      	adds	r3, #29
 8006a86:	b252      	sxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]

		sensors_votes[7] += THIRD_VOTE;       ///
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	3307      	adds	r3, #7
 8006a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	3304      	adds	r3, #4
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	3307      	adds	r3, #7
 8006a9c:	b252      	sxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]

	}
	///Sensor 4
	if(sensorsOutput & 0x10){
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d070      	beq.n	8006b8c <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x430>
		number_of_active_sensors++;
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	3301      	adds	r3, #1
 8006aae:	73bb      	strb	r3, [r7, #14]
		sensors_votes[5] += THIRD_VOTE;        ///
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	3305      	adds	r3, #5
 8006ab4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	3304      	adds	r3, #4
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	3305      	adds	r3, #5
 8006ac2:	b252      	sxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]

		sensors_votes[6] += SECOND_VOTE;       ///
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	3306      	adds	r3, #6
 8006aca:	f993 3000 	ldrsb.w	r3, [r3]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	3306      	adds	r3, #6
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	3306      	adds	r3, #6
 8006ad8:	b252      	sxtb	r2, r2
 8006ada:	701a      	strb	r2, [r3, #0]
		sensors_votes[17] += SECOND_VOTE;      ///
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	3311      	adds	r3, #17
 8006ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	3306      	adds	r3, #6
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	3311      	adds	r3, #17
 8006aee:	b252      	sxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]
		sensors_votes[28] += SECOND_VOTE;      ///
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	331c      	adds	r3, #28
 8006af6:	f993 3000 	ldrsb.w	r3, [r3]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	3306      	adds	r3, #6
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	331c      	adds	r3, #28
 8006b04:	b252      	sxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]

		sensors_votes[7] += FIRST_VOTE;        ///
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	3307      	adds	r3, #7
 8006b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	3307      	adds	r3, #7
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	3307      	adds	r3, #7
 8006b1a:	b252      	sxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
		sensors_votes[18] += FIRST_VOTE;       /// center line
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	3312      	adds	r3, #18
 8006b22:	f993 3000 	ldrsb.w	r3, [r3]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	3307      	adds	r3, #7
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	3312      	adds	r3, #18
 8006b30:	b252      	sxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]


		sensors_votes[8] += SECOND_VOTE;       ///
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	f993 3000 	ldrsb.w	r3, [r3]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	3306      	adds	r3, #6
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	b252      	sxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
		sensors_votes[19] += SECOND_VOTE;      ///
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	3313      	adds	r3, #19
 8006b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	3306      	adds	r3, #6
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	3313      	adds	r3, #19
 8006b5c:	b252      	sxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]

		sensors_votes[9] += THIRD_VOTE;        ///
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	3309      	adds	r3, #9
 8006b64:	f993 3000 	ldrsb.w	r3, [r3]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	3309      	adds	r3, #9
 8006b72:	b252      	sxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
		sensors_votes[20] += THIRD_VOTE;        ///
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	f993 3000 	ldrsb.w	r3, [r3]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	3304      	adds	r3, #4
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	b252      	sxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 5
	if(sensorsOutput & 0x20){
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d065      	beq.n	8006c62 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x506>
		number_of_active_sensors++;
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	73bb      	strb	r3, [r7, #14]
		sensors_votes[6] += THIRD_VOTE;       ///
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	3306      	adds	r3, #6
 8006ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	3306      	adds	r3, #6
 8006bae:	b252      	sxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]

		sensors_votes[7] += SECOND_VOTE;       ///
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	3307      	adds	r3, #7
 8006bb6:	f993 3000 	ldrsb.w	r3, [r3]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3306      	adds	r3, #6
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	3307      	adds	r3, #7
 8006bc4:	b252      	sxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
		sensors_votes[20] += SECOND_VOTE;       ///
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	f993 3000 	ldrsb.w	r3, [r3]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	3306      	adds	r3, #6
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	3314      	adds	r3, #20
 8006bda:	b252      	sxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]

		sensors_votes[8] += FIRST_VOTE;       ///
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	f993 3000 	ldrsb.w	r3, [r3]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	3307      	adds	r3, #7
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	b252      	sxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
		sensors_votes[21] += FIRST_VOTE;       /// center line
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	3315      	adds	r3, #21
 8006bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	3307      	adds	r3, #7
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	3315      	adds	r3, #21
 8006c06:	b252      	sxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
		sensors_votes[29] += FIRST_VOTE;       ///
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	331d      	adds	r3, #29
 8006c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	3307      	adds	r3, #7
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	331d      	adds	r3, #29
 8006c1c:	b252      	sxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]

		sensors_votes[9] += SECOND_VOTE;       ///
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	3309      	adds	r3, #9
 8006c24:	f993 3000 	ldrsb.w	r3, [r3]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	3306      	adds	r3, #6
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	3309      	adds	r3, #9
 8006c32:	b252      	sxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
		sensors_votes[22] += SECOND_VOTE;       ///
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	3316      	adds	r3, #22
 8006c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	3306      	adds	r3, #6
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	3316      	adds	r3, #22
 8006c48:	b252      	sxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]

		sensors_votes[10] += THIRD_VOTE;       ///
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	330a      	adds	r3, #10
 8006c50:	f993 3000 	ldrsb.w	r3, [r3]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	3304      	adds	r3, #4
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	330a      	adds	r3, #10
 8006c5e:	b252      	sxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 6
	if(sensorsOutput & 0x40){
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d05a      	beq.n	8006d22 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x5c6>
		number_of_active_sensors++;
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	73bb      	strb	r3, [r7, #14]

		sensors_votes[8] += THIRD_VOTE;       ///
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3308      	adds	r3, #8
 8006c76:	f993 3000 	ldrsb.w	r3, [r3]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	b252      	sxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]

		sensors_votes[9] += SECOND_VOTE;       ///
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	3309      	adds	r3, #9
 8006c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	3306      	adds	r3, #6
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	3309      	adds	r3, #9
 8006c9a:	b252      	sxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
		sensors_votes[22] += SECOND_VOTE;       ///
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	3316      	adds	r3, #22
 8006ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	3306      	adds	r3, #6
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	3316      	adds	r3, #22
 8006cb0:	b252      	sxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]

		sensors_votes[10] += FIRST_VOTE;       ///
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	330a      	adds	r3, #10
 8006cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	330a      	adds	r3, #10
 8006cc6:	b252      	sxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
		sensors_votes[23] += FIRST_VOTE;       /// center line
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	3317      	adds	r3, #23
 8006cce:	f993 3000 	ldrsb.w	r3, [r3]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	3307      	adds	r3, #7
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	3317      	adds	r3, #23
 8006cdc:	b252      	sxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
		sensors_votes[30] += FIRST_VOTE;       ///
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	331e      	adds	r3, #30
 8006ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	3307      	adds	r3, #7
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	331e      	adds	r3, #30
 8006cf2:	b252      	sxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

		sensors_votes[11] += SECOND_VOTE;       ///
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	330b      	adds	r3, #11
 8006cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	3306      	adds	r3, #6
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	330b      	adds	r3, #11
 8006d08:	b252      	sxtb	r2, r2
 8006d0a:	701a      	strb	r2, [r3, #0]
		sensors_votes[24] += SECOND_VOTE;       ///
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3318      	adds	r3, #24
 8006d10:	f993 3000 	ldrsb.w	r3, [r3]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	3306      	adds	r3, #6
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	b252      	sxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 7
	if(sensorsOutput & 0x80){
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d044      	beq.n	8006db6 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x65a>
		number_of_active_sensors++;
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	73bb      	strb	r3, [r7, #14]

		sensors_votes[10] += THIRD_VOTE;       ///
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	330a      	adds	r3, #10
 8006d36:	f993 3000 	ldrsb.w	r3, [r3]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	330a      	adds	r3, #10
 8006d44:	b252      	sxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]

		sensors_votes[11] += SECOND_VOTE;      ///
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	330b      	adds	r3, #11
 8006d4c:	f993 3000 	ldrsb.w	r3, [r3]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	3306      	adds	r3, #6
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	330b      	adds	r3, #11
 8006d5a:	b252      	sxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
		sensors_votes[24] += SECOND_VOTE;      ///
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3318      	adds	r3, #24
 8006d62:	f993 3000 	ldrsb.w	r3, [r3]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	3306      	adds	r3, #6
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	3318      	adds	r3, #24
 8006d70:	b252      	sxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]

		sensors_votes[12] += FIRST_VOTE;       ///
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	f993 3000 	ldrsb.w	r3, [r3]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	3307      	adds	r3, #7
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	b252      	sxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
		sensors_votes[25] += FIRST_VOTE;       /// center line
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	3319      	adds	r3, #25
 8006d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	3307      	adds	r3, #7
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	3319      	adds	r3, #25
 8006d9c:	b252      	sxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]
		sensors_votes[31] += FIRST_VOTE;       ///
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	331f      	adds	r3, #31
 8006da4:	f993 3000 	ldrsb.w	r3, [r3]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	3307      	adds	r3, #7
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	331f      	adds	r3, #31
 8006db2:	b252      	sxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
	}

	return 0;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <_ZN13LineDetectionC1ERKNS_19LineDetectionConfigE>:
 */

#include "line_detection.h"


LineDetection::LineDetection(const LineDetectionConfig &config)
 8006dc0:	b4b0      	push	{r4, r5, r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
    : configData(config) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2219      	movs	r2, #25
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2246      	movs	r2, #70	; 0x46
 8006dd4:	705a      	strb	r2, [r3, #1]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	1d1c      	adds	r4, r3, #4
 8006ddc:	4615      	mov	r5, r2
 8006dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006dea:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bcb0      	pop	{r4, r5, r7}
 8006df8:	4770      	bx	lr

08006dfa <_ZN13LineDetection21resetFiltersToDefaultEv>:

void LineDetection::config() {
    // Initialization code as in Line_Sensors_Init(void)
}
void LineDetection::resetFiltersToDefault(){
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
	isWhiteFilter = DEFAULT_IS_WHITE_FILTER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2219      	movs	r2, #25
 8006e06:	701a      	strb	r2, [r3, #0]
	isBlackFilter = DEFAULT_IS_BLACK_FILTER;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2246      	movs	r2, #70	; 0x46
 8006e0c:	705a      	strb	r2, [r3, #1]
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <_ZN13LineDetection7readAllEPh>:

void LineDetection::readAll(uint8_t values[LINE_SENSORS_NUMBER]) {
 8006e1a:	b590      	push	{r4, r7, lr}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]

	///Read Front Values
	for(uint8_t i = 0 ; i < LINE_FRONT_SENSORS_NUMBER;i++){
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]
 8006e28:	e013      	b.n	8006e52 <_ZN13LineDetection7readAllEPh+0x38>
		uint32_t channel = configData.frontChannels[i];
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	60fb      	str	r3, [r7, #12]
		values[i] = selectAndRead(configData.hadcFront,channel);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6859      	ldr	r1, [r3, #4]
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	18d4      	adds	r4, r2, r3
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f8e4 	bl	8007010 <_ZN13LineDetection13selectAndReadEP17ADC_HandleTypeDefm>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0 ; i < LINE_FRONT_SENSORS_NUMBER;i++){
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	75fb      	strb	r3, [r7, #23]
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	d9e8      	bls.n	8006e2a <_ZN13LineDetection7readAllEPh+0x10>
	}
	///Read Back Values
	for(uint8_t i = 0 ; i < LINE_BACK_SENSORS__NUMBER; i++){
 8006e58:	2300      	movs	r3, #0
 8006e5a:	75bb      	strb	r3, [r7, #22]
 8006e5c:	e014      	b.n	8006e88 <_ZN13LineDetection7readAllEPh+0x6e>
		uint32_t channel = configData.frontChannels[i];
 8006e5e:	7dbb      	ldrb	r3, [r7, #22]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	613b      	str	r3, [r7, #16]
		values[i + LINE_FRONT_SENSORS_NUMBER] = selectAndRead(configData.hadcBack,channel);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a19      	ldr	r1, [r3, #32]
 8006e6e:	7dbb      	ldrb	r3, [r7, #22]
 8006e70:	3306      	adds	r3, #6
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	18d4      	adds	r4, r2, r3
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f8c9 	bl	8007010 <_ZN13LineDetection13selectAndReadEP17ADC_HandleTypeDefm>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0 ; i < LINE_BACK_SENSORS__NUMBER; i++){
 8006e82:	7dbb      	ldrb	r3, [r7, #22]
 8006e84:	3301      	adds	r3, #1
 8006e86:	75bb      	strb	r3, [r7, #22]
 8006e88:	7dbb      	ldrb	r3, [r7, #22]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d9e7      	bls.n	8006e5e <_ZN13LineDetection7readAllEPh+0x44>
	}
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}

08006e98 <_ZN13LineDetection28readAndConvertToLinePositionEv>:

LinePosition LineDetection::readAndConvertToLinePosition() {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
    uint8_t sensorsOutput[LINE_SENSORS_NUMBER];

    // Read sensors' output
    readAll(sensorsOutput);
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff ffb7 	bl	8006e1a <_ZN13LineDetection7readAllEPh>

    // Check if the sensors see the white line
    // Grouped for FrontLeft, FrontRight, BackLeft, and BackRight respectively
    bool isWhite[4];
    isWhite[0] = sensorOutputToBool(sensorsOutput[0]) ||
 8006eac:	7c3b      	ldrb	r3, [r7, #16]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f8dd 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006eb6:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[1]) ||
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10f      	bne.n	8006edc <_ZN13LineDetection28readAndConvertToLinePositionEv+0x44>
 8006ebc:	7c7b      	ldrb	r3, [r7, #17]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f8d5 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006ec6:	4603      	mov	r3, r0
    isWhite[0] = sensorOutputToBool(sensorsOutput[0]) ||
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <_ZN13LineDetection28readAndConvertToLinePositionEv+0x44>
                 sensorOutputToBool(sensorsOutput[2]);
 8006ecc:	7cbb      	ldrb	r3, [r7, #18]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8cd 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006ed6:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[1]) ||
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x48>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x4a>
 8006ee0:	2300      	movs	r3, #0
    isWhite[0] = sensorOutputToBool(sensorsOutput[0]) ||
 8006ee2:	733b      	strb	r3, [r7, #12]

    isWhite[1] = sensorOutputToBool(sensorsOutput[3]) ||
 8006ee4:	7cfb      	ldrb	r3, [r7, #19]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f8c1 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006eee:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[4]) ||
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10f      	bne.n	8006f14 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x7c>
 8006ef4:	7d3b      	ldrb	r3, [r7, #20]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f8b9 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006efe:	4603      	mov	r3, r0
    isWhite[1] = sensorOutputToBool(sensorsOutput[3]) ||
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d107      	bne.n	8006f14 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x7c>
                 sensorOutputToBool(sensorsOutput[5]);
 8006f04:	7d7b      	ldrb	r3, [r7, #21]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f8b1 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006f0e:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[4]) ||
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x80>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <_ZN13LineDetection28readAndConvertToLinePositionEv+0x82>
 8006f18:	2300      	movs	r3, #0
    isWhite[1] = sensorOutputToBool(sensorsOutput[3]) ||
 8006f1a:	737b      	strb	r3, [r7, #13]

    isWhite[2] = sensorOutputToBool(sensorsOutput[6]);
 8006f1c:	7dbb      	ldrb	r3, [r7, #22]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f8a5 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73bb      	strb	r3, [r7, #14]
    isWhite[3] = sensorOutputToBool(sensorsOutput[7]);
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f89e 	bl	8007070 <_ZN13LineDetection18sensorOutputToBoolEm>
 8006f34:	4603      	mov	r3, r0
 8006f36:	73fb      	strb	r3, [r7, #15]

    LinePosition output;
 8006f38:	f107 0308 	add.w	r3, r7, #8
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe ffa4 	bl	8005e8a <_ZN12LinePositionC1Ev>

    // Determine robot's position based on the sensors' reading
    if (isWhite[0] && isWhite[1]) {
 8006f42:	7b3b      	ldrb	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d009      	beq.n	8006f5c <_ZN13LineDetection28readAndConvertToLinePositionEv+0xc4>
 8006f48:	7b7b      	ldrb	r3, [r7, #13]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d006      	beq.n	8006f5c <_ZN13LineDetection28readAndConvertToLinePositionEv+0xc4>
        output.setLinePosition(LinePositionType::Front);
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	2101      	movs	r1, #1
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe ffa6 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006f5a:	e054      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[2] && isWhite[3]) {
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xde>
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xde>
        output.setLinePosition(LinePositionType::Back);
 8006f68:	f107 0308 	add.w	r3, r7, #8
 8006f6c:	2104      	movs	r1, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe ff99 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006f74:	e047      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[1] && isWhite[2]) {
 8006f76:	7b7b      	ldrb	r3, [r7, #13]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xf8>
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d006      	beq.n	8006f90 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xf8>
        output.setLinePosition(LinePositionType::Left);
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	2106      	movs	r1, #6
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe ff8c 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006f8e:	e03a      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[0] && isWhite[3]) {
 8006f90:	7b3b      	ldrb	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <_ZN13LineDetection28readAndConvertToLinePositionEv+0x112>
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d006      	beq.n	8006faa <_ZN13LineDetection28readAndConvertToLinePositionEv+0x112>
        output.setLinePosition(LinePositionType::Right);
 8006f9c:	f107 0308 	add.w	r3, r7, #8
 8006fa0:	2107      	movs	r1, #7
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe ff7f 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006fa8:	e02d      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[0]) {
 8006faa:	7b3b      	ldrb	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d006      	beq.n	8006fbe <_ZN13LineDetection28readAndConvertToLinePositionEv+0x126>
        output.setLinePosition(LinePositionType::FrontLeft);
 8006fb0:	f107 0308 	add.w	r3, r7, #8
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe ff75 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006fbc:	e023      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[1]) {
 8006fbe:	7b7b      	ldrb	r3, [r7, #13]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x13a>
        output.setLinePosition(LinePositionType::FrontRight);
 8006fc4:	f107 0308 	add.w	r3, r7, #8
 8006fc8:	2102      	movs	r1, #2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe ff6b 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006fd0:	e019      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[2]) {
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x14e>
        output.setLinePosition(LinePositionType::BackLeft);
 8006fd8:	f107 0308 	add.w	r3, r7, #8
 8006fdc:	2103      	movs	r1, #3
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe ff61 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006fe4:	e00f      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[3]) {
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <_ZN13LineDetection28readAndConvertToLinePositionEv+0x162>
        output.setLinePosition(LinePositionType::BackRight);
 8006fec:	f107 0308 	add.w	r3, r7, #8
 8006ff0:	2105      	movs	r1, #5
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe ff57 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8006ff8:	e005      	b.n	8007006 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else {
        output.setLinePosition(LinePositionType::None);
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	2108      	movs	r1, #8
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe ff50 	bl	8005ea6 <_ZN12LinePosition15setLinePositionE16LinePositionType>
    }

    return output;
 8007006:	68bb      	ldr	r3, [r7, #8]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <_ZN13LineDetection13selectAndReadEP17ADC_HandleTypeDefm>:


uint8_t LineDetection:: selectAndRead(ADC_HandleTypeDef *hadc, uint32_t ADC_CHANNEL) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b08a      	sub	sp, #40	; 0x28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 800701c:	f107 0314 	add.w	r3, r7, #20
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	609a      	str	r2, [r3, #8]
 8007028:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	617b      	str	r3, [r7, #20]
	  sConfig.Rank = 1;
 800702e:	2301      	movs	r3, #1
 8007030:	61bb      	str	r3, [r7, #24]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	4619      	mov	r1, r3
 800703c:	68b8      	ldr	r0, [r7, #8]
 800703e:	f7fb f845 	bl	80020cc <HAL_ADC_ConfigChannel>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
	  {
//		Error_Handler();
	  }

	  HAL_ADC_Start(hadc);
 8007046:	68b8      	ldr	r0, [r7, #8]
 8007048:	f7fa fea2 	bl	8001d90 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(hadc, 1000);
 800704c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007050:	68b8      	ldr	r0, [r7, #8]
 8007052:	f7fa ffa2 	bl	8001f9a <HAL_ADC_PollForConversion>
	  uint32_t value = HAL_ADC_GetValue(hadc);
 8007056:	68b8      	ldr	r0, [r7, #8]
 8007058:	f7fb f82a 	bl	80020b0 <HAL_ADC_GetValue>
 800705c:	6278      	str	r0, [r7, #36]	; 0x24
	  HAL_ADC_Stop(hadc);
 800705e:	68b8      	ldr	r0, [r7, #8]
 8007060:	f7fa ff68 	bl	8001f34 <HAL_ADC_Stop>
	  return value;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	b2db      	uxtb	r3, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	3728      	adds	r7, #40	; 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <_ZN13LineDetection18sensorOutputToBoolEm>:

bool LineDetection::sensorOutputToBool(uint32_t sensor_output) {
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
	if(sensor_output <= isWhiteFilter)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4293      	cmp	r3, r2
 8007084:	d801      	bhi.n	800708a <_ZN13LineDetection18sensorOutputToBoolEm+0x1a>
		return true;
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <_ZN13LineDetection18sensorOutputToBoolEm+0x1c>
	return false;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <_ZN5MotorC1EP13USART_TypeDef>:

#include "motor_driver.h"

#include "stm32f4xx_hal_uart.h"

Motor::Motor(USART_TypeDef * UARTX):
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
leftPower(0),
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
rightPower(0)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
{
	h_uart.Instance = UARTX;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]

}
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <_ZN5Motor4stopEv>:
	h_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	h_uart.Init.OverSampling = UART_OVERSAMPLING_16;
	HAL_HalfDuplex_Init(&h_uart);
	stop();
}
void Motor::stop(){
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
	changePower(0, 0);
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f804 	bl	80070e0 <_ZN5Motor11changePowerEaa>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <_ZN5Motor11changePowerEaa>:
void Motor::changePower(int8_t leftPower, int8_t rightPower)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
 80070ec:	4613      	mov	r3, r2
 80070ee:	70bb      	strb	r3, [r7, #2]
	leftPower = boundedPowerValue(leftPower);
 80070f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f8b6 	bl	8007268 <_ZN5Motor17boundedPowerValueEa>
 80070fc:	4603      	mov	r3, r0
 80070fe:	70fb      	strb	r3, [r7, #3]
	rightPower = boundedPowerValue(rightPower);
 8007100:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f8ae 	bl	8007268 <_ZN5Motor17boundedPowerValueEa>
 800710c:	4603      	mov	r3, r0
 800710e:	70bb      	strb	r3, [r7, #2]


	if(this->leftPower != leftPower || this->rightPower != rightPower){
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8007116:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800711a:	429a      	cmp	r2, r3
 800711c:	d106      	bne.n	800712c <_ZN5Motor11changePowerEaa+0x4c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8007124:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8007128:	429a      	cmp	r2, r3
 800712a:	d021      	beq.n	8007170 <_ZN5Motor11changePowerEaa+0x90>
		this->leftPower = leftPower;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	78fa      	ldrb	r2, [r7, #3]
 8007130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		this->rightPower = rightPower;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	78ba      	ldrb	r2, [r7, #2]
 8007138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		uint8_t motor_input_left_right[2];
		motor_input_left_right[0] = power_to_motor_input(leftPower, false);
 800713c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007140:	2200      	movs	r2, #0
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f817 	bl	8007178 <_ZN5Motor20power_to_motor_inputEab>
 800714a:	4603      	mov	r3, r0
 800714c:	733b      	strb	r3, [r7, #12]
		motor_input_left_right[1] = power_to_motor_input(rightPower, true);
 800714e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007152:	2201      	movs	r2, #1
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f80e 	bl	8007178 <_ZN5Motor20power_to_motor_inputEab>
 800715c:	4603      	mov	r3, r0
 800715e:	737b      	strb	r3, [r7, #13]

		//Transmit Three Times
		HAL_UART_Transmit(&h_uart, motor_input_left_right, 2, 400) != HAL_OK;
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f107 010c 	add.w	r1, r7, #12
 8007166:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800716a:	2202      	movs	r2, #2
 800716c:	f7fc ff74 	bl	8004058 <HAL_UART_Transmit>
	}
}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZN5Motor20power_to_motor_inputEab>:


uint8_t Motor::power_to_motor_input(int8_t power, bool is_right_motor)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	460b      	mov	r3, r1
 8007182:	72fb      	strb	r3, [r7, #11]
 8007184:	4613      	mov	r3, r2
 8007186:	72bb      	strb	r3, [r7, #10]
	float convert;
	if(is_right_motor){
 8007188:	7abb      	ldrb	r3, [r7, #10]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d036      	beq.n	80071fc <_ZN5Motor20power_to_motor_inputEab+0x84>
		if(power <= 0){
 800718e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007192:	2b00      	cmp	r3, #0
 8007194:	dc19      	bgt.n	80071ca <_ZN5Motor20power_to_motor_inputEab+0x52>
			convert = 100 + power;
 8007196:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800719a:	3364      	adds	r3, #100	; 0x64
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071a4:	edc7 7a05 	vstr	s15, [r7, #20]
			convert = convert * 64/MAX_POWER + 128;
 80071a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80071ac:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800724c <_ZN5Motor20power_to_motor_inputEab+0xd4>
 80071b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071b4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007250 <_ZN5Motor20power_to_motor_inputEab+0xd8>
 80071b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071bc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007254 <_ZN5Motor20power_to_motor_inputEab+0xdc>
 80071c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071c4:	edc7 7a05 	vstr	s15, [r7, #20]
 80071c8:	e031      	b.n	800722e <_ZN5Motor20power_to_motor_inputEab+0xb6>
		}else{
			convert = power;
 80071ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071d6:	edc7 7a05 	vstr	s15, [r7, #20]
			convert = convert * 63/MAX_POWER + 192;
 80071da:	edd7 7a05 	vldr	s15, [r7, #20]
 80071de:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007258 <_ZN5Motor20power_to_motor_inputEab+0xe0>
 80071e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071e6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8007250 <_ZN5Motor20power_to_motor_inputEab+0xd8>
 80071ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800725c <_ZN5Motor20power_to_motor_inputEab+0xe4>
 80071f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071f6:	edc7 7a05 	vstr	s15, [r7, #20]
 80071fa:	e018      	b.n	800722e <_ZN5Motor20power_to_motor_inputEab+0xb6>
		}
	}else{
		convert = MAX_POWER + power;
 80071fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007200:	3364      	adds	r3, #100	; 0x64
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800720a:	edc7 7a05 	vstr	s15, [r7, #20]
		convert = convert * 126/200 + 1;
 800720e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007212:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8007260 <_ZN5Motor20power_to_motor_inputEab+0xe8>
 8007216:	ee27 7a87 	vmul.f32	s14, s15, s14
 800721a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8007264 <_ZN5Motor20power_to_motor_inputEab+0xec>
 800721e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800722a:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return (uint8_t) convert;
 800722e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007236:	edc7 7a01 	vstr	s15, [r7, #4]
 800723a:	793b      	ldrb	r3, [r7, #4]
 800723c:	b2db      	uxtb	r3, r3
}
 800723e:	4618      	mov	r0, r3
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	42800000 	.word	0x42800000
 8007250:	42c80000 	.word	0x42c80000
 8007254:	43000000 	.word	0x43000000
 8007258:	427c0000 	.word	0x427c0000
 800725c:	43400000 	.word	0x43400000
 8007260:	42fc0000 	.word	0x42fc0000
 8007264:	43480000 	.word	0x43480000

08007268 <_ZN5Motor17boundedPowerValueEa>:
uint8_t Motor::boundedPowerValue(int8_t power){
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
	if(power > MAX_POWER)
 8007274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007278:	2b64      	cmp	r3, #100	; 0x64
 800727a:	dd01      	ble.n	8007280 <_ZN5Motor17boundedPowerValueEa+0x18>
		return MAX_POWER;
 800727c:	2364      	movs	r3, #100	; 0x64
 800727e:	e007      	b.n	8007290 <_ZN5Motor17boundedPowerValueEa+0x28>
	if(power < MAX_REVERSE_POWER){
 8007280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007284:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8007288:	da01      	bge.n	800728e <_ZN5Motor17boundedPowerValueEa+0x26>
		return MAX_REVERSE_POWER;
 800728a:	239c      	movs	r3, #156	; 0x9c
 800728c:	e000      	b.n	8007290 <_ZN5Motor17boundedPowerValueEa+0x28>
	}
	return power;
 800728e:	78fb      	ldrb	r3, [r7, #3]
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <_ZN7TrimpotC1EP17ADC_HandleTypeDefm>:
 *      Author: BRG
 */

#include "trimpot_driver.h"

Trimpot::Trimpot(ADC_HandleTypeDef *hadc,uint32_t ADC_CHANNEL):
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
hadc(hadc),
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	601a      	str	r2, [r3, #0]
ADC_CHANNEL(ADC_CHANNEL),
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	605a      	str	r2, [r3, #4]
data(0)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	811a      	strh	r2, [r3, #8]
{

}
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <_ZN7Trimpot6configEv>:

void Trimpot::config(){
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]

}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <_ZN7Trimpot4readEv>:
uint16_t Trimpot::read()
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80072f8:	2301      	movs	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80072fc:	2301      	movs	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f107 0208 	add.w	r2, r7, #8
 8007308:	4611      	mov	r1, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f7fa fede 	bl	80020cc <HAL_ADC_ConfigChannel>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
	{

	}
	HAL_ADC_Start(hadc);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fa fd39 	bl	8001d90 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007326:	4618      	mov	r0, r3
 8007328:	f7fa fe37 	bl	8001f9a <HAL_ADC_PollForConversion>
	this->data = HAL_ADC_GetValue(hadc);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f7fa febd 	bl	80020b0 <HAL_ADC_GetValue>
 8007336:	4603      	mov	r3, r0
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(hadc);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fa fdf6 	bl	8001f34 <HAL_ADC_Stop>

	if(data <= MIN_DATA_VALUE){
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	891b      	ldrh	r3, [r3, #8]
 800734c:	2b28      	cmp	r3, #40	; 0x28
 800734e:	d803      	bhi.n	8007358 <_ZN7Trimpot4readEv+0x7c>
		data = 0;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	811a      	strh	r2, [r3, #8]
 8007356:	e010      	b.n	800737a <_ZN7Trimpot4readEv+0x9e>
	}else if(data >= MAX_DATA_VALUE + MIN_DATA_VALUE){
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	891b      	ldrh	r3, [r3, #8]
 800735c:	f640 72c7 	movw	r2, #4039	; 0xfc7
 8007360:	4293      	cmp	r3, r2
 8007362:	d904      	bls.n	800736e <_ZN7Trimpot4readEv+0x92>
		data = MAX_DATA_VALUE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800736a:	811a      	strh	r2, [r3, #8]
 800736c:	e005      	b.n	800737a <_ZN7Trimpot4readEv+0x9e>
	}else{
		data -= MIN_DATA_VALUE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	891b      	ldrh	r3, [r3, #8]
 8007372:	3b28      	subs	r3, #40	; 0x28
 8007374:	b29a      	uxth	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	811a      	strh	r2, [r3, #8]
	}
	return data;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	891b      	ldrh	r3, [r3, #8]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <_ZNK7Trimpot7getDataEv>:
uint16_t Trimpot::getData()const{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
	return data;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	891b      	ldrh	r3, [r3, #8]
}
 8007392:	4618      	mov	r0, r3
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <_ZNK7Trimpot7getDataEff>:

float Trimpot::getData(float min, float max) const
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80073ac:	edc7 0a01 	vstr	s1, [r7, #4]
	float diff = max - min;
 80073b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80073b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80073b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073bc:	edc7 7a05 	vstr	s15, [r7, #20]
	diff = diff / MAX_DATA_VALUE * data;
 80073c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80073c4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80073fc <_ZNK7Trimpot7getDataEff+0x5c>
 80073c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	891b      	ldrh	r3, [r3, #8]
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073dc:	edc7 7a05 	vstr	s15, [r7, #20]
	return min + diff;
 80073e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80073e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80073e8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80073ec:	eeb0 0a67 	vmov.f32	s0, s15
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	457a0000 	.word	0x457a0000

08007400 <__cvt>:
 8007400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007404:	ec55 4b10 	vmov	r4, r5, d0
 8007408:	2d00      	cmp	r5, #0
 800740a:	460e      	mov	r6, r1
 800740c:	4619      	mov	r1, r3
 800740e:	462b      	mov	r3, r5
 8007410:	bfbb      	ittet	lt
 8007412:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007416:	461d      	movlt	r5, r3
 8007418:	2300      	movge	r3, #0
 800741a:	232d      	movlt	r3, #45	; 0x2d
 800741c:	700b      	strb	r3, [r1, #0]
 800741e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007420:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007424:	4691      	mov	r9, r2
 8007426:	f023 0820 	bic.w	r8, r3, #32
 800742a:	bfbc      	itt	lt
 800742c:	4622      	movlt	r2, r4
 800742e:	4614      	movlt	r4, r2
 8007430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007434:	d005      	beq.n	8007442 <__cvt+0x42>
 8007436:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800743a:	d100      	bne.n	800743e <__cvt+0x3e>
 800743c:	3601      	adds	r6, #1
 800743e:	2102      	movs	r1, #2
 8007440:	e000      	b.n	8007444 <__cvt+0x44>
 8007442:	2103      	movs	r1, #3
 8007444:	ab03      	add	r3, sp, #12
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	ab02      	add	r3, sp, #8
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	ec45 4b10 	vmov	d0, r4, r5
 8007450:	4653      	mov	r3, sl
 8007452:	4632      	mov	r2, r6
 8007454:	f000 fe88 	bl	8008168 <_dtoa_r>
 8007458:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800745c:	4607      	mov	r7, r0
 800745e:	d102      	bne.n	8007466 <__cvt+0x66>
 8007460:	f019 0f01 	tst.w	r9, #1
 8007464:	d022      	beq.n	80074ac <__cvt+0xac>
 8007466:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800746a:	eb07 0906 	add.w	r9, r7, r6
 800746e:	d110      	bne.n	8007492 <__cvt+0x92>
 8007470:	783b      	ldrb	r3, [r7, #0]
 8007472:	2b30      	cmp	r3, #48	; 0x30
 8007474:	d10a      	bne.n	800748c <__cvt+0x8c>
 8007476:	2200      	movs	r2, #0
 8007478:	2300      	movs	r3, #0
 800747a:	4620      	mov	r0, r4
 800747c:	4629      	mov	r1, r5
 800747e:	f7f9 fb43 	bl	8000b08 <__aeabi_dcmpeq>
 8007482:	b918      	cbnz	r0, 800748c <__cvt+0x8c>
 8007484:	f1c6 0601 	rsb	r6, r6, #1
 8007488:	f8ca 6000 	str.w	r6, [sl]
 800748c:	f8da 3000 	ldr.w	r3, [sl]
 8007490:	4499      	add	r9, r3
 8007492:	2200      	movs	r2, #0
 8007494:	2300      	movs	r3, #0
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f9 fb35 	bl	8000b08 <__aeabi_dcmpeq>
 800749e:	b108      	cbz	r0, 80074a4 <__cvt+0xa4>
 80074a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80074a4:	2230      	movs	r2, #48	; 0x30
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	454b      	cmp	r3, r9
 80074aa:	d307      	bcc.n	80074bc <__cvt+0xbc>
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074b0:	1bdb      	subs	r3, r3, r7
 80074b2:	4638      	mov	r0, r7
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	b004      	add	sp, #16
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	1c59      	adds	r1, r3, #1
 80074be:	9103      	str	r1, [sp, #12]
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	e7f0      	b.n	80074a6 <__cvt+0xa6>

080074c4 <__exponent>:
 80074c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074c6:	4603      	mov	r3, r0
 80074c8:	2900      	cmp	r1, #0
 80074ca:	bfb8      	it	lt
 80074cc:	4249      	neglt	r1, r1
 80074ce:	f803 2b02 	strb.w	r2, [r3], #2
 80074d2:	bfb4      	ite	lt
 80074d4:	222d      	movlt	r2, #45	; 0x2d
 80074d6:	222b      	movge	r2, #43	; 0x2b
 80074d8:	2909      	cmp	r1, #9
 80074da:	7042      	strb	r2, [r0, #1]
 80074dc:	dd2a      	ble.n	8007534 <__exponent+0x70>
 80074de:	f10d 0207 	add.w	r2, sp, #7
 80074e2:	4617      	mov	r7, r2
 80074e4:	260a      	movs	r6, #10
 80074e6:	4694      	mov	ip, r2
 80074e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80074ec:	fb06 1415 	mls	r4, r6, r5, r1
 80074f0:	3430      	adds	r4, #48	; 0x30
 80074f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074f6:	460c      	mov	r4, r1
 80074f8:	2c63      	cmp	r4, #99	; 0x63
 80074fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80074fe:	4629      	mov	r1, r5
 8007500:	dcf1      	bgt.n	80074e6 <__exponent+0x22>
 8007502:	3130      	adds	r1, #48	; 0x30
 8007504:	f1ac 0402 	sub.w	r4, ip, #2
 8007508:	f802 1c01 	strb.w	r1, [r2, #-1]
 800750c:	1c41      	adds	r1, r0, #1
 800750e:	4622      	mov	r2, r4
 8007510:	42ba      	cmp	r2, r7
 8007512:	d30a      	bcc.n	800752a <__exponent+0x66>
 8007514:	f10d 0209 	add.w	r2, sp, #9
 8007518:	eba2 020c 	sub.w	r2, r2, ip
 800751c:	42bc      	cmp	r4, r7
 800751e:	bf88      	it	hi
 8007520:	2200      	movhi	r2, #0
 8007522:	4413      	add	r3, r2
 8007524:	1a18      	subs	r0, r3, r0
 8007526:	b003      	add	sp, #12
 8007528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800752e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007532:	e7ed      	b.n	8007510 <__exponent+0x4c>
 8007534:	2330      	movs	r3, #48	; 0x30
 8007536:	3130      	adds	r1, #48	; 0x30
 8007538:	7083      	strb	r3, [r0, #2]
 800753a:	70c1      	strb	r1, [r0, #3]
 800753c:	1d03      	adds	r3, r0, #4
 800753e:	e7f1      	b.n	8007524 <__exponent+0x60>

08007540 <_printf_float>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ed2d 8b02 	vpush	{d8}
 8007548:	b08d      	sub	sp, #52	; 0x34
 800754a:	460c      	mov	r4, r1
 800754c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007550:	4616      	mov	r6, r2
 8007552:	461f      	mov	r7, r3
 8007554:	4605      	mov	r5, r0
 8007556:	f000 fcfb 	bl	8007f50 <_localeconv_r>
 800755a:	f8d0 a000 	ldr.w	sl, [r0]
 800755e:	4650      	mov	r0, sl
 8007560:	f7f8 fea6 	bl	80002b0 <strlen>
 8007564:	2300      	movs	r3, #0
 8007566:	930a      	str	r3, [sp, #40]	; 0x28
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	9305      	str	r3, [sp, #20]
 800756c:	f8d8 3000 	ldr.w	r3, [r8]
 8007570:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007574:	3307      	adds	r3, #7
 8007576:	f023 0307 	bic.w	r3, r3, #7
 800757a:	f103 0208 	add.w	r2, r3, #8
 800757e:	f8c8 2000 	str.w	r2, [r8]
 8007582:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007586:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800758a:	9307      	str	r3, [sp, #28]
 800758c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007590:	ee08 0a10 	vmov	s16, r0
 8007594:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800759c:	4b9e      	ldr	r3, [pc, #632]	; (8007818 <_printf_float+0x2d8>)
 800759e:	f04f 32ff 	mov.w	r2, #4294967295
 80075a2:	f7f9 fae3 	bl	8000b6c <__aeabi_dcmpun>
 80075a6:	bb88      	cbnz	r0, 800760c <_printf_float+0xcc>
 80075a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ac:	4b9a      	ldr	r3, [pc, #616]	; (8007818 <_printf_float+0x2d8>)
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295
 80075b2:	f7f9 fabd 	bl	8000b30 <__aeabi_dcmple>
 80075b6:	bb48      	cbnz	r0, 800760c <_printf_float+0xcc>
 80075b8:	2200      	movs	r2, #0
 80075ba:	2300      	movs	r3, #0
 80075bc:	4640      	mov	r0, r8
 80075be:	4649      	mov	r1, r9
 80075c0:	f7f9 faac 	bl	8000b1c <__aeabi_dcmplt>
 80075c4:	b110      	cbz	r0, 80075cc <_printf_float+0x8c>
 80075c6:	232d      	movs	r3, #45	; 0x2d
 80075c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075cc:	4a93      	ldr	r2, [pc, #588]	; (800781c <_printf_float+0x2dc>)
 80075ce:	4b94      	ldr	r3, [pc, #592]	; (8007820 <_printf_float+0x2e0>)
 80075d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075d4:	bf94      	ite	ls
 80075d6:	4690      	movls	r8, r2
 80075d8:	4698      	movhi	r8, r3
 80075da:	2303      	movs	r3, #3
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	9b05      	ldr	r3, [sp, #20]
 80075e0:	f023 0304 	bic.w	r3, r3, #4
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	f04f 0900 	mov.w	r9, #0
 80075ea:	9700      	str	r7, [sp, #0]
 80075ec:	4633      	mov	r3, r6
 80075ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f9da 	bl	80079ac <_printf_common>
 80075f8:	3001      	adds	r0, #1
 80075fa:	f040 8090 	bne.w	800771e <_printf_float+0x1de>
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	b00d      	add	sp, #52	; 0x34
 8007604:	ecbd 8b02 	vpop	{d8}
 8007608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	4642      	mov	r2, r8
 800760e:	464b      	mov	r3, r9
 8007610:	4640      	mov	r0, r8
 8007612:	4649      	mov	r1, r9
 8007614:	f7f9 faaa 	bl	8000b6c <__aeabi_dcmpun>
 8007618:	b140      	cbz	r0, 800762c <_printf_float+0xec>
 800761a:	464b      	mov	r3, r9
 800761c:	2b00      	cmp	r3, #0
 800761e:	bfbc      	itt	lt
 8007620:	232d      	movlt	r3, #45	; 0x2d
 8007622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007626:	4a7f      	ldr	r2, [pc, #508]	; (8007824 <_printf_float+0x2e4>)
 8007628:	4b7f      	ldr	r3, [pc, #508]	; (8007828 <_printf_float+0x2e8>)
 800762a:	e7d1      	b.n	80075d0 <_printf_float+0x90>
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007632:	9206      	str	r2, [sp, #24]
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	d13f      	bne.n	80076b8 <_printf_float+0x178>
 8007638:	2306      	movs	r3, #6
 800763a:	6063      	str	r3, [r4, #4]
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	6861      	ldr	r1, [r4, #4]
 8007640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007644:	2300      	movs	r3, #0
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	ab0a      	add	r3, sp, #40	; 0x28
 800764a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800764e:	ab09      	add	r3, sp, #36	; 0x24
 8007650:	ec49 8b10 	vmov	d0, r8, r9
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800765c:	4628      	mov	r0, r5
 800765e:	f7ff fecf 	bl	8007400 <__cvt>
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007666:	2b47      	cmp	r3, #71	; 0x47
 8007668:	4680      	mov	r8, r0
 800766a:	d108      	bne.n	800767e <_printf_float+0x13e>
 800766c:	1cc8      	adds	r0, r1, #3
 800766e:	db02      	blt.n	8007676 <_printf_float+0x136>
 8007670:	6863      	ldr	r3, [r4, #4]
 8007672:	4299      	cmp	r1, r3
 8007674:	dd41      	ble.n	80076fa <_printf_float+0x1ba>
 8007676:	f1ab 0302 	sub.w	r3, fp, #2
 800767a:	fa5f fb83 	uxtb.w	fp, r3
 800767e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007682:	d820      	bhi.n	80076c6 <_printf_float+0x186>
 8007684:	3901      	subs	r1, #1
 8007686:	465a      	mov	r2, fp
 8007688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800768c:	9109      	str	r1, [sp, #36]	; 0x24
 800768e:	f7ff ff19 	bl	80074c4 <__exponent>
 8007692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007694:	1813      	adds	r3, r2, r0
 8007696:	2a01      	cmp	r2, #1
 8007698:	4681      	mov	r9, r0
 800769a:	6123      	str	r3, [r4, #16]
 800769c:	dc02      	bgt.n	80076a4 <_printf_float+0x164>
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	07d2      	lsls	r2, r2, #31
 80076a2:	d501      	bpl.n	80076a8 <_printf_float+0x168>
 80076a4:	3301      	adds	r3, #1
 80076a6:	6123      	str	r3, [r4, #16]
 80076a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d09c      	beq.n	80075ea <_printf_float+0xaa>
 80076b0:	232d      	movs	r3, #45	; 0x2d
 80076b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b6:	e798      	b.n	80075ea <_printf_float+0xaa>
 80076b8:	9a06      	ldr	r2, [sp, #24]
 80076ba:	2a47      	cmp	r2, #71	; 0x47
 80076bc:	d1be      	bne.n	800763c <_printf_float+0xfc>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1bc      	bne.n	800763c <_printf_float+0xfc>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e7b9      	b.n	800763a <_printf_float+0xfa>
 80076c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076ca:	d118      	bne.n	80076fe <_printf_float+0x1be>
 80076cc:	2900      	cmp	r1, #0
 80076ce:	6863      	ldr	r3, [r4, #4]
 80076d0:	dd0b      	ble.n	80076ea <_printf_float+0x1aa>
 80076d2:	6121      	str	r1, [r4, #16]
 80076d4:	b913      	cbnz	r3, 80076dc <_printf_float+0x19c>
 80076d6:	6822      	ldr	r2, [r4, #0]
 80076d8:	07d0      	lsls	r0, r2, #31
 80076da:	d502      	bpl.n	80076e2 <_printf_float+0x1a2>
 80076dc:	3301      	adds	r3, #1
 80076de:	440b      	add	r3, r1
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80076e4:	f04f 0900 	mov.w	r9, #0
 80076e8:	e7de      	b.n	80076a8 <_printf_float+0x168>
 80076ea:	b913      	cbnz	r3, 80076f2 <_printf_float+0x1b2>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	07d2      	lsls	r2, r2, #31
 80076f0:	d501      	bpl.n	80076f6 <_printf_float+0x1b6>
 80076f2:	3302      	adds	r3, #2
 80076f4:	e7f4      	b.n	80076e0 <_printf_float+0x1a0>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e7f2      	b.n	80076e0 <_printf_float+0x1a0>
 80076fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	4299      	cmp	r1, r3
 8007702:	db05      	blt.n	8007710 <_printf_float+0x1d0>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	6121      	str	r1, [r4, #16]
 8007708:	07d8      	lsls	r0, r3, #31
 800770a:	d5ea      	bpl.n	80076e2 <_printf_float+0x1a2>
 800770c:	1c4b      	adds	r3, r1, #1
 800770e:	e7e7      	b.n	80076e0 <_printf_float+0x1a0>
 8007710:	2900      	cmp	r1, #0
 8007712:	bfd4      	ite	le
 8007714:	f1c1 0202 	rsble	r2, r1, #2
 8007718:	2201      	movgt	r2, #1
 800771a:	4413      	add	r3, r2
 800771c:	e7e0      	b.n	80076e0 <_printf_float+0x1a0>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	055a      	lsls	r2, r3, #21
 8007722:	d407      	bmi.n	8007734 <_printf_float+0x1f4>
 8007724:	6923      	ldr	r3, [r4, #16]
 8007726:	4642      	mov	r2, r8
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	d12c      	bne.n	800778c <_printf_float+0x24c>
 8007732:	e764      	b.n	80075fe <_printf_float+0xbe>
 8007734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007738:	f240 80e0 	bls.w	80078fc <_printf_float+0x3bc>
 800773c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007740:	2200      	movs	r2, #0
 8007742:	2300      	movs	r3, #0
 8007744:	f7f9 f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 8007748:	2800      	cmp	r0, #0
 800774a:	d034      	beq.n	80077b6 <_printf_float+0x276>
 800774c:	4a37      	ldr	r2, [pc, #220]	; (800782c <_printf_float+0x2ec>)
 800774e:	2301      	movs	r3, #1
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f af51 	beq.w	80075fe <_printf_float+0xbe>
 800775c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007760:	429a      	cmp	r2, r3
 8007762:	db02      	blt.n	800776a <_printf_float+0x22a>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	07d8      	lsls	r0, r3, #31
 8007768:	d510      	bpl.n	800778c <_printf_float+0x24c>
 800776a:	ee18 3a10 	vmov	r3, s16
 800776e:	4652      	mov	r2, sl
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f af41 	beq.w	80075fe <_printf_float+0xbe>
 800777c:	f04f 0800 	mov.w	r8, #0
 8007780:	f104 091a 	add.w	r9, r4, #26
 8007784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007786:	3b01      	subs	r3, #1
 8007788:	4543      	cmp	r3, r8
 800778a:	dc09      	bgt.n	80077a0 <_printf_float+0x260>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	079b      	lsls	r3, r3, #30
 8007790:	f100 8107 	bmi.w	80079a2 <_printf_float+0x462>
 8007794:	68e0      	ldr	r0, [r4, #12]
 8007796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007798:	4298      	cmp	r0, r3
 800779a:	bfb8      	it	lt
 800779c:	4618      	movlt	r0, r3
 800779e:	e730      	b.n	8007602 <_printf_float+0xc2>
 80077a0:	2301      	movs	r3, #1
 80077a2:	464a      	mov	r2, r9
 80077a4:	4631      	mov	r1, r6
 80077a6:	4628      	mov	r0, r5
 80077a8:	47b8      	blx	r7
 80077aa:	3001      	adds	r0, #1
 80077ac:	f43f af27 	beq.w	80075fe <_printf_float+0xbe>
 80077b0:	f108 0801 	add.w	r8, r8, #1
 80077b4:	e7e6      	b.n	8007784 <_printf_float+0x244>
 80077b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dc39      	bgt.n	8007830 <_printf_float+0x2f0>
 80077bc:	4a1b      	ldr	r2, [pc, #108]	; (800782c <_printf_float+0x2ec>)
 80077be:	2301      	movs	r3, #1
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	f43f af19 	beq.w	80075fe <_printf_float+0xbe>
 80077cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d102      	bne.n	80077da <_printf_float+0x29a>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	07d9      	lsls	r1, r3, #31
 80077d8:	d5d8      	bpl.n	800778c <_printf_float+0x24c>
 80077da:	ee18 3a10 	vmov	r3, s16
 80077de:	4652      	mov	r2, sl
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f af09 	beq.w	80075fe <_printf_float+0xbe>
 80077ec:	f04f 0900 	mov.w	r9, #0
 80077f0:	f104 0a1a 	add.w	sl, r4, #26
 80077f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f6:	425b      	negs	r3, r3
 80077f8:	454b      	cmp	r3, r9
 80077fa:	dc01      	bgt.n	8007800 <_printf_float+0x2c0>
 80077fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fe:	e792      	b.n	8007726 <_printf_float+0x1e6>
 8007800:	2301      	movs	r3, #1
 8007802:	4652      	mov	r2, sl
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f aef7 	beq.w	80075fe <_printf_float+0xbe>
 8007810:	f109 0901 	add.w	r9, r9, #1
 8007814:	e7ee      	b.n	80077f4 <_printf_float+0x2b4>
 8007816:	bf00      	nop
 8007818:	7fefffff 	.word	0x7fefffff
 800781c:	0800be3c 	.word	0x0800be3c
 8007820:	0800be40 	.word	0x0800be40
 8007824:	0800be44 	.word	0x0800be44
 8007828:	0800be48 	.word	0x0800be48
 800782c:	0800be4c 	.word	0x0800be4c
 8007830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007834:	429a      	cmp	r2, r3
 8007836:	bfa8      	it	ge
 8007838:	461a      	movge	r2, r3
 800783a:	2a00      	cmp	r2, #0
 800783c:	4691      	mov	r9, r2
 800783e:	dc37      	bgt.n	80078b0 <_printf_float+0x370>
 8007840:	f04f 0b00 	mov.w	fp, #0
 8007844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007848:	f104 021a 	add.w	r2, r4, #26
 800784c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800784e:	9305      	str	r3, [sp, #20]
 8007850:	eba3 0309 	sub.w	r3, r3, r9
 8007854:	455b      	cmp	r3, fp
 8007856:	dc33      	bgt.n	80078c0 <_printf_float+0x380>
 8007858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800785c:	429a      	cmp	r2, r3
 800785e:	db3b      	blt.n	80078d8 <_printf_float+0x398>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	07da      	lsls	r2, r3, #31
 8007864:	d438      	bmi.n	80078d8 <_printf_float+0x398>
 8007866:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800786a:	eba2 0903 	sub.w	r9, r2, r3
 800786e:	9b05      	ldr	r3, [sp, #20]
 8007870:	1ad2      	subs	r2, r2, r3
 8007872:	4591      	cmp	r9, r2
 8007874:	bfa8      	it	ge
 8007876:	4691      	movge	r9, r2
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	dc35      	bgt.n	80078ea <_printf_float+0x3aa>
 800787e:	f04f 0800 	mov.w	r8, #0
 8007882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007886:	f104 0a1a 	add.w	sl, r4, #26
 800788a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	eba3 0309 	sub.w	r3, r3, r9
 8007894:	4543      	cmp	r3, r8
 8007896:	f77f af79 	ble.w	800778c <_printf_float+0x24c>
 800789a:	2301      	movs	r3, #1
 800789c:	4652      	mov	r2, sl
 800789e:	4631      	mov	r1, r6
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b8      	blx	r7
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f aeaa 	beq.w	80075fe <_printf_float+0xbe>
 80078aa:	f108 0801 	add.w	r8, r8, #1
 80078ae:	e7ec      	b.n	800788a <_printf_float+0x34a>
 80078b0:	4613      	mov	r3, r2
 80078b2:	4631      	mov	r1, r6
 80078b4:	4642      	mov	r2, r8
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	d1c0      	bne.n	8007840 <_printf_float+0x300>
 80078be:	e69e      	b.n	80075fe <_printf_float+0xbe>
 80078c0:	2301      	movs	r3, #1
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	9205      	str	r2, [sp, #20]
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	f43f ae97 	beq.w	80075fe <_printf_float+0xbe>
 80078d0:	9a05      	ldr	r2, [sp, #20]
 80078d2:	f10b 0b01 	add.w	fp, fp, #1
 80078d6:	e7b9      	b.n	800784c <_printf_float+0x30c>
 80078d8:	ee18 3a10 	vmov	r3, s16
 80078dc:	4652      	mov	r2, sl
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	d1be      	bne.n	8007866 <_printf_float+0x326>
 80078e8:	e689      	b.n	80075fe <_printf_float+0xbe>
 80078ea:	9a05      	ldr	r2, [sp, #20]
 80078ec:	464b      	mov	r3, r9
 80078ee:	4442      	add	r2, r8
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	d1c1      	bne.n	800787e <_printf_float+0x33e>
 80078fa:	e680      	b.n	80075fe <_printf_float+0xbe>
 80078fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078fe:	2a01      	cmp	r2, #1
 8007900:	dc01      	bgt.n	8007906 <_printf_float+0x3c6>
 8007902:	07db      	lsls	r3, r3, #31
 8007904:	d53a      	bpl.n	800797c <_printf_float+0x43c>
 8007906:	2301      	movs	r3, #1
 8007908:	4642      	mov	r2, r8
 800790a:	4631      	mov	r1, r6
 800790c:	4628      	mov	r0, r5
 800790e:	47b8      	blx	r7
 8007910:	3001      	adds	r0, #1
 8007912:	f43f ae74 	beq.w	80075fe <_printf_float+0xbe>
 8007916:	ee18 3a10 	vmov	r3, s16
 800791a:	4652      	mov	r2, sl
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f ae6b 	beq.w	80075fe <_printf_float+0xbe>
 8007928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800792c:	2200      	movs	r2, #0
 800792e:	2300      	movs	r3, #0
 8007930:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007934:	f7f9 f8e8 	bl	8000b08 <__aeabi_dcmpeq>
 8007938:	b9d8      	cbnz	r0, 8007972 <_printf_float+0x432>
 800793a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800793e:	f108 0201 	add.w	r2, r8, #1
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	47b8      	blx	r7
 8007948:	3001      	adds	r0, #1
 800794a:	d10e      	bne.n	800796a <_printf_float+0x42a>
 800794c:	e657      	b.n	80075fe <_printf_float+0xbe>
 800794e:	2301      	movs	r3, #1
 8007950:	4652      	mov	r2, sl
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	f43f ae50 	beq.w	80075fe <_printf_float+0xbe>
 800795e:	f108 0801 	add.w	r8, r8, #1
 8007962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007964:	3b01      	subs	r3, #1
 8007966:	4543      	cmp	r3, r8
 8007968:	dcf1      	bgt.n	800794e <_printf_float+0x40e>
 800796a:	464b      	mov	r3, r9
 800796c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007970:	e6da      	b.n	8007728 <_printf_float+0x1e8>
 8007972:	f04f 0800 	mov.w	r8, #0
 8007976:	f104 0a1a 	add.w	sl, r4, #26
 800797a:	e7f2      	b.n	8007962 <_printf_float+0x422>
 800797c:	2301      	movs	r3, #1
 800797e:	4642      	mov	r2, r8
 8007980:	e7df      	b.n	8007942 <_printf_float+0x402>
 8007982:	2301      	movs	r3, #1
 8007984:	464a      	mov	r2, r9
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	f43f ae36 	beq.w	80075fe <_printf_float+0xbe>
 8007992:	f108 0801 	add.w	r8, r8, #1
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800799a:	1a5b      	subs	r3, r3, r1
 800799c:	4543      	cmp	r3, r8
 800799e:	dcf0      	bgt.n	8007982 <_printf_float+0x442>
 80079a0:	e6f8      	b.n	8007794 <_printf_float+0x254>
 80079a2:	f04f 0800 	mov.w	r8, #0
 80079a6:	f104 0919 	add.w	r9, r4, #25
 80079aa:	e7f4      	b.n	8007996 <_printf_float+0x456>

080079ac <_printf_common>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	4616      	mov	r6, r2
 80079b2:	4699      	mov	r9, r3
 80079b4:	688a      	ldr	r2, [r1, #8]
 80079b6:	690b      	ldr	r3, [r1, #16]
 80079b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079bc:	4293      	cmp	r3, r2
 80079be:	bfb8      	it	lt
 80079c0:	4613      	movlt	r3, r2
 80079c2:	6033      	str	r3, [r6, #0]
 80079c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079c8:	4607      	mov	r7, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	b10a      	cbz	r2, 80079d2 <_printf_common+0x26>
 80079ce:	3301      	adds	r3, #1
 80079d0:	6033      	str	r3, [r6, #0]
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	0699      	lsls	r1, r3, #26
 80079d6:	bf42      	ittt	mi
 80079d8:	6833      	ldrmi	r3, [r6, #0]
 80079da:	3302      	addmi	r3, #2
 80079dc:	6033      	strmi	r3, [r6, #0]
 80079de:	6825      	ldr	r5, [r4, #0]
 80079e0:	f015 0506 	ands.w	r5, r5, #6
 80079e4:	d106      	bne.n	80079f4 <_printf_common+0x48>
 80079e6:	f104 0a19 	add.w	sl, r4, #25
 80079ea:	68e3      	ldr	r3, [r4, #12]
 80079ec:	6832      	ldr	r2, [r6, #0]
 80079ee:	1a9b      	subs	r3, r3, r2
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	dc26      	bgt.n	8007a42 <_printf_common+0x96>
 80079f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079f8:	1e13      	subs	r3, r2, #0
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	bf18      	it	ne
 80079fe:	2301      	movne	r3, #1
 8007a00:	0692      	lsls	r2, r2, #26
 8007a02:	d42b      	bmi.n	8007a5c <_printf_common+0xb0>
 8007a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a08:	4649      	mov	r1, r9
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	47c0      	blx	r8
 8007a0e:	3001      	adds	r0, #1
 8007a10:	d01e      	beq.n	8007a50 <_printf_common+0xa4>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	6922      	ldr	r2, [r4, #16]
 8007a16:	f003 0306 	and.w	r3, r3, #6
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	bf02      	ittt	eq
 8007a1e:	68e5      	ldreq	r5, [r4, #12]
 8007a20:	6833      	ldreq	r3, [r6, #0]
 8007a22:	1aed      	subeq	r5, r5, r3
 8007a24:	68a3      	ldr	r3, [r4, #8]
 8007a26:	bf0c      	ite	eq
 8007a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a2c:	2500      	movne	r5, #0
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	bfc4      	itt	gt
 8007a32:	1a9b      	subgt	r3, r3, r2
 8007a34:	18ed      	addgt	r5, r5, r3
 8007a36:	2600      	movs	r6, #0
 8007a38:	341a      	adds	r4, #26
 8007a3a:	42b5      	cmp	r5, r6
 8007a3c:	d11a      	bne.n	8007a74 <_printf_common+0xc8>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e008      	b.n	8007a54 <_printf_common+0xa8>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4652      	mov	r2, sl
 8007a46:	4649      	mov	r1, r9
 8007a48:	4638      	mov	r0, r7
 8007a4a:	47c0      	blx	r8
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d103      	bne.n	8007a58 <_printf_common+0xac>
 8007a50:	f04f 30ff 	mov.w	r0, #4294967295
 8007a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a58:	3501      	adds	r5, #1
 8007a5a:	e7c6      	b.n	80079ea <_printf_common+0x3e>
 8007a5c:	18e1      	adds	r1, r4, r3
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	2030      	movs	r0, #48	; 0x30
 8007a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a66:	4422      	add	r2, r4
 8007a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a70:	3302      	adds	r3, #2
 8007a72:	e7c7      	b.n	8007a04 <_printf_common+0x58>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4622      	mov	r2, r4
 8007a78:	4649      	mov	r1, r9
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	47c0      	blx	r8
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d0e6      	beq.n	8007a50 <_printf_common+0xa4>
 8007a82:	3601      	adds	r6, #1
 8007a84:	e7d9      	b.n	8007a3a <_printf_common+0x8e>
	...

08007a88 <_printf_i>:
 8007a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	7e0f      	ldrb	r7, [r1, #24]
 8007a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a90:	2f78      	cmp	r7, #120	; 0x78
 8007a92:	4691      	mov	r9, r2
 8007a94:	4680      	mov	r8, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	469a      	mov	sl, r3
 8007a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a9e:	d807      	bhi.n	8007ab0 <_printf_i+0x28>
 8007aa0:	2f62      	cmp	r7, #98	; 0x62
 8007aa2:	d80a      	bhi.n	8007aba <_printf_i+0x32>
 8007aa4:	2f00      	cmp	r7, #0
 8007aa6:	f000 80d4 	beq.w	8007c52 <_printf_i+0x1ca>
 8007aaa:	2f58      	cmp	r7, #88	; 0x58
 8007aac:	f000 80c0 	beq.w	8007c30 <_printf_i+0x1a8>
 8007ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ab8:	e03a      	b.n	8007b30 <_printf_i+0xa8>
 8007aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007abe:	2b15      	cmp	r3, #21
 8007ac0:	d8f6      	bhi.n	8007ab0 <_printf_i+0x28>
 8007ac2:	a101      	add	r1, pc, #4	; (adr r1, 8007ac8 <_printf_i+0x40>)
 8007ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ac8:	08007b21 	.word	0x08007b21
 8007acc:	08007b35 	.word	0x08007b35
 8007ad0:	08007ab1 	.word	0x08007ab1
 8007ad4:	08007ab1 	.word	0x08007ab1
 8007ad8:	08007ab1 	.word	0x08007ab1
 8007adc:	08007ab1 	.word	0x08007ab1
 8007ae0:	08007b35 	.word	0x08007b35
 8007ae4:	08007ab1 	.word	0x08007ab1
 8007ae8:	08007ab1 	.word	0x08007ab1
 8007aec:	08007ab1 	.word	0x08007ab1
 8007af0:	08007ab1 	.word	0x08007ab1
 8007af4:	08007c39 	.word	0x08007c39
 8007af8:	08007b61 	.word	0x08007b61
 8007afc:	08007bf3 	.word	0x08007bf3
 8007b00:	08007ab1 	.word	0x08007ab1
 8007b04:	08007ab1 	.word	0x08007ab1
 8007b08:	08007c5b 	.word	0x08007c5b
 8007b0c:	08007ab1 	.word	0x08007ab1
 8007b10:	08007b61 	.word	0x08007b61
 8007b14:	08007ab1 	.word	0x08007ab1
 8007b18:	08007ab1 	.word	0x08007ab1
 8007b1c:	08007bfb 	.word	0x08007bfb
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	1d1a      	adds	r2, r3, #4
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	602a      	str	r2, [r5, #0]
 8007b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b30:	2301      	movs	r3, #1
 8007b32:	e09f      	b.n	8007c74 <_printf_i+0x1ec>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	0607      	lsls	r7, r0, #24
 8007b3a:	f103 0104 	add.w	r1, r3, #4
 8007b3e:	6029      	str	r1, [r5, #0]
 8007b40:	d501      	bpl.n	8007b46 <_printf_i+0xbe>
 8007b42:	681e      	ldr	r6, [r3, #0]
 8007b44:	e003      	b.n	8007b4e <_printf_i+0xc6>
 8007b46:	0646      	lsls	r6, r0, #25
 8007b48:	d5fb      	bpl.n	8007b42 <_printf_i+0xba>
 8007b4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	da03      	bge.n	8007b5a <_printf_i+0xd2>
 8007b52:	232d      	movs	r3, #45	; 0x2d
 8007b54:	4276      	negs	r6, r6
 8007b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b5a:	485a      	ldr	r0, [pc, #360]	; (8007cc4 <_printf_i+0x23c>)
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	e012      	b.n	8007b86 <_printf_i+0xfe>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	6820      	ldr	r0, [r4, #0]
 8007b64:	1d19      	adds	r1, r3, #4
 8007b66:	6029      	str	r1, [r5, #0]
 8007b68:	0605      	lsls	r5, r0, #24
 8007b6a:	d501      	bpl.n	8007b70 <_printf_i+0xe8>
 8007b6c:	681e      	ldr	r6, [r3, #0]
 8007b6e:	e002      	b.n	8007b76 <_printf_i+0xee>
 8007b70:	0641      	lsls	r1, r0, #25
 8007b72:	d5fb      	bpl.n	8007b6c <_printf_i+0xe4>
 8007b74:	881e      	ldrh	r6, [r3, #0]
 8007b76:	4853      	ldr	r0, [pc, #332]	; (8007cc4 <_printf_i+0x23c>)
 8007b78:	2f6f      	cmp	r7, #111	; 0x6f
 8007b7a:	bf0c      	ite	eq
 8007b7c:	2308      	moveq	r3, #8
 8007b7e:	230a      	movne	r3, #10
 8007b80:	2100      	movs	r1, #0
 8007b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b86:	6865      	ldr	r5, [r4, #4]
 8007b88:	60a5      	str	r5, [r4, #8]
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	bfa2      	ittt	ge
 8007b8e:	6821      	ldrge	r1, [r4, #0]
 8007b90:	f021 0104 	bicge.w	r1, r1, #4
 8007b94:	6021      	strge	r1, [r4, #0]
 8007b96:	b90e      	cbnz	r6, 8007b9c <_printf_i+0x114>
 8007b98:	2d00      	cmp	r5, #0
 8007b9a:	d04b      	beq.n	8007c34 <_printf_i+0x1ac>
 8007b9c:	4615      	mov	r5, r2
 8007b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ba6:	5dc7      	ldrb	r7, [r0, r7]
 8007ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bac:	4637      	mov	r7, r6
 8007bae:	42bb      	cmp	r3, r7
 8007bb0:	460e      	mov	r6, r1
 8007bb2:	d9f4      	bls.n	8007b9e <_printf_i+0x116>
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d10b      	bne.n	8007bd0 <_printf_i+0x148>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	07de      	lsls	r6, r3, #31
 8007bbc:	d508      	bpl.n	8007bd0 <_printf_i+0x148>
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	6861      	ldr	r1, [r4, #4]
 8007bc2:	4299      	cmp	r1, r3
 8007bc4:	bfde      	ittt	le
 8007bc6:	2330      	movle	r3, #48	; 0x30
 8007bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bd0:	1b52      	subs	r2, r2, r5
 8007bd2:	6122      	str	r2, [r4, #16]
 8007bd4:	f8cd a000 	str.w	sl, [sp]
 8007bd8:	464b      	mov	r3, r9
 8007bda:	aa03      	add	r2, sp, #12
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4640      	mov	r0, r8
 8007be0:	f7ff fee4 	bl	80079ac <_printf_common>
 8007be4:	3001      	adds	r0, #1
 8007be6:	d14a      	bne.n	8007c7e <_printf_i+0x1f6>
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	b004      	add	sp, #16
 8007bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	f043 0320 	orr.w	r3, r3, #32
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	4833      	ldr	r0, [pc, #204]	; (8007cc8 <_printf_i+0x240>)
 8007bfc:	2778      	movs	r7, #120	; 0x78
 8007bfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	6829      	ldr	r1, [r5, #0]
 8007c06:	061f      	lsls	r7, r3, #24
 8007c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c0c:	d402      	bmi.n	8007c14 <_printf_i+0x18c>
 8007c0e:	065f      	lsls	r7, r3, #25
 8007c10:	bf48      	it	mi
 8007c12:	b2b6      	uxthmi	r6, r6
 8007c14:	07df      	lsls	r7, r3, #31
 8007c16:	bf48      	it	mi
 8007c18:	f043 0320 	orrmi.w	r3, r3, #32
 8007c1c:	6029      	str	r1, [r5, #0]
 8007c1e:	bf48      	it	mi
 8007c20:	6023      	strmi	r3, [r4, #0]
 8007c22:	b91e      	cbnz	r6, 8007c2c <_printf_i+0x1a4>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	f023 0320 	bic.w	r3, r3, #32
 8007c2a:	6023      	str	r3, [r4, #0]
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	e7a7      	b.n	8007b80 <_printf_i+0xf8>
 8007c30:	4824      	ldr	r0, [pc, #144]	; (8007cc4 <_printf_i+0x23c>)
 8007c32:	e7e4      	b.n	8007bfe <_printf_i+0x176>
 8007c34:	4615      	mov	r5, r2
 8007c36:	e7bd      	b.n	8007bb4 <_printf_i+0x12c>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	6826      	ldr	r6, [r4, #0]
 8007c3c:	6961      	ldr	r1, [r4, #20]
 8007c3e:	1d18      	adds	r0, r3, #4
 8007c40:	6028      	str	r0, [r5, #0]
 8007c42:	0635      	lsls	r5, r6, #24
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	d501      	bpl.n	8007c4c <_printf_i+0x1c4>
 8007c48:	6019      	str	r1, [r3, #0]
 8007c4a:	e002      	b.n	8007c52 <_printf_i+0x1ca>
 8007c4c:	0670      	lsls	r0, r6, #25
 8007c4e:	d5fb      	bpl.n	8007c48 <_printf_i+0x1c0>
 8007c50:	8019      	strh	r1, [r3, #0]
 8007c52:	2300      	movs	r3, #0
 8007c54:	6123      	str	r3, [r4, #16]
 8007c56:	4615      	mov	r5, r2
 8007c58:	e7bc      	b.n	8007bd4 <_printf_i+0x14c>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	1d1a      	adds	r2, r3, #4
 8007c5e:	602a      	str	r2, [r5, #0]
 8007c60:	681d      	ldr	r5, [r3, #0]
 8007c62:	6862      	ldr	r2, [r4, #4]
 8007c64:	2100      	movs	r1, #0
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7f8 fad2 	bl	8000210 <memchr>
 8007c6c:	b108      	cbz	r0, 8007c72 <_printf_i+0x1ea>
 8007c6e:	1b40      	subs	r0, r0, r5
 8007c70:	6060      	str	r0, [r4, #4]
 8007c72:	6863      	ldr	r3, [r4, #4]
 8007c74:	6123      	str	r3, [r4, #16]
 8007c76:	2300      	movs	r3, #0
 8007c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7c:	e7aa      	b.n	8007bd4 <_printf_i+0x14c>
 8007c7e:	6923      	ldr	r3, [r4, #16]
 8007c80:	462a      	mov	r2, r5
 8007c82:	4649      	mov	r1, r9
 8007c84:	4640      	mov	r0, r8
 8007c86:	47d0      	blx	sl
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d0ad      	beq.n	8007be8 <_printf_i+0x160>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	079b      	lsls	r3, r3, #30
 8007c90:	d413      	bmi.n	8007cba <_printf_i+0x232>
 8007c92:	68e0      	ldr	r0, [r4, #12]
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	4298      	cmp	r0, r3
 8007c98:	bfb8      	it	lt
 8007c9a:	4618      	movlt	r0, r3
 8007c9c:	e7a6      	b.n	8007bec <_printf_i+0x164>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4632      	mov	r2, r6
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	47d0      	blx	sl
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d09d      	beq.n	8007be8 <_printf_i+0x160>
 8007cac:	3501      	adds	r5, #1
 8007cae:	68e3      	ldr	r3, [r4, #12]
 8007cb0:	9903      	ldr	r1, [sp, #12]
 8007cb2:	1a5b      	subs	r3, r3, r1
 8007cb4:	42ab      	cmp	r3, r5
 8007cb6:	dcf2      	bgt.n	8007c9e <_printf_i+0x216>
 8007cb8:	e7eb      	b.n	8007c92 <_printf_i+0x20a>
 8007cba:	2500      	movs	r5, #0
 8007cbc:	f104 0619 	add.w	r6, r4, #25
 8007cc0:	e7f5      	b.n	8007cae <_printf_i+0x226>
 8007cc2:	bf00      	nop
 8007cc4:	0800be4e 	.word	0x0800be4e
 8007cc8:	0800be5f 	.word	0x0800be5f

08007ccc <std>:
 8007ccc:	2300      	movs	r3, #0
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cda:	6083      	str	r3, [r0, #8]
 8007cdc:	8181      	strh	r1, [r0, #12]
 8007cde:	6643      	str	r3, [r0, #100]	; 0x64
 8007ce0:	81c2      	strh	r2, [r0, #14]
 8007ce2:	6183      	str	r3, [r0, #24]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	305c      	adds	r0, #92	; 0x5c
 8007cea:	f000 f91c 	bl	8007f26 <memset>
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <std+0x38>)
 8007cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <std+0x3c>)
 8007cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <std+0x40>)
 8007cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <std+0x44>)
 8007cfc:	6224      	str	r4, [r4, #32]
 8007cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	bf00      	nop
 8007d04:	08007e6d 	.word	0x08007e6d
 8007d08:	08007e8f 	.word	0x08007e8f
 8007d0c:	08007ec7 	.word	0x08007ec7
 8007d10:	08007eeb 	.word	0x08007eeb

08007d14 <stdio_exit_handler>:
 8007d14:	4a02      	ldr	r2, [pc, #8]	; (8007d20 <stdio_exit_handler+0xc>)
 8007d16:	4903      	ldr	r1, [pc, #12]	; (8007d24 <stdio_exit_handler+0x10>)
 8007d18:	4803      	ldr	r0, [pc, #12]	; (8007d28 <stdio_exit_handler+0x14>)
 8007d1a:	f000 b869 	b.w	8007df0 <_fwalk_sglue>
 8007d1e:	bf00      	nop
 8007d20:	20000024 	.word	0x20000024
 8007d24:	08009a01 	.word	0x08009a01
 8007d28:	20000030 	.word	0x20000030

08007d2c <cleanup_stdio>:
 8007d2c:	6841      	ldr	r1, [r0, #4]
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <cleanup_stdio+0x34>)
 8007d30:	4299      	cmp	r1, r3
 8007d32:	b510      	push	{r4, lr}
 8007d34:	4604      	mov	r4, r0
 8007d36:	d001      	beq.n	8007d3c <cleanup_stdio+0x10>
 8007d38:	f001 fe62 	bl	8009a00 <_fflush_r>
 8007d3c:	68a1      	ldr	r1, [r4, #8]
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <cleanup_stdio+0x38>)
 8007d40:	4299      	cmp	r1, r3
 8007d42:	d002      	beq.n	8007d4a <cleanup_stdio+0x1e>
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 fe5b 	bl	8009a00 <_fflush_r>
 8007d4a:	68e1      	ldr	r1, [r4, #12]
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <cleanup_stdio+0x3c>)
 8007d4e:	4299      	cmp	r1, r3
 8007d50:	d004      	beq.n	8007d5c <cleanup_stdio+0x30>
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f001 be52 	b.w	8009a00 <_fflush_r>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop
 8007d60:	200007f0 	.word	0x200007f0
 8007d64:	20000858 	.word	0x20000858
 8007d68:	200008c0 	.word	0x200008c0

08007d6c <global_stdio_init.part.0>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <global_stdio_init.part.0+0x30>)
 8007d70:	4c0b      	ldr	r4, [pc, #44]	; (8007da0 <global_stdio_init.part.0+0x34>)
 8007d72:	4a0c      	ldr	r2, [pc, #48]	; (8007da4 <global_stdio_init.part.0+0x38>)
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	4620      	mov	r0, r4
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	f7ff ffa6 	bl	8007ccc <std>
 8007d80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d84:	2201      	movs	r2, #1
 8007d86:	2109      	movs	r1, #9
 8007d88:	f7ff ffa0 	bl	8007ccc <std>
 8007d8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d90:	2202      	movs	r2, #2
 8007d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d96:	2112      	movs	r1, #18
 8007d98:	f7ff bf98 	b.w	8007ccc <std>
 8007d9c:	20000928 	.word	0x20000928
 8007da0:	200007f0 	.word	0x200007f0
 8007da4:	08007d15 	.word	0x08007d15

08007da8 <__sfp_lock_acquire>:
 8007da8:	4801      	ldr	r0, [pc, #4]	; (8007db0 <__sfp_lock_acquire+0x8>)
 8007daa:	f000 b945 	b.w	8008038 <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	20000931 	.word	0x20000931

08007db4 <__sfp_lock_release>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sfp_lock_release+0x8>)
 8007db6:	f000 b940 	b.w	800803a <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000931 	.word	0x20000931

08007dc0 <__sinit>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	f7ff fff0 	bl	8007da8 <__sfp_lock_acquire>
 8007dc8:	6a23      	ldr	r3, [r4, #32]
 8007dca:	b11b      	cbz	r3, 8007dd4 <__sinit+0x14>
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	f7ff bff0 	b.w	8007db4 <__sfp_lock_release>
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <__sinit+0x28>)
 8007dd6:	6223      	str	r3, [r4, #32]
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <__sinit+0x2c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f5      	bne.n	8007dcc <__sinit+0xc>
 8007de0:	f7ff ffc4 	bl	8007d6c <global_stdio_init.part.0>
 8007de4:	e7f2      	b.n	8007dcc <__sinit+0xc>
 8007de6:	bf00      	nop
 8007de8:	08007d2d 	.word	0x08007d2d
 8007dec:	20000928 	.word	0x20000928

08007df0 <_fwalk_sglue>:
 8007df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df4:	4607      	mov	r7, r0
 8007df6:	4688      	mov	r8, r1
 8007df8:	4614      	mov	r4, r2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e00:	f1b9 0901 	subs.w	r9, r9, #1
 8007e04:	d505      	bpl.n	8007e12 <_fwalk_sglue+0x22>
 8007e06:	6824      	ldr	r4, [r4, #0]
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	d1f7      	bne.n	8007dfc <_fwalk_sglue+0xc>
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d907      	bls.n	8007e28 <_fwalk_sglue+0x38>
 8007e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	d003      	beq.n	8007e28 <_fwalk_sglue+0x38>
 8007e20:	4629      	mov	r1, r5
 8007e22:	4638      	mov	r0, r7
 8007e24:	47c0      	blx	r8
 8007e26:	4306      	orrs	r6, r0
 8007e28:	3568      	adds	r5, #104	; 0x68
 8007e2a:	e7e9      	b.n	8007e00 <_fwalk_sglue+0x10>

08007e2c <siprintf>:
 8007e2c:	b40e      	push	{r1, r2, r3}
 8007e2e:	b500      	push	{lr}
 8007e30:	b09c      	sub	sp, #112	; 0x70
 8007e32:	ab1d      	add	r3, sp, #116	; 0x74
 8007e34:	9002      	str	r0, [sp, #8]
 8007e36:	9006      	str	r0, [sp, #24]
 8007e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e3c:	4809      	ldr	r0, [pc, #36]	; (8007e64 <siprintf+0x38>)
 8007e3e:	9107      	str	r1, [sp, #28]
 8007e40:	9104      	str	r1, [sp, #16]
 8007e42:	4909      	ldr	r1, [pc, #36]	; (8007e68 <siprintf+0x3c>)
 8007e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e48:	9105      	str	r1, [sp, #20]
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	a902      	add	r1, sp, #8
 8007e50:	f001 fc52 	bl	80096f8 <_svfiprintf_r>
 8007e54:	9b02      	ldr	r3, [sp, #8]
 8007e56:	2200      	movs	r2, #0
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	b01c      	add	sp, #112	; 0x70
 8007e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e60:	b003      	add	sp, #12
 8007e62:	4770      	bx	lr
 8007e64:	2000007c 	.word	0x2000007c
 8007e68:	ffff0208 	.word	0xffff0208

08007e6c <__sread>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e74:	f000 f892 	bl	8007f9c <_read_r>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	bfab      	itete	ge
 8007e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e80:	181b      	addge	r3, r3, r0
 8007e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e86:	bfac      	ite	ge
 8007e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e8a:	81a3      	strhlt	r3, [r4, #12]
 8007e8c:	bd10      	pop	{r4, pc}

08007e8e <__swrite>:
 8007e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	461f      	mov	r7, r3
 8007e94:	898b      	ldrh	r3, [r1, #12]
 8007e96:	05db      	lsls	r3, r3, #23
 8007e98:	4605      	mov	r5, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	d505      	bpl.n	8007eac <__swrite+0x1e>
 8007ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f000 f866 	bl	8007f78 <_lseek_r>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	4632      	mov	r2, r6
 8007eba:	463b      	mov	r3, r7
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec2:	f000 b87d 	b.w	8007fc0 <_write_r>

08007ec6 <__sseek>:
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	460c      	mov	r4, r1
 8007eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ece:	f000 f853 	bl	8007f78 <_lseek_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	bf15      	itete	ne
 8007ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ee2:	81a3      	strheq	r3, [r4, #12]
 8007ee4:	bf18      	it	ne
 8007ee6:	81a3      	strhne	r3, [r4, #12]
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <__sclose>:
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	f000 b833 	b.w	8007f58 <_close_r>

08007ef2 <memmove>:
 8007ef2:	4288      	cmp	r0, r1
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	eb01 0402 	add.w	r4, r1, r2
 8007efa:	d902      	bls.n	8007f02 <memmove+0x10>
 8007efc:	4284      	cmp	r4, r0
 8007efe:	4623      	mov	r3, r4
 8007f00:	d807      	bhi.n	8007f12 <memmove+0x20>
 8007f02:	1e43      	subs	r3, r0, #1
 8007f04:	42a1      	cmp	r1, r4
 8007f06:	d008      	beq.n	8007f1a <memmove+0x28>
 8007f08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f10:	e7f8      	b.n	8007f04 <memmove+0x12>
 8007f12:	4402      	add	r2, r0
 8007f14:	4601      	mov	r1, r0
 8007f16:	428a      	cmp	r2, r1
 8007f18:	d100      	bne.n	8007f1c <memmove+0x2a>
 8007f1a:	bd10      	pop	{r4, pc}
 8007f1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f24:	e7f7      	b.n	8007f16 <memmove+0x24>

08007f26 <memset>:
 8007f26:	4402      	add	r2, r0
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d100      	bne.n	8007f30 <memset+0xa>
 8007f2e:	4770      	bx	lr
 8007f30:	f803 1b01 	strb.w	r1, [r3], #1
 8007f34:	e7f9      	b.n	8007f2a <memset+0x4>

08007f36 <strchr>:
 8007f36:	b2c9      	uxtb	r1, r1
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3e:	b11a      	cbz	r2, 8007f48 <strchr+0x12>
 8007f40:	428a      	cmp	r2, r1
 8007f42:	d1f9      	bne.n	8007f38 <strchr+0x2>
 8007f44:	4618      	mov	r0, r3
 8007f46:	4770      	bx	lr
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	bf18      	it	ne
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	e7f9      	b.n	8007f44 <strchr+0xe>

08007f50 <_localeconv_r>:
 8007f50:	4800      	ldr	r0, [pc, #0]	; (8007f54 <_localeconv_r+0x4>)
 8007f52:	4770      	bx	lr
 8007f54:	20000170 	.word	0x20000170

08007f58 <_close_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d06      	ldr	r5, [pc, #24]	; (8007f74 <_close_r+0x1c>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7f9 fd93 	bl	8001a8e <_close>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_close_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_close_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	2000092c 	.word	0x2000092c

08007f78 <_lseek_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	; (8007f98 <_lseek_r+0x20>)
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	2200      	movs	r2, #0
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7f9 fda8 	bl	8001adc <_lseek>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_lseek_r+0x1e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_lseek_r+0x1e>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	2000092c 	.word	0x2000092c

08007f9c <_read_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	; (8007fbc <_read_r+0x20>)
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4608      	mov	r0, r1
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7f9 fd36 	bl	8001a1c <_read>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_read_r+0x1e>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_read_r+0x1e>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	2000092c 	.word	0x2000092c

08007fc0 <_write_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d07      	ldr	r5, [pc, #28]	; (8007fe0 <_write_r+0x20>)
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	4611      	mov	r1, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	602a      	str	r2, [r5, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7f9 fd41 	bl	8001a56 <_write>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_write_r+0x1e>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_write_r+0x1e>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	2000092c 	.word	0x2000092c

08007fe4 <__errno>:
 8007fe4:	4b01      	ldr	r3, [pc, #4]	; (8007fec <__errno+0x8>)
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	2000007c 	.word	0x2000007c

08007ff0 <__libc_init_array>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4d0d      	ldr	r5, [pc, #52]	; (8008028 <__libc_init_array+0x38>)
 8007ff4:	4c0d      	ldr	r4, [pc, #52]	; (800802c <__libc_init_array+0x3c>)
 8007ff6:	1b64      	subs	r4, r4, r5
 8007ff8:	10a4      	asrs	r4, r4, #2
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	d109      	bne.n	8008014 <__libc_init_array+0x24>
 8008000:	4d0b      	ldr	r5, [pc, #44]	; (8008030 <__libc_init_array+0x40>)
 8008002:	4c0c      	ldr	r4, [pc, #48]	; (8008034 <__libc_init_array+0x44>)
 8008004:	f002 f878 	bl	800a0f8 <_init>
 8008008:	1b64      	subs	r4, r4, r5
 800800a:	10a4      	asrs	r4, r4, #2
 800800c:	2600      	movs	r6, #0
 800800e:	42a6      	cmp	r6, r4
 8008010:	d105      	bne.n	800801e <__libc_init_array+0x2e>
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	f855 3b04 	ldr.w	r3, [r5], #4
 8008018:	4798      	blx	r3
 800801a:	3601      	adds	r6, #1
 800801c:	e7ee      	b.n	8007ffc <__libc_init_array+0xc>
 800801e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008022:	4798      	blx	r3
 8008024:	3601      	adds	r6, #1
 8008026:	e7f2      	b.n	800800e <__libc_init_array+0x1e>
 8008028:	0800c1b4 	.word	0x0800c1b4
 800802c:	0800c1b4 	.word	0x0800c1b4
 8008030:	0800c1b4 	.word	0x0800c1b4
 8008034:	0800c1cc 	.word	0x0800c1cc

08008038 <__retarget_lock_acquire_recursive>:
 8008038:	4770      	bx	lr

0800803a <__retarget_lock_release_recursive>:
 800803a:	4770      	bx	lr

0800803c <memcpy>:
 800803c:	440a      	add	r2, r1
 800803e:	4291      	cmp	r1, r2
 8008040:	f100 33ff 	add.w	r3, r0, #4294967295
 8008044:	d100      	bne.n	8008048 <memcpy+0xc>
 8008046:	4770      	bx	lr
 8008048:	b510      	push	{r4, lr}
 800804a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800804e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008052:	4291      	cmp	r1, r2
 8008054:	d1f9      	bne.n	800804a <memcpy+0xe>
 8008056:	bd10      	pop	{r4, pc}

08008058 <quorem>:
 8008058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	6903      	ldr	r3, [r0, #16]
 800805e:	690c      	ldr	r4, [r1, #16]
 8008060:	42a3      	cmp	r3, r4
 8008062:	4607      	mov	r7, r0
 8008064:	db7e      	blt.n	8008164 <quorem+0x10c>
 8008066:	3c01      	subs	r4, #1
 8008068:	f101 0814 	add.w	r8, r1, #20
 800806c:	f100 0514 	add.w	r5, r0, #20
 8008070:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800807a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800807e:	3301      	adds	r3, #1
 8008080:	429a      	cmp	r2, r3
 8008082:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008086:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800808a:	fbb2 f6f3 	udiv	r6, r2, r3
 800808e:	d331      	bcc.n	80080f4 <quorem+0x9c>
 8008090:	f04f 0e00 	mov.w	lr, #0
 8008094:	4640      	mov	r0, r8
 8008096:	46ac      	mov	ip, r5
 8008098:	46f2      	mov	sl, lr
 800809a:	f850 2b04 	ldr.w	r2, [r0], #4
 800809e:	b293      	uxth	r3, r2
 80080a0:	fb06 e303 	mla	r3, r6, r3, lr
 80080a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080a8:	0c1a      	lsrs	r2, r3, #16
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	ebaa 0303 	sub.w	r3, sl, r3
 80080b0:	f8dc a000 	ldr.w	sl, [ip]
 80080b4:	fa13 f38a 	uxtah	r3, r3, sl
 80080b8:	fb06 220e 	mla	r2, r6, lr, r2
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	9b00      	ldr	r3, [sp, #0]
 80080c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080c4:	b292      	uxth	r2, r2
 80080c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80080d2:	4581      	cmp	r9, r0
 80080d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d8:	f84c 3b04 	str.w	r3, [ip], #4
 80080dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080e0:	d2db      	bcs.n	800809a <quorem+0x42>
 80080e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80080e6:	b92b      	cbnz	r3, 80080f4 <quorem+0x9c>
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	3b04      	subs	r3, #4
 80080ec:	429d      	cmp	r5, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	d32c      	bcc.n	800814c <quorem+0xf4>
 80080f2:	613c      	str	r4, [r7, #16]
 80080f4:	4638      	mov	r0, r7
 80080f6:	f001 f9a5 	bl	8009444 <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	db22      	blt.n	8008144 <quorem+0xec>
 80080fe:	3601      	adds	r6, #1
 8008100:	4629      	mov	r1, r5
 8008102:	2000      	movs	r0, #0
 8008104:	f858 2b04 	ldr.w	r2, [r8], #4
 8008108:	f8d1 c000 	ldr.w	ip, [r1]
 800810c:	b293      	uxth	r3, r2
 800810e:	1ac3      	subs	r3, r0, r3
 8008110:	0c12      	lsrs	r2, r2, #16
 8008112:	fa13 f38c 	uxtah	r3, r3, ip
 8008116:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800811a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800811e:	b29b      	uxth	r3, r3
 8008120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008124:	45c1      	cmp	r9, r8
 8008126:	f841 3b04 	str.w	r3, [r1], #4
 800812a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800812e:	d2e9      	bcs.n	8008104 <quorem+0xac>
 8008130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008138:	b922      	cbnz	r2, 8008144 <quorem+0xec>
 800813a:	3b04      	subs	r3, #4
 800813c:	429d      	cmp	r5, r3
 800813e:	461a      	mov	r2, r3
 8008140:	d30a      	bcc.n	8008158 <quorem+0x100>
 8008142:	613c      	str	r4, [r7, #16]
 8008144:	4630      	mov	r0, r6
 8008146:	b003      	add	sp, #12
 8008148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814c:	6812      	ldr	r2, [r2, #0]
 800814e:	3b04      	subs	r3, #4
 8008150:	2a00      	cmp	r2, #0
 8008152:	d1ce      	bne.n	80080f2 <quorem+0x9a>
 8008154:	3c01      	subs	r4, #1
 8008156:	e7c9      	b.n	80080ec <quorem+0x94>
 8008158:	6812      	ldr	r2, [r2, #0]
 800815a:	3b04      	subs	r3, #4
 800815c:	2a00      	cmp	r2, #0
 800815e:	d1f0      	bne.n	8008142 <quorem+0xea>
 8008160:	3c01      	subs	r4, #1
 8008162:	e7eb      	b.n	800813c <quorem+0xe4>
 8008164:	2000      	movs	r0, #0
 8008166:	e7ee      	b.n	8008146 <quorem+0xee>

08008168 <_dtoa_r>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	ed2d 8b04 	vpush	{d8-d9}
 8008170:	69c5      	ldr	r5, [r0, #28]
 8008172:	b093      	sub	sp, #76	; 0x4c
 8008174:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008178:	ec57 6b10 	vmov	r6, r7, d0
 800817c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008180:	9107      	str	r1, [sp, #28]
 8008182:	4604      	mov	r4, r0
 8008184:	920a      	str	r2, [sp, #40]	; 0x28
 8008186:	930d      	str	r3, [sp, #52]	; 0x34
 8008188:	b975      	cbnz	r5, 80081a8 <_dtoa_r+0x40>
 800818a:	2010      	movs	r0, #16
 800818c:	f000 fe2a 	bl	8008de4 <malloc>
 8008190:	4602      	mov	r2, r0
 8008192:	61e0      	str	r0, [r4, #28]
 8008194:	b920      	cbnz	r0, 80081a0 <_dtoa_r+0x38>
 8008196:	4bae      	ldr	r3, [pc, #696]	; (8008450 <_dtoa_r+0x2e8>)
 8008198:	21ef      	movs	r1, #239	; 0xef
 800819a:	48ae      	ldr	r0, [pc, #696]	; (8008454 <_dtoa_r+0x2ec>)
 800819c:	f001 fc68 	bl	8009a70 <__assert_func>
 80081a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081a4:	6005      	str	r5, [r0, #0]
 80081a6:	60c5      	str	r5, [r0, #12]
 80081a8:	69e3      	ldr	r3, [r4, #28]
 80081aa:	6819      	ldr	r1, [r3, #0]
 80081ac:	b151      	cbz	r1, 80081c4 <_dtoa_r+0x5c>
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	604a      	str	r2, [r1, #4]
 80081b2:	2301      	movs	r3, #1
 80081b4:	4093      	lsls	r3, r2
 80081b6:	608b      	str	r3, [r1, #8]
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 ff07 	bl	8008fcc <_Bfree>
 80081be:	69e3      	ldr	r3, [r4, #28]
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	1e3b      	subs	r3, r7, #0
 80081c6:	bfbb      	ittet	lt
 80081c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081cc:	9303      	strlt	r3, [sp, #12]
 80081ce:	2300      	movge	r3, #0
 80081d0:	2201      	movlt	r2, #1
 80081d2:	bfac      	ite	ge
 80081d4:	f8c8 3000 	strge.w	r3, [r8]
 80081d8:	f8c8 2000 	strlt.w	r2, [r8]
 80081dc:	4b9e      	ldr	r3, [pc, #632]	; (8008458 <_dtoa_r+0x2f0>)
 80081de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081e2:	ea33 0308 	bics.w	r3, r3, r8
 80081e6:	d11b      	bne.n	8008220 <_dtoa_r+0xb8>
 80081e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80081f4:	4333      	orrs	r3, r6
 80081f6:	f000 8593 	beq.w	8008d20 <_dtoa_r+0xbb8>
 80081fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081fc:	b963      	cbnz	r3, 8008218 <_dtoa_r+0xb0>
 80081fe:	4b97      	ldr	r3, [pc, #604]	; (800845c <_dtoa_r+0x2f4>)
 8008200:	e027      	b.n	8008252 <_dtoa_r+0xea>
 8008202:	4b97      	ldr	r3, [pc, #604]	; (8008460 <_dtoa_r+0x2f8>)
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	3308      	adds	r3, #8
 8008208:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	9800      	ldr	r0, [sp, #0]
 800820e:	b013      	add	sp, #76	; 0x4c
 8008210:	ecbd 8b04 	vpop	{d8-d9}
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	4b90      	ldr	r3, [pc, #576]	; (800845c <_dtoa_r+0x2f4>)
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	3303      	adds	r3, #3
 800821e:	e7f3      	b.n	8008208 <_dtoa_r+0xa0>
 8008220:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	ec51 0b17 	vmov	r0, r1, d7
 800822a:	eeb0 8a47 	vmov.f32	s16, s14
 800822e:	eef0 8a67 	vmov.f32	s17, s15
 8008232:	2300      	movs	r3, #0
 8008234:	f7f8 fc68 	bl	8000b08 <__aeabi_dcmpeq>
 8008238:	4681      	mov	r9, r0
 800823a:	b160      	cbz	r0, 8008256 <_dtoa_r+0xee>
 800823c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800823e:	2301      	movs	r3, #1
 8008240:	6013      	str	r3, [r2, #0]
 8008242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8568 	beq.w	8008d1a <_dtoa_r+0xbb2>
 800824a:	4b86      	ldr	r3, [pc, #536]	; (8008464 <_dtoa_r+0x2fc>)
 800824c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	3b01      	subs	r3, #1
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	e7da      	b.n	800820c <_dtoa_r+0xa4>
 8008256:	aa10      	add	r2, sp, #64	; 0x40
 8008258:	a911      	add	r1, sp, #68	; 0x44
 800825a:	4620      	mov	r0, r4
 800825c:	eeb0 0a48 	vmov.f32	s0, s16
 8008260:	eef0 0a68 	vmov.f32	s1, s17
 8008264:	f001 f994 	bl	8009590 <__d2b>
 8008268:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800826c:	4682      	mov	sl, r0
 800826e:	2d00      	cmp	r5, #0
 8008270:	d07f      	beq.n	8008372 <_dtoa_r+0x20a>
 8008272:	ee18 3a90 	vmov	r3, s17
 8008276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800827a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800827e:	ec51 0b18 	vmov	r0, r1, d8
 8008282:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800828a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800828e:	4619      	mov	r1, r3
 8008290:	2200      	movs	r2, #0
 8008292:	4b75      	ldr	r3, [pc, #468]	; (8008468 <_dtoa_r+0x300>)
 8008294:	f7f8 f818 	bl	80002c8 <__aeabi_dsub>
 8008298:	a367      	add	r3, pc, #412	; (adr r3, 8008438 <_dtoa_r+0x2d0>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	f7f8 f9cb 	bl	8000638 <__aeabi_dmul>
 80082a2:	a367      	add	r3, pc, #412	; (adr r3, 8008440 <_dtoa_r+0x2d8>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f810 	bl	80002cc <__adddf3>
 80082ac:	4606      	mov	r6, r0
 80082ae:	4628      	mov	r0, r5
 80082b0:	460f      	mov	r7, r1
 80082b2:	f7f8 f957 	bl	8000564 <__aeabi_i2d>
 80082b6:	a364      	add	r3, pc, #400	; (adr r3, 8008448 <_dtoa_r+0x2e0>)
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f7f8 f9bc 	bl	8000638 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 f800 	bl	80002cc <__adddf3>
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1
 80082d0:	f7f8 fc62 	bl	8000b98 <__aeabi_d2iz>
 80082d4:	2200      	movs	r2, #0
 80082d6:	4683      	mov	fp, r0
 80082d8:	2300      	movs	r3, #0
 80082da:	4630      	mov	r0, r6
 80082dc:	4639      	mov	r1, r7
 80082de:	f7f8 fc1d 	bl	8000b1c <__aeabi_dcmplt>
 80082e2:	b148      	cbz	r0, 80082f8 <_dtoa_r+0x190>
 80082e4:	4658      	mov	r0, fp
 80082e6:	f7f8 f93d 	bl	8000564 <__aeabi_i2d>
 80082ea:	4632      	mov	r2, r6
 80082ec:	463b      	mov	r3, r7
 80082ee:	f7f8 fc0b 	bl	8000b08 <__aeabi_dcmpeq>
 80082f2:	b908      	cbnz	r0, 80082f8 <_dtoa_r+0x190>
 80082f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082f8:	f1bb 0f16 	cmp.w	fp, #22
 80082fc:	d857      	bhi.n	80083ae <_dtoa_r+0x246>
 80082fe:	4b5b      	ldr	r3, [pc, #364]	; (800846c <_dtoa_r+0x304>)
 8008300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	ec51 0b18 	vmov	r0, r1, d8
 800830c:	f7f8 fc06 	bl	8000b1c <__aeabi_dcmplt>
 8008310:	2800      	cmp	r0, #0
 8008312:	d04e      	beq.n	80083b2 <_dtoa_r+0x24a>
 8008314:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008318:	2300      	movs	r3, #0
 800831a:	930c      	str	r3, [sp, #48]	; 0x30
 800831c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800831e:	1b5b      	subs	r3, r3, r5
 8008320:	1e5a      	subs	r2, r3, #1
 8008322:	bf45      	ittet	mi
 8008324:	f1c3 0301 	rsbmi	r3, r3, #1
 8008328:	9305      	strmi	r3, [sp, #20]
 800832a:	2300      	movpl	r3, #0
 800832c:	2300      	movmi	r3, #0
 800832e:	9206      	str	r2, [sp, #24]
 8008330:	bf54      	ite	pl
 8008332:	9305      	strpl	r3, [sp, #20]
 8008334:	9306      	strmi	r3, [sp, #24]
 8008336:	f1bb 0f00 	cmp.w	fp, #0
 800833a:	db3c      	blt.n	80083b6 <_dtoa_r+0x24e>
 800833c:	9b06      	ldr	r3, [sp, #24]
 800833e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008342:	445b      	add	r3, fp
 8008344:	9306      	str	r3, [sp, #24]
 8008346:	2300      	movs	r3, #0
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	2b09      	cmp	r3, #9
 800834e:	d868      	bhi.n	8008422 <_dtoa_r+0x2ba>
 8008350:	2b05      	cmp	r3, #5
 8008352:	bfc4      	itt	gt
 8008354:	3b04      	subgt	r3, #4
 8008356:	9307      	strgt	r3, [sp, #28]
 8008358:	9b07      	ldr	r3, [sp, #28]
 800835a:	f1a3 0302 	sub.w	r3, r3, #2
 800835e:	bfcc      	ite	gt
 8008360:	2500      	movgt	r5, #0
 8008362:	2501      	movle	r5, #1
 8008364:	2b03      	cmp	r3, #3
 8008366:	f200 8085 	bhi.w	8008474 <_dtoa_r+0x30c>
 800836a:	e8df f003 	tbb	[pc, r3]
 800836e:	3b2e      	.short	0x3b2e
 8008370:	5839      	.short	0x5839
 8008372:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008376:	441d      	add	r5, r3
 8008378:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800837c:	2b20      	cmp	r3, #32
 800837e:	bfc1      	itttt	gt
 8008380:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008384:	fa08 f803 	lslgt.w	r8, r8, r3
 8008388:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800838c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008390:	bfd6      	itet	le
 8008392:	f1c3 0320 	rsble	r3, r3, #32
 8008396:	ea48 0003 	orrgt.w	r0, r8, r3
 800839a:	fa06 f003 	lslle.w	r0, r6, r3
 800839e:	f7f8 f8d1 	bl	8000544 <__aeabi_ui2d>
 80083a2:	2201      	movs	r2, #1
 80083a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80083a8:	3d01      	subs	r5, #1
 80083aa:	920e      	str	r2, [sp, #56]	; 0x38
 80083ac:	e76f      	b.n	800828e <_dtoa_r+0x126>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7b3      	b.n	800831a <_dtoa_r+0x1b2>
 80083b2:	900c      	str	r0, [sp, #48]	; 0x30
 80083b4:	e7b2      	b.n	800831c <_dtoa_r+0x1b4>
 80083b6:	9b05      	ldr	r3, [sp, #20]
 80083b8:	eba3 030b 	sub.w	r3, r3, fp
 80083bc:	9305      	str	r3, [sp, #20]
 80083be:	f1cb 0300 	rsb	r3, fp, #0
 80083c2:	9308      	str	r3, [sp, #32]
 80083c4:	2300      	movs	r3, #0
 80083c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c8:	e7bf      	b.n	800834a <_dtoa_r+0x1e2>
 80083ca:	2300      	movs	r3, #0
 80083cc:	9309      	str	r3, [sp, #36]	; 0x24
 80083ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	dc52      	bgt.n	800847a <_dtoa_r+0x312>
 80083d4:	2301      	movs	r3, #1
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	461a      	mov	r2, r3
 80083dc:	920a      	str	r2, [sp, #40]	; 0x28
 80083de:	e00b      	b.n	80083f8 <_dtoa_r+0x290>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e7f3      	b.n	80083cc <_dtoa_r+0x264>
 80083e4:	2300      	movs	r3, #0
 80083e6:	9309      	str	r3, [sp, #36]	; 0x24
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	445b      	add	r3, fp
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	3301      	adds	r3, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	bfb8      	it	lt
 80083f6:	2301      	movlt	r3, #1
 80083f8:	69e0      	ldr	r0, [r4, #28]
 80083fa:	2100      	movs	r1, #0
 80083fc:	2204      	movs	r2, #4
 80083fe:	f102 0614 	add.w	r6, r2, #20
 8008402:	429e      	cmp	r6, r3
 8008404:	d93d      	bls.n	8008482 <_dtoa_r+0x31a>
 8008406:	6041      	str	r1, [r0, #4]
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fd9f 	bl	8008f4c <_Balloc>
 800840e:	9000      	str	r0, [sp, #0]
 8008410:	2800      	cmp	r0, #0
 8008412:	d139      	bne.n	8008488 <_dtoa_r+0x320>
 8008414:	4b16      	ldr	r3, [pc, #88]	; (8008470 <_dtoa_r+0x308>)
 8008416:	4602      	mov	r2, r0
 8008418:	f240 11af 	movw	r1, #431	; 0x1af
 800841c:	e6bd      	b.n	800819a <_dtoa_r+0x32>
 800841e:	2301      	movs	r3, #1
 8008420:	e7e1      	b.n	80083e6 <_dtoa_r+0x27e>
 8008422:	2501      	movs	r5, #1
 8008424:	2300      	movs	r3, #0
 8008426:	9307      	str	r3, [sp, #28]
 8008428:	9509      	str	r5, [sp, #36]	; 0x24
 800842a:	f04f 33ff 	mov.w	r3, #4294967295
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	2200      	movs	r2, #0
 8008434:	2312      	movs	r3, #18
 8008436:	e7d1      	b.n	80083dc <_dtoa_r+0x274>
 8008438:	636f4361 	.word	0x636f4361
 800843c:	3fd287a7 	.word	0x3fd287a7
 8008440:	8b60c8b3 	.word	0x8b60c8b3
 8008444:	3fc68a28 	.word	0x3fc68a28
 8008448:	509f79fb 	.word	0x509f79fb
 800844c:	3fd34413 	.word	0x3fd34413
 8008450:	0800be7d 	.word	0x0800be7d
 8008454:	0800be94 	.word	0x0800be94
 8008458:	7ff00000 	.word	0x7ff00000
 800845c:	0800be79 	.word	0x0800be79
 8008460:	0800be70 	.word	0x0800be70
 8008464:	0800be4d 	.word	0x0800be4d
 8008468:	3ff80000 	.word	0x3ff80000
 800846c:	0800bf80 	.word	0x0800bf80
 8008470:	0800beec 	.word	0x0800beec
 8008474:	2301      	movs	r3, #1
 8008476:	9309      	str	r3, [sp, #36]	; 0x24
 8008478:	e7d7      	b.n	800842a <_dtoa_r+0x2c2>
 800847a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	9304      	str	r3, [sp, #16]
 8008480:	e7ba      	b.n	80083f8 <_dtoa_r+0x290>
 8008482:	3101      	adds	r1, #1
 8008484:	0052      	lsls	r2, r2, #1
 8008486:	e7ba      	b.n	80083fe <_dtoa_r+0x296>
 8008488:	69e3      	ldr	r3, [r4, #28]
 800848a:	9a00      	ldr	r2, [sp, #0]
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	2b0e      	cmp	r3, #14
 8008492:	f200 80a8 	bhi.w	80085e6 <_dtoa_r+0x47e>
 8008496:	2d00      	cmp	r5, #0
 8008498:	f000 80a5 	beq.w	80085e6 <_dtoa_r+0x47e>
 800849c:	f1bb 0f00 	cmp.w	fp, #0
 80084a0:	dd38      	ble.n	8008514 <_dtoa_r+0x3ac>
 80084a2:	4bc0      	ldr	r3, [pc, #768]	; (80087a4 <_dtoa_r+0x63c>)
 80084a4:	f00b 020f 	and.w	r2, fp, #15
 80084a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80084b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80084b8:	d019      	beq.n	80084ee <_dtoa_r+0x386>
 80084ba:	4bbb      	ldr	r3, [pc, #748]	; (80087a8 <_dtoa_r+0x640>)
 80084bc:	ec51 0b18 	vmov	r0, r1, d8
 80084c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084c4:	f7f8 f9e2 	bl	800088c <__aeabi_ddiv>
 80084c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084cc:	f008 080f 	and.w	r8, r8, #15
 80084d0:	2503      	movs	r5, #3
 80084d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80087a8 <_dtoa_r+0x640>
 80084d6:	f1b8 0f00 	cmp.w	r8, #0
 80084da:	d10a      	bne.n	80084f2 <_dtoa_r+0x38a>
 80084dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e0:	4632      	mov	r2, r6
 80084e2:	463b      	mov	r3, r7
 80084e4:	f7f8 f9d2 	bl	800088c <__aeabi_ddiv>
 80084e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084ec:	e02b      	b.n	8008546 <_dtoa_r+0x3de>
 80084ee:	2502      	movs	r5, #2
 80084f0:	e7ef      	b.n	80084d2 <_dtoa_r+0x36a>
 80084f2:	f018 0f01 	tst.w	r8, #1
 80084f6:	d008      	beq.n	800850a <_dtoa_r+0x3a2>
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008500:	f7f8 f89a 	bl	8000638 <__aeabi_dmul>
 8008504:	3501      	adds	r5, #1
 8008506:	4606      	mov	r6, r0
 8008508:	460f      	mov	r7, r1
 800850a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800850e:	f109 0908 	add.w	r9, r9, #8
 8008512:	e7e0      	b.n	80084d6 <_dtoa_r+0x36e>
 8008514:	f000 809f 	beq.w	8008656 <_dtoa_r+0x4ee>
 8008518:	f1cb 0600 	rsb	r6, fp, #0
 800851c:	4ba1      	ldr	r3, [pc, #644]	; (80087a4 <_dtoa_r+0x63c>)
 800851e:	4fa2      	ldr	r7, [pc, #648]	; (80087a8 <_dtoa_r+0x640>)
 8008520:	f006 020f 	and.w	r2, r6, #15
 8008524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	ec51 0b18 	vmov	r0, r1, d8
 8008530:	f7f8 f882 	bl	8000638 <__aeabi_dmul>
 8008534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008538:	1136      	asrs	r6, r6, #4
 800853a:	2300      	movs	r3, #0
 800853c:	2502      	movs	r5, #2
 800853e:	2e00      	cmp	r6, #0
 8008540:	d17e      	bne.n	8008640 <_dtoa_r+0x4d8>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1d0      	bne.n	80084e8 <_dtoa_r+0x380>
 8008546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008548:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8084 	beq.w	800865a <_dtoa_r+0x4f2>
 8008552:	4b96      	ldr	r3, [pc, #600]	; (80087ac <_dtoa_r+0x644>)
 8008554:	2200      	movs	r2, #0
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f8 fadf 	bl	8000b1c <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	d07b      	beq.n	800865a <_dtoa_r+0x4f2>
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d078      	beq.n	800865a <_dtoa_r+0x4f2>
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	dd39      	ble.n	80085e2 <_dtoa_r+0x47a>
 800856e:	4b90      	ldr	r3, [pc, #576]	; (80087b0 <_dtoa_r+0x648>)
 8008570:	2200      	movs	r2, #0
 8008572:	4640      	mov	r0, r8
 8008574:	4649      	mov	r1, r9
 8008576:	f7f8 f85f 	bl	8000638 <__aeabi_dmul>
 800857a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800857e:	9e01      	ldr	r6, [sp, #4]
 8008580:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008584:	3501      	adds	r5, #1
 8008586:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800858a:	4628      	mov	r0, r5
 800858c:	f7f7 ffea 	bl	8000564 <__aeabi_i2d>
 8008590:	4642      	mov	r2, r8
 8008592:	464b      	mov	r3, r9
 8008594:	f7f8 f850 	bl	8000638 <__aeabi_dmul>
 8008598:	4b86      	ldr	r3, [pc, #536]	; (80087b4 <_dtoa_r+0x64c>)
 800859a:	2200      	movs	r2, #0
 800859c:	f7f7 fe96 	bl	80002cc <__adddf3>
 80085a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	2e00      	cmp	r6, #0
 80085ac:	d158      	bne.n	8008660 <_dtoa_r+0x4f8>
 80085ae:	4b82      	ldr	r3, [pc, #520]	; (80087b8 <_dtoa_r+0x650>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	f7f7 fe87 	bl	80002c8 <__aeabi_dsub>
 80085ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085be:	4680      	mov	r8, r0
 80085c0:	4689      	mov	r9, r1
 80085c2:	f7f8 fac9 	bl	8000b58 <__aeabi_dcmpgt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f040 8296 	bne.w	8008af8 <_dtoa_r+0x990>
 80085cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085d0:	4640      	mov	r0, r8
 80085d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085d6:	4649      	mov	r1, r9
 80085d8:	f7f8 faa0 	bl	8000b1c <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	f040 8289 	bne.w	8008af4 <_dtoa_r+0x98c>
 80085e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80085e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f2c0 814e 	blt.w	800888a <_dtoa_r+0x722>
 80085ee:	f1bb 0f0e 	cmp.w	fp, #14
 80085f2:	f300 814a 	bgt.w	800888a <_dtoa_r+0x722>
 80085f6:	4b6b      	ldr	r3, [pc, #428]	; (80087a4 <_dtoa_r+0x63c>)
 80085f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80085fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	f280 80dc 	bge.w	80087c0 <_dtoa_r+0x658>
 8008608:	9b04      	ldr	r3, [sp, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f300 80d8 	bgt.w	80087c0 <_dtoa_r+0x658>
 8008610:	f040 826f 	bne.w	8008af2 <_dtoa_r+0x98a>
 8008614:	4b68      	ldr	r3, [pc, #416]	; (80087b8 <_dtoa_r+0x650>)
 8008616:	2200      	movs	r2, #0
 8008618:	4640      	mov	r0, r8
 800861a:	4649      	mov	r1, r9
 800861c:	f7f8 f80c 	bl	8000638 <__aeabi_dmul>
 8008620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008624:	f7f8 fa8e 	bl	8000b44 <__aeabi_dcmpge>
 8008628:	9e04      	ldr	r6, [sp, #16]
 800862a:	4637      	mov	r7, r6
 800862c:	2800      	cmp	r0, #0
 800862e:	f040 8245 	bne.w	8008abc <_dtoa_r+0x954>
 8008632:	9d00      	ldr	r5, [sp, #0]
 8008634:	2331      	movs	r3, #49	; 0x31
 8008636:	f805 3b01 	strb.w	r3, [r5], #1
 800863a:	f10b 0b01 	add.w	fp, fp, #1
 800863e:	e241      	b.n	8008ac4 <_dtoa_r+0x95c>
 8008640:	07f2      	lsls	r2, r6, #31
 8008642:	d505      	bpl.n	8008650 <_dtoa_r+0x4e8>
 8008644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008648:	f7f7 fff6 	bl	8000638 <__aeabi_dmul>
 800864c:	3501      	adds	r5, #1
 800864e:	2301      	movs	r3, #1
 8008650:	1076      	asrs	r6, r6, #1
 8008652:	3708      	adds	r7, #8
 8008654:	e773      	b.n	800853e <_dtoa_r+0x3d6>
 8008656:	2502      	movs	r5, #2
 8008658:	e775      	b.n	8008546 <_dtoa_r+0x3de>
 800865a:	9e04      	ldr	r6, [sp, #16]
 800865c:	465f      	mov	r7, fp
 800865e:	e792      	b.n	8008586 <_dtoa_r+0x41e>
 8008660:	9900      	ldr	r1, [sp, #0]
 8008662:	4b50      	ldr	r3, [pc, #320]	; (80087a4 <_dtoa_r+0x63c>)
 8008664:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008668:	4431      	add	r1, r6
 800866a:	9102      	str	r1, [sp, #8]
 800866c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866e:	eeb0 9a47 	vmov.f32	s18, s14
 8008672:	eef0 9a67 	vmov.f32	s19, s15
 8008676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800867a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800867e:	2900      	cmp	r1, #0
 8008680:	d044      	beq.n	800870c <_dtoa_r+0x5a4>
 8008682:	494e      	ldr	r1, [pc, #312]	; (80087bc <_dtoa_r+0x654>)
 8008684:	2000      	movs	r0, #0
 8008686:	f7f8 f901 	bl	800088c <__aeabi_ddiv>
 800868a:	ec53 2b19 	vmov	r2, r3, d9
 800868e:	f7f7 fe1b 	bl	80002c8 <__aeabi_dsub>
 8008692:	9d00      	ldr	r5, [sp, #0]
 8008694:	ec41 0b19 	vmov	d9, r0, r1
 8008698:	4649      	mov	r1, r9
 800869a:	4640      	mov	r0, r8
 800869c:	f7f8 fa7c 	bl	8000b98 <__aeabi_d2iz>
 80086a0:	4606      	mov	r6, r0
 80086a2:	f7f7 ff5f 	bl	8000564 <__aeabi_i2d>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4640      	mov	r0, r8
 80086ac:	4649      	mov	r1, r9
 80086ae:	f7f7 fe0b 	bl	80002c8 <__aeabi_dsub>
 80086b2:	3630      	adds	r6, #48	; 0x30
 80086b4:	f805 6b01 	strb.w	r6, [r5], #1
 80086b8:	ec53 2b19 	vmov	r2, r3, d9
 80086bc:	4680      	mov	r8, r0
 80086be:	4689      	mov	r9, r1
 80086c0:	f7f8 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d164      	bne.n	8008792 <_dtoa_r+0x62a>
 80086c8:	4642      	mov	r2, r8
 80086ca:	464b      	mov	r3, r9
 80086cc:	4937      	ldr	r1, [pc, #220]	; (80087ac <_dtoa_r+0x644>)
 80086ce:	2000      	movs	r0, #0
 80086d0:	f7f7 fdfa 	bl	80002c8 <__aeabi_dsub>
 80086d4:	ec53 2b19 	vmov	r2, r3, d9
 80086d8:	f7f8 fa20 	bl	8000b1c <__aeabi_dcmplt>
 80086dc:	2800      	cmp	r0, #0
 80086de:	f040 80b6 	bne.w	800884e <_dtoa_r+0x6e6>
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	429d      	cmp	r5, r3
 80086e6:	f43f af7c 	beq.w	80085e2 <_dtoa_r+0x47a>
 80086ea:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <_dtoa_r+0x648>)
 80086ec:	ec51 0b19 	vmov	r0, r1, d9
 80086f0:	2200      	movs	r2, #0
 80086f2:	f7f7 ffa1 	bl	8000638 <__aeabi_dmul>
 80086f6:	4b2e      	ldr	r3, [pc, #184]	; (80087b0 <_dtoa_r+0x648>)
 80086f8:	ec41 0b19 	vmov	d9, r0, r1
 80086fc:	2200      	movs	r2, #0
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f7 ff99 	bl	8000638 <__aeabi_dmul>
 8008706:	4680      	mov	r8, r0
 8008708:	4689      	mov	r9, r1
 800870a:	e7c5      	b.n	8008698 <_dtoa_r+0x530>
 800870c:	ec51 0b17 	vmov	r0, r1, d7
 8008710:	f7f7 ff92 	bl	8000638 <__aeabi_dmul>
 8008714:	9b02      	ldr	r3, [sp, #8]
 8008716:	9d00      	ldr	r5, [sp, #0]
 8008718:	930f      	str	r3, [sp, #60]	; 0x3c
 800871a:	ec41 0b19 	vmov	d9, r0, r1
 800871e:	4649      	mov	r1, r9
 8008720:	4640      	mov	r0, r8
 8008722:	f7f8 fa39 	bl	8000b98 <__aeabi_d2iz>
 8008726:	4606      	mov	r6, r0
 8008728:	f7f7 ff1c 	bl	8000564 <__aeabi_i2d>
 800872c:	3630      	adds	r6, #48	; 0x30
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4640      	mov	r0, r8
 8008734:	4649      	mov	r1, r9
 8008736:	f7f7 fdc7 	bl	80002c8 <__aeabi_dsub>
 800873a:	f805 6b01 	strb.w	r6, [r5], #1
 800873e:	9b02      	ldr	r3, [sp, #8]
 8008740:	429d      	cmp	r5, r3
 8008742:	4680      	mov	r8, r0
 8008744:	4689      	mov	r9, r1
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	d124      	bne.n	8008796 <_dtoa_r+0x62e>
 800874c:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <_dtoa_r+0x654>)
 800874e:	ec51 0b19 	vmov	r0, r1, d9
 8008752:	f7f7 fdbb 	bl	80002cc <__adddf3>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f8 f9fb 	bl	8000b58 <__aeabi_dcmpgt>
 8008762:	2800      	cmp	r0, #0
 8008764:	d173      	bne.n	800884e <_dtoa_r+0x6e6>
 8008766:	ec53 2b19 	vmov	r2, r3, d9
 800876a:	4914      	ldr	r1, [pc, #80]	; (80087bc <_dtoa_r+0x654>)
 800876c:	2000      	movs	r0, #0
 800876e:	f7f7 fdab 	bl	80002c8 <__aeabi_dsub>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4640      	mov	r0, r8
 8008778:	4649      	mov	r1, r9
 800877a:	f7f8 f9cf 	bl	8000b1c <__aeabi_dcmplt>
 800877e:	2800      	cmp	r0, #0
 8008780:	f43f af2f 	beq.w	80085e2 <_dtoa_r+0x47a>
 8008784:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008786:	1e6b      	subs	r3, r5, #1
 8008788:	930f      	str	r3, [sp, #60]	; 0x3c
 800878a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800878e:	2b30      	cmp	r3, #48	; 0x30
 8008790:	d0f8      	beq.n	8008784 <_dtoa_r+0x61c>
 8008792:	46bb      	mov	fp, r7
 8008794:	e04a      	b.n	800882c <_dtoa_r+0x6c4>
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <_dtoa_r+0x648>)
 8008798:	f7f7 ff4e 	bl	8000638 <__aeabi_dmul>
 800879c:	4680      	mov	r8, r0
 800879e:	4689      	mov	r9, r1
 80087a0:	e7bd      	b.n	800871e <_dtoa_r+0x5b6>
 80087a2:	bf00      	nop
 80087a4:	0800bf80 	.word	0x0800bf80
 80087a8:	0800bf58 	.word	0x0800bf58
 80087ac:	3ff00000 	.word	0x3ff00000
 80087b0:	40240000 	.word	0x40240000
 80087b4:	401c0000 	.word	0x401c0000
 80087b8:	40140000 	.word	0x40140000
 80087bc:	3fe00000 	.word	0x3fe00000
 80087c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087c4:	9d00      	ldr	r5, [sp, #0]
 80087c6:	4642      	mov	r2, r8
 80087c8:	464b      	mov	r3, r9
 80087ca:	4630      	mov	r0, r6
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f8 f85d 	bl	800088c <__aeabi_ddiv>
 80087d2:	f7f8 f9e1 	bl	8000b98 <__aeabi_d2iz>
 80087d6:	9001      	str	r0, [sp, #4]
 80087d8:	f7f7 fec4 	bl	8000564 <__aeabi_i2d>
 80087dc:	4642      	mov	r2, r8
 80087de:	464b      	mov	r3, r9
 80087e0:	f7f7 ff2a 	bl	8000638 <__aeabi_dmul>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4630      	mov	r0, r6
 80087ea:	4639      	mov	r1, r7
 80087ec:	f7f7 fd6c 	bl	80002c8 <__aeabi_dsub>
 80087f0:	9e01      	ldr	r6, [sp, #4]
 80087f2:	9f04      	ldr	r7, [sp, #16]
 80087f4:	3630      	adds	r6, #48	; 0x30
 80087f6:	f805 6b01 	strb.w	r6, [r5], #1
 80087fa:	9e00      	ldr	r6, [sp, #0]
 80087fc:	1bae      	subs	r6, r5, r6
 80087fe:	42b7      	cmp	r7, r6
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	d134      	bne.n	8008870 <_dtoa_r+0x708>
 8008806:	f7f7 fd61 	bl	80002cc <__adddf3>
 800880a:	4642      	mov	r2, r8
 800880c:	464b      	mov	r3, r9
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	f7f8 f9a1 	bl	8000b58 <__aeabi_dcmpgt>
 8008816:	b9c8      	cbnz	r0, 800884c <_dtoa_r+0x6e4>
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	f7f8 f972 	bl	8000b08 <__aeabi_dcmpeq>
 8008824:	b110      	cbz	r0, 800882c <_dtoa_r+0x6c4>
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	07db      	lsls	r3, r3, #31
 800882a:	d40f      	bmi.n	800884c <_dtoa_r+0x6e4>
 800882c:	4651      	mov	r1, sl
 800882e:	4620      	mov	r0, r4
 8008830:	f000 fbcc 	bl	8008fcc <_Bfree>
 8008834:	2300      	movs	r3, #0
 8008836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008838:	702b      	strb	r3, [r5, #0]
 800883a:	f10b 0301 	add.w	r3, fp, #1
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008842:	2b00      	cmp	r3, #0
 8008844:	f43f ace2 	beq.w	800820c <_dtoa_r+0xa4>
 8008848:	601d      	str	r5, [r3, #0]
 800884a:	e4df      	b.n	800820c <_dtoa_r+0xa4>
 800884c:	465f      	mov	r7, fp
 800884e:	462b      	mov	r3, r5
 8008850:	461d      	mov	r5, r3
 8008852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008856:	2a39      	cmp	r2, #57	; 0x39
 8008858:	d106      	bne.n	8008868 <_dtoa_r+0x700>
 800885a:	9a00      	ldr	r2, [sp, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d1f7      	bne.n	8008850 <_dtoa_r+0x6e8>
 8008860:	9900      	ldr	r1, [sp, #0]
 8008862:	2230      	movs	r2, #48	; 0x30
 8008864:	3701      	adds	r7, #1
 8008866:	700a      	strb	r2, [r1, #0]
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	3201      	adds	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	e790      	b.n	8008792 <_dtoa_r+0x62a>
 8008870:	4ba3      	ldr	r3, [pc, #652]	; (8008b00 <_dtoa_r+0x998>)
 8008872:	2200      	movs	r2, #0
 8008874:	f7f7 fee0 	bl	8000638 <__aeabi_dmul>
 8008878:	2200      	movs	r2, #0
 800887a:	2300      	movs	r3, #0
 800887c:	4606      	mov	r6, r0
 800887e:	460f      	mov	r7, r1
 8008880:	f7f8 f942 	bl	8000b08 <__aeabi_dcmpeq>
 8008884:	2800      	cmp	r0, #0
 8008886:	d09e      	beq.n	80087c6 <_dtoa_r+0x65e>
 8008888:	e7d0      	b.n	800882c <_dtoa_r+0x6c4>
 800888a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888c:	2a00      	cmp	r2, #0
 800888e:	f000 80ca 	beq.w	8008a26 <_dtoa_r+0x8be>
 8008892:	9a07      	ldr	r2, [sp, #28]
 8008894:	2a01      	cmp	r2, #1
 8008896:	f300 80ad 	bgt.w	80089f4 <_dtoa_r+0x88c>
 800889a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800889c:	2a00      	cmp	r2, #0
 800889e:	f000 80a5 	beq.w	80089ec <_dtoa_r+0x884>
 80088a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088a6:	9e08      	ldr	r6, [sp, #32]
 80088a8:	9d05      	ldr	r5, [sp, #20]
 80088aa:	9a05      	ldr	r2, [sp, #20]
 80088ac:	441a      	add	r2, r3
 80088ae:	9205      	str	r2, [sp, #20]
 80088b0:	9a06      	ldr	r2, [sp, #24]
 80088b2:	2101      	movs	r1, #1
 80088b4:	441a      	add	r2, r3
 80088b6:	4620      	mov	r0, r4
 80088b8:	9206      	str	r2, [sp, #24]
 80088ba:	f000 fc3d 	bl	8009138 <__i2b>
 80088be:	4607      	mov	r7, r0
 80088c0:	b165      	cbz	r5, 80088dc <_dtoa_r+0x774>
 80088c2:	9b06      	ldr	r3, [sp, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dd09      	ble.n	80088dc <_dtoa_r+0x774>
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	9a05      	ldr	r2, [sp, #20]
 80088cc:	bfa8      	it	ge
 80088ce:	462b      	movge	r3, r5
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	9205      	str	r2, [sp, #20]
 80088d4:	9a06      	ldr	r2, [sp, #24]
 80088d6:	1aed      	subs	r5, r5, r3
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	9306      	str	r3, [sp, #24]
 80088dc:	9b08      	ldr	r3, [sp, #32]
 80088de:	b1f3      	cbz	r3, 800891e <_dtoa_r+0x7b6>
 80088e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80a3 	beq.w	8008a2e <_dtoa_r+0x8c6>
 80088e8:	2e00      	cmp	r6, #0
 80088ea:	dd10      	ble.n	800890e <_dtoa_r+0x7a6>
 80088ec:	4639      	mov	r1, r7
 80088ee:	4632      	mov	r2, r6
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fce1 	bl	80092b8 <__pow5mult>
 80088f6:	4652      	mov	r2, sl
 80088f8:	4601      	mov	r1, r0
 80088fa:	4607      	mov	r7, r0
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fc31 	bl	8009164 <__multiply>
 8008902:	4651      	mov	r1, sl
 8008904:	4680      	mov	r8, r0
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fb60 	bl	8008fcc <_Bfree>
 800890c:	46c2      	mov	sl, r8
 800890e:	9b08      	ldr	r3, [sp, #32]
 8008910:	1b9a      	subs	r2, r3, r6
 8008912:	d004      	beq.n	800891e <_dtoa_r+0x7b6>
 8008914:	4651      	mov	r1, sl
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fcce 	bl	80092b8 <__pow5mult>
 800891c:	4682      	mov	sl, r0
 800891e:	2101      	movs	r1, #1
 8008920:	4620      	mov	r0, r4
 8008922:	f000 fc09 	bl	8009138 <__i2b>
 8008926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008928:	2b00      	cmp	r3, #0
 800892a:	4606      	mov	r6, r0
 800892c:	f340 8081 	ble.w	8008a32 <_dtoa_r+0x8ca>
 8008930:	461a      	mov	r2, r3
 8008932:	4601      	mov	r1, r0
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fcbf 	bl	80092b8 <__pow5mult>
 800893a:	9b07      	ldr	r3, [sp, #28]
 800893c:	2b01      	cmp	r3, #1
 800893e:	4606      	mov	r6, r0
 8008940:	dd7a      	ble.n	8008a38 <_dtoa_r+0x8d0>
 8008942:	f04f 0800 	mov.w	r8, #0
 8008946:	6933      	ldr	r3, [r6, #16]
 8008948:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800894c:	6918      	ldr	r0, [r3, #16]
 800894e:	f000 fba5 	bl	800909c <__hi0bits>
 8008952:	f1c0 0020 	rsb	r0, r0, #32
 8008956:	9b06      	ldr	r3, [sp, #24]
 8008958:	4418      	add	r0, r3
 800895a:	f010 001f 	ands.w	r0, r0, #31
 800895e:	f000 8094 	beq.w	8008a8a <_dtoa_r+0x922>
 8008962:	f1c0 0320 	rsb	r3, r0, #32
 8008966:	2b04      	cmp	r3, #4
 8008968:	f340 8085 	ble.w	8008a76 <_dtoa_r+0x90e>
 800896c:	9b05      	ldr	r3, [sp, #20]
 800896e:	f1c0 001c 	rsb	r0, r0, #28
 8008972:	4403      	add	r3, r0
 8008974:	9305      	str	r3, [sp, #20]
 8008976:	9b06      	ldr	r3, [sp, #24]
 8008978:	4403      	add	r3, r0
 800897a:	4405      	add	r5, r0
 800897c:	9306      	str	r3, [sp, #24]
 800897e:	9b05      	ldr	r3, [sp, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	dd05      	ble.n	8008990 <_dtoa_r+0x828>
 8008984:	4651      	mov	r1, sl
 8008986:	461a      	mov	r2, r3
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fcef 	bl	800936c <__lshift>
 800898e:	4682      	mov	sl, r0
 8008990:	9b06      	ldr	r3, [sp, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	dd05      	ble.n	80089a2 <_dtoa_r+0x83a>
 8008996:	4631      	mov	r1, r6
 8008998:	461a      	mov	r2, r3
 800899a:	4620      	mov	r0, r4
 800899c:	f000 fce6 	bl	800936c <__lshift>
 80089a0:	4606      	mov	r6, r0
 80089a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d072      	beq.n	8008a8e <_dtoa_r+0x926>
 80089a8:	4631      	mov	r1, r6
 80089aa:	4650      	mov	r0, sl
 80089ac:	f000 fd4a 	bl	8009444 <__mcmp>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	da6c      	bge.n	8008a8e <_dtoa_r+0x926>
 80089b4:	2300      	movs	r3, #0
 80089b6:	4651      	mov	r1, sl
 80089b8:	220a      	movs	r2, #10
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fb28 	bl	8009010 <__multadd>
 80089c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089c6:	4682      	mov	sl, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 81b0 	beq.w	8008d2e <_dtoa_r+0xbc6>
 80089ce:	2300      	movs	r3, #0
 80089d0:	4639      	mov	r1, r7
 80089d2:	220a      	movs	r2, #10
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 fb1b 	bl	8009010 <__multadd>
 80089da:	9b01      	ldr	r3, [sp, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	4607      	mov	r7, r0
 80089e0:	f300 8096 	bgt.w	8008b10 <_dtoa_r+0x9a8>
 80089e4:	9b07      	ldr	r3, [sp, #28]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	dc59      	bgt.n	8008a9e <_dtoa_r+0x936>
 80089ea:	e091      	b.n	8008b10 <_dtoa_r+0x9a8>
 80089ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089f2:	e758      	b.n	80088a6 <_dtoa_r+0x73e>
 80089f4:	9b04      	ldr	r3, [sp, #16]
 80089f6:	1e5e      	subs	r6, r3, #1
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	42b3      	cmp	r3, r6
 80089fc:	bfbf      	itttt	lt
 80089fe:	9b08      	ldrlt	r3, [sp, #32]
 8008a00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008a02:	9608      	strlt	r6, [sp, #32]
 8008a04:	1af3      	sublt	r3, r6, r3
 8008a06:	bfb4      	ite	lt
 8008a08:	18d2      	addlt	r2, r2, r3
 8008a0a:	1b9e      	subge	r6, r3, r6
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	bfbc      	itt	lt
 8008a10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a12:	2600      	movlt	r6, #0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bfb7      	itett	lt
 8008a18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a20:	1a9d      	sublt	r5, r3, r2
 8008a22:	2300      	movlt	r3, #0
 8008a24:	e741      	b.n	80088aa <_dtoa_r+0x742>
 8008a26:	9e08      	ldr	r6, [sp, #32]
 8008a28:	9d05      	ldr	r5, [sp, #20]
 8008a2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a2c:	e748      	b.n	80088c0 <_dtoa_r+0x758>
 8008a2e:	9a08      	ldr	r2, [sp, #32]
 8008a30:	e770      	b.n	8008914 <_dtoa_r+0x7ac>
 8008a32:	9b07      	ldr	r3, [sp, #28]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	dc19      	bgt.n	8008a6c <_dtoa_r+0x904>
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	b9bb      	cbnz	r3, 8008a6c <_dtoa_r+0x904>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a42:	b99b      	cbnz	r3, 8008a6c <_dtoa_r+0x904>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a4a:	0d1b      	lsrs	r3, r3, #20
 8008a4c:	051b      	lsls	r3, r3, #20
 8008a4e:	b183      	cbz	r3, 8008a72 <_dtoa_r+0x90a>
 8008a50:	9b05      	ldr	r3, [sp, #20]
 8008a52:	3301      	adds	r3, #1
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	9b06      	ldr	r3, [sp, #24]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	9306      	str	r3, [sp, #24]
 8008a5c:	f04f 0801 	mov.w	r8, #1
 8008a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f47f af6f 	bne.w	8008946 <_dtoa_r+0x7de>
 8008a68:	2001      	movs	r0, #1
 8008a6a:	e774      	b.n	8008956 <_dtoa_r+0x7ee>
 8008a6c:	f04f 0800 	mov.w	r8, #0
 8008a70:	e7f6      	b.n	8008a60 <_dtoa_r+0x8f8>
 8008a72:	4698      	mov	r8, r3
 8008a74:	e7f4      	b.n	8008a60 <_dtoa_r+0x8f8>
 8008a76:	d082      	beq.n	800897e <_dtoa_r+0x816>
 8008a78:	9a05      	ldr	r2, [sp, #20]
 8008a7a:	331c      	adds	r3, #28
 8008a7c:	441a      	add	r2, r3
 8008a7e:	9205      	str	r2, [sp, #20]
 8008a80:	9a06      	ldr	r2, [sp, #24]
 8008a82:	441a      	add	r2, r3
 8008a84:	441d      	add	r5, r3
 8008a86:	9206      	str	r2, [sp, #24]
 8008a88:	e779      	b.n	800897e <_dtoa_r+0x816>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	e7f4      	b.n	8008a78 <_dtoa_r+0x910>
 8008a8e:	9b04      	ldr	r3, [sp, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc37      	bgt.n	8008b04 <_dtoa_r+0x99c>
 8008a94:	9b07      	ldr	r3, [sp, #28]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	dd34      	ble.n	8008b04 <_dtoa_r+0x99c>
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	b963      	cbnz	r3, 8008abc <_dtoa_r+0x954>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	2205      	movs	r2, #5
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 fab2 	bl	8009010 <__multadd>
 8008aac:	4601      	mov	r1, r0
 8008aae:	4606      	mov	r6, r0
 8008ab0:	4650      	mov	r0, sl
 8008ab2:	f000 fcc7 	bl	8009444 <__mcmp>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f73f adbb 	bgt.w	8008632 <_dtoa_r+0x4ca>
 8008abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abe:	9d00      	ldr	r5, [sp, #0]
 8008ac0:	ea6f 0b03 	mvn.w	fp, r3
 8008ac4:	f04f 0800 	mov.w	r8, #0
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fa7e 	bl	8008fcc <_Bfree>
 8008ad0:	2f00      	cmp	r7, #0
 8008ad2:	f43f aeab 	beq.w	800882c <_dtoa_r+0x6c4>
 8008ad6:	f1b8 0f00 	cmp.w	r8, #0
 8008ada:	d005      	beq.n	8008ae8 <_dtoa_r+0x980>
 8008adc:	45b8      	cmp	r8, r7
 8008ade:	d003      	beq.n	8008ae8 <_dtoa_r+0x980>
 8008ae0:	4641      	mov	r1, r8
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fa72 	bl	8008fcc <_Bfree>
 8008ae8:	4639      	mov	r1, r7
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fa6e 	bl	8008fcc <_Bfree>
 8008af0:	e69c      	b.n	800882c <_dtoa_r+0x6c4>
 8008af2:	2600      	movs	r6, #0
 8008af4:	4637      	mov	r7, r6
 8008af6:	e7e1      	b.n	8008abc <_dtoa_r+0x954>
 8008af8:	46bb      	mov	fp, r7
 8008afa:	4637      	mov	r7, r6
 8008afc:	e599      	b.n	8008632 <_dtoa_r+0x4ca>
 8008afe:	bf00      	nop
 8008b00:	40240000 	.word	0x40240000
 8008b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80c8 	beq.w	8008c9c <_dtoa_r+0xb34>
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	2d00      	cmp	r5, #0
 8008b12:	dd05      	ble.n	8008b20 <_dtoa_r+0x9b8>
 8008b14:	4639      	mov	r1, r7
 8008b16:	462a      	mov	r2, r5
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fc27 	bl	800936c <__lshift>
 8008b1e:	4607      	mov	r7, r0
 8008b20:	f1b8 0f00 	cmp.w	r8, #0
 8008b24:	d05b      	beq.n	8008bde <_dtoa_r+0xa76>
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa0f 	bl	8008f4c <_Balloc>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	b928      	cbnz	r0, 8008b3e <_dtoa_r+0x9d6>
 8008b32:	4b83      	ldr	r3, [pc, #524]	; (8008d40 <_dtoa_r+0xbd8>)
 8008b34:	4602      	mov	r2, r0
 8008b36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008b3a:	f7ff bb2e 	b.w	800819a <_dtoa_r+0x32>
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	3202      	adds	r2, #2
 8008b42:	0092      	lsls	r2, r2, #2
 8008b44:	f107 010c 	add.w	r1, r7, #12
 8008b48:	300c      	adds	r0, #12
 8008b4a:	f7ff fa77 	bl	800803c <memcpy>
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4629      	mov	r1, r5
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fc0a 	bl	800936c <__lshift>
 8008b58:	9b00      	ldr	r3, [sp, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b62:	4413      	add	r3, r2
 8008b64:	9308      	str	r3, [sp, #32]
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	46b8      	mov	r8, r7
 8008b6e:	9306      	str	r3, [sp, #24]
 8008b70:	4607      	mov	r7, r0
 8008b72:	9b04      	ldr	r3, [sp, #16]
 8008b74:	4631      	mov	r1, r6
 8008b76:	3b01      	subs	r3, #1
 8008b78:	4650      	mov	r0, sl
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	f7ff fa6c 	bl	8008058 <quorem>
 8008b80:	4641      	mov	r1, r8
 8008b82:	9002      	str	r0, [sp, #8]
 8008b84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b88:	4650      	mov	r0, sl
 8008b8a:	f000 fc5b 	bl	8009444 <__mcmp>
 8008b8e:	463a      	mov	r2, r7
 8008b90:	9005      	str	r0, [sp, #20]
 8008b92:	4631      	mov	r1, r6
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 fc71 	bl	800947c <__mdiff>
 8008b9a:	68c2      	ldr	r2, [r0, #12]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	bb02      	cbnz	r2, 8008be2 <_dtoa_r+0xa7a>
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f000 fc4e 	bl	8009444 <__mcmp>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4629      	mov	r1, r5
 8008bac:	4620      	mov	r0, r4
 8008bae:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb0:	f000 fa0c 	bl	8008fcc <_Bfree>
 8008bb4:	9b07      	ldr	r3, [sp, #28]
 8008bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb8:	9d04      	ldr	r5, [sp, #16]
 8008bba:	ea43 0102 	orr.w	r1, r3, r2
 8008bbe:	9b06      	ldr	r3, [sp, #24]
 8008bc0:	4319      	orrs	r1, r3
 8008bc2:	d110      	bne.n	8008be6 <_dtoa_r+0xa7e>
 8008bc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bc8:	d029      	beq.n	8008c1e <_dtoa_r+0xab6>
 8008bca:	9b05      	ldr	r3, [sp, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dd02      	ble.n	8008bd6 <_dtoa_r+0xa6e>
 8008bd0:	9b02      	ldr	r3, [sp, #8]
 8008bd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	f883 9000 	strb.w	r9, [r3]
 8008bdc:	e774      	b.n	8008ac8 <_dtoa_r+0x960>
 8008bde:	4638      	mov	r0, r7
 8008be0:	e7ba      	b.n	8008b58 <_dtoa_r+0x9f0>
 8008be2:	2201      	movs	r2, #1
 8008be4:	e7e1      	b.n	8008baa <_dtoa_r+0xa42>
 8008be6:	9b05      	ldr	r3, [sp, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	db04      	blt.n	8008bf6 <_dtoa_r+0xa8e>
 8008bec:	9907      	ldr	r1, [sp, #28]
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	9906      	ldr	r1, [sp, #24]
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	d120      	bne.n	8008c38 <_dtoa_r+0xad0>
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	dded      	ble.n	8008bd6 <_dtoa_r+0xa6e>
 8008bfa:	4651      	mov	r1, sl
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 fbb4 	bl	800936c <__lshift>
 8008c04:	4631      	mov	r1, r6
 8008c06:	4682      	mov	sl, r0
 8008c08:	f000 fc1c 	bl	8009444 <__mcmp>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	dc03      	bgt.n	8008c18 <_dtoa_r+0xab0>
 8008c10:	d1e1      	bne.n	8008bd6 <_dtoa_r+0xa6e>
 8008c12:	f019 0f01 	tst.w	r9, #1
 8008c16:	d0de      	beq.n	8008bd6 <_dtoa_r+0xa6e>
 8008c18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c1c:	d1d8      	bne.n	8008bd0 <_dtoa_r+0xa68>
 8008c1e:	9a01      	ldr	r2, [sp, #4]
 8008c20:	2339      	movs	r3, #57	; 0x39
 8008c22:	7013      	strb	r3, [r2, #0]
 8008c24:	462b      	mov	r3, r5
 8008c26:	461d      	mov	r5, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c2e:	2a39      	cmp	r2, #57	; 0x39
 8008c30:	d06c      	beq.n	8008d0c <_dtoa_r+0xba4>
 8008c32:	3201      	adds	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e747      	b.n	8008ac8 <_dtoa_r+0x960>
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	dd07      	ble.n	8008c4c <_dtoa_r+0xae4>
 8008c3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c40:	d0ed      	beq.n	8008c1e <_dtoa_r+0xab6>
 8008c42:	9a01      	ldr	r2, [sp, #4]
 8008c44:	f109 0301 	add.w	r3, r9, #1
 8008c48:	7013      	strb	r3, [r2, #0]
 8008c4a:	e73d      	b.n	8008ac8 <_dtoa_r+0x960>
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	9a08      	ldr	r2, [sp, #32]
 8008c50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d043      	beq.n	8008ce0 <_dtoa_r+0xb78>
 8008c58:	4651      	mov	r1, sl
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 f9d6 	bl	8009010 <__multadd>
 8008c64:	45b8      	cmp	r8, r7
 8008c66:	4682      	mov	sl, r0
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	f04f 020a 	mov.w	r2, #10
 8008c70:	4641      	mov	r1, r8
 8008c72:	4620      	mov	r0, r4
 8008c74:	d107      	bne.n	8008c86 <_dtoa_r+0xb1e>
 8008c76:	f000 f9cb 	bl	8009010 <__multadd>
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	3301      	adds	r3, #1
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	e775      	b.n	8008b72 <_dtoa_r+0xa0a>
 8008c86:	f000 f9c3 	bl	8009010 <__multadd>
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	2300      	movs	r3, #0
 8008c90:	220a      	movs	r2, #10
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 f9bc 	bl	8009010 <__multadd>
 8008c98:	4607      	mov	r7, r0
 8008c9a:	e7f0      	b.n	8008c7e <_dtoa_r+0xb16>
 8008c9c:	9b04      	ldr	r3, [sp, #16]
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	9d00      	ldr	r5, [sp, #0]
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4650      	mov	r0, sl
 8008ca6:	f7ff f9d7 	bl	8008058 <quorem>
 8008caa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008cae:	9b00      	ldr	r3, [sp, #0]
 8008cb0:	f805 9b01 	strb.w	r9, [r5], #1
 8008cb4:	1aea      	subs	r2, r5, r3
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	dd07      	ble.n	8008ccc <_dtoa_r+0xb64>
 8008cbc:	4651      	mov	r1, sl
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	220a      	movs	r2, #10
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 f9a4 	bl	8009010 <__multadd>
 8008cc8:	4682      	mov	sl, r0
 8008cca:	e7ea      	b.n	8008ca2 <_dtoa_r+0xb3a>
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bfc8      	it	gt
 8008cd2:	461d      	movgt	r5, r3
 8008cd4:	9b00      	ldr	r3, [sp, #0]
 8008cd6:	bfd8      	it	le
 8008cd8:	2501      	movle	r5, #1
 8008cda:	441d      	add	r5, r3
 8008cdc:	f04f 0800 	mov.w	r8, #0
 8008ce0:	4651      	mov	r1, sl
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fb41 	bl	800936c <__lshift>
 8008cea:	4631      	mov	r1, r6
 8008cec:	4682      	mov	sl, r0
 8008cee:	f000 fba9 	bl	8009444 <__mcmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	dc96      	bgt.n	8008c24 <_dtoa_r+0xabc>
 8008cf6:	d102      	bne.n	8008cfe <_dtoa_r+0xb96>
 8008cf8:	f019 0f01 	tst.w	r9, #1
 8008cfc:	d192      	bne.n	8008c24 <_dtoa_r+0xabc>
 8008cfe:	462b      	mov	r3, r5
 8008d00:	461d      	mov	r5, r3
 8008d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d06:	2a30      	cmp	r2, #48	; 0x30
 8008d08:	d0fa      	beq.n	8008d00 <_dtoa_r+0xb98>
 8008d0a:	e6dd      	b.n	8008ac8 <_dtoa_r+0x960>
 8008d0c:	9a00      	ldr	r2, [sp, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d189      	bne.n	8008c26 <_dtoa_r+0xabe>
 8008d12:	f10b 0b01 	add.w	fp, fp, #1
 8008d16:	2331      	movs	r3, #49	; 0x31
 8008d18:	e796      	b.n	8008c48 <_dtoa_r+0xae0>
 8008d1a:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <_dtoa_r+0xbdc>)
 8008d1c:	f7ff ba99 	b.w	8008252 <_dtoa_r+0xea>
 8008d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f47f aa6d 	bne.w	8008202 <_dtoa_r+0x9a>
 8008d28:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <_dtoa_r+0xbe0>)
 8008d2a:	f7ff ba92 	b.w	8008252 <_dtoa_r+0xea>
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dcb5      	bgt.n	8008ca0 <_dtoa_r+0xb38>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	f73f aeb1 	bgt.w	8008a9e <_dtoa_r+0x936>
 8008d3c:	e7b0      	b.n	8008ca0 <_dtoa_r+0xb38>
 8008d3e:	bf00      	nop
 8008d40:	0800beec 	.word	0x0800beec
 8008d44:	0800be4c 	.word	0x0800be4c
 8008d48:	0800be70 	.word	0x0800be70

08008d4c <_free_r>:
 8008d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d4e:	2900      	cmp	r1, #0
 8008d50:	d044      	beq.n	8008ddc <_free_r+0x90>
 8008d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d56:	9001      	str	r0, [sp, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d5e:	bfb8      	it	lt
 8008d60:	18e4      	addlt	r4, r4, r3
 8008d62:	f000 f8e7 	bl	8008f34 <__malloc_lock>
 8008d66:	4a1e      	ldr	r2, [pc, #120]	; (8008de0 <_free_r+0x94>)
 8008d68:	9801      	ldr	r0, [sp, #4]
 8008d6a:	6813      	ldr	r3, [r2, #0]
 8008d6c:	b933      	cbnz	r3, 8008d7c <_free_r+0x30>
 8008d6e:	6063      	str	r3, [r4, #4]
 8008d70:	6014      	str	r4, [r2, #0]
 8008d72:	b003      	add	sp, #12
 8008d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d78:	f000 b8e2 	b.w	8008f40 <__malloc_unlock>
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	d908      	bls.n	8008d92 <_free_r+0x46>
 8008d80:	6825      	ldr	r5, [r4, #0]
 8008d82:	1961      	adds	r1, r4, r5
 8008d84:	428b      	cmp	r3, r1
 8008d86:	bf01      	itttt	eq
 8008d88:	6819      	ldreq	r1, [r3, #0]
 8008d8a:	685b      	ldreq	r3, [r3, #4]
 8008d8c:	1949      	addeq	r1, r1, r5
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	e7ed      	b.n	8008d6e <_free_r+0x22>
 8008d92:	461a      	mov	r2, r3
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	b10b      	cbz	r3, 8008d9c <_free_r+0x50>
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d9fa      	bls.n	8008d92 <_free_r+0x46>
 8008d9c:	6811      	ldr	r1, [r2, #0]
 8008d9e:	1855      	adds	r5, r2, r1
 8008da0:	42a5      	cmp	r5, r4
 8008da2:	d10b      	bne.n	8008dbc <_free_r+0x70>
 8008da4:	6824      	ldr	r4, [r4, #0]
 8008da6:	4421      	add	r1, r4
 8008da8:	1854      	adds	r4, r2, r1
 8008daa:	42a3      	cmp	r3, r4
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	d1e0      	bne.n	8008d72 <_free_r+0x26>
 8008db0:	681c      	ldr	r4, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	6053      	str	r3, [r2, #4]
 8008db6:	440c      	add	r4, r1
 8008db8:	6014      	str	r4, [r2, #0]
 8008dba:	e7da      	b.n	8008d72 <_free_r+0x26>
 8008dbc:	d902      	bls.n	8008dc4 <_free_r+0x78>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	e7d6      	b.n	8008d72 <_free_r+0x26>
 8008dc4:	6825      	ldr	r5, [r4, #0]
 8008dc6:	1961      	adds	r1, r4, r5
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	bf04      	itt	eq
 8008dcc:	6819      	ldreq	r1, [r3, #0]
 8008dce:	685b      	ldreq	r3, [r3, #4]
 8008dd0:	6063      	str	r3, [r4, #4]
 8008dd2:	bf04      	itt	eq
 8008dd4:	1949      	addeq	r1, r1, r5
 8008dd6:	6021      	streq	r1, [r4, #0]
 8008dd8:	6054      	str	r4, [r2, #4]
 8008dda:	e7ca      	b.n	8008d72 <_free_r+0x26>
 8008ddc:	b003      	add	sp, #12
 8008dde:	bd30      	pop	{r4, r5, pc}
 8008de0:	20000934 	.word	0x20000934

08008de4 <malloc>:
 8008de4:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <malloc+0xc>)
 8008de6:	4601      	mov	r1, r0
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	f000 b823 	b.w	8008e34 <_malloc_r>
 8008dee:	bf00      	nop
 8008df0:	2000007c 	.word	0x2000007c

08008df4 <sbrk_aligned>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	4e0e      	ldr	r6, [pc, #56]	; (8008e30 <sbrk_aligned+0x3c>)
 8008df8:	460c      	mov	r4, r1
 8008dfa:	6831      	ldr	r1, [r6, #0]
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	b911      	cbnz	r1, 8008e06 <sbrk_aligned+0x12>
 8008e00:	f000 fe26 	bl	8009a50 <_sbrk_r>
 8008e04:	6030      	str	r0, [r6, #0]
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 fe21 	bl	8009a50 <_sbrk_r>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d00a      	beq.n	8008e28 <sbrk_aligned+0x34>
 8008e12:	1cc4      	adds	r4, r0, #3
 8008e14:	f024 0403 	bic.w	r4, r4, #3
 8008e18:	42a0      	cmp	r0, r4
 8008e1a:	d007      	beq.n	8008e2c <sbrk_aligned+0x38>
 8008e1c:	1a21      	subs	r1, r4, r0
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f000 fe16 	bl	8009a50 <_sbrk_r>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d101      	bne.n	8008e2c <sbrk_aligned+0x38>
 8008e28:	f04f 34ff 	mov.w	r4, #4294967295
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	20000938 	.word	0x20000938

08008e34 <_malloc_r>:
 8008e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e38:	1ccd      	adds	r5, r1, #3
 8008e3a:	f025 0503 	bic.w	r5, r5, #3
 8008e3e:	3508      	adds	r5, #8
 8008e40:	2d0c      	cmp	r5, #12
 8008e42:	bf38      	it	cc
 8008e44:	250c      	movcc	r5, #12
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	4607      	mov	r7, r0
 8008e4a:	db01      	blt.n	8008e50 <_malloc_r+0x1c>
 8008e4c:	42a9      	cmp	r1, r5
 8008e4e:	d905      	bls.n	8008e5c <_malloc_r+0x28>
 8008e50:	230c      	movs	r3, #12
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	2600      	movs	r6, #0
 8008e56:	4630      	mov	r0, r6
 8008e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f30 <_malloc_r+0xfc>
 8008e60:	f000 f868 	bl	8008f34 <__malloc_lock>
 8008e64:	f8d8 3000 	ldr.w	r3, [r8]
 8008e68:	461c      	mov	r4, r3
 8008e6a:	bb5c      	cbnz	r4, 8008ec4 <_malloc_r+0x90>
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f7ff ffc0 	bl	8008df4 <sbrk_aligned>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	4604      	mov	r4, r0
 8008e78:	d155      	bne.n	8008f26 <_malloc_r+0xf2>
 8008e7a:	f8d8 4000 	ldr.w	r4, [r8]
 8008e7e:	4626      	mov	r6, r4
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	d145      	bne.n	8008f10 <_malloc_r+0xdc>
 8008e84:	2c00      	cmp	r4, #0
 8008e86:	d048      	beq.n	8008f1a <_malloc_r+0xe6>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	eb04 0903 	add.w	r9, r4, r3
 8008e92:	f000 fddd 	bl	8009a50 <_sbrk_r>
 8008e96:	4581      	cmp	r9, r0
 8008e98:	d13f      	bne.n	8008f1a <_malloc_r+0xe6>
 8008e9a:	6821      	ldr	r1, [r4, #0]
 8008e9c:	1a6d      	subs	r5, r5, r1
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	f7ff ffa7 	bl	8008df4 <sbrk_aligned>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d037      	beq.n	8008f1a <_malloc_r+0xe6>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	442b      	add	r3, r5
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d038      	beq.n	8008f2a <_malloc_r+0xf6>
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	42a2      	cmp	r2, r4
 8008ebc:	d12b      	bne.n	8008f16 <_malloc_r+0xe2>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	e00f      	b.n	8008ee4 <_malloc_r+0xb0>
 8008ec4:	6822      	ldr	r2, [r4, #0]
 8008ec6:	1b52      	subs	r2, r2, r5
 8008ec8:	d41f      	bmi.n	8008f0a <_malloc_r+0xd6>
 8008eca:	2a0b      	cmp	r2, #11
 8008ecc:	d917      	bls.n	8008efe <_malloc_r+0xca>
 8008ece:	1961      	adds	r1, r4, r5
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	6025      	str	r5, [r4, #0]
 8008ed4:	bf18      	it	ne
 8008ed6:	6059      	strne	r1, [r3, #4]
 8008ed8:	6863      	ldr	r3, [r4, #4]
 8008eda:	bf08      	it	eq
 8008edc:	f8c8 1000 	streq.w	r1, [r8]
 8008ee0:	5162      	str	r2, [r4, r5]
 8008ee2:	604b      	str	r3, [r1, #4]
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	f104 060b 	add.w	r6, r4, #11
 8008eea:	f000 f829 	bl	8008f40 <__malloc_unlock>
 8008eee:	f026 0607 	bic.w	r6, r6, #7
 8008ef2:	1d23      	adds	r3, r4, #4
 8008ef4:	1af2      	subs	r2, r6, r3
 8008ef6:	d0ae      	beq.n	8008e56 <_malloc_r+0x22>
 8008ef8:	1b9b      	subs	r3, r3, r6
 8008efa:	50a3      	str	r3, [r4, r2]
 8008efc:	e7ab      	b.n	8008e56 <_malloc_r+0x22>
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	6862      	ldr	r2, [r4, #4]
 8008f02:	d1dd      	bne.n	8008ec0 <_malloc_r+0x8c>
 8008f04:	f8c8 2000 	str.w	r2, [r8]
 8008f08:	e7ec      	b.n	8008ee4 <_malloc_r+0xb0>
 8008f0a:	4623      	mov	r3, r4
 8008f0c:	6864      	ldr	r4, [r4, #4]
 8008f0e:	e7ac      	b.n	8008e6a <_malloc_r+0x36>
 8008f10:	4634      	mov	r4, r6
 8008f12:	6876      	ldr	r6, [r6, #4]
 8008f14:	e7b4      	b.n	8008e80 <_malloc_r+0x4c>
 8008f16:	4613      	mov	r3, r2
 8008f18:	e7cc      	b.n	8008eb4 <_malloc_r+0x80>
 8008f1a:	230c      	movs	r3, #12
 8008f1c:	603b      	str	r3, [r7, #0]
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f000 f80e 	bl	8008f40 <__malloc_unlock>
 8008f24:	e797      	b.n	8008e56 <_malloc_r+0x22>
 8008f26:	6025      	str	r5, [r4, #0]
 8008f28:	e7dc      	b.n	8008ee4 <_malloc_r+0xb0>
 8008f2a:	605b      	str	r3, [r3, #4]
 8008f2c:	deff      	udf	#255	; 0xff
 8008f2e:	bf00      	nop
 8008f30:	20000934 	.word	0x20000934

08008f34 <__malloc_lock>:
 8008f34:	4801      	ldr	r0, [pc, #4]	; (8008f3c <__malloc_lock+0x8>)
 8008f36:	f7ff b87f 	b.w	8008038 <__retarget_lock_acquire_recursive>
 8008f3a:	bf00      	nop
 8008f3c:	20000930 	.word	0x20000930

08008f40 <__malloc_unlock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__malloc_unlock+0x8>)
 8008f42:	f7ff b87a 	b.w	800803a <__retarget_lock_release_recursive>
 8008f46:	bf00      	nop
 8008f48:	20000930 	.word	0x20000930

08008f4c <_Balloc>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	69c6      	ldr	r6, [r0, #28]
 8008f50:	4604      	mov	r4, r0
 8008f52:	460d      	mov	r5, r1
 8008f54:	b976      	cbnz	r6, 8008f74 <_Balloc+0x28>
 8008f56:	2010      	movs	r0, #16
 8008f58:	f7ff ff44 	bl	8008de4 <malloc>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	61e0      	str	r0, [r4, #28]
 8008f60:	b920      	cbnz	r0, 8008f6c <_Balloc+0x20>
 8008f62:	4b18      	ldr	r3, [pc, #96]	; (8008fc4 <_Balloc+0x78>)
 8008f64:	4818      	ldr	r0, [pc, #96]	; (8008fc8 <_Balloc+0x7c>)
 8008f66:	216b      	movs	r1, #107	; 0x6b
 8008f68:	f000 fd82 	bl	8009a70 <__assert_func>
 8008f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f70:	6006      	str	r6, [r0, #0]
 8008f72:	60c6      	str	r6, [r0, #12]
 8008f74:	69e6      	ldr	r6, [r4, #28]
 8008f76:	68f3      	ldr	r3, [r6, #12]
 8008f78:	b183      	cbz	r3, 8008f9c <_Balloc+0x50>
 8008f7a:	69e3      	ldr	r3, [r4, #28]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f82:	b9b8      	cbnz	r0, 8008fb4 <_Balloc+0x68>
 8008f84:	2101      	movs	r1, #1
 8008f86:	fa01 f605 	lsl.w	r6, r1, r5
 8008f8a:	1d72      	adds	r2, r6, #5
 8008f8c:	0092      	lsls	r2, r2, #2
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 fd8c 	bl	8009aac <_calloc_r>
 8008f94:	b160      	cbz	r0, 8008fb0 <_Balloc+0x64>
 8008f96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f9a:	e00e      	b.n	8008fba <_Balloc+0x6e>
 8008f9c:	2221      	movs	r2, #33	; 0x21
 8008f9e:	2104      	movs	r1, #4
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fd83 	bl	8009aac <_calloc_r>
 8008fa6:	69e3      	ldr	r3, [r4, #28]
 8008fa8:	60f0      	str	r0, [r6, #12]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e4      	bne.n	8008f7a <_Balloc+0x2e>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
 8008fb4:	6802      	ldr	r2, [r0, #0]
 8008fb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fc0:	e7f7      	b.n	8008fb2 <_Balloc+0x66>
 8008fc2:	bf00      	nop
 8008fc4:	0800be7d 	.word	0x0800be7d
 8008fc8:	0800befd 	.word	0x0800befd

08008fcc <_Bfree>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	69c6      	ldr	r6, [r0, #28]
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	b976      	cbnz	r6, 8008ff4 <_Bfree+0x28>
 8008fd6:	2010      	movs	r0, #16
 8008fd8:	f7ff ff04 	bl	8008de4 <malloc>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	61e8      	str	r0, [r5, #28]
 8008fe0:	b920      	cbnz	r0, 8008fec <_Bfree+0x20>
 8008fe2:	4b09      	ldr	r3, [pc, #36]	; (8009008 <_Bfree+0x3c>)
 8008fe4:	4809      	ldr	r0, [pc, #36]	; (800900c <_Bfree+0x40>)
 8008fe6:	218f      	movs	r1, #143	; 0x8f
 8008fe8:	f000 fd42 	bl	8009a70 <__assert_func>
 8008fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ff0:	6006      	str	r6, [r0, #0]
 8008ff2:	60c6      	str	r6, [r0, #12]
 8008ff4:	b13c      	cbz	r4, 8009006 <_Bfree+0x3a>
 8008ff6:	69eb      	ldr	r3, [r5, #28]
 8008ff8:	6862      	ldr	r2, [r4, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009000:	6021      	str	r1, [r4, #0]
 8009002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	0800be7d 	.word	0x0800be7d
 800900c:	0800befd 	.word	0x0800befd

08009010 <__multadd>:
 8009010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009014:	690d      	ldr	r5, [r1, #16]
 8009016:	4607      	mov	r7, r0
 8009018:	460c      	mov	r4, r1
 800901a:	461e      	mov	r6, r3
 800901c:	f101 0c14 	add.w	ip, r1, #20
 8009020:	2000      	movs	r0, #0
 8009022:	f8dc 3000 	ldr.w	r3, [ip]
 8009026:	b299      	uxth	r1, r3
 8009028:	fb02 6101 	mla	r1, r2, r1, r6
 800902c:	0c1e      	lsrs	r6, r3, #16
 800902e:	0c0b      	lsrs	r3, r1, #16
 8009030:	fb02 3306 	mla	r3, r2, r6, r3
 8009034:	b289      	uxth	r1, r1
 8009036:	3001      	adds	r0, #1
 8009038:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800903c:	4285      	cmp	r5, r0
 800903e:	f84c 1b04 	str.w	r1, [ip], #4
 8009042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009046:	dcec      	bgt.n	8009022 <__multadd+0x12>
 8009048:	b30e      	cbz	r6, 800908e <__multadd+0x7e>
 800904a:	68a3      	ldr	r3, [r4, #8]
 800904c:	42ab      	cmp	r3, r5
 800904e:	dc19      	bgt.n	8009084 <__multadd+0x74>
 8009050:	6861      	ldr	r1, [r4, #4]
 8009052:	4638      	mov	r0, r7
 8009054:	3101      	adds	r1, #1
 8009056:	f7ff ff79 	bl	8008f4c <_Balloc>
 800905a:	4680      	mov	r8, r0
 800905c:	b928      	cbnz	r0, 800906a <__multadd+0x5a>
 800905e:	4602      	mov	r2, r0
 8009060:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <__multadd+0x84>)
 8009062:	480d      	ldr	r0, [pc, #52]	; (8009098 <__multadd+0x88>)
 8009064:	21ba      	movs	r1, #186	; 0xba
 8009066:	f000 fd03 	bl	8009a70 <__assert_func>
 800906a:	6922      	ldr	r2, [r4, #16]
 800906c:	3202      	adds	r2, #2
 800906e:	f104 010c 	add.w	r1, r4, #12
 8009072:	0092      	lsls	r2, r2, #2
 8009074:	300c      	adds	r0, #12
 8009076:	f7fe ffe1 	bl	800803c <memcpy>
 800907a:	4621      	mov	r1, r4
 800907c:	4638      	mov	r0, r7
 800907e:	f7ff ffa5 	bl	8008fcc <_Bfree>
 8009082:	4644      	mov	r4, r8
 8009084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009088:	3501      	adds	r5, #1
 800908a:	615e      	str	r6, [r3, #20]
 800908c:	6125      	str	r5, [r4, #16]
 800908e:	4620      	mov	r0, r4
 8009090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009094:	0800beec 	.word	0x0800beec
 8009098:	0800befd 	.word	0x0800befd

0800909c <__hi0bits>:
 800909c:	0c03      	lsrs	r3, r0, #16
 800909e:	041b      	lsls	r3, r3, #16
 80090a0:	b9d3      	cbnz	r3, 80090d8 <__hi0bits+0x3c>
 80090a2:	0400      	lsls	r0, r0, #16
 80090a4:	2310      	movs	r3, #16
 80090a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090aa:	bf04      	itt	eq
 80090ac:	0200      	lsleq	r0, r0, #8
 80090ae:	3308      	addeq	r3, #8
 80090b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090b4:	bf04      	itt	eq
 80090b6:	0100      	lsleq	r0, r0, #4
 80090b8:	3304      	addeq	r3, #4
 80090ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090be:	bf04      	itt	eq
 80090c0:	0080      	lsleq	r0, r0, #2
 80090c2:	3302      	addeq	r3, #2
 80090c4:	2800      	cmp	r0, #0
 80090c6:	db05      	blt.n	80090d4 <__hi0bits+0x38>
 80090c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090cc:	f103 0301 	add.w	r3, r3, #1
 80090d0:	bf08      	it	eq
 80090d2:	2320      	moveq	r3, #32
 80090d4:	4618      	mov	r0, r3
 80090d6:	4770      	bx	lr
 80090d8:	2300      	movs	r3, #0
 80090da:	e7e4      	b.n	80090a6 <__hi0bits+0xa>

080090dc <__lo0bits>:
 80090dc:	6803      	ldr	r3, [r0, #0]
 80090de:	f013 0207 	ands.w	r2, r3, #7
 80090e2:	d00c      	beq.n	80090fe <__lo0bits+0x22>
 80090e4:	07d9      	lsls	r1, r3, #31
 80090e6:	d422      	bmi.n	800912e <__lo0bits+0x52>
 80090e8:	079a      	lsls	r2, r3, #30
 80090ea:	bf49      	itett	mi
 80090ec:	085b      	lsrmi	r3, r3, #1
 80090ee:	089b      	lsrpl	r3, r3, #2
 80090f0:	6003      	strmi	r3, [r0, #0]
 80090f2:	2201      	movmi	r2, #1
 80090f4:	bf5c      	itt	pl
 80090f6:	6003      	strpl	r3, [r0, #0]
 80090f8:	2202      	movpl	r2, #2
 80090fa:	4610      	mov	r0, r2
 80090fc:	4770      	bx	lr
 80090fe:	b299      	uxth	r1, r3
 8009100:	b909      	cbnz	r1, 8009106 <__lo0bits+0x2a>
 8009102:	0c1b      	lsrs	r3, r3, #16
 8009104:	2210      	movs	r2, #16
 8009106:	b2d9      	uxtb	r1, r3
 8009108:	b909      	cbnz	r1, 800910e <__lo0bits+0x32>
 800910a:	3208      	adds	r2, #8
 800910c:	0a1b      	lsrs	r3, r3, #8
 800910e:	0719      	lsls	r1, r3, #28
 8009110:	bf04      	itt	eq
 8009112:	091b      	lsreq	r3, r3, #4
 8009114:	3204      	addeq	r2, #4
 8009116:	0799      	lsls	r1, r3, #30
 8009118:	bf04      	itt	eq
 800911a:	089b      	lsreq	r3, r3, #2
 800911c:	3202      	addeq	r2, #2
 800911e:	07d9      	lsls	r1, r3, #31
 8009120:	d403      	bmi.n	800912a <__lo0bits+0x4e>
 8009122:	085b      	lsrs	r3, r3, #1
 8009124:	f102 0201 	add.w	r2, r2, #1
 8009128:	d003      	beq.n	8009132 <__lo0bits+0x56>
 800912a:	6003      	str	r3, [r0, #0]
 800912c:	e7e5      	b.n	80090fa <__lo0bits+0x1e>
 800912e:	2200      	movs	r2, #0
 8009130:	e7e3      	b.n	80090fa <__lo0bits+0x1e>
 8009132:	2220      	movs	r2, #32
 8009134:	e7e1      	b.n	80090fa <__lo0bits+0x1e>
	...

08009138 <__i2b>:
 8009138:	b510      	push	{r4, lr}
 800913a:	460c      	mov	r4, r1
 800913c:	2101      	movs	r1, #1
 800913e:	f7ff ff05 	bl	8008f4c <_Balloc>
 8009142:	4602      	mov	r2, r0
 8009144:	b928      	cbnz	r0, 8009152 <__i2b+0x1a>
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <__i2b+0x24>)
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <__i2b+0x28>)
 800914a:	f240 1145 	movw	r1, #325	; 0x145
 800914e:	f000 fc8f 	bl	8009a70 <__assert_func>
 8009152:	2301      	movs	r3, #1
 8009154:	6144      	str	r4, [r0, #20]
 8009156:	6103      	str	r3, [r0, #16]
 8009158:	bd10      	pop	{r4, pc}
 800915a:	bf00      	nop
 800915c:	0800beec 	.word	0x0800beec
 8009160:	0800befd 	.word	0x0800befd

08009164 <__multiply>:
 8009164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009168:	4691      	mov	r9, r2
 800916a:	690a      	ldr	r2, [r1, #16]
 800916c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009170:	429a      	cmp	r2, r3
 8009172:	bfb8      	it	lt
 8009174:	460b      	movlt	r3, r1
 8009176:	460c      	mov	r4, r1
 8009178:	bfbc      	itt	lt
 800917a:	464c      	movlt	r4, r9
 800917c:	4699      	movlt	r9, r3
 800917e:	6927      	ldr	r7, [r4, #16]
 8009180:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009184:	68a3      	ldr	r3, [r4, #8]
 8009186:	6861      	ldr	r1, [r4, #4]
 8009188:	eb07 060a 	add.w	r6, r7, sl
 800918c:	42b3      	cmp	r3, r6
 800918e:	b085      	sub	sp, #20
 8009190:	bfb8      	it	lt
 8009192:	3101      	addlt	r1, #1
 8009194:	f7ff feda 	bl	8008f4c <_Balloc>
 8009198:	b930      	cbnz	r0, 80091a8 <__multiply+0x44>
 800919a:	4602      	mov	r2, r0
 800919c:	4b44      	ldr	r3, [pc, #272]	; (80092b0 <__multiply+0x14c>)
 800919e:	4845      	ldr	r0, [pc, #276]	; (80092b4 <__multiply+0x150>)
 80091a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80091a4:	f000 fc64 	bl	8009a70 <__assert_func>
 80091a8:	f100 0514 	add.w	r5, r0, #20
 80091ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091b0:	462b      	mov	r3, r5
 80091b2:	2200      	movs	r2, #0
 80091b4:	4543      	cmp	r3, r8
 80091b6:	d321      	bcc.n	80091fc <__multiply+0x98>
 80091b8:	f104 0314 	add.w	r3, r4, #20
 80091bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091c0:	f109 0314 	add.w	r3, r9, #20
 80091c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091c8:	9202      	str	r2, [sp, #8]
 80091ca:	1b3a      	subs	r2, r7, r4
 80091cc:	3a15      	subs	r2, #21
 80091ce:	f022 0203 	bic.w	r2, r2, #3
 80091d2:	3204      	adds	r2, #4
 80091d4:	f104 0115 	add.w	r1, r4, #21
 80091d8:	428f      	cmp	r7, r1
 80091da:	bf38      	it	cc
 80091dc:	2204      	movcc	r2, #4
 80091de:	9201      	str	r2, [sp, #4]
 80091e0:	9a02      	ldr	r2, [sp, #8]
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d80c      	bhi.n	8009202 <__multiply+0x9e>
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	dd03      	ble.n	80091f4 <__multiply+0x90>
 80091ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d05b      	beq.n	80092ac <__multiply+0x148>
 80091f4:	6106      	str	r6, [r0, #16]
 80091f6:	b005      	add	sp, #20
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	f843 2b04 	str.w	r2, [r3], #4
 8009200:	e7d8      	b.n	80091b4 <__multiply+0x50>
 8009202:	f8b3 a000 	ldrh.w	sl, [r3]
 8009206:	f1ba 0f00 	cmp.w	sl, #0
 800920a:	d024      	beq.n	8009256 <__multiply+0xf2>
 800920c:	f104 0e14 	add.w	lr, r4, #20
 8009210:	46a9      	mov	r9, r5
 8009212:	f04f 0c00 	mov.w	ip, #0
 8009216:	f85e 2b04 	ldr.w	r2, [lr], #4
 800921a:	f8d9 1000 	ldr.w	r1, [r9]
 800921e:	fa1f fb82 	uxth.w	fp, r2
 8009222:	b289      	uxth	r1, r1
 8009224:	fb0a 110b 	mla	r1, sl, fp, r1
 8009228:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800922c:	f8d9 2000 	ldr.w	r2, [r9]
 8009230:	4461      	add	r1, ip
 8009232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009236:	fb0a c20b 	mla	r2, sl, fp, ip
 800923a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800923e:	b289      	uxth	r1, r1
 8009240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009244:	4577      	cmp	r7, lr
 8009246:	f849 1b04 	str.w	r1, [r9], #4
 800924a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800924e:	d8e2      	bhi.n	8009216 <__multiply+0xb2>
 8009250:	9a01      	ldr	r2, [sp, #4]
 8009252:	f845 c002 	str.w	ip, [r5, r2]
 8009256:	9a03      	ldr	r2, [sp, #12]
 8009258:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800925c:	3304      	adds	r3, #4
 800925e:	f1b9 0f00 	cmp.w	r9, #0
 8009262:	d021      	beq.n	80092a8 <__multiply+0x144>
 8009264:	6829      	ldr	r1, [r5, #0]
 8009266:	f104 0c14 	add.w	ip, r4, #20
 800926a:	46ae      	mov	lr, r5
 800926c:	f04f 0a00 	mov.w	sl, #0
 8009270:	f8bc b000 	ldrh.w	fp, [ip]
 8009274:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009278:	fb09 220b 	mla	r2, r9, fp, r2
 800927c:	4452      	add	r2, sl
 800927e:	b289      	uxth	r1, r1
 8009280:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009284:	f84e 1b04 	str.w	r1, [lr], #4
 8009288:	f85c 1b04 	ldr.w	r1, [ip], #4
 800928c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009290:	f8be 1000 	ldrh.w	r1, [lr]
 8009294:	fb09 110a 	mla	r1, r9, sl, r1
 8009298:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800929c:	4567      	cmp	r7, ip
 800929e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092a2:	d8e5      	bhi.n	8009270 <__multiply+0x10c>
 80092a4:	9a01      	ldr	r2, [sp, #4]
 80092a6:	50a9      	str	r1, [r5, r2]
 80092a8:	3504      	adds	r5, #4
 80092aa:	e799      	b.n	80091e0 <__multiply+0x7c>
 80092ac:	3e01      	subs	r6, #1
 80092ae:	e79b      	b.n	80091e8 <__multiply+0x84>
 80092b0:	0800beec 	.word	0x0800beec
 80092b4:	0800befd 	.word	0x0800befd

080092b8 <__pow5mult>:
 80092b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092bc:	4615      	mov	r5, r2
 80092be:	f012 0203 	ands.w	r2, r2, #3
 80092c2:	4606      	mov	r6, r0
 80092c4:	460f      	mov	r7, r1
 80092c6:	d007      	beq.n	80092d8 <__pow5mult+0x20>
 80092c8:	4c25      	ldr	r4, [pc, #148]	; (8009360 <__pow5mult+0xa8>)
 80092ca:	3a01      	subs	r2, #1
 80092cc:	2300      	movs	r3, #0
 80092ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092d2:	f7ff fe9d 	bl	8009010 <__multadd>
 80092d6:	4607      	mov	r7, r0
 80092d8:	10ad      	asrs	r5, r5, #2
 80092da:	d03d      	beq.n	8009358 <__pow5mult+0xa0>
 80092dc:	69f4      	ldr	r4, [r6, #28]
 80092de:	b97c      	cbnz	r4, 8009300 <__pow5mult+0x48>
 80092e0:	2010      	movs	r0, #16
 80092e2:	f7ff fd7f 	bl	8008de4 <malloc>
 80092e6:	4602      	mov	r2, r0
 80092e8:	61f0      	str	r0, [r6, #28]
 80092ea:	b928      	cbnz	r0, 80092f8 <__pow5mult+0x40>
 80092ec:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <__pow5mult+0xac>)
 80092ee:	481e      	ldr	r0, [pc, #120]	; (8009368 <__pow5mult+0xb0>)
 80092f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80092f4:	f000 fbbc 	bl	8009a70 <__assert_func>
 80092f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092fc:	6004      	str	r4, [r0, #0]
 80092fe:	60c4      	str	r4, [r0, #12]
 8009300:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009308:	b94c      	cbnz	r4, 800931e <__pow5mult+0x66>
 800930a:	f240 2171 	movw	r1, #625	; 0x271
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ff12 	bl	8009138 <__i2b>
 8009314:	2300      	movs	r3, #0
 8009316:	f8c8 0008 	str.w	r0, [r8, #8]
 800931a:	4604      	mov	r4, r0
 800931c:	6003      	str	r3, [r0, #0]
 800931e:	f04f 0900 	mov.w	r9, #0
 8009322:	07eb      	lsls	r3, r5, #31
 8009324:	d50a      	bpl.n	800933c <__pow5mult+0x84>
 8009326:	4639      	mov	r1, r7
 8009328:	4622      	mov	r2, r4
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ff1a 	bl	8009164 <__multiply>
 8009330:	4639      	mov	r1, r7
 8009332:	4680      	mov	r8, r0
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff fe49 	bl	8008fcc <_Bfree>
 800933a:	4647      	mov	r7, r8
 800933c:	106d      	asrs	r5, r5, #1
 800933e:	d00b      	beq.n	8009358 <__pow5mult+0xa0>
 8009340:	6820      	ldr	r0, [r4, #0]
 8009342:	b938      	cbnz	r0, 8009354 <__pow5mult+0x9c>
 8009344:	4622      	mov	r2, r4
 8009346:	4621      	mov	r1, r4
 8009348:	4630      	mov	r0, r6
 800934a:	f7ff ff0b 	bl	8009164 <__multiply>
 800934e:	6020      	str	r0, [r4, #0]
 8009350:	f8c0 9000 	str.w	r9, [r0]
 8009354:	4604      	mov	r4, r0
 8009356:	e7e4      	b.n	8009322 <__pow5mult+0x6a>
 8009358:	4638      	mov	r0, r7
 800935a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800935e:	bf00      	nop
 8009360:	0800c048 	.word	0x0800c048
 8009364:	0800be7d 	.word	0x0800be7d
 8009368:	0800befd 	.word	0x0800befd

0800936c <__lshift>:
 800936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	460c      	mov	r4, r1
 8009372:	6849      	ldr	r1, [r1, #4]
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	4607      	mov	r7, r0
 800937e:	4691      	mov	r9, r2
 8009380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009384:	f108 0601 	add.w	r6, r8, #1
 8009388:	42b3      	cmp	r3, r6
 800938a:	db0b      	blt.n	80093a4 <__lshift+0x38>
 800938c:	4638      	mov	r0, r7
 800938e:	f7ff fddd 	bl	8008f4c <_Balloc>
 8009392:	4605      	mov	r5, r0
 8009394:	b948      	cbnz	r0, 80093aa <__lshift+0x3e>
 8009396:	4602      	mov	r2, r0
 8009398:	4b28      	ldr	r3, [pc, #160]	; (800943c <__lshift+0xd0>)
 800939a:	4829      	ldr	r0, [pc, #164]	; (8009440 <__lshift+0xd4>)
 800939c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80093a0:	f000 fb66 	bl	8009a70 <__assert_func>
 80093a4:	3101      	adds	r1, #1
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	e7ee      	b.n	8009388 <__lshift+0x1c>
 80093aa:	2300      	movs	r3, #0
 80093ac:	f100 0114 	add.w	r1, r0, #20
 80093b0:	f100 0210 	add.w	r2, r0, #16
 80093b4:	4618      	mov	r0, r3
 80093b6:	4553      	cmp	r3, sl
 80093b8:	db33      	blt.n	8009422 <__lshift+0xb6>
 80093ba:	6920      	ldr	r0, [r4, #16]
 80093bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c0:	f104 0314 	add.w	r3, r4, #20
 80093c4:	f019 091f 	ands.w	r9, r9, #31
 80093c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093d0:	d02b      	beq.n	800942a <__lshift+0xbe>
 80093d2:	f1c9 0e20 	rsb	lr, r9, #32
 80093d6:	468a      	mov	sl, r1
 80093d8:	2200      	movs	r2, #0
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	fa00 f009 	lsl.w	r0, r0, r9
 80093e0:	4310      	orrs	r0, r2
 80093e2:	f84a 0b04 	str.w	r0, [sl], #4
 80093e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ea:	459c      	cmp	ip, r3
 80093ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80093f0:	d8f3      	bhi.n	80093da <__lshift+0x6e>
 80093f2:	ebac 0304 	sub.w	r3, ip, r4
 80093f6:	3b15      	subs	r3, #21
 80093f8:	f023 0303 	bic.w	r3, r3, #3
 80093fc:	3304      	adds	r3, #4
 80093fe:	f104 0015 	add.w	r0, r4, #21
 8009402:	4584      	cmp	ip, r0
 8009404:	bf38      	it	cc
 8009406:	2304      	movcc	r3, #4
 8009408:	50ca      	str	r2, [r1, r3]
 800940a:	b10a      	cbz	r2, 8009410 <__lshift+0xa4>
 800940c:	f108 0602 	add.w	r6, r8, #2
 8009410:	3e01      	subs	r6, #1
 8009412:	4638      	mov	r0, r7
 8009414:	612e      	str	r6, [r5, #16]
 8009416:	4621      	mov	r1, r4
 8009418:	f7ff fdd8 	bl	8008fcc <_Bfree>
 800941c:	4628      	mov	r0, r5
 800941e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009422:	f842 0f04 	str.w	r0, [r2, #4]!
 8009426:	3301      	adds	r3, #1
 8009428:	e7c5      	b.n	80093b6 <__lshift+0x4a>
 800942a:	3904      	subs	r1, #4
 800942c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009430:	f841 2f04 	str.w	r2, [r1, #4]!
 8009434:	459c      	cmp	ip, r3
 8009436:	d8f9      	bhi.n	800942c <__lshift+0xc0>
 8009438:	e7ea      	b.n	8009410 <__lshift+0xa4>
 800943a:	bf00      	nop
 800943c:	0800beec 	.word	0x0800beec
 8009440:	0800befd 	.word	0x0800befd

08009444 <__mcmp>:
 8009444:	b530      	push	{r4, r5, lr}
 8009446:	6902      	ldr	r2, [r0, #16]
 8009448:	690c      	ldr	r4, [r1, #16]
 800944a:	1b12      	subs	r2, r2, r4
 800944c:	d10e      	bne.n	800946c <__mcmp+0x28>
 800944e:	f100 0314 	add.w	r3, r0, #20
 8009452:	3114      	adds	r1, #20
 8009454:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009458:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800945c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009460:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009464:	42a5      	cmp	r5, r4
 8009466:	d003      	beq.n	8009470 <__mcmp+0x2c>
 8009468:	d305      	bcc.n	8009476 <__mcmp+0x32>
 800946a:	2201      	movs	r2, #1
 800946c:	4610      	mov	r0, r2
 800946e:	bd30      	pop	{r4, r5, pc}
 8009470:	4283      	cmp	r3, r0
 8009472:	d3f3      	bcc.n	800945c <__mcmp+0x18>
 8009474:	e7fa      	b.n	800946c <__mcmp+0x28>
 8009476:	f04f 32ff 	mov.w	r2, #4294967295
 800947a:	e7f7      	b.n	800946c <__mcmp+0x28>

0800947c <__mdiff>:
 800947c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	4606      	mov	r6, r0
 8009484:	4611      	mov	r1, r2
 8009486:	4620      	mov	r0, r4
 8009488:	4690      	mov	r8, r2
 800948a:	f7ff ffdb 	bl	8009444 <__mcmp>
 800948e:	1e05      	subs	r5, r0, #0
 8009490:	d110      	bne.n	80094b4 <__mdiff+0x38>
 8009492:	4629      	mov	r1, r5
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff fd59 	bl	8008f4c <_Balloc>
 800949a:	b930      	cbnz	r0, 80094aa <__mdiff+0x2e>
 800949c:	4b3a      	ldr	r3, [pc, #232]	; (8009588 <__mdiff+0x10c>)
 800949e:	4602      	mov	r2, r0
 80094a0:	f240 2137 	movw	r1, #567	; 0x237
 80094a4:	4839      	ldr	r0, [pc, #228]	; (800958c <__mdiff+0x110>)
 80094a6:	f000 fae3 	bl	8009a70 <__assert_func>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	bfa4      	itt	ge
 80094b6:	4643      	movge	r3, r8
 80094b8:	46a0      	movge	r8, r4
 80094ba:	4630      	mov	r0, r6
 80094bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094c0:	bfa6      	itte	ge
 80094c2:	461c      	movge	r4, r3
 80094c4:	2500      	movge	r5, #0
 80094c6:	2501      	movlt	r5, #1
 80094c8:	f7ff fd40 	bl	8008f4c <_Balloc>
 80094cc:	b920      	cbnz	r0, 80094d8 <__mdiff+0x5c>
 80094ce:	4b2e      	ldr	r3, [pc, #184]	; (8009588 <__mdiff+0x10c>)
 80094d0:	4602      	mov	r2, r0
 80094d2:	f240 2145 	movw	r1, #581	; 0x245
 80094d6:	e7e5      	b.n	80094a4 <__mdiff+0x28>
 80094d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094dc:	6926      	ldr	r6, [r4, #16]
 80094de:	60c5      	str	r5, [r0, #12]
 80094e0:	f104 0914 	add.w	r9, r4, #20
 80094e4:	f108 0514 	add.w	r5, r8, #20
 80094e8:	f100 0e14 	add.w	lr, r0, #20
 80094ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094f4:	f108 0210 	add.w	r2, r8, #16
 80094f8:	46f2      	mov	sl, lr
 80094fa:	2100      	movs	r1, #0
 80094fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009500:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009504:	fa11 f88b 	uxtah	r8, r1, fp
 8009508:	b299      	uxth	r1, r3
 800950a:	0c1b      	lsrs	r3, r3, #16
 800950c:	eba8 0801 	sub.w	r8, r8, r1
 8009510:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009514:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009518:	fa1f f888 	uxth.w	r8, r8
 800951c:	1419      	asrs	r1, r3, #16
 800951e:	454e      	cmp	r6, r9
 8009520:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009524:	f84a 3b04 	str.w	r3, [sl], #4
 8009528:	d8e8      	bhi.n	80094fc <__mdiff+0x80>
 800952a:	1b33      	subs	r3, r6, r4
 800952c:	3b15      	subs	r3, #21
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	3304      	adds	r3, #4
 8009534:	3415      	adds	r4, #21
 8009536:	42a6      	cmp	r6, r4
 8009538:	bf38      	it	cc
 800953a:	2304      	movcc	r3, #4
 800953c:	441d      	add	r5, r3
 800953e:	4473      	add	r3, lr
 8009540:	469e      	mov	lr, r3
 8009542:	462e      	mov	r6, r5
 8009544:	4566      	cmp	r6, ip
 8009546:	d30e      	bcc.n	8009566 <__mdiff+0xea>
 8009548:	f10c 0203 	add.w	r2, ip, #3
 800954c:	1b52      	subs	r2, r2, r5
 800954e:	f022 0203 	bic.w	r2, r2, #3
 8009552:	3d03      	subs	r5, #3
 8009554:	45ac      	cmp	ip, r5
 8009556:	bf38      	it	cc
 8009558:	2200      	movcc	r2, #0
 800955a:	4413      	add	r3, r2
 800955c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009560:	b17a      	cbz	r2, 8009582 <__mdiff+0x106>
 8009562:	6107      	str	r7, [r0, #16]
 8009564:	e7a4      	b.n	80094b0 <__mdiff+0x34>
 8009566:	f856 8b04 	ldr.w	r8, [r6], #4
 800956a:	fa11 f288 	uxtah	r2, r1, r8
 800956e:	1414      	asrs	r4, r2, #16
 8009570:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009574:	b292      	uxth	r2, r2
 8009576:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800957a:	f84e 2b04 	str.w	r2, [lr], #4
 800957e:	1421      	asrs	r1, r4, #16
 8009580:	e7e0      	b.n	8009544 <__mdiff+0xc8>
 8009582:	3f01      	subs	r7, #1
 8009584:	e7ea      	b.n	800955c <__mdiff+0xe0>
 8009586:	bf00      	nop
 8009588:	0800beec 	.word	0x0800beec
 800958c:	0800befd 	.word	0x0800befd

08009590 <__d2b>:
 8009590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009594:	460f      	mov	r7, r1
 8009596:	2101      	movs	r1, #1
 8009598:	ec59 8b10 	vmov	r8, r9, d0
 800959c:	4616      	mov	r6, r2
 800959e:	f7ff fcd5 	bl	8008f4c <_Balloc>
 80095a2:	4604      	mov	r4, r0
 80095a4:	b930      	cbnz	r0, 80095b4 <__d2b+0x24>
 80095a6:	4602      	mov	r2, r0
 80095a8:	4b24      	ldr	r3, [pc, #144]	; (800963c <__d2b+0xac>)
 80095aa:	4825      	ldr	r0, [pc, #148]	; (8009640 <__d2b+0xb0>)
 80095ac:	f240 310f 	movw	r1, #783	; 0x30f
 80095b0:	f000 fa5e 	bl	8009a70 <__assert_func>
 80095b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095bc:	bb2d      	cbnz	r5, 800960a <__d2b+0x7a>
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	f1b8 0300 	subs.w	r3, r8, #0
 80095c4:	d026      	beq.n	8009614 <__d2b+0x84>
 80095c6:	4668      	mov	r0, sp
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	f7ff fd87 	bl	80090dc <__lo0bits>
 80095ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095d2:	b1e8      	cbz	r0, 8009610 <__d2b+0x80>
 80095d4:	f1c0 0320 	rsb	r3, r0, #32
 80095d8:	fa02 f303 	lsl.w	r3, r2, r3
 80095dc:	430b      	orrs	r3, r1
 80095de:	40c2      	lsrs	r2, r0
 80095e0:	6163      	str	r3, [r4, #20]
 80095e2:	9201      	str	r2, [sp, #4]
 80095e4:	9b01      	ldr	r3, [sp, #4]
 80095e6:	61a3      	str	r3, [r4, #24]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bf14      	ite	ne
 80095ec:	2202      	movne	r2, #2
 80095ee:	2201      	moveq	r2, #1
 80095f0:	6122      	str	r2, [r4, #16]
 80095f2:	b1bd      	cbz	r5, 8009624 <__d2b+0x94>
 80095f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095f8:	4405      	add	r5, r0
 80095fa:	603d      	str	r5, [r7, #0]
 80095fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009600:	6030      	str	r0, [r6, #0]
 8009602:	4620      	mov	r0, r4
 8009604:	b003      	add	sp, #12
 8009606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800960a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800960e:	e7d6      	b.n	80095be <__d2b+0x2e>
 8009610:	6161      	str	r1, [r4, #20]
 8009612:	e7e7      	b.n	80095e4 <__d2b+0x54>
 8009614:	a801      	add	r0, sp, #4
 8009616:	f7ff fd61 	bl	80090dc <__lo0bits>
 800961a:	9b01      	ldr	r3, [sp, #4]
 800961c:	6163      	str	r3, [r4, #20]
 800961e:	3020      	adds	r0, #32
 8009620:	2201      	movs	r2, #1
 8009622:	e7e5      	b.n	80095f0 <__d2b+0x60>
 8009624:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009628:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800962c:	6038      	str	r0, [r7, #0]
 800962e:	6918      	ldr	r0, [r3, #16]
 8009630:	f7ff fd34 	bl	800909c <__hi0bits>
 8009634:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009638:	e7e2      	b.n	8009600 <__d2b+0x70>
 800963a:	bf00      	nop
 800963c:	0800beec 	.word	0x0800beec
 8009640:	0800befd 	.word	0x0800befd

08009644 <__ssputs_r>:
 8009644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009648:	688e      	ldr	r6, [r1, #8]
 800964a:	461f      	mov	r7, r3
 800964c:	42be      	cmp	r6, r7
 800964e:	680b      	ldr	r3, [r1, #0]
 8009650:	4682      	mov	sl, r0
 8009652:	460c      	mov	r4, r1
 8009654:	4690      	mov	r8, r2
 8009656:	d82c      	bhi.n	80096b2 <__ssputs_r+0x6e>
 8009658:	898a      	ldrh	r2, [r1, #12]
 800965a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800965e:	d026      	beq.n	80096ae <__ssputs_r+0x6a>
 8009660:	6965      	ldr	r5, [r4, #20]
 8009662:	6909      	ldr	r1, [r1, #16]
 8009664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009668:	eba3 0901 	sub.w	r9, r3, r1
 800966c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009670:	1c7b      	adds	r3, r7, #1
 8009672:	444b      	add	r3, r9
 8009674:	106d      	asrs	r5, r5, #1
 8009676:	429d      	cmp	r5, r3
 8009678:	bf38      	it	cc
 800967a:	461d      	movcc	r5, r3
 800967c:	0553      	lsls	r3, r2, #21
 800967e:	d527      	bpl.n	80096d0 <__ssputs_r+0x8c>
 8009680:	4629      	mov	r1, r5
 8009682:	f7ff fbd7 	bl	8008e34 <_malloc_r>
 8009686:	4606      	mov	r6, r0
 8009688:	b360      	cbz	r0, 80096e4 <__ssputs_r+0xa0>
 800968a:	6921      	ldr	r1, [r4, #16]
 800968c:	464a      	mov	r2, r9
 800968e:	f7fe fcd5 	bl	800803c <memcpy>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	6126      	str	r6, [r4, #16]
 80096a0:	6165      	str	r5, [r4, #20]
 80096a2:	444e      	add	r6, r9
 80096a4:	eba5 0509 	sub.w	r5, r5, r9
 80096a8:	6026      	str	r6, [r4, #0]
 80096aa:	60a5      	str	r5, [r4, #8]
 80096ac:	463e      	mov	r6, r7
 80096ae:	42be      	cmp	r6, r7
 80096b0:	d900      	bls.n	80096b4 <__ssputs_r+0x70>
 80096b2:	463e      	mov	r6, r7
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	4632      	mov	r2, r6
 80096b8:	4641      	mov	r1, r8
 80096ba:	f7fe fc1a 	bl	8007ef2 <memmove>
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	1b9b      	subs	r3, r3, r6
 80096c2:	60a3      	str	r3, [r4, #8]
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	4433      	add	r3, r6
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	2000      	movs	r0, #0
 80096cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d0:	462a      	mov	r2, r5
 80096d2:	f000 fa13 	bl	8009afc <_realloc_r>
 80096d6:	4606      	mov	r6, r0
 80096d8:	2800      	cmp	r0, #0
 80096da:	d1e0      	bne.n	800969e <__ssputs_r+0x5a>
 80096dc:	6921      	ldr	r1, [r4, #16]
 80096de:	4650      	mov	r0, sl
 80096e0:	f7ff fb34 	bl	8008d4c <_free_r>
 80096e4:	230c      	movs	r3, #12
 80096e6:	f8ca 3000 	str.w	r3, [sl]
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	e7e9      	b.n	80096cc <__ssputs_r+0x88>

080096f8 <_svfiprintf_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	4698      	mov	r8, r3
 80096fe:	898b      	ldrh	r3, [r1, #12]
 8009700:	061b      	lsls	r3, r3, #24
 8009702:	b09d      	sub	sp, #116	; 0x74
 8009704:	4607      	mov	r7, r0
 8009706:	460d      	mov	r5, r1
 8009708:	4614      	mov	r4, r2
 800970a:	d50e      	bpl.n	800972a <_svfiprintf_r+0x32>
 800970c:	690b      	ldr	r3, [r1, #16]
 800970e:	b963      	cbnz	r3, 800972a <_svfiprintf_r+0x32>
 8009710:	2140      	movs	r1, #64	; 0x40
 8009712:	f7ff fb8f 	bl	8008e34 <_malloc_r>
 8009716:	6028      	str	r0, [r5, #0]
 8009718:	6128      	str	r0, [r5, #16]
 800971a:	b920      	cbnz	r0, 8009726 <_svfiprintf_r+0x2e>
 800971c:	230c      	movs	r3, #12
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	e0d0      	b.n	80098c8 <_svfiprintf_r+0x1d0>
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	616b      	str	r3, [r5, #20]
 800972a:	2300      	movs	r3, #0
 800972c:	9309      	str	r3, [sp, #36]	; 0x24
 800972e:	2320      	movs	r3, #32
 8009730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009734:	f8cd 800c 	str.w	r8, [sp, #12]
 8009738:	2330      	movs	r3, #48	; 0x30
 800973a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098e0 <_svfiprintf_r+0x1e8>
 800973e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009742:	f04f 0901 	mov.w	r9, #1
 8009746:	4623      	mov	r3, r4
 8009748:	469a      	mov	sl, r3
 800974a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974e:	b10a      	cbz	r2, 8009754 <_svfiprintf_r+0x5c>
 8009750:	2a25      	cmp	r2, #37	; 0x25
 8009752:	d1f9      	bne.n	8009748 <_svfiprintf_r+0x50>
 8009754:	ebba 0b04 	subs.w	fp, sl, r4
 8009758:	d00b      	beq.n	8009772 <_svfiprintf_r+0x7a>
 800975a:	465b      	mov	r3, fp
 800975c:	4622      	mov	r2, r4
 800975e:	4629      	mov	r1, r5
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ff6f 	bl	8009644 <__ssputs_r>
 8009766:	3001      	adds	r0, #1
 8009768:	f000 80a9 	beq.w	80098be <_svfiprintf_r+0x1c6>
 800976c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976e:	445a      	add	r2, fp
 8009770:	9209      	str	r2, [sp, #36]	; 0x24
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 80a1 	beq.w	80098be <_svfiprintf_r+0x1c6>
 800977c:	2300      	movs	r3, #0
 800977e:	f04f 32ff 	mov.w	r2, #4294967295
 8009782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009786:	f10a 0a01 	add.w	sl, sl, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	9307      	str	r3, [sp, #28]
 800978e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009792:	931a      	str	r3, [sp, #104]	; 0x68
 8009794:	4654      	mov	r4, sl
 8009796:	2205      	movs	r2, #5
 8009798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979c:	4850      	ldr	r0, [pc, #320]	; (80098e0 <_svfiprintf_r+0x1e8>)
 800979e:	f7f6 fd37 	bl	8000210 <memchr>
 80097a2:	9a04      	ldr	r2, [sp, #16]
 80097a4:	b9d8      	cbnz	r0, 80097de <_svfiprintf_r+0xe6>
 80097a6:	06d0      	lsls	r0, r2, #27
 80097a8:	bf44      	itt	mi
 80097aa:	2320      	movmi	r3, #32
 80097ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b0:	0711      	lsls	r1, r2, #28
 80097b2:	bf44      	itt	mi
 80097b4:	232b      	movmi	r3, #43	; 0x2b
 80097b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ba:	f89a 3000 	ldrb.w	r3, [sl]
 80097be:	2b2a      	cmp	r3, #42	; 0x2a
 80097c0:	d015      	beq.n	80097ee <_svfiprintf_r+0xf6>
 80097c2:	9a07      	ldr	r2, [sp, #28]
 80097c4:	4654      	mov	r4, sl
 80097c6:	2000      	movs	r0, #0
 80097c8:	f04f 0c0a 	mov.w	ip, #10
 80097cc:	4621      	mov	r1, r4
 80097ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d2:	3b30      	subs	r3, #48	; 0x30
 80097d4:	2b09      	cmp	r3, #9
 80097d6:	d94d      	bls.n	8009874 <_svfiprintf_r+0x17c>
 80097d8:	b1b0      	cbz	r0, 8009808 <_svfiprintf_r+0x110>
 80097da:	9207      	str	r2, [sp, #28]
 80097dc:	e014      	b.n	8009808 <_svfiprintf_r+0x110>
 80097de:	eba0 0308 	sub.w	r3, r0, r8
 80097e2:	fa09 f303 	lsl.w	r3, r9, r3
 80097e6:	4313      	orrs	r3, r2
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	46a2      	mov	sl, r4
 80097ec:	e7d2      	b.n	8009794 <_svfiprintf_r+0x9c>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	1d19      	adds	r1, r3, #4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	9103      	str	r1, [sp, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbb      	ittet	lt
 80097fa:	425b      	neglt	r3, r3
 80097fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009800:	9307      	strge	r3, [sp, #28]
 8009802:	9307      	strlt	r3, [sp, #28]
 8009804:	bfb8      	it	lt
 8009806:	9204      	strlt	r2, [sp, #16]
 8009808:	7823      	ldrb	r3, [r4, #0]
 800980a:	2b2e      	cmp	r3, #46	; 0x2e
 800980c:	d10c      	bne.n	8009828 <_svfiprintf_r+0x130>
 800980e:	7863      	ldrb	r3, [r4, #1]
 8009810:	2b2a      	cmp	r3, #42	; 0x2a
 8009812:	d134      	bne.n	800987e <_svfiprintf_r+0x186>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	1d1a      	adds	r2, r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	9203      	str	r2, [sp, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfb8      	it	lt
 8009820:	f04f 33ff 	movlt.w	r3, #4294967295
 8009824:	3402      	adds	r4, #2
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098f0 <_svfiprintf_r+0x1f8>
 800982c:	7821      	ldrb	r1, [r4, #0]
 800982e:	2203      	movs	r2, #3
 8009830:	4650      	mov	r0, sl
 8009832:	f7f6 fced 	bl	8000210 <memchr>
 8009836:	b138      	cbz	r0, 8009848 <_svfiprintf_r+0x150>
 8009838:	9b04      	ldr	r3, [sp, #16]
 800983a:	eba0 000a 	sub.w	r0, r0, sl
 800983e:	2240      	movs	r2, #64	; 0x40
 8009840:	4082      	lsls	r2, r0
 8009842:	4313      	orrs	r3, r2
 8009844:	3401      	adds	r4, #1
 8009846:	9304      	str	r3, [sp, #16]
 8009848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984c:	4825      	ldr	r0, [pc, #148]	; (80098e4 <_svfiprintf_r+0x1ec>)
 800984e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009852:	2206      	movs	r2, #6
 8009854:	f7f6 fcdc 	bl	8000210 <memchr>
 8009858:	2800      	cmp	r0, #0
 800985a:	d038      	beq.n	80098ce <_svfiprintf_r+0x1d6>
 800985c:	4b22      	ldr	r3, [pc, #136]	; (80098e8 <_svfiprintf_r+0x1f0>)
 800985e:	bb1b      	cbnz	r3, 80098a8 <_svfiprintf_r+0x1b0>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	3307      	adds	r3, #7
 8009864:	f023 0307 	bic.w	r3, r3, #7
 8009868:	3308      	adds	r3, #8
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986e:	4433      	add	r3, r6
 8009870:	9309      	str	r3, [sp, #36]	; 0x24
 8009872:	e768      	b.n	8009746 <_svfiprintf_r+0x4e>
 8009874:	fb0c 3202 	mla	r2, ip, r2, r3
 8009878:	460c      	mov	r4, r1
 800987a:	2001      	movs	r0, #1
 800987c:	e7a6      	b.n	80097cc <_svfiprintf_r+0xd4>
 800987e:	2300      	movs	r3, #0
 8009880:	3401      	adds	r4, #1
 8009882:	9305      	str	r3, [sp, #20]
 8009884:	4619      	mov	r1, r3
 8009886:	f04f 0c0a 	mov.w	ip, #10
 800988a:	4620      	mov	r0, r4
 800988c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009890:	3a30      	subs	r2, #48	; 0x30
 8009892:	2a09      	cmp	r2, #9
 8009894:	d903      	bls.n	800989e <_svfiprintf_r+0x1a6>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0c6      	beq.n	8009828 <_svfiprintf_r+0x130>
 800989a:	9105      	str	r1, [sp, #20]
 800989c:	e7c4      	b.n	8009828 <_svfiprintf_r+0x130>
 800989e:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a2:	4604      	mov	r4, r0
 80098a4:	2301      	movs	r3, #1
 80098a6:	e7f0      	b.n	800988a <_svfiprintf_r+0x192>
 80098a8:	ab03      	add	r3, sp, #12
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	462a      	mov	r2, r5
 80098ae:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <_svfiprintf_r+0x1f4>)
 80098b0:	a904      	add	r1, sp, #16
 80098b2:	4638      	mov	r0, r7
 80098b4:	f7fd fe44 	bl	8007540 <_printf_float>
 80098b8:	1c42      	adds	r2, r0, #1
 80098ba:	4606      	mov	r6, r0
 80098bc:	d1d6      	bne.n	800986c <_svfiprintf_r+0x174>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	065b      	lsls	r3, r3, #25
 80098c2:	f53f af2d 	bmi.w	8009720 <_svfiprintf_r+0x28>
 80098c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c8:	b01d      	add	sp, #116	; 0x74
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	ab03      	add	r3, sp, #12
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	462a      	mov	r2, r5
 80098d4:	4b05      	ldr	r3, [pc, #20]	; (80098ec <_svfiprintf_r+0x1f4>)
 80098d6:	a904      	add	r1, sp, #16
 80098d8:	4638      	mov	r0, r7
 80098da:	f7fe f8d5 	bl	8007a88 <_printf_i>
 80098de:	e7eb      	b.n	80098b8 <_svfiprintf_r+0x1c0>
 80098e0:	0800c054 	.word	0x0800c054
 80098e4:	0800c05e 	.word	0x0800c05e
 80098e8:	08007541 	.word	0x08007541
 80098ec:	08009645 	.word	0x08009645
 80098f0:	0800c05a 	.word	0x0800c05a

080098f4 <__sflush_r>:
 80098f4:	898a      	ldrh	r2, [r1, #12]
 80098f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	0710      	lsls	r0, r2, #28
 80098fe:	460c      	mov	r4, r1
 8009900:	d458      	bmi.n	80099b4 <__sflush_r+0xc0>
 8009902:	684b      	ldr	r3, [r1, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	dc05      	bgt.n	8009914 <__sflush_r+0x20>
 8009908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800990a:	2b00      	cmp	r3, #0
 800990c:	dc02      	bgt.n	8009914 <__sflush_r+0x20>
 800990e:	2000      	movs	r0, #0
 8009910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009916:	2e00      	cmp	r6, #0
 8009918:	d0f9      	beq.n	800990e <__sflush_r+0x1a>
 800991a:	2300      	movs	r3, #0
 800991c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009920:	682f      	ldr	r7, [r5, #0]
 8009922:	6a21      	ldr	r1, [r4, #32]
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	d032      	beq.n	800998e <__sflush_r+0x9a>
 8009928:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	075a      	lsls	r2, r3, #29
 800992e:	d505      	bpl.n	800993c <__sflush_r+0x48>
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	1ac0      	subs	r0, r0, r3
 8009934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009936:	b10b      	cbz	r3, 800993c <__sflush_r+0x48>
 8009938:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800993a:	1ac0      	subs	r0, r0, r3
 800993c:	2300      	movs	r3, #0
 800993e:	4602      	mov	r2, r0
 8009940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009942:	6a21      	ldr	r1, [r4, #32]
 8009944:	4628      	mov	r0, r5
 8009946:	47b0      	blx	r6
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	d106      	bne.n	800995c <__sflush_r+0x68>
 800994e:	6829      	ldr	r1, [r5, #0]
 8009950:	291d      	cmp	r1, #29
 8009952:	d82b      	bhi.n	80099ac <__sflush_r+0xb8>
 8009954:	4a29      	ldr	r2, [pc, #164]	; (80099fc <__sflush_r+0x108>)
 8009956:	410a      	asrs	r2, r1
 8009958:	07d6      	lsls	r6, r2, #31
 800995a:	d427      	bmi.n	80099ac <__sflush_r+0xb8>
 800995c:	2200      	movs	r2, #0
 800995e:	6062      	str	r2, [r4, #4]
 8009960:	04d9      	lsls	r1, r3, #19
 8009962:	6922      	ldr	r2, [r4, #16]
 8009964:	6022      	str	r2, [r4, #0]
 8009966:	d504      	bpl.n	8009972 <__sflush_r+0x7e>
 8009968:	1c42      	adds	r2, r0, #1
 800996a:	d101      	bne.n	8009970 <__sflush_r+0x7c>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	b903      	cbnz	r3, 8009972 <__sflush_r+0x7e>
 8009970:	6560      	str	r0, [r4, #84]	; 0x54
 8009972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009974:	602f      	str	r7, [r5, #0]
 8009976:	2900      	cmp	r1, #0
 8009978:	d0c9      	beq.n	800990e <__sflush_r+0x1a>
 800997a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800997e:	4299      	cmp	r1, r3
 8009980:	d002      	beq.n	8009988 <__sflush_r+0x94>
 8009982:	4628      	mov	r0, r5
 8009984:	f7ff f9e2 	bl	8008d4c <_free_r>
 8009988:	2000      	movs	r0, #0
 800998a:	6360      	str	r0, [r4, #52]	; 0x34
 800998c:	e7c0      	b.n	8009910 <__sflush_r+0x1c>
 800998e:	2301      	movs	r3, #1
 8009990:	4628      	mov	r0, r5
 8009992:	47b0      	blx	r6
 8009994:	1c41      	adds	r1, r0, #1
 8009996:	d1c8      	bne.n	800992a <__sflush_r+0x36>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0c5      	beq.n	800992a <__sflush_r+0x36>
 800999e:	2b1d      	cmp	r3, #29
 80099a0:	d001      	beq.n	80099a6 <__sflush_r+0xb2>
 80099a2:	2b16      	cmp	r3, #22
 80099a4:	d101      	bne.n	80099aa <__sflush_r+0xb6>
 80099a6:	602f      	str	r7, [r5, #0]
 80099a8:	e7b1      	b.n	800990e <__sflush_r+0x1a>
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	e7ad      	b.n	8009910 <__sflush_r+0x1c>
 80099b4:	690f      	ldr	r7, [r1, #16]
 80099b6:	2f00      	cmp	r7, #0
 80099b8:	d0a9      	beq.n	800990e <__sflush_r+0x1a>
 80099ba:	0793      	lsls	r3, r2, #30
 80099bc:	680e      	ldr	r6, [r1, #0]
 80099be:	bf08      	it	eq
 80099c0:	694b      	ldreq	r3, [r1, #20]
 80099c2:	600f      	str	r7, [r1, #0]
 80099c4:	bf18      	it	ne
 80099c6:	2300      	movne	r3, #0
 80099c8:	eba6 0807 	sub.w	r8, r6, r7
 80099cc:	608b      	str	r3, [r1, #8]
 80099ce:	f1b8 0f00 	cmp.w	r8, #0
 80099d2:	dd9c      	ble.n	800990e <__sflush_r+0x1a>
 80099d4:	6a21      	ldr	r1, [r4, #32]
 80099d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099d8:	4643      	mov	r3, r8
 80099da:	463a      	mov	r2, r7
 80099dc:	4628      	mov	r0, r5
 80099de:	47b0      	blx	r6
 80099e0:	2800      	cmp	r0, #0
 80099e2:	dc06      	bgt.n	80099f2 <__sflush_r+0xfe>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295
 80099f0:	e78e      	b.n	8009910 <__sflush_r+0x1c>
 80099f2:	4407      	add	r7, r0
 80099f4:	eba8 0800 	sub.w	r8, r8, r0
 80099f8:	e7e9      	b.n	80099ce <__sflush_r+0xda>
 80099fa:	bf00      	nop
 80099fc:	dfbffffe 	.word	0xdfbffffe

08009a00 <_fflush_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	690b      	ldr	r3, [r1, #16]
 8009a04:	4605      	mov	r5, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	b913      	cbnz	r3, 8009a10 <_fflush_r+0x10>
 8009a0a:	2500      	movs	r5, #0
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	b118      	cbz	r0, 8009a1a <_fflush_r+0x1a>
 8009a12:	6a03      	ldr	r3, [r0, #32]
 8009a14:	b90b      	cbnz	r3, 8009a1a <_fflush_r+0x1a>
 8009a16:	f7fe f9d3 	bl	8007dc0 <__sinit>
 8009a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0f3      	beq.n	8009a0a <_fflush_r+0xa>
 8009a22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a24:	07d0      	lsls	r0, r2, #31
 8009a26:	d404      	bmi.n	8009a32 <_fflush_r+0x32>
 8009a28:	0599      	lsls	r1, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_fflush_r+0x32>
 8009a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a2e:	f7fe fb03 	bl	8008038 <__retarget_lock_acquire_recursive>
 8009a32:	4628      	mov	r0, r5
 8009a34:	4621      	mov	r1, r4
 8009a36:	f7ff ff5d 	bl	80098f4 <__sflush_r>
 8009a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a3c:	07da      	lsls	r2, r3, #31
 8009a3e:	4605      	mov	r5, r0
 8009a40:	d4e4      	bmi.n	8009a0c <_fflush_r+0xc>
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	059b      	lsls	r3, r3, #22
 8009a46:	d4e1      	bmi.n	8009a0c <_fflush_r+0xc>
 8009a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a4a:	f7fe faf6 	bl	800803a <__retarget_lock_release_recursive>
 8009a4e:	e7dd      	b.n	8009a0c <_fflush_r+0xc>

08009a50 <_sbrk_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d06      	ldr	r5, [pc, #24]	; (8009a6c <_sbrk_r+0x1c>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f8 f84c 	bl	8001af8 <_sbrk>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_sbrk_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_sbrk_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	2000092c 	.word	0x2000092c

08009a70 <__assert_func>:
 8009a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a72:	4614      	mov	r4, r2
 8009a74:	461a      	mov	r2, r3
 8009a76:	4b09      	ldr	r3, [pc, #36]	; (8009a9c <__assert_func+0x2c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	68d8      	ldr	r0, [r3, #12]
 8009a7e:	b14c      	cbz	r4, 8009a94 <__assert_func+0x24>
 8009a80:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <__assert_func+0x30>)
 8009a82:	9100      	str	r1, [sp, #0]
 8009a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a88:	4906      	ldr	r1, [pc, #24]	; (8009aa4 <__assert_func+0x34>)
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f000 f872 	bl	8009b74 <fiprintf>
 8009a90:	f000 f882 	bl	8009b98 <abort>
 8009a94:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <__assert_func+0x38>)
 8009a96:	461c      	mov	r4, r3
 8009a98:	e7f3      	b.n	8009a82 <__assert_func+0x12>
 8009a9a:	bf00      	nop
 8009a9c:	2000007c 	.word	0x2000007c
 8009aa0:	0800c06f 	.word	0x0800c06f
 8009aa4:	0800c07c 	.word	0x0800c07c
 8009aa8:	0800c0aa 	.word	0x0800c0aa

08009aac <_calloc_r>:
 8009aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aae:	fba1 2402 	umull	r2, r4, r1, r2
 8009ab2:	b94c      	cbnz	r4, 8009ac8 <_calloc_r+0x1c>
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	9201      	str	r2, [sp, #4]
 8009ab8:	f7ff f9bc 	bl	8008e34 <_malloc_r>
 8009abc:	9a01      	ldr	r2, [sp, #4]
 8009abe:	4605      	mov	r5, r0
 8009ac0:	b930      	cbnz	r0, 8009ad0 <_calloc_r+0x24>
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	b003      	add	sp, #12
 8009ac6:	bd30      	pop	{r4, r5, pc}
 8009ac8:	220c      	movs	r2, #12
 8009aca:	6002      	str	r2, [r0, #0]
 8009acc:	2500      	movs	r5, #0
 8009ace:	e7f8      	b.n	8009ac2 <_calloc_r+0x16>
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	f7fe fa28 	bl	8007f26 <memset>
 8009ad6:	e7f4      	b.n	8009ac2 <_calloc_r+0x16>

08009ad8 <__ascii_mbtowc>:
 8009ad8:	b082      	sub	sp, #8
 8009ada:	b901      	cbnz	r1, 8009ade <__ascii_mbtowc+0x6>
 8009adc:	a901      	add	r1, sp, #4
 8009ade:	b142      	cbz	r2, 8009af2 <__ascii_mbtowc+0x1a>
 8009ae0:	b14b      	cbz	r3, 8009af6 <__ascii_mbtowc+0x1e>
 8009ae2:	7813      	ldrb	r3, [r2, #0]
 8009ae4:	600b      	str	r3, [r1, #0]
 8009ae6:	7812      	ldrb	r2, [r2, #0]
 8009ae8:	1e10      	subs	r0, r2, #0
 8009aea:	bf18      	it	ne
 8009aec:	2001      	movne	r0, #1
 8009aee:	b002      	add	sp, #8
 8009af0:	4770      	bx	lr
 8009af2:	4610      	mov	r0, r2
 8009af4:	e7fb      	b.n	8009aee <__ascii_mbtowc+0x16>
 8009af6:	f06f 0001 	mvn.w	r0, #1
 8009afa:	e7f8      	b.n	8009aee <__ascii_mbtowc+0x16>

08009afc <_realloc_r>:
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	4680      	mov	r8, r0
 8009b02:	4614      	mov	r4, r2
 8009b04:	460e      	mov	r6, r1
 8009b06:	b921      	cbnz	r1, 8009b12 <_realloc_r+0x16>
 8009b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	f7ff b991 	b.w	8008e34 <_malloc_r>
 8009b12:	b92a      	cbnz	r2, 8009b20 <_realloc_r+0x24>
 8009b14:	f7ff f91a 	bl	8008d4c <_free_r>
 8009b18:	4625      	mov	r5, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b20:	f000 f841 	bl	8009ba6 <_malloc_usable_size_r>
 8009b24:	4284      	cmp	r4, r0
 8009b26:	4607      	mov	r7, r0
 8009b28:	d802      	bhi.n	8009b30 <_realloc_r+0x34>
 8009b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b2e:	d812      	bhi.n	8009b56 <_realloc_r+0x5a>
 8009b30:	4621      	mov	r1, r4
 8009b32:	4640      	mov	r0, r8
 8009b34:	f7ff f97e 	bl	8008e34 <_malloc_r>
 8009b38:	4605      	mov	r5, r0
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d0ed      	beq.n	8009b1a <_realloc_r+0x1e>
 8009b3e:	42bc      	cmp	r4, r7
 8009b40:	4622      	mov	r2, r4
 8009b42:	4631      	mov	r1, r6
 8009b44:	bf28      	it	cs
 8009b46:	463a      	movcs	r2, r7
 8009b48:	f7fe fa78 	bl	800803c <memcpy>
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f7ff f8fc 	bl	8008d4c <_free_r>
 8009b54:	e7e1      	b.n	8009b1a <_realloc_r+0x1e>
 8009b56:	4635      	mov	r5, r6
 8009b58:	e7df      	b.n	8009b1a <_realloc_r+0x1e>

08009b5a <__ascii_wctomb>:
 8009b5a:	b149      	cbz	r1, 8009b70 <__ascii_wctomb+0x16>
 8009b5c:	2aff      	cmp	r2, #255	; 0xff
 8009b5e:	bf85      	ittet	hi
 8009b60:	238a      	movhi	r3, #138	; 0x8a
 8009b62:	6003      	strhi	r3, [r0, #0]
 8009b64:	700a      	strbls	r2, [r1, #0]
 8009b66:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b6a:	bf98      	it	ls
 8009b6c:	2001      	movls	r0, #1
 8009b6e:	4770      	bx	lr
 8009b70:	4608      	mov	r0, r1
 8009b72:	4770      	bx	lr

08009b74 <fiprintf>:
 8009b74:	b40e      	push	{r1, r2, r3}
 8009b76:	b503      	push	{r0, r1, lr}
 8009b78:	4601      	mov	r1, r0
 8009b7a:	ab03      	add	r3, sp, #12
 8009b7c:	4805      	ldr	r0, [pc, #20]	; (8009b94 <fiprintf+0x20>)
 8009b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b82:	6800      	ldr	r0, [r0, #0]
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	f000 f83f 	bl	8009c08 <_vfiprintf_r>
 8009b8a:	b002      	add	sp, #8
 8009b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b90:	b003      	add	sp, #12
 8009b92:	4770      	bx	lr
 8009b94:	2000007c 	.word	0x2000007c

08009b98 <abort>:
 8009b98:	b508      	push	{r3, lr}
 8009b9a:	2006      	movs	r0, #6
 8009b9c:	f000 fa0c 	bl	8009fb8 <raise>
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	f7f7 ff31 	bl	8001a08 <_exit>

08009ba6 <_malloc_usable_size_r>:
 8009ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009baa:	1f18      	subs	r0, r3, #4
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfbc      	itt	lt
 8009bb0:	580b      	ldrlt	r3, [r1, r0]
 8009bb2:	18c0      	addlt	r0, r0, r3
 8009bb4:	4770      	bx	lr

08009bb6 <__sfputc_r>:
 8009bb6:	6893      	ldr	r3, [r2, #8]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	b410      	push	{r4}
 8009bbe:	6093      	str	r3, [r2, #8]
 8009bc0:	da08      	bge.n	8009bd4 <__sfputc_r+0x1e>
 8009bc2:	6994      	ldr	r4, [r2, #24]
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	db01      	blt.n	8009bcc <__sfputc_r+0x16>
 8009bc8:	290a      	cmp	r1, #10
 8009bca:	d103      	bne.n	8009bd4 <__sfputc_r+0x1e>
 8009bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd0:	f000 b934 	b.w	8009e3c <__swbuf_r>
 8009bd4:	6813      	ldr	r3, [r2, #0]
 8009bd6:	1c58      	adds	r0, r3, #1
 8009bd8:	6010      	str	r0, [r2, #0]
 8009bda:	7019      	strb	r1, [r3, #0]
 8009bdc:	4608      	mov	r0, r1
 8009bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <__sfputs_r>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	4606      	mov	r6, r0
 8009be8:	460f      	mov	r7, r1
 8009bea:	4614      	mov	r4, r2
 8009bec:	18d5      	adds	r5, r2, r3
 8009bee:	42ac      	cmp	r4, r5
 8009bf0:	d101      	bne.n	8009bf6 <__sfputs_r+0x12>
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	e007      	b.n	8009c06 <__sfputs_r+0x22>
 8009bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfa:	463a      	mov	r2, r7
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7ff ffda 	bl	8009bb6 <__sfputc_r>
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	d1f3      	bne.n	8009bee <__sfputs_r+0xa>
 8009c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c08 <_vfiprintf_r>:
 8009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	b09d      	sub	sp, #116	; 0x74
 8009c10:	4614      	mov	r4, r2
 8009c12:	4698      	mov	r8, r3
 8009c14:	4606      	mov	r6, r0
 8009c16:	b118      	cbz	r0, 8009c20 <_vfiprintf_r+0x18>
 8009c18:	6a03      	ldr	r3, [r0, #32]
 8009c1a:	b90b      	cbnz	r3, 8009c20 <_vfiprintf_r+0x18>
 8009c1c:	f7fe f8d0 	bl	8007dc0 <__sinit>
 8009c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c22:	07d9      	lsls	r1, r3, #31
 8009c24:	d405      	bmi.n	8009c32 <_vfiprintf_r+0x2a>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	059a      	lsls	r2, r3, #22
 8009c2a:	d402      	bmi.n	8009c32 <_vfiprintf_r+0x2a>
 8009c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c2e:	f7fe fa03 	bl	8008038 <__retarget_lock_acquire_recursive>
 8009c32:	89ab      	ldrh	r3, [r5, #12]
 8009c34:	071b      	lsls	r3, r3, #28
 8009c36:	d501      	bpl.n	8009c3c <_vfiprintf_r+0x34>
 8009c38:	692b      	ldr	r3, [r5, #16]
 8009c3a:	b99b      	cbnz	r3, 8009c64 <_vfiprintf_r+0x5c>
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	4630      	mov	r0, r6
 8009c40:	f000 f93a 	bl	8009eb8 <__swsetup_r>
 8009c44:	b170      	cbz	r0, 8009c64 <_vfiprintf_r+0x5c>
 8009c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c48:	07dc      	lsls	r4, r3, #31
 8009c4a:	d504      	bpl.n	8009c56 <_vfiprintf_r+0x4e>
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c50:	b01d      	add	sp, #116	; 0x74
 8009c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	0598      	lsls	r0, r3, #22
 8009c5a:	d4f7      	bmi.n	8009c4c <_vfiprintf_r+0x44>
 8009c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c5e:	f7fe f9ec 	bl	800803a <__retarget_lock_release_recursive>
 8009c62:	e7f3      	b.n	8009c4c <_vfiprintf_r+0x44>
 8009c64:	2300      	movs	r3, #0
 8009c66:	9309      	str	r3, [sp, #36]	; 0x24
 8009c68:	2320      	movs	r3, #32
 8009c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c72:	2330      	movs	r3, #48	; 0x30
 8009c74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e28 <_vfiprintf_r+0x220>
 8009c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c7c:	f04f 0901 	mov.w	r9, #1
 8009c80:	4623      	mov	r3, r4
 8009c82:	469a      	mov	sl, r3
 8009c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c88:	b10a      	cbz	r2, 8009c8e <_vfiprintf_r+0x86>
 8009c8a:	2a25      	cmp	r2, #37	; 0x25
 8009c8c:	d1f9      	bne.n	8009c82 <_vfiprintf_r+0x7a>
 8009c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c92:	d00b      	beq.n	8009cac <_vfiprintf_r+0xa4>
 8009c94:	465b      	mov	r3, fp
 8009c96:	4622      	mov	r2, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7ff ffa2 	bl	8009be4 <__sfputs_r>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f000 80a9 	beq.w	8009df8 <_vfiprintf_r+0x1f0>
 8009ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca8:	445a      	add	r2, fp
 8009caa:	9209      	str	r2, [sp, #36]	; 0x24
 8009cac:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 80a1 	beq.w	8009df8 <_vfiprintf_r+0x1f0>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc0:	f10a 0a01 	add.w	sl, sl, #1
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	9307      	str	r3, [sp, #28]
 8009cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8009cce:	4654      	mov	r4, sl
 8009cd0:	2205      	movs	r2, #5
 8009cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd6:	4854      	ldr	r0, [pc, #336]	; (8009e28 <_vfiprintf_r+0x220>)
 8009cd8:	f7f6 fa9a 	bl	8000210 <memchr>
 8009cdc:	9a04      	ldr	r2, [sp, #16]
 8009cde:	b9d8      	cbnz	r0, 8009d18 <_vfiprintf_r+0x110>
 8009ce0:	06d1      	lsls	r1, r2, #27
 8009ce2:	bf44      	itt	mi
 8009ce4:	2320      	movmi	r3, #32
 8009ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cea:	0713      	lsls	r3, r2, #28
 8009cec:	bf44      	itt	mi
 8009cee:	232b      	movmi	r3, #43	; 0x2b
 8009cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cfa:	d015      	beq.n	8009d28 <_vfiprintf_r+0x120>
 8009cfc:	9a07      	ldr	r2, [sp, #28]
 8009cfe:	4654      	mov	r4, sl
 8009d00:	2000      	movs	r0, #0
 8009d02:	f04f 0c0a 	mov.w	ip, #10
 8009d06:	4621      	mov	r1, r4
 8009d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d0c:	3b30      	subs	r3, #48	; 0x30
 8009d0e:	2b09      	cmp	r3, #9
 8009d10:	d94d      	bls.n	8009dae <_vfiprintf_r+0x1a6>
 8009d12:	b1b0      	cbz	r0, 8009d42 <_vfiprintf_r+0x13a>
 8009d14:	9207      	str	r2, [sp, #28]
 8009d16:	e014      	b.n	8009d42 <_vfiprintf_r+0x13a>
 8009d18:	eba0 0308 	sub.w	r3, r0, r8
 8009d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d20:	4313      	orrs	r3, r2
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	46a2      	mov	sl, r4
 8009d26:	e7d2      	b.n	8009cce <_vfiprintf_r+0xc6>
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	1d19      	adds	r1, r3, #4
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	9103      	str	r1, [sp, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bfbb      	ittet	lt
 8009d34:	425b      	neglt	r3, r3
 8009d36:	f042 0202 	orrlt.w	r2, r2, #2
 8009d3a:	9307      	strge	r3, [sp, #28]
 8009d3c:	9307      	strlt	r3, [sp, #28]
 8009d3e:	bfb8      	it	lt
 8009d40:	9204      	strlt	r2, [sp, #16]
 8009d42:	7823      	ldrb	r3, [r4, #0]
 8009d44:	2b2e      	cmp	r3, #46	; 0x2e
 8009d46:	d10c      	bne.n	8009d62 <_vfiprintf_r+0x15a>
 8009d48:	7863      	ldrb	r3, [r4, #1]
 8009d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d4c:	d134      	bne.n	8009db8 <_vfiprintf_r+0x1b0>
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	1d1a      	adds	r2, r3, #4
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	9203      	str	r2, [sp, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bfb8      	it	lt
 8009d5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d5e:	3402      	adds	r4, #2
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009e38 <_vfiprintf_r+0x230>
 8009d66:	7821      	ldrb	r1, [r4, #0]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f7f6 fa50 	bl	8000210 <memchr>
 8009d70:	b138      	cbz	r0, 8009d82 <_vfiprintf_r+0x17a>
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	eba0 000a 	sub.w	r0, r0, sl
 8009d78:	2240      	movs	r2, #64	; 0x40
 8009d7a:	4082      	lsls	r2, r0
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	3401      	adds	r4, #1
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d86:	4829      	ldr	r0, [pc, #164]	; (8009e2c <_vfiprintf_r+0x224>)
 8009d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d8c:	2206      	movs	r2, #6
 8009d8e:	f7f6 fa3f 	bl	8000210 <memchr>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d03f      	beq.n	8009e16 <_vfiprintf_r+0x20e>
 8009d96:	4b26      	ldr	r3, [pc, #152]	; (8009e30 <_vfiprintf_r+0x228>)
 8009d98:	bb1b      	cbnz	r3, 8009de2 <_vfiprintf_r+0x1da>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	3307      	adds	r3, #7
 8009d9e:	f023 0307 	bic.w	r3, r3, #7
 8009da2:	3308      	adds	r3, #8
 8009da4:	9303      	str	r3, [sp, #12]
 8009da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da8:	443b      	add	r3, r7
 8009daa:	9309      	str	r3, [sp, #36]	; 0x24
 8009dac:	e768      	b.n	8009c80 <_vfiprintf_r+0x78>
 8009dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009db2:	460c      	mov	r4, r1
 8009db4:	2001      	movs	r0, #1
 8009db6:	e7a6      	b.n	8009d06 <_vfiprintf_r+0xfe>
 8009db8:	2300      	movs	r3, #0
 8009dba:	3401      	adds	r4, #1
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	f04f 0c0a 	mov.w	ip, #10
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dca:	3a30      	subs	r2, #48	; 0x30
 8009dcc:	2a09      	cmp	r2, #9
 8009dce:	d903      	bls.n	8009dd8 <_vfiprintf_r+0x1d0>
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0c6      	beq.n	8009d62 <_vfiprintf_r+0x15a>
 8009dd4:	9105      	str	r1, [sp, #20]
 8009dd6:	e7c4      	b.n	8009d62 <_vfiprintf_r+0x15a>
 8009dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ddc:	4604      	mov	r4, r0
 8009dde:	2301      	movs	r3, #1
 8009de0:	e7f0      	b.n	8009dc4 <_vfiprintf_r+0x1bc>
 8009de2:	ab03      	add	r3, sp, #12
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	462a      	mov	r2, r5
 8009de8:	4b12      	ldr	r3, [pc, #72]	; (8009e34 <_vfiprintf_r+0x22c>)
 8009dea:	a904      	add	r1, sp, #16
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7fd fba7 	bl	8007540 <_printf_float>
 8009df2:	4607      	mov	r7, r0
 8009df4:	1c78      	adds	r0, r7, #1
 8009df6:	d1d6      	bne.n	8009da6 <_vfiprintf_r+0x19e>
 8009df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dfa:	07d9      	lsls	r1, r3, #31
 8009dfc:	d405      	bmi.n	8009e0a <_vfiprintf_r+0x202>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_vfiprintf_r+0x202>
 8009e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e06:	f7fe f918 	bl	800803a <__retarget_lock_release_recursive>
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	065b      	lsls	r3, r3, #25
 8009e0e:	f53f af1d 	bmi.w	8009c4c <_vfiprintf_r+0x44>
 8009e12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e14:	e71c      	b.n	8009c50 <_vfiprintf_r+0x48>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <_vfiprintf_r+0x22c>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7fd fe31 	bl	8007a88 <_printf_i>
 8009e26:	e7e4      	b.n	8009df2 <_vfiprintf_r+0x1ea>
 8009e28:	0800c054 	.word	0x0800c054
 8009e2c:	0800c05e 	.word	0x0800c05e
 8009e30:	08007541 	.word	0x08007541
 8009e34:	08009be5 	.word	0x08009be5
 8009e38:	0800c05a 	.word	0x0800c05a

08009e3c <__swbuf_r>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	460e      	mov	r6, r1
 8009e40:	4614      	mov	r4, r2
 8009e42:	4605      	mov	r5, r0
 8009e44:	b118      	cbz	r0, 8009e4e <__swbuf_r+0x12>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <__swbuf_r+0x12>
 8009e4a:	f7fd ffb9 	bl	8007dc0 <__sinit>
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d525      	bpl.n	8009ea4 <__swbuf_r+0x68>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b31b      	cbz	r3, 8009ea4 <__swbuf_r+0x68>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	6922      	ldr	r2, [r4, #16]
 8009e60:	1a98      	subs	r0, r3, r2
 8009e62:	6963      	ldr	r3, [r4, #20]
 8009e64:	b2f6      	uxtb	r6, r6
 8009e66:	4283      	cmp	r3, r0
 8009e68:	4637      	mov	r7, r6
 8009e6a:	dc04      	bgt.n	8009e76 <__swbuf_r+0x3a>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f7ff fdc6 	bl	8009a00 <_fflush_r>
 8009e74:	b9e0      	cbnz	r0, 8009eb0 <__swbuf_r+0x74>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	701e      	strb	r6, [r3, #0]
 8009e84:	6962      	ldr	r2, [r4, #20]
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d004      	beq.n	8009e96 <__swbuf_r+0x5a>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	07db      	lsls	r3, r3, #31
 8009e90:	d506      	bpl.n	8009ea0 <__swbuf_r+0x64>
 8009e92:	2e0a      	cmp	r6, #10
 8009e94:	d104      	bne.n	8009ea0 <__swbuf_r+0x64>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f7ff fdb1 	bl	8009a00 <_fflush_r>
 8009e9e:	b938      	cbnz	r0, 8009eb0 <__swbuf_r+0x74>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f000 f806 	bl	8009eb8 <__swsetup_r>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d0d5      	beq.n	8009e5c <__swbuf_r+0x20>
 8009eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8009eb4:	e7f4      	b.n	8009ea0 <__swbuf_r+0x64>
	...

08009eb8 <__swsetup_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4b2a      	ldr	r3, [pc, #168]	; (8009f64 <__swsetup_r+0xac>)
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	b118      	cbz	r0, 8009ecc <__swsetup_r+0x14>
 8009ec4:	6a03      	ldr	r3, [r0, #32]
 8009ec6:	b90b      	cbnz	r3, 8009ecc <__swsetup_r+0x14>
 8009ec8:	f7fd ff7a 	bl	8007dc0 <__sinit>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ed2:	0718      	lsls	r0, r3, #28
 8009ed4:	d422      	bmi.n	8009f1c <__swsetup_r+0x64>
 8009ed6:	06d9      	lsls	r1, r3, #27
 8009ed8:	d407      	bmi.n	8009eea <__swsetup_r+0x32>
 8009eda:	2309      	movs	r3, #9
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ee2:	81a3      	strh	r3, [r4, #12]
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	e034      	b.n	8009f54 <__swsetup_r+0x9c>
 8009eea:	0758      	lsls	r0, r3, #29
 8009eec:	d512      	bpl.n	8009f14 <__swsetup_r+0x5c>
 8009eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ef0:	b141      	cbz	r1, 8009f04 <__swsetup_r+0x4c>
 8009ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ef6:	4299      	cmp	r1, r3
 8009ef8:	d002      	beq.n	8009f00 <__swsetup_r+0x48>
 8009efa:	4628      	mov	r0, r5
 8009efc:	f7fe ff26 	bl	8008d4c <_free_r>
 8009f00:	2300      	movs	r3, #0
 8009f02:	6363      	str	r3, [r4, #52]	; 0x34
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	6063      	str	r3, [r4, #4]
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	6023      	str	r3, [r4, #0]
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f043 0308 	orr.w	r3, r3, #8
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	b94b      	cbnz	r3, 8009f34 <__swsetup_r+0x7c>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f2a:	d003      	beq.n	8009f34 <__swsetup_r+0x7c>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f000 f884 	bl	800a03c <__smakebuf_r>
 8009f34:	89a0      	ldrh	r0, [r4, #12]
 8009f36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f3a:	f010 0301 	ands.w	r3, r0, #1
 8009f3e:	d00a      	beq.n	8009f56 <__swsetup_r+0x9e>
 8009f40:	2300      	movs	r3, #0
 8009f42:	60a3      	str	r3, [r4, #8]
 8009f44:	6963      	ldr	r3, [r4, #20]
 8009f46:	425b      	negs	r3, r3
 8009f48:	61a3      	str	r3, [r4, #24]
 8009f4a:	6923      	ldr	r3, [r4, #16]
 8009f4c:	b943      	cbnz	r3, 8009f60 <__swsetup_r+0xa8>
 8009f4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f52:	d1c4      	bne.n	8009ede <__swsetup_r+0x26>
 8009f54:	bd38      	pop	{r3, r4, r5, pc}
 8009f56:	0781      	lsls	r1, r0, #30
 8009f58:	bf58      	it	pl
 8009f5a:	6963      	ldrpl	r3, [r4, #20]
 8009f5c:	60a3      	str	r3, [r4, #8]
 8009f5e:	e7f4      	b.n	8009f4a <__swsetup_r+0x92>
 8009f60:	2000      	movs	r0, #0
 8009f62:	e7f7      	b.n	8009f54 <__swsetup_r+0x9c>
 8009f64:	2000007c 	.word	0x2000007c

08009f68 <_raise_r>:
 8009f68:	291f      	cmp	r1, #31
 8009f6a:	b538      	push	{r3, r4, r5, lr}
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	d904      	bls.n	8009f7c <_raise_r+0x14>
 8009f72:	2316      	movs	r3, #22
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f7e:	b112      	cbz	r2, 8009f86 <_raise_r+0x1e>
 8009f80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f84:	b94b      	cbnz	r3, 8009f9a <_raise_r+0x32>
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 f830 	bl	8009fec <_getpid_r>
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4601      	mov	r1, r0
 8009f90:	4620      	mov	r0, r4
 8009f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f96:	f000 b817 	b.w	8009fc8 <_kill_r>
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d00a      	beq.n	8009fb4 <_raise_r+0x4c>
 8009f9e:	1c59      	adds	r1, r3, #1
 8009fa0:	d103      	bne.n	8009faa <_raise_r+0x42>
 8009fa2:	2316      	movs	r3, #22
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	e7e7      	b.n	8009f7a <_raise_r+0x12>
 8009faa:	2400      	movs	r4, #0
 8009fac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	4798      	blx	r3
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e7e0      	b.n	8009f7a <_raise_r+0x12>

08009fb8 <raise>:
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <raise+0xc>)
 8009fba:	4601      	mov	r1, r0
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f7ff bfd3 	b.w	8009f68 <_raise_r>
 8009fc2:	bf00      	nop
 8009fc4:	2000007c 	.word	0x2000007c

08009fc8 <_kill_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	; (8009fe8 <_kill_r+0x20>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	f7f7 fd07 	bl	80019e8 <_kill>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	d102      	bne.n	8009fe4 <_kill_r+0x1c>
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	b103      	cbz	r3, 8009fe4 <_kill_r+0x1c>
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	bd38      	pop	{r3, r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	2000092c 	.word	0x2000092c

08009fec <_getpid_r>:
 8009fec:	f7f7 bcf4 	b.w	80019d8 <_getpid>

08009ff0 <__swhatbuf_r>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	2900      	cmp	r1, #0
 8009ffa:	b096      	sub	sp, #88	; 0x58
 8009ffc:	4615      	mov	r5, r2
 8009ffe:	461e      	mov	r6, r3
 800a000:	da0d      	bge.n	800a01e <__swhatbuf_r+0x2e>
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a008:	f04f 0100 	mov.w	r1, #0
 800a00c:	bf0c      	ite	eq
 800a00e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a012:	2340      	movne	r3, #64	; 0x40
 800a014:	2000      	movs	r0, #0
 800a016:	6031      	str	r1, [r6, #0]
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	b016      	add	sp, #88	; 0x58
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	466a      	mov	r2, sp
 800a020:	f000 f848 	bl	800a0b4 <_fstat_r>
 800a024:	2800      	cmp	r0, #0
 800a026:	dbec      	blt.n	800a002 <__swhatbuf_r+0x12>
 800a028:	9901      	ldr	r1, [sp, #4]
 800a02a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a02e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a032:	4259      	negs	r1, r3
 800a034:	4159      	adcs	r1, r3
 800a036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03a:	e7eb      	b.n	800a014 <__swhatbuf_r+0x24>

0800a03c <__smakebuf_r>:
 800a03c:	898b      	ldrh	r3, [r1, #12]
 800a03e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a040:	079d      	lsls	r5, r3, #30
 800a042:	4606      	mov	r6, r0
 800a044:	460c      	mov	r4, r1
 800a046:	d507      	bpl.n	800a058 <__smakebuf_r+0x1c>
 800a048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	6123      	str	r3, [r4, #16]
 800a050:	2301      	movs	r3, #1
 800a052:	6163      	str	r3, [r4, #20]
 800a054:	b002      	add	sp, #8
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	ab01      	add	r3, sp, #4
 800a05a:	466a      	mov	r2, sp
 800a05c:	f7ff ffc8 	bl	8009ff0 <__swhatbuf_r>
 800a060:	9900      	ldr	r1, [sp, #0]
 800a062:	4605      	mov	r5, r0
 800a064:	4630      	mov	r0, r6
 800a066:	f7fe fee5 	bl	8008e34 <_malloc_r>
 800a06a:	b948      	cbnz	r0, 800a080 <__smakebuf_r+0x44>
 800a06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a070:	059a      	lsls	r2, r3, #22
 800a072:	d4ef      	bmi.n	800a054 <__smakebuf_r+0x18>
 800a074:	f023 0303 	bic.w	r3, r3, #3
 800a078:	f043 0302 	orr.w	r3, r3, #2
 800a07c:	81a3      	strh	r3, [r4, #12]
 800a07e:	e7e3      	b.n	800a048 <__smakebuf_r+0xc>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	6020      	str	r0, [r4, #0]
 800a084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	6163      	str	r3, [r4, #20]
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	6120      	str	r0, [r4, #16]
 800a092:	b15b      	cbz	r3, 800a0ac <__smakebuf_r+0x70>
 800a094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 f81d 	bl	800a0d8 <_isatty_r>
 800a09e:	b128      	cbz	r0, 800a0ac <__smakebuf_r+0x70>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	f043 0301 	orr.w	r3, r3, #1
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	431d      	orrs	r5, r3
 800a0b0:	81a5      	strh	r5, [r4, #12]
 800a0b2:	e7cf      	b.n	800a054 <__smakebuf_r+0x18>

0800a0b4 <_fstat_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4d07      	ldr	r5, [pc, #28]	; (800a0d4 <_fstat_r+0x20>)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	4611      	mov	r1, r2
 800a0c0:	602b      	str	r3, [r5, #0]
 800a0c2:	f7f7 fcf0 	bl	8001aa6 <_fstat>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	d102      	bne.n	800a0d0 <_fstat_r+0x1c>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	b103      	cbz	r3, 800a0d0 <_fstat_r+0x1c>
 800a0ce:	6023      	str	r3, [r4, #0]
 800a0d0:	bd38      	pop	{r3, r4, r5, pc}
 800a0d2:	bf00      	nop
 800a0d4:	2000092c 	.word	0x2000092c

0800a0d8 <_isatty_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d06      	ldr	r5, [pc, #24]	; (800a0f4 <_isatty_r+0x1c>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	602b      	str	r3, [r5, #0]
 800a0e4:	f7f7 fcef 	bl	8001ac6 <_isatty>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_isatty_r+0x1a>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_isatty_r+0x1a>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	2000092c 	.word	0x2000092c

0800a0f8 <_init>:
 800a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fa:	bf00      	nop
 800a0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fe:	bc08      	pop	{r3}
 800a100:	469e      	mov	lr, r3
 800a102:	4770      	bx	lr

0800a104 <_fini>:
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a106:	bf00      	nop
 800a108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10a:	bc08      	pop	{r3}
 800a10c:	469e      	mov	lr, r3
 800a10e:	4770      	bx	lr
