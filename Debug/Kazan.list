
Kazan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c24  08009870  08009870  00019870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e494  0800e494  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e494  0800e494  0001e494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e49c  0800e49c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e49c  0800e49c  0001e49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4a0  0800e4a0  0001e4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800e4a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  200001fc  0800e6a0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  0800e6a0  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102e9  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027bb  00000000  00000000  00030558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00032d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b80  00000000  00000000  00033bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027192  00000000  00000000  00034770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fe8  00000000  00000000  0005b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de5ec  00000000  00000000  0006f8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000515c  00000000  00000000  0014ded8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00153034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009858 	.word	0x08009858

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08009858 	.word	0x08009858

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0a6      	sub	sp, #152	; 0x98
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f000 fe95 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f835 	bl	8000ffc <_Z18SystemClock_Configv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */


  MX_GPIO_Init();
 8000f92:	f000 fad7 	bl	8001544 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000f96:	f000 f8b3 	bl	8001100 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000f9a:	f000 f96d 	bl	8001278 <_ZL12MX_ADC2_Initv>
  MX_I2C2_Init();
 8000f9e:	f000 fa05 	bl	80013ac <_ZL12MX_I2C2_Initv>
  MX_UART4_Init();
 8000fa2:	f000 fa73 	bl	800148c <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8000fa6:	f000 fa35 	bl	8001414 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000faa:	f000 fa9d 	bl	80014e8 <_ZL19MX_USART1_UART_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  Application application;
//  application.run();
  ssd1306_TestAll();
 8000fae:	f004 fceb 	bl	8005988 <ssd1306_TestAll>
  uint8_t buttons[3];
  uint32_t lsensor[8];
  uint32_t trimpots[2];
  while (1)
  {
     char s[100] = "--------------------------Mori-----------------------------------\r\n";
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <main+0x6c>)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	2244      	movs	r2, #68	; 0x44
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 fcb2 	bl	8007924 <memcpy>
 8000fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 fc1c 	bl	8007806 <memset>
     HAL_UART_Transmit(&huart4_data, (uint8_t *)s,strlen(s) , 100);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f96d 	bl	80002b0 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4639      	mov	r1, r7
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <main+0x70>)
 8000fe0:	f002 ff0c 	bl	8003dfc <HAL_UART_Transmit>
     HAL_GPIO_TogglePin(CEVA_LED_GPIO_Port, CEVA_LED_Pin);
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <main+0x74>)
 8000fe8:	f001 fc01 	bl	80027ee <HAL_GPIO_TogglePin>
//	 HAL_UART_Transmit(&huart4_data, (uint8_t *)s,strlen(s) , 100);
//	 HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000fec:	e7e1      	b.n	8000fb2 <main+0x2e>
 8000fee:	bf00      	nop
 8000ff0:	08009870 	.word	0x08009870
 8000ff4:	20000354 	.word	0x20000354
 8000ff8:	40020800 	.word	0x40020800

08000ffc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	; 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2234      	movs	r2, #52	; 0x34
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f006 fbfb 	bl	8007806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <_Z18SystemClock_Configv+0xfc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <_Z18SystemClock_Configv+0xfc>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <_Z18SystemClock_Configv+0xfc>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <_Z18SystemClock_Configv+0x100>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <_Z18SystemClock_Configv+0x100>)
 8001046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <_Z18SystemClock_Configv+0x100>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800106c:	2308      	movs	r3, #8
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001070:	23b4      	movs	r3, #180	; 0xb4
 8001072:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fb3d 	bl	8003704 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800109a:	f000 fad9 	bl	8001650 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800109e:	f002 f81d 	bl	80030dc <HAL_PWREx_EnableOverDrive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80010b2:	f000 facd 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2302      	movs	r3, #2
 80010bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2105      	movs	r1, #5
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 f851 	bl	800317c <HAL_RCC_ClockConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf14      	ite	ne
 80010e0:	2301      	movne	r3, #1
 80010e2:	2300      	moveq	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80010ea:	f000 fab1 	bl	8001650 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	; 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001112:	4b56      	ldr	r3, [pc, #344]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001114:	4a56      	ldr	r2, [pc, #344]	; (8001270 <_ZL12MX_ADC1_Initv+0x170>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001118:	4b54      	ldr	r3, [pc, #336]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 800111a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8001120:	4b52      	ldr	r3, [pc, #328]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001122:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8001126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 800112a:	2201      	movs	r2, #1
 800112c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800112e:	4b4f      	ldr	r3, [pc, #316]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001130:	2201      	movs	r2, #1
 8001132:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b4d      	ldr	r3, [pc, #308]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001144:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <_ZL12MX_ADC1_Initv+0x174>)
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001150:	2206      	movs	r2, #6
 8001152:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b43      	ldr	r3, [pc, #268]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 800115e:	2201      	movs	r2, #1
 8001160:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001162:	4842      	ldr	r0, [pc, #264]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001164:	f000 fe3e 	bl	8001de4 <HAL_ADC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	bf14      	ite	ne
 800116e:	2301      	movne	r3, #1
 8001170:	2300      	moveq	r3, #0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <_ZL12MX_ADC1_Initv+0x7c>
  {
    Error_Handler();
 8001178:	f000 fa6a 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800117c:	2301      	movs	r3, #1
 800117e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4837      	ldr	r0, [pc, #220]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 800118e:	f000 fe6d 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf14      	ite	ne
 8001198:	2301      	movne	r3, #1
 800119a:	2300      	moveq	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 80011a2:	f000 fa55 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	482e      	ldr	r0, [pc, #184]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 80011b4:	f000 fe5a 	bl	8001e6c <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <_ZL12MX_ADC1_Initv+0xcc>
  {
    Error_Handler();
 80011c8:	f000 fa42 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011cc:	2303      	movs	r3, #3
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011d0:	2303      	movs	r3, #3
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 80011da:	f000 fe47 	bl	8001e6c <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2300      	moveq	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <_ZL12MX_ADC1_Initv+0xf2>
  {
    Error_Handler();
 80011ee:	f000 fa2f 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011f2:	2305      	movs	r3, #5
 80011f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011f6:	2304      	movs	r3, #4
 80011f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001200:	f000 fe34 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 8001214:	f000 fa1c 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001218:	2306      	movs	r3, #6
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800121c:	2305      	movs	r3, #5
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 8001226:	f000 fe21 	bl	8001e6c <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <_ZL12MX_ADC1_Initv+0x13e>
  {
    Error_Handler();
 800123a:	f000 fa09 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800123e:	2307      	movs	r3, #7
 8001240:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001242:	2306      	movs	r3, #6
 8001244:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <_ZL12MX_ADC1_Initv+0x16c>)
 800124c:	f000 fe0e 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_ZL12MX_ADC1_Initv+0x164>
  {
    Error_Handler();
 8001260:	f000 f9f6 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000218 	.word	0x20000218
 8001270:	40012000 	.word	0x40012000
 8001274:	0f000001 	.word	0x0f000001

08001278 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800128a:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <_ZL12MX_ADC2_Initv+0x12c>)
 800128e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 8001292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001296:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800129e:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012ba:	4a3b      	ldr	r2, [pc, #236]	; (80013a8 <_ZL12MX_ADC2_Initv+0x130>)
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012d8:	4831      	ldr	r0, [pc, #196]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 80012da:	f000 fd83 	bl	8001de4 <HAL_ADC_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf14      	ite	ne
 80012e4:	2301      	movne	r3, #1
 80012e6:	2300      	moveq	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 80012ee:	f000 f9af 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	4619      	mov	r1, r3
 8001302:	4827      	ldr	r0, [pc, #156]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 8001304:	f000 fdb2 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 8001318:	f000 f99a 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800131c:	2308      	movs	r3, #8
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	481c      	ldr	r0, [pc, #112]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 800132e:	f000 fd9d 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <_ZL12MX_ADC2_Initv+0xce>
  {
    Error_Handler();
 8001342:	f000 f985 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001346:	2309      	movs	r3, #9
 8001348:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800134a:	2303      	movs	r3, #3
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 8001354:	f000 fd8a 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <_ZL12MX_ADC2_Initv+0xf4>
  {
    Error_Handler();
 8001368:	f000 f972 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800136c:	230a      	movs	r3, #10
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001370:	2304      	movs	r3, #4
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001374:	2302      	movs	r3, #2
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <_ZL12MX_ADC2_Initv+0x128>)
 800137e:	f000 fd75 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <_ZL12MX_ADC2_Initv+0x11e>
  {
    Error_Handler();
 8001392:	f000 f95d 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000260 	.word	0x20000260
 80013a4:	40012100 	.word	0x40012100
 80013a8:	0f000001 	.word	0x0f000001

080013ac <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <_ZL12MX_I2C2_Initv+0x60>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013b8:	4a15      	ldr	r2, [pc, #84]	; (8001410 <_ZL12MX_I2C2_Initv+0x64>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <_ZL12MX_I2C2_Initv+0x5c>)
 80013ea:	f001 fa1b 	bl	8002824 <HAL_I2C_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80013fe:	f000 f927 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002a8 	.word	0x200002a8
 800140c:	40005800 	.word	0x40005800
 8001410:	000186a0 	.word	0x000186a0

08001414 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <_ZL12MX_SPI1_Initv+0x74>)
 800141c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001460:	220a      	movs	r2, #10
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <_ZL12MX_SPI1_Initv+0x70>)
 8001466:	f002 fbeb 	bl	8003c40 <HAL_SPI_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800147a:	f000 f8e9 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002fc 	.word	0x200002fc
 8001488:	40013000 	.word	0x40013000

0800148c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
	huart4_data.Instance = UART4;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_ZL13MX_UART4_Initv+0x58>)
 8001494:	601a      	str	r2, [r3, #0]
	huart4_data.Init.BaudRate = 115200;
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
	huart4_data.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	huart4_data.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
	huart4_data.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	huart4_data.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
	huart4_data.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
	huart4_data.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&huart4_data) != HAL_OK)
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <_ZL13MX_UART4_Initv+0x54>)
 80014c4:	f002 fc45 	bl	8003d52 <HAL_HalfDuplex_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <_ZL13MX_UART4_Initv+0x50>
	{
		Error_Handler();
 80014d8:	f000 f8ba 	bl	8001650 <Error_Handler>
	}
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000354 	.word	0x20000354
 80014e4:	40004c00 	.word	0x40004c00

080014e8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 80014ee:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_ZL19MX_USART1_UART_Initv+0x58>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001520:	f002 fc17 	bl	8003d52 <HAL_HalfDuplex_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001534:	f000 f88c 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000398 	.word	0x20000398
 8001540:	40011000 	.word	0x40011000

08001544 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a37      	ldr	r2, [pc, #220]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a30      	ldr	r2, [pc, #192]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a22      	ldr	r2, [pc, #136]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <_ZL12MX_GPIO_Initv+0xfc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : START_MODULE_Pin */

  HAL_GPIO_WritePin(CEVA_LED_GPIO_Port, CEVA_LED_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2104      	movs	r1, #4
 80015ce:	481d      	ldr	r0, [pc, #116]	; (8001644 <_ZL12MX_GPIO_Initv+0x100>)
 80015d0:	f001 f8f4 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : START_MODULE_Pin */
  GPIO_InitStruct.Pin = START_MODULE_Pin;
 80015d4:	2302      	movs	r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_MODULE_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <_ZL12MX_GPIO_Initv+0x100>)
 80015e8:	f000 ff54 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENEMY_SENSOR_0_Pin ENEMY_SENSOR_5_Pin ENEMY_SENSOR_6_Pin ENEMY_SENSOR_7_Pin
                           ENEMY_SENSOR_1_Pin ENEMY_SENSOR_2_Pin ENEMY_SENSOR_3_Pin ENEMY_SENSOR_4_Pin */
  GPIO_InitStruct.Pin = ENEMY_SENSOR_0_Pin|ENEMY_SENSOR_5_Pin|ENEMY_SENSOR_6_Pin|ENEMY_SENSOR_7_Pin
 80015ec:	f24e 33c4 	movw	r3, #58308	; 0xe3c4
 80015f0:	617b      	str	r3, [r7, #20]
                          |ENEMY_SENSOR_1_Pin|ENEMY_SENSOR_2_Pin|ENEMY_SENSOR_3_Pin|ENEMY_SENSOR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <_ZL12MX_GPIO_Initv+0x104>)
 8001602:	f000 ff47 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : B0_UP_Pin */
  GPIO_InitStruct.Pin = B0_UP_Pin;
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B0_UP_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <_ZL12MX_GPIO_Initv+0x100>)
 800161a:	f000 ff3b 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_DOWN_Pin B1_SELECT_Pin */
  GPIO_InitStruct.Pin = B2_DOWN_Pin|B1_SELECT_Pin;
 800161e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001628:	2301      	movs	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <_ZL12MX_GPIO_Initv+0x108>)
 8001634:	f000 ff2e 	bl	8002494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40020800 	.word	0x40020800
 8001648:	40020400 	.word	0x40020400
 800164c:	40020000 	.word	0x40020000

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_MspInit+0x4c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	; 0x38
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_ADC_MspInit+0x140>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d128      	bne.n	8001720 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a46      	ldr	r2, [pc, #280]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a3f      	ldr	r2, [pc, #252]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = LINE_SENSOR_2_1_Pin|LINE_SENSOR_2_2_Pin|LINE_SENSOR_2_3_Pin|LINE_SENSOR_3_1_Pin
 8001706:	23ee      	movs	r3, #238	; 0xee
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
                          |LINE_SENSOR_3_2_Pin|LINE_SENSOR_3_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4836      	ldr	r0, [pc, #216]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800171a:	f000 febb 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800171e:	e060      	b.n	80017e2 <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <HAL_ADC_MspInit+0x14c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d15b      	bne.n	80017e2 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRIMPOT_0_Pin;
 800179a:	2301      	movs	r3, #1
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRIMPOT_0_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <HAL_ADC_MspInit+0x150>)
 80017ae:	f000 fe71 	bl	8002494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TRIMPOT_1_Pin;
 80017b2:	2310      	movs	r3, #16
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRIMPOT_1_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80017c6:	f000 fe65 	bl	8002494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINE_SENSOR_0_Pin|LINE_SENSOR_1_Pin;
 80017ca:	2303      	movs	r3, #3
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	2303      	movs	r3, #3
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <HAL_ADC_MspInit+0x154>)
 80017de:	f000 fe59 	bl	8002494 <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	3738      	adds	r7, #56	; 0x38
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40012000 	.word	0x40012000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40012100 	.word	0x40012100
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020400 	.word	0x40020400

08001804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <HAL_I2C_MspInit+0xc4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d14b      	bne.n	80018be <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a27      	ldr	r2, [pc, #156]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001864:	2312      	movs	r3, #18
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001870:	2304      	movs	r3, #4
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <HAL_I2C_MspInit+0xcc>)
 800187c:	f000 fe0a 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001892:	2304      	movs	r3, #4
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <HAL_I2C_MspInit+0xd0>)
 800189e:	f000 fdf9 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 80018ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_I2C_MspInit+0xc8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005800 	.word	0x40005800
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800

080018d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_SPI_MspInit+0x84>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12b      	bne.n	8001952 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_SPI_MspInit+0x88>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_SPI_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001932:	2338      	movs	r3, #56	; 0x38
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001942:	2305      	movs	r3, #5
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_SPI_MspInit+0x8c>)
 800194e:	f000 fda1 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40013000 	.word	0x40013000
 8001960:	40023800 	.word	0x40023800
 8001964:	40020400 	.word	0x40020400

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <HAL_UART_MspInit+0xe8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12c      	bne.n	80019e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_UART_MspInit+0xec>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <HAL_UART_MspInit+0xec>)
 8001994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_UART_MspInit+0xec>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_UART_MspInit+0xec>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_UART_MspInit+0xec>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_UART_MspInit+0xec>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART4_TX_DATA_Pin;
 80019c2:	2301      	movs	r3, #1
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c6:	2312      	movs	r3, #18
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019d2:	2308      	movs	r3, #8
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART4_TX_DATA_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	481e      	ldr	r0, [pc, #120]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 80019de:	f000 fd59 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019e2:	e031      	b.n	8001a48 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <HAL_UART_MspInit+0xf4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12c      	bne.n	8001a48 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_UART_MspInit+0xec>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <HAL_UART_MspInit+0xec>)
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_UART_MspInit+0xec>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_UART_MspInit+0xec>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_UART_MspInit+0xec>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_UART_MspInit+0xec>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_SABERTOOTH_Pin;
 8001a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_SABERTOOTH_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001a44:	f000 fd26 	bl	8002494 <HAL_GPIO_Init>
}
 8001a48:	bf00      	nop
 8001a4a:	3730      	adds	r7, #48	; 0x30
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40004c00 	.word	0x40004c00
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40011000 	.word	0x40011000

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 f956 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_kill>:

int _kill(int pid, int sig)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ace:	f005 fefd 	bl	80078cc <__errno>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2216      	movs	r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_exit>:

void _exit (int status)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffe7 	bl	8001ac4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001af6:	e7fe      	b.n	8001af6 <_exit+0x12>

08001af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00a      	b.n	8001b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0a:	f3af 8000 	nop.w
 8001b0e:	4601      	mov	r1, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf0      	blt.n	8001b0a <_read+0x12>
  }

  return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e009      	b.n	8001b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf1      	blt.n	8001b44 <_write+0x12>
  }
  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_close>:

int _close(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	605a      	str	r2, [r3, #4]
  return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_isatty>:

int _isatty(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f005 fe62 	bl	80078cc <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20020000 	.word	0x20020000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	200003dc 	.word	0x200003dc
 8001c3c:	20000938 	.word	0x20000938

08001c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c8e:	f7ff ffd7 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f005 fe21 	bl	80078d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7ff f975 	bl	8000f84 <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001ca8:	0800e4a4 	.word	0x0800e4a4
  ldr r2, =_sbss
 8001cac:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001cb0:	20000938 	.word	0x20000938

08001cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fba3 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fcb6 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fbad 	bl	800247a <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f000 fb83 	bl	8002442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	200003e0 	.word	0x200003e0

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200003e0 	.word	0x200003e0

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008

08001de4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e033      	b.n	8001e62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fc52 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e2a:	f023 0302 	bic.w	r3, r3, #2
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f94a 	bl	80020d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
 8001e52:	e001      	b.n	8001e58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1c>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e113      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x244>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d925      	bls.n	8001ee4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68d9      	ldr	r1, [r3, #12]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68d9      	ldr	r1, [r3, #12]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4403      	add	r3, r0
 8001ed6:	3b1e      	subs	r3, #30
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	e022      	b.n	8001f2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2207      	movs	r2, #7
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6919      	ldr	r1, [r3, #16]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4403      	add	r3, r0
 8001f20:	409a      	lsls	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d824      	bhi.n	8001f7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b05      	subs	r3, #5
 8001f44:	221f      	movs	r2, #31
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	400a      	ands	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b05      	subs	r3, #5
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	e04c      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d824      	bhi.n	8001fce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	3b23      	subs	r3, #35	; 0x23
 8001f96:	221f      	movs	r2, #31
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b23      	subs	r3, #35	; 0x23
 8001fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
 8001fcc:	e023      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b41      	subs	r3, #65	; 0x41
 8001fe0:	221f      	movs	r2, #31
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	400a      	ands	r2, r1
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3b41      	subs	r3, #65	; 0x41
 800200a:	fa00 f203 	lsl.w	r2, r0, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <HAL_ADC_ConfigChannel+0x250>)
 8002018:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_ADC_ConfigChannel+0x254>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d10f      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1d8>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b12      	cmp	r3, #18
 800202a:	d10b      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_ADC_ConfigChannel+0x254>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x23a>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_ADC_ConfigChannel+0x258>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d003      	beq.n	8002060 <HAL_ADC_ConfigChannel+0x1f4>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b11      	cmp	r3, #17
 800205e:	d122      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_ADC_ConfigChannel+0x258>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d111      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_ADC_ConfigChannel+0x260>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	0c9a      	lsrs	r2, r3, #18
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002098:	e002      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3b01      	subs	r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40012300 	.word	0x40012300
 80020c0:	40012000 	.word	0x40012000
 80020c4:	10000012 	.word	0x10000012
 80020c8:	20000000 	.word	0x20000000
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d8:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <ADC_Init+0x1f0>)
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	021a      	lsls	r2, r3, #8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	4a58      	ldr	r2, [pc, #352]	; (80022c4 <ADC_Init+0x1f4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d022      	beq.n	80021ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002176:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e00f      	b.n	80021ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0202 	bic.w	r2, r2, #2
 80021dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7e1b      	ldrb	r3, [r3, #24]
 80021e8:	005a      	lsls	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800221a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	3b01      	subs	r3, #1
 8002228:	035a      	lsls	r2, r3, #13
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	e007      	b.n	8002244 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002242:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	3b01      	subs	r3, #1
 8002260:	051a      	lsls	r2, r3, #20
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6899      	ldr	r1, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002286:	025a      	lsls	r2, r3, #9
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	029a      	lsls	r2, r3, #10
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40012300 	.word	0x40012300
 80022c4:	0f000001 	.word	0x0f000001

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff47 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff5c 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8e 	bl	8002380 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffb0 	bl	80023e8 <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e165      	b.n	800277c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 8154 	bne.w	8002776 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d005      	beq.n	80024e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d130      	bne.n	8002548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80ae 	beq.w	8002776 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <HAL_GPIO_Init+0x300>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a5c      	ldr	r2, [pc, #368]	; (8002794 <HAL_GPIO_Init+0x300>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <HAL_GPIO_Init+0x300>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002636:	4a58      	ldr	r2, [pc, #352]	; (8002798 <HAL_GPIO_Init+0x304>)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x308>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d025      	beq.n	80026ae <HAL_GPIO_Init+0x21a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4e      	ldr	r2, [pc, #312]	; (80027a0 <HAL_GPIO_Init+0x30c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01f      	beq.n	80026aa <HAL_GPIO_Init+0x216>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x310>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d019      	beq.n	80026a6 <HAL_GPIO_Init+0x212>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_GPIO_Init+0x314>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_GPIO_Init+0x318>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x20a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4a      	ldr	r2, [pc, #296]	; (80027b0 <HAL_GPIO_Init+0x31c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x206>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_GPIO_Init+0x320>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x202>
 8002692:	2306      	movs	r3, #6
 8002694:	e00c      	b.n	80026b0 <HAL_GPIO_Init+0x21c>
 8002696:	2307      	movs	r3, #7
 8002698:	e00a      	b.n	80026b0 <HAL_GPIO_Init+0x21c>
 800269a:	2305      	movs	r3, #5
 800269c:	e008      	b.n	80026b0 <HAL_GPIO_Init+0x21c>
 800269e:	2304      	movs	r3, #4
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x21c>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x21c>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x21c>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x21c>
 80026ae:	2300      	movs	r3, #0
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f002 0203 	and.w	r2, r2, #3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4093      	lsls	r3, r2
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c0:	4935      	ldr	r1, [pc, #212]	; (8002798 <HAL_GPIO_Init+0x304>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <HAL_GPIO_Init+0x324>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f2:	4a31      	ldr	r2, [pc, #196]	; (80027b8 <HAL_GPIO_Init+0x324>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f8:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <HAL_GPIO_Init+0x324>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <HAL_GPIO_Init+0x324>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_GPIO_Init+0x324>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_GPIO_Init+0x324>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_GPIO_Init+0x324>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002770:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_GPIO_Init+0x324>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	f67f ae96 	bls.w	80024b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40013800 	.word	0x40013800
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40021400 	.word	0x40021400
 80027b4:	40021800 	.word	0x40021800
 80027b8:	40013c00 	.word	0x40013c00

080027bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d8:	e003      	b.n	80027e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	041a      	lsls	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002800:	887a      	ldrh	r2, [r7, #2]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	041a      	lsls	r2, r3, #16
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43d9      	mvns	r1, r3
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	400b      	ands	r3, r1
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e12b      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe ffda 	bl	8001804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002888:	f000 fd6a 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 800288c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a81      	ldr	r2, [pc, #516]	; (8002a98 <HAL_I2C_Init+0x274>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d807      	bhi.n	80028a8 <HAL_I2C_Init+0x84>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a80      	ldr	r2, [pc, #512]	; (8002a9c <HAL_I2C_Init+0x278>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e006      	b.n	80028b6 <HAL_I2C_Init+0x92>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a7d      	ldr	r2, [pc, #500]	; (8002aa0 <HAL_I2C_Init+0x27c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0e7      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <HAL_I2C_Init+0x280>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a6a      	ldr	r2, [pc, #424]	; (8002a98 <HAL_I2C_Init+0x274>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d802      	bhi.n	80028f8 <HAL_I2C_Init+0xd4>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3301      	adds	r3, #1
 80028f6:	e009      	b.n	800290c <HAL_I2C_Init+0xe8>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	4a69      	ldr	r2, [pc, #420]	; (8002aa8 <HAL_I2C_Init+0x284>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	3301      	adds	r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800291e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	495c      	ldr	r1, [pc, #368]	; (8002a98 <HAL_I2C_Init+0x274>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d819      	bhi.n	8002960 <HAL_I2C_Init+0x13c>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e59      	subs	r1, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fbb1 f3f3 	udiv	r3, r1, r3
 800293a:	1c59      	adds	r1, r3, #1
 800293c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002940:	400b      	ands	r3, r1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_I2C_Init+0x138>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e59      	subs	r1, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fbb1 f3f3 	udiv	r3, r1, r3
 8002954:	3301      	adds	r3, #1
 8002956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295a:	e051      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 800295c:	2304      	movs	r3, #4
 800295e:	e04f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d111      	bne.n	800298c <HAL_I2C_Init+0x168>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e58      	subs	r0, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e012      	b.n	80029b2 <HAL_I2C_Init+0x18e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	0099      	lsls	r1, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x196>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e022      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10e      	bne.n	80029e0 <HAL_I2C_Init+0x1bc>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e58      	subs	r0, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	440b      	add	r3, r1
 80029d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029de:	e00f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e58      	subs	r0, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	0099      	lsls	r1, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	6809      	ldr	r1, [r1, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6911      	ldr	r1, [r2, #16]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	000186a0 	.word	0x000186a0
 8002a9c:	001e847f 	.word	0x001e847f
 8002aa0:	003d08ff 	.word	0x003d08ff
 8002aa4:	431bde83 	.word	0x431bde83
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac6:	f7ff f95d 	bl	8001d84 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	f040 80d9 	bne.w	8002c8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2319      	movs	r3, #25
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	496d      	ldr	r1, [pc, #436]	; (8002c98 <HAL_I2C_Mem_Write+0x1ec>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f971 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0cc      	b.n	8002c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_I2C_Mem_Write+0x56>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e0c5      	b.n	8002c8e <HAL_I2C_Mem_Write+0x1e2>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d007      	beq.n	8002b28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2221      	movs	r2, #33	; 0x21
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a4d      	ldr	r2, [pc, #308]	; (8002c9c <HAL_I2C_Mem_Write+0x1f0>)
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b6a:	88f8      	ldrh	r0, [r7, #6]
 8002b6c:	893a      	ldrh	r2, [r7, #8]
 8002b6e:	8979      	ldrh	r1, [r7, #10]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4603      	mov	r3, r0
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f890 	bl	8002ca0 <I2C_RequestMemoryWrite>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d052      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e081      	b.n	8002c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9f2 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d107      	bne.n	8002bb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <HAL_I2C_Mem_Write+0x180>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d017      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1aa      	bne.n	8002b8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f9de 	bl	8002ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d107      	bne.n	8002c5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e016      	b.n	8002c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	00100002 	.word	0x00100002
 8002c9c:	ffff0000 	.word	0xffff0000

08002ca0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	813b      	strh	r3, [r7, #8]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f878 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d103      	bne.n	8002cfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e05f      	b.n	8002dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	6a3a      	ldr	r2, [r7, #32]
 8002d12:	492d      	ldr	r1, [pc, #180]	; (8002dc8 <I2C_RequestMemoryWrite+0x128>)
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f8b0 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e04c      	b.n	8002dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	6a39      	ldr	r1, [r7, #32]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f91a 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d107      	bne.n	8002d62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e02b      	b.n	8002dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d6c:	893b      	ldrh	r3, [r7, #8]
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	611a      	str	r2, [r3, #16]
 8002d76:	e021      	b.n	8002dbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f8f4 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d107      	bne.n	8002dae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e005      	b.n	8002dbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db2:	893b      	ldrh	r3, [r7, #8]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e025      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe ffcd 	bl	8001d84 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e023      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10d      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	e00c      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0b6      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	e051      	b.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d123      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e046      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe ff4b 	bl	8001d84 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e00b      	b.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d18d      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e02d      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f878 	bl	800307c <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02d      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d021      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fef1 	bl	8001d84 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d116      	bne.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d1ca      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003006:	e02d      	b.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f837 	bl	800307c <I2C_IsAcknowledgeFailed>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02d      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d021      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe feb0 	bl	8001d84 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d1ca      	bne.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d11b      	bne.n	80030cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_PWREx_EnableOverDrive+0x90>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_PWREx_EnableOverDrive+0x90>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_PWREx_EnableOverDrive+0x90>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003102:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <HAL_PWREx_EnableOverDrive+0x94>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003108:	f7fe fe3c 	bl	8001d84 <HAL_GetTick>
 800310c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800310e:	e009      	b.n	8003124 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003110:	f7fe fe38 	bl	8001d84 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800311e:	d901      	bls.n	8003124 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e01f      	b.n	8003164 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_PWREx_EnableOverDrive+0x98>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d1ee      	bne.n	8003110 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003138:	f7fe fe24 	bl	8001d84 <HAL_GetTick>
 800313c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800313e:	e009      	b.n	8003154 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003140:	f7fe fe20 	bl	8001d84 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800314e:	d901      	bls.n	8003154 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e007      	b.n	8003164 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_PWREx_EnableOverDrive+0x98>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003160:	d1ee      	bne.n	8003140 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	420e0040 	.word	0x420e0040
 8003174:	40007000 	.word	0x40007000
 8003178:	420e0044 	.word	0x420e0044

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe fd8a 	bl	8001d84 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fd86 	bl	8001d84 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f855 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fcea 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08009958 	.word	0x08009958
 8003340:	20000000 	.word	0x20000000
 8003344:	20000004 	.word	0x20000004

08003348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_RCC_GetHCLKFreq+0x14>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000000 	.word	0x20000000

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003364:	f7ff fff0 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4903      	ldr	r1, [pc, #12]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	08009968 	.word	0x08009968

08003388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800338c:	f7ff ffdc 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	0b5b      	lsrs	r3, r3, #13
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08009968 	.word	0x08009968

080033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	b0a6      	sub	sp, #152	; 0x98
 80033b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d6:	4bc8      	ldr	r3, [pc, #800]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	f200 817e 	bhi.w	80036e0 <HAL_RCC_GetSysClockFreq+0x330>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	08003421 	.word	0x08003421
 80033f0:	080036e1 	.word	0x080036e1
 80033f4:	080036e1 	.word	0x080036e1
 80033f8:	080036e1 	.word	0x080036e1
 80033fc:	08003429 	.word	0x08003429
 8003400:	080036e1 	.word	0x080036e1
 8003404:	080036e1 	.word	0x080036e1
 8003408:	080036e1 	.word	0x080036e1
 800340c:	08003431 	.word	0x08003431
 8003410:	080036e1 	.word	0x080036e1
 8003414:	080036e1 	.word	0x080036e1
 8003418:	080036e1 	.word	0x080036e1
 800341c:	0800359b 	.word	0x0800359b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4bb6      	ldr	r3, [pc, #728]	; (80036fc <HAL_RCC_GetSysClockFreq+0x34c>)
 8003422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003426:	e15f      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003428:	4bb5      	ldr	r3, [pc, #724]	; (8003700 <HAL_RCC_GetSysClockFreq+0x350>)
 800342a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800342e:	e15b      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003430:	4bb1      	ldr	r3, [pc, #708]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343c:	4bae      	ldr	r3, [pc, #696]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d031      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003448:	4bab      	ldr	r3, [pc, #684]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	2200      	movs	r2, #0
 8003450:	66bb      	str	r3, [r7, #104]	; 0x68
 8003452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	663b      	str	r3, [r7, #96]	; 0x60
 800345c:	2300      	movs	r3, #0
 800345e:	667b      	str	r3, [r7, #100]	; 0x64
 8003460:	4ba7      	ldr	r3, [pc, #668]	; (8003700 <HAL_RCC_GetSysClockFreq+0x350>)
 8003462:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003466:	462a      	mov	r2, r5
 8003468:	fb03 f202 	mul.w	r2, r3, r2
 800346c:	2300      	movs	r3, #0
 800346e:	4621      	mov	r1, r4
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	4aa2      	ldr	r2, [pc, #648]	; (8003700 <HAL_RCC_GetSysClockFreq+0x350>)
 8003478:	4621      	mov	r1, r4
 800347a:	fba1 1202 	umull	r1, r2, r1, r2
 800347e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003480:	460a      	mov	r2, r1
 8003482:	67ba      	str	r2, [r7, #120]	; 0x78
 8003484:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003486:	4413      	add	r3, r2
 8003488:	67fb      	str	r3, [r7, #124]	; 0x7c
 800348a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348e:	2200      	movs	r2, #0
 8003490:	65bb      	str	r3, [r7, #88]	; 0x58
 8003492:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003494:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003498:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800349c:	f7fd fbf4 	bl	8000c88 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034aa:	e064      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ac:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	2200      	movs	r2, #0
 80034b4:	653b      	str	r3, [r7, #80]	; 0x50
 80034b6:	657a      	str	r2, [r7, #84]	; 0x54
 80034b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c0:	2300      	movs	r3, #0
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80034c8:	4622      	mov	r2, r4
 80034ca:	462b      	mov	r3, r5
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	0159      	lsls	r1, r3, #5
 80034d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034da:	0150      	lsls	r0, r2, #5
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4621      	mov	r1, r4
 80034e2:	1a51      	subs	r1, r2, r1
 80034e4:	6139      	str	r1, [r7, #16]
 80034e6:	4629      	mov	r1, r5
 80034e8:	eb63 0301 	sbc.w	r3, r3, r1
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034fa:	4659      	mov	r1, fp
 80034fc:	018b      	lsls	r3, r1, #6
 80034fe:	4651      	mov	r1, sl
 8003500:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003504:	4651      	mov	r1, sl
 8003506:	018a      	lsls	r2, r1, #6
 8003508:	4651      	mov	r1, sl
 800350a:	ebb2 0801 	subs.w	r8, r2, r1
 800350e:	4659      	mov	r1, fp
 8003510:	eb63 0901 	sbc.w	r9, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003528:	4690      	mov	r8, r2
 800352a:	4699      	mov	r9, r3
 800352c:	4623      	mov	r3, r4
 800352e:	eb18 0303 	adds.w	r3, r8, r3
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	462b      	mov	r3, r5
 8003536:	eb49 0303 	adc.w	r3, r9, r3
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003548:	4629      	mov	r1, r5
 800354a:	028b      	lsls	r3, r1, #10
 800354c:	4621      	mov	r1, r4
 800354e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003552:	4621      	mov	r1, r4
 8003554:	028a      	lsls	r2, r1, #10
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800355e:	2200      	movs	r2, #0
 8003560:	643b      	str	r3, [r7, #64]	; 0x40
 8003562:	647a      	str	r2, [r7, #68]	; 0x44
 8003564:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003568:	f7fd fb8e 	bl	8000c88 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003576:	4b60      	ldr	r3, [pc, #384]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	3301      	adds	r3, #1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003588:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800358c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003598:	e0a6      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800359a:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a6:	4b54      	ldr	r3, [pc, #336]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d02a      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b2:	4b51      	ldr	r3, [pc, #324]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	2200      	movs	r2, #0
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80035bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035c4:	2100      	movs	r1, #0
 80035c6:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <HAL_RCC_GetSysClockFreq+0x350>)
 80035c8:	fb03 f201 	mul.w	r2, r3, r1
 80035cc:	2300      	movs	r3, #0
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	4a4a      	ldr	r2, [pc, #296]	; (8003700 <HAL_RCC_GetSysClockFreq+0x350>)
 80035d6:	fba0 1202 	umull	r1, r2, r0, r2
 80035da:	677a      	str	r2, [r7, #116]	; 0x74
 80035dc:	460a      	mov	r2, r1
 80035de:	673a      	str	r2, [r7, #112]	; 0x70
 80035e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035e2:	4413      	add	r3, r2
 80035e4:	677b      	str	r3, [r7, #116]	; 0x74
 80035e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ea:	2200      	movs	r2, #0
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 80035ee:	637a      	str	r2, [r7, #52]	; 0x34
 80035f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80035f8:	f7fd fb46 	bl	8000c88 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003606:	e05b      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	2200      	movs	r2, #0
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
 8003612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	f04f 0000 	mov.w	r0, #0
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	0159      	lsls	r1, r3, #5
 8003632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003636:	0150      	lsls	r0, r2, #5
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4641      	mov	r1, r8
 800363e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003642:	4649      	mov	r1, r9
 8003644:	eb63 0b01 	sbc.w	fp, r3, r1
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800365c:	ebb2 040a 	subs.w	r4, r2, sl
 8003660:	eb63 050b 	sbc.w	r5, r3, fp
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	00eb      	lsls	r3, r5, #3
 800366e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003672:	00e2      	lsls	r2, r4, #3
 8003674:	4614      	mov	r4, r2
 8003676:	461d      	mov	r5, r3
 8003678:	4643      	mov	r3, r8
 800367a:	18e3      	adds	r3, r4, r3
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	464b      	mov	r3, r9
 8003680:	eb45 0303 	adc.w	r3, r5, r3
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003692:	4629      	mov	r1, r5
 8003694:	028b      	lsls	r3, r1, #10
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800369c:	4621      	mov	r1, r4
 800369e:	028a      	lsls	r2, r1, #10
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a8:	2200      	movs	r2, #0
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	61fa      	str	r2, [r7, #28]
 80036ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b2:	f7fd fae9 	bl	8000c88 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4613      	mov	r3, r2
 80036bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0f1b      	lsrs	r3, r3, #28
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80036ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036de:	e003      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_GetSysClockFreq+0x34c>)
 80036e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3798      	adds	r7, #152	; 0x98
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	017d7840 	.word	0x017d7840

08003704 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e28d      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8083 	beq.w	800382a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003724:	4b94      	ldr	r3, [pc, #592]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b04      	cmp	r3, #4
 800372e:	d019      	beq.n	8003764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003730:	4b91      	ldr	r3, [pc, #580]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003738:	2b08      	cmp	r3, #8
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800373c:	4b8e      	ldr	r3, [pc, #568]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003748:	d00c      	beq.n	8003764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d112      	bne.n	800377c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b84      	ldr	r3, [pc, #528]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x124>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e25a      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x90>
 8003786:	4b7c      	ldr	r3, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7b      	ldr	r2, [pc, #492]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xcc>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0xb4>
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a72      	ldr	r2, [pc, #456]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xcc>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6b      	ldr	r2, [pc, #428]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fad4 	bl	8001d84 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fe fad0 	bl	8001d84 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e21f      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xdc>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe fac0 	bl	8001d84 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fabc 	bl	8001d84 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e20b      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x104>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06f      	beq.n	8003916 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d017      	beq.n	8003872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003842:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d105      	bne.n	800385a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d11c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d116      	bne.n	80038a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x186>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1d3      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4937      	ldr	r1, [pc, #220]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	e03a      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x278>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe fa69 	bl	8001d84 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe fa65 	bl	8001d84 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1b4      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4925      	ldr	r1, [pc, #148]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x278>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe fa48 	bl	8001d84 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fe fa44 	bl	8001d84 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e193      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d036      	beq.n	8003990 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x27c>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fe fa28 	bl	8001d84 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003938:	f7fe fa24 	bl	8001d84 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e173      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x234>
 8003956:	e01b      	b.n	8003990 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCC_OscConfig+0x27c>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fe fa11 	bl	8001d84 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	e00e      	b.n	8003984 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003966:	f7fe fa0d 	bl	8001d84 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d907      	bls.n	8003984 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e15c      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
 8003978:	40023800 	.word	0x40023800
 800397c:	42470000 	.word	0x42470000
 8003980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	4b8a      	ldr	r3, [pc, #552]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ea      	bne.n	8003966 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8097 	beq.w	8003acc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a2:	4b83      	ldr	r3, [pc, #524]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b7f      	ldr	r3, [pc, #508]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a7e      	ldr	r2, [pc, #504]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b76      	ldr	r3, [pc, #472]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a75      	ldr	r2, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7fe f9cd 	bl	8001d84 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fe f9c9 	bl	8001d84 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e118      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b6c      	ldr	r3, [pc, #432]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x31e>
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	e01c      	b.n	8003a5c <HAL_RCC_OscConfig+0x358>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x340>
 8003a2a:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a5d      	ldr	r2, [pc, #372]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0x358>
 8003a44:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a59      	ldr	r2, [pc, #356]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a56      	ldr	r2, [pc, #344]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a56:	f023 0304 	bic.w	r3, r3, #4
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe f98e 	bl	8001d84 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe f98a 	bl	8001d84 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0d7      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ee      	beq.n	8003a6c <HAL_RCC_OscConfig+0x368>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe f978 	bl	8001d84 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe f974 	bl	8001d84 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0c1      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aae:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ee      	bne.n	8003a98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ad 	beq.w	8003c30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d060      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d145      	bne.n	8003b76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCC_OscConfig+0x4b4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe f948 	bl	8001d84 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fe f944 	bl	8001d84 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e093      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	019b      	lsls	r3, r3, #6
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	071b      	lsls	r3, r3, #28
 8003b42:	491b      	ldr	r1, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x4b4>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fe f919 	bl	8001d84 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fe f915 	bl	8001d84 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e064      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x452>
 8003b74:	e05c      	b.n	8003c30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_RCC_OscConfig+0x4b4>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe f902 	bl	8001d84 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe f8fe 	bl	8001d84 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e04d      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x480>
 8003ba2:	e045      	b.n	8003c30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e040      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCC_OscConfig+0x538>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d030      	beq.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d129      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d122      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d119      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	3b01      	subs	r3, #1
 8003c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d10f      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800

08003c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e07b      	b.n	8003d4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d009      	beq.n	8003c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
 8003c6a:	e005      	b.n	8003c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd fe20 	bl	80018d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	ea42 0103 	orr.w	r1, r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	f003 0104 	and.w	r1, r3, #4
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0210 	and.w	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e047      	b.n	8003df4 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fd fdf5 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2224      	movs	r2, #36	; 0x24
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d94:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f930 	bl	8003ffc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003daa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003dba:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0208 	orr.w	r2, r2, #8
 8003dca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d17c      	bne.n	8003f16 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Transmit+0x2c>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e075      	b.n	8003f18 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Transmit+0x3e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e06e      	b.n	8003f18 <HAL_UART_Transmit+0x11c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2221      	movs	r2, #33	; 0x21
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e50:	f7fd ff98 	bl	8001d84 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	88fa      	ldrh	r2, [r7, #6]
 8003e5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	d108      	bne.n	8003e7e <HAL_UART_Transmit+0x82>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e003      	b.n	8003e86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e8e:	e02a      	b.n	8003ee6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f840 	bl	8003f20 <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e036      	b.n	8003f18 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10b      	bne.n	8003ec8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e007      	b.n	8003ed8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	781a      	ldrb	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1cf      	bne.n	8003e90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2140      	movs	r1, #64	; 0x40
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f810 	bl	8003f20 <UART_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e006      	b.n	8003f18 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b090      	sub	sp, #64	; 0x40
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f30:	e050      	b.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d04c      	beq.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f40:	f7fd ff20 	bl	8001d84 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d241      	bcs.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f70:	637a      	str	r2, [r7, #52]	; 0x34
 8003f72:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e5      	bne.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	613b      	str	r3, [r7, #16]
   return(result);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa4:	623a      	str	r2, [r7, #32]
 8003fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	69f9      	ldr	r1, [r7, #28]
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e00f      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d09f      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3740      	adds	r7, #64	; 0x40
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004000:	b0c0      	sub	sp, #256	; 0x100
 8004002:	af00      	add	r7, sp, #0
 8004004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	68d9      	ldr	r1, [r3, #12]
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	ea40 0301 	orr.w	r3, r0, r1
 8004024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	431a      	orrs	r2, r3
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	431a      	orrs	r2, r3
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004054:	f021 010c 	bic.w	r1, r1, #12
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004062:	430b      	orrs	r3, r1
 8004064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	6999      	ldr	r1, [r3, #24]
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	ea40 0301 	orr.w	r3, r0, r1
 8004082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b8f      	ldr	r3, [pc, #572]	; (80042c8 <UART_SetConfig+0x2cc>)
 800408c:	429a      	cmp	r2, r3
 800408e:	d005      	beq.n	800409c <UART_SetConfig+0xa0>
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b8d      	ldr	r3, [pc, #564]	; (80042cc <UART_SetConfig+0x2d0>)
 8004098:	429a      	cmp	r2, r3
 800409a:	d104      	bne.n	80040a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7ff f974 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 80040a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040a4:	e003      	b.n	80040ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a6:	f7ff f95b 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 80040aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b8:	f040 810c 	bne.w	80042d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	1891      	adds	r1, r2, r2
 80040d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80040d6:	415b      	adcs	r3, r3
 80040d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040de:	4621      	mov	r1, r4
 80040e0:	eb12 0801 	adds.w	r8, r2, r1
 80040e4:	4629      	mov	r1, r5
 80040e6:	eb43 0901 	adc.w	r9, r3, r1
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fe:	4690      	mov	r8, r2
 8004100:	4699      	mov	r9, r3
 8004102:	4623      	mov	r3, r4
 8004104:	eb18 0303 	adds.w	r3, r8, r3
 8004108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800410c:	462b      	mov	r3, r5
 800410e:	eb49 0303 	adc.w	r3, r9, r3
 8004112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800412a:	460b      	mov	r3, r1
 800412c:	18db      	adds	r3, r3, r3
 800412e:	653b      	str	r3, [r7, #80]	; 0x50
 8004130:	4613      	mov	r3, r2
 8004132:	eb42 0303 	adc.w	r3, r2, r3
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
 8004138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800413c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004140:	f7fc fda2 	bl	8000c88 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <UART_SetConfig+0x2d4>)
 800414a:	fba3 2302 	umull	r2, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	011c      	lsls	r4, r3, #4
 8004152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004156:	2200      	movs	r2, #0
 8004158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800415c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004164:	4642      	mov	r2, r8
 8004166:	464b      	mov	r3, r9
 8004168:	1891      	adds	r1, r2, r2
 800416a:	64b9      	str	r1, [r7, #72]	; 0x48
 800416c:	415b      	adcs	r3, r3
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004174:	4641      	mov	r1, r8
 8004176:	eb12 0a01 	adds.w	sl, r2, r1
 800417a:	4649      	mov	r1, r9
 800417c:	eb43 0b01 	adc.w	fp, r3, r1
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800418c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004194:	4692      	mov	sl, r2
 8004196:	469b      	mov	fp, r3
 8004198:	4643      	mov	r3, r8
 800419a:	eb1a 0303 	adds.w	r3, sl, r3
 800419e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a2:	464b      	mov	r3, r9
 80041a4:	eb4b 0303 	adc.w	r3, fp, r3
 80041a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041c0:	460b      	mov	r3, r1
 80041c2:	18db      	adds	r3, r3, r3
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
 80041c6:	4613      	mov	r3, r2
 80041c8:	eb42 0303 	adc.w	r3, r2, r3
 80041cc:	647b      	str	r3, [r7, #68]	; 0x44
 80041ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041d6:	f7fc fd57 	bl	8000c88 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <UART_SetConfig+0x2d4>)
 80041e2:	fba3 2301 	umull	r2, r3, r3, r1
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2264      	movs	r2, #100	; 0x64
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	1acb      	subs	r3, r1, r3
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <UART_SetConfig+0x2d4>)
 80041f8:	fba3 2302 	umull	r2, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004204:	441c      	add	r4, r3
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	1891      	adds	r1, r2, r2
 800421e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004220:	415b      	adcs	r3, r3
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004228:	4641      	mov	r1, r8
 800422a:	1851      	adds	r1, r2, r1
 800422c:	6339      	str	r1, [r7, #48]	; 0x30
 800422e:	4649      	mov	r1, r9
 8004230:	414b      	adcs	r3, r1
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004240:	4659      	mov	r1, fp
 8004242:	00cb      	lsls	r3, r1, #3
 8004244:	4651      	mov	r1, sl
 8004246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800424a:	4651      	mov	r1, sl
 800424c:	00ca      	lsls	r2, r1, #3
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	4603      	mov	r3, r0
 8004254:	4642      	mov	r2, r8
 8004256:	189b      	adds	r3, r3, r2
 8004258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800425c:	464b      	mov	r3, r9
 800425e:	460a      	mov	r2, r1
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800427c:	460b      	mov	r3, r1
 800427e:	18db      	adds	r3, r3, r3
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
 8004282:	4613      	mov	r3, r2
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800428e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004292:	f7fc fcf9 	bl	8000c88 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <UART_SetConfig+0x2d4>)
 800429c:	fba3 1302 	umull	r1, r3, r3, r2
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	2164      	movs	r1, #100	; 0x64
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	3332      	adds	r3, #50	; 0x32
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <UART_SetConfig+0x2d4>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	f003 0207 	and.w	r2, r3, #7
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4422      	add	r2, r4
 80042c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042c4:	e106      	b.n	80044d4 <UART_SetConfig+0x4d8>
 80042c6:	bf00      	nop
 80042c8:	40011000 	.word	0x40011000
 80042cc:	40011400 	.word	0x40011400
 80042d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042e6:	4642      	mov	r2, r8
 80042e8:	464b      	mov	r3, r9
 80042ea:	1891      	adds	r1, r2, r2
 80042ec:	6239      	str	r1, [r7, #32]
 80042ee:	415b      	adcs	r3, r3
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042f6:	4641      	mov	r1, r8
 80042f8:	1854      	adds	r4, r2, r1
 80042fa:	4649      	mov	r1, r9
 80042fc:	eb43 0501 	adc.w	r5, r3, r1
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	00eb      	lsls	r3, r5, #3
 800430a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800430e:	00e2      	lsls	r2, r4, #3
 8004310:	4614      	mov	r4, r2
 8004312:	461d      	mov	r5, r3
 8004314:	4643      	mov	r3, r8
 8004316:	18e3      	adds	r3, r4, r3
 8004318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800431c:	464b      	mov	r3, r9
 800431e:	eb45 0303 	adc.w	r3, r5, r3
 8004322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004342:	4629      	mov	r1, r5
 8004344:	008b      	lsls	r3, r1, #2
 8004346:	4621      	mov	r1, r4
 8004348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434c:	4621      	mov	r1, r4
 800434e:	008a      	lsls	r2, r1, #2
 8004350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004354:	f7fc fc98 	bl	8000c88 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4b60      	ldr	r3, [pc, #384]	; (80044e0 <UART_SetConfig+0x4e4>)
 800435e:	fba3 2302 	umull	r2, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	011c      	lsls	r4, r3, #4
 8004366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	1891      	adds	r1, r2, r2
 800437e:	61b9      	str	r1, [r7, #24]
 8004380:	415b      	adcs	r3, r3
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004388:	4641      	mov	r1, r8
 800438a:	1851      	adds	r1, r2, r1
 800438c:	6139      	str	r1, [r7, #16]
 800438e:	4649      	mov	r1, r9
 8004390:	414b      	adcs	r3, r1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a0:	4659      	mov	r1, fp
 80043a2:	00cb      	lsls	r3, r1, #3
 80043a4:	4651      	mov	r1, sl
 80043a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043aa:	4651      	mov	r1, sl
 80043ac:	00ca      	lsls	r2, r1, #3
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	4642      	mov	r2, r8
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043bc:	464b      	mov	r3, r9
 80043be:	460a      	mov	r2, r1
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043e0:	4649      	mov	r1, r9
 80043e2:	008b      	lsls	r3, r1, #2
 80043e4:	4641      	mov	r1, r8
 80043e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ea:	4641      	mov	r1, r8
 80043ec:	008a      	lsls	r2, r1, #2
 80043ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043f2:	f7fc fc49 	bl	8000c88 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2264      	movs	r2, #100	; 0x64
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	1acb      	subs	r3, r1, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <UART_SetConfig+0x4e4>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	441c      	add	r4, r3
 800441e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004422:	2200      	movs	r2, #0
 8004424:	673b      	str	r3, [r7, #112]	; 0x70
 8004426:	677a      	str	r2, [r7, #116]	; 0x74
 8004428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	1891      	adds	r1, r2, r2
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	415b      	adcs	r3, r3
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800443c:	4641      	mov	r1, r8
 800443e:	1851      	adds	r1, r2, r1
 8004440:	6039      	str	r1, [r7, #0]
 8004442:	4649      	mov	r1, r9
 8004444:	414b      	adcs	r3, r1
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004454:	4659      	mov	r1, fp
 8004456:	00cb      	lsls	r3, r1, #3
 8004458:	4651      	mov	r1, sl
 800445a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445e:	4651      	mov	r1, sl
 8004460:	00ca      	lsls	r2, r1, #3
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	4603      	mov	r3, r0
 8004468:	4642      	mov	r2, r8
 800446a:	189b      	adds	r3, r3, r2
 800446c:	66bb      	str	r3, [r7, #104]	; 0x68
 800446e:	464b      	mov	r3, r9
 8004470:	460a      	mov	r2, r1
 8004472:	eb42 0303 	adc.w	r3, r2, r3
 8004476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	663b      	str	r3, [r7, #96]	; 0x60
 8004482:	667a      	str	r2, [r7, #100]	; 0x64
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004490:	4649      	mov	r1, r9
 8004492:	008b      	lsls	r3, r1, #2
 8004494:	4641      	mov	r1, r8
 8004496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800449a:	4641      	mov	r1, r8
 800449c:	008a      	lsls	r2, r1, #2
 800449e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044a2:	f7fc fbf1 	bl	8000c88 <__aeabi_uldivmod>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <UART_SetConfig+0x4e4>)
 80044ac:	fba3 1302 	umull	r1, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	2164      	movs	r1, #100	; 0x64
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	3332      	adds	r3, #50	; 0x32
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <UART_SetConfig+0x4e4>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	f003 020f 	and.w	r2, r3, #15
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4422      	add	r2, r4
 80044d2:	609a      	str	r2, [r3, #8]
}
 80044d4:	bf00      	nop
 80044d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044da:	46bd      	mov	sp, r7
 80044dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af04      	add	r7, sp, #16
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004502:	9302      	str	r3, [sp, #8]
 8004504:	2301      	movs	r3, #1
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	1dfb      	adds	r3, r7, #7
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2301      	movs	r3, #1
 800450e:	2200      	movs	r2, #0
 8004510:	2178      	movs	r1, #120	; 0x78
 8004512:	4803      	ldr	r0, [pc, #12]	; (8004520 <ssd1306_WriteCommand+0x2c>)
 8004514:	f7fe faca 	bl	8002aac <HAL_I2C_Mem_Write>
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200002a8 	.word	0x200002a8

08004524 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af04      	add	r7, sp, #16
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f04f 32ff 	mov.w	r2, #4294967295
 8004536:	9202      	str	r2, [sp, #8]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2301      	movs	r3, #1
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	2178      	movs	r1, #120	; 0x78
 8004544:	4803      	ldr	r0, [pc, #12]	; (8004554 <ssd1306_WriteData+0x30>)
 8004546:	f7fe fab1 	bl	8002aac <HAL_I2C_Mem_Write>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200002a8 	.word	0x200002a8

08004558 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800455c:	f7ff ffc2 	bl	80044e4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004560:	2064      	movs	r0, #100	; 0x64
 8004562:	f7fd fc1b 	bl	8001d9c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004566:	2000      	movs	r0, #0
 8004568:	f000 ff4e 	bl	8005408 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800456c:	2020      	movs	r0, #32
 800456e:	f7ff ffc1 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004572:	2000      	movs	r0, #0
 8004574:	f7ff ffbe 	bl	80044f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004578:	20b0      	movs	r0, #176	; 0xb0
 800457a:	f7ff ffbb 	bl	80044f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800457e:	20c8      	movs	r0, #200	; 0xc8
 8004580:	f7ff ffb8 	bl	80044f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004584:	2000      	movs	r0, #0
 8004586:	f7ff ffb5 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800458a:	2010      	movs	r0, #16
 800458c:	f7ff ffb2 	bl	80044f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004590:	2040      	movs	r0, #64	; 0x40
 8004592:	f7ff ffaf 	bl	80044f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004596:	20ff      	movs	r0, #255	; 0xff
 8004598:	f000 ff22 	bl	80053e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800459c:	20a1      	movs	r0, #161	; 0xa1
 800459e:	f7ff ffa9 	bl	80044f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80045a2:	20a6      	movs	r0, #166	; 0xa6
 80045a4:	f7ff ffa6 	bl	80044f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80045a8:	20a8      	movs	r0, #168	; 0xa8
 80045aa:	f7ff ffa3 	bl	80044f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80045ae:	203f      	movs	r0, #63	; 0x3f
 80045b0:	f7ff ffa0 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80045b4:	20a4      	movs	r0, #164	; 0xa4
 80045b6:	f7ff ff9d 	bl	80044f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80045ba:	20d3      	movs	r0, #211	; 0xd3
 80045bc:	f7ff ff9a 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80045c0:	2000      	movs	r0, #0
 80045c2:	f7ff ff97 	bl	80044f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80045c6:	20d5      	movs	r0, #213	; 0xd5
 80045c8:	f7ff ff94 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80045cc:	20f0      	movs	r0, #240	; 0xf0
 80045ce:	f7ff ff91 	bl	80044f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80045d2:	20d9      	movs	r0, #217	; 0xd9
 80045d4:	f7ff ff8e 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80045d8:	2022      	movs	r0, #34	; 0x22
 80045da:	f7ff ff8b 	bl	80044f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80045de:	20da      	movs	r0, #218	; 0xda
 80045e0:	f7ff ff88 	bl	80044f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80045e4:	2012      	movs	r0, #18
 80045e6:	f7ff ff85 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80045ea:	20db      	movs	r0, #219	; 0xdb
 80045ec:	f7ff ff82 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80045f0:	2020      	movs	r0, #32
 80045f2:	f7ff ff7f 	bl	80044f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80045f6:	208d      	movs	r0, #141	; 0x8d
 80045f8:	f7ff ff7c 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80045fc:	2014      	movs	r0, #20
 80045fe:	f7ff ff79 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004602:	2001      	movs	r0, #1
 8004604:	f000 ff00 	bl	8005408 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004608:	2000      	movs	r0, #0
 800460a:	f000 f80f 	bl	800462c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800460e:	f000 f831 	bl	8004674 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <ssd1306_Init+0xd0>)
 8004614:	2200      	movs	r2, #0
 8004616:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <ssd1306_Init+0xd0>)
 800461a:	2200      	movs	r2, #0
 800461c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800461e:	4b02      	ldr	r3, [pc, #8]	; (8004628 <ssd1306_Init+0xd0>)
 8004620:	2201      	movs	r2, #1
 8004622:	711a      	strb	r2, [r3, #4]
}
 8004624:	bf00      	nop
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200007e4 	.word	0x200007e4

0800462c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e00d      	b.n	8004658 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <ssd1306_Fill+0x1a>
 8004642:	2100      	movs	r1, #0
 8004644:	e000      	b.n	8004648 <ssd1306_Fill+0x1c>
 8004646:	21ff      	movs	r1, #255	; 0xff
 8004648:	4a09      	ldr	r2, [pc, #36]	; (8004670 <ssd1306_Fill+0x44>)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	460a      	mov	r2, r1
 8004650:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d3ed      	bcc.n	800463c <ssd1306_Fill+0x10>
    }
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200003e4 	.word	0x200003e4

08004674 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800467a:	2300      	movs	r3, #0
 800467c:	71fb      	strb	r3, [r7, #7]
 800467e:	e016      	b.n	80046ae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	3b50      	subs	r3, #80	; 0x50
 8004684:	b2db      	uxtb	r3, r3
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff34 	bl	80044f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800468c:	2000      	movs	r0, #0
 800468e:	f7ff ff31 	bl	80044f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004692:	2010      	movs	r0, #16
 8004694:	f7ff ff2e 	bl	80044f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	01db      	lsls	r3, r3, #7
 800469c:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <ssd1306_UpdateScreen+0x4c>)
 800469e:	4413      	add	r3, r2
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff3e 	bl	8004524 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	3301      	adds	r3, #1
 80046ac:	71fb      	strb	r3, [r7, #7]
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	d9e5      	bls.n	8004680 <ssd1306_UpdateScreen+0xc>
    }
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200003e4 	.word	0x200003e4

080046c4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
 80046ce:	460b      	mov	r3, r1
 80046d0:	71bb      	strb	r3, [r7, #6]
 80046d2:	4613      	mov	r3, r2
 80046d4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db3d      	blt.n	800475a <ssd1306_DrawPixel+0x96>
 80046de:	79bb      	ldrb	r3, [r7, #6]
 80046e0:	2b3f      	cmp	r3, #63	; 0x3f
 80046e2:	d83a      	bhi.n	800475a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80046e4:	797b      	ldrb	r3, [r7, #5]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d11a      	bne.n	8004720 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80046ea:	79fa      	ldrb	r2, [r7, #7]
 80046ec:	79bb      	ldrb	r3, [r7, #6]
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	b2d8      	uxtb	r0, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	01db      	lsls	r3, r3, #7
 80046f6:	4413      	add	r3, r2
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <ssd1306_DrawPixel+0xa4>)
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	b25a      	sxtb	r2, r3
 80046fe:	79bb      	ldrb	r3, [r7, #6]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	b25b      	sxtb	r3, r3
 800470c:	4313      	orrs	r3, r2
 800470e:	b259      	sxtb	r1, r3
 8004710:	79fa      	ldrb	r2, [r7, #7]
 8004712:	4603      	mov	r3, r0
 8004714:	01db      	lsls	r3, r3, #7
 8004716:	4413      	add	r3, r2
 8004718:	b2c9      	uxtb	r1, r1
 800471a:	4a13      	ldr	r2, [pc, #76]	; (8004768 <ssd1306_DrawPixel+0xa4>)
 800471c:	54d1      	strb	r1, [r2, r3]
 800471e:	e01d      	b.n	800475c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004720:	79fa      	ldrb	r2, [r7, #7]
 8004722:	79bb      	ldrb	r3, [r7, #6]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	b2d8      	uxtb	r0, r3
 8004728:	4603      	mov	r3, r0
 800472a:	01db      	lsls	r3, r3, #7
 800472c:	4413      	add	r3, r2
 800472e:	4a0e      	ldr	r2, [pc, #56]	; (8004768 <ssd1306_DrawPixel+0xa4>)
 8004730:	5cd3      	ldrb	r3, [r2, r3]
 8004732:	b25a      	sxtb	r2, r3
 8004734:	79bb      	ldrb	r3, [r7, #6]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	2101      	movs	r1, #1
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	b25b      	sxtb	r3, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	b25b      	sxtb	r3, r3
 8004746:	4013      	ands	r3, r2
 8004748:	b259      	sxtb	r1, r3
 800474a:	79fa      	ldrb	r2, [r7, #7]
 800474c:	4603      	mov	r3, r0
 800474e:	01db      	lsls	r3, r3, #7
 8004750:	4413      	add	r3, r2
 8004752:	b2c9      	uxtb	r1, r1
 8004754:	4a04      	ldr	r2, [pc, #16]	; (8004768 <ssd1306_DrawPixel+0xa4>)
 8004756:	54d1      	strb	r1, [r2, r3]
 8004758:	e000      	b.n	800475c <ssd1306_DrawPixel+0x98>
        return;
 800475a:	bf00      	nop
    }
}
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	200003e4 	.word	0x200003e4

0800476c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	4604      	mov	r4, r0
 8004774:	1d38      	adds	r0, r7, #4
 8004776:	e880 0006 	stmia.w	r0, {r1, r2}
 800477a:	461a      	mov	r2, r3
 800477c:	4623      	mov	r3, r4
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	4613      	mov	r3, r2
 8004782:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b1f      	cmp	r3, #31
 8004788:	d902      	bls.n	8004790 <ssd1306_WriteChar+0x24>
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b7e      	cmp	r3, #126	; 0x7e
 800478e:	d901      	bls.n	8004794 <ssd1306_WriteChar+0x28>
        return 0;
 8004790:	2300      	movs	r3, #0
 8004792:	e06d      	b.n	8004870 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004794:	4b38      	ldr	r3, [pc, #224]	; (8004878 <ssd1306_WriteChar+0x10c>)
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	793b      	ldrb	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	dc06      	bgt.n	80047b0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80047a2:	4b35      	ldr	r3, [pc, #212]	; (8004878 <ssd1306_WriteChar+0x10c>)
 80047a4:	885b      	ldrh	r3, [r3, #2]
 80047a6:	461a      	mov	r2, r3
 80047a8:	797b      	ldrb	r3, [r7, #5]
 80047aa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	dd01      	ble.n	80047b4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e05d      	b.n	8004870 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e04c      	b.n	8004854 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	3b20      	subs	r3, #32
 80047c0:	7979      	ldrb	r1, [r7, #5]
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	440b      	add	r3, r1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e034      	b.n	8004844 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <ssd1306_WriteChar+0x10c>)
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	4413      	add	r3, r2
 80047f6:	b2d8      	uxtb	r0, r3
 80047f8:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <ssd1306_WriteChar+0x10c>)
 80047fa:	885b      	ldrh	r3, [r3, #2]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	4413      	add	r3, r2
 8004804:	b2db      	uxtb	r3, r3
 8004806:	7bba      	ldrb	r2, [r7, #14]
 8004808:	4619      	mov	r1, r3
 800480a:	f7ff ff5b 	bl	80046c4 <ssd1306_DrawPixel>
 800480e:	e016      	b.n	800483e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <ssd1306_WriteChar+0x10c>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4413      	add	r3, r2
 800481c:	b2d8      	uxtb	r0, r3
 800481e:	4b16      	ldr	r3, [pc, #88]	; (8004878 <ssd1306_WriteChar+0x10c>)
 8004820:	885b      	ldrh	r3, [r3, #2]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4413      	add	r3, r2
 800482a:	b2d9      	uxtb	r1, r3
 800482c:	7bbb      	ldrb	r3, [r7, #14]
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	f7ff ff43 	bl	80046c4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3301      	adds	r3, #1
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	793b      	ldrb	r3, [r7, #4]
 8004846:	461a      	mov	r2, r3
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	4293      	cmp	r3, r2
 800484c:	d3c5      	bcc.n	80047da <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	797b      	ldrb	r3, [r7, #5]
 8004856:	461a      	mov	r2, r3
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4293      	cmp	r3, r2
 800485c:	d3ad      	bcc.n	80047ba <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <ssd1306_WriteChar+0x10c>)
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	793b      	ldrb	r3, [r7, #4]
 8004864:	b29b      	uxth	r3, r3
 8004866:	4413      	add	r3, r2
 8004868:	b29a      	uxth	r2, r3
 800486a:	4b03      	ldr	r3, [pc, #12]	; (8004878 <ssd1306_WriteChar+0x10c>)
 800486c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3724      	adds	r7, #36	; 0x24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}
 8004878:	200007e4 	.word	0x200007e4

0800487c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	1d38      	adds	r0, r7, #4
 8004886:	e880 0006 	stmia.w	r0, {r1, r2}
 800488a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800488c:	e012      	b.n	80048b4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	7818      	ldrb	r0, [r3, #0]
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	1d3a      	adds	r2, r7, #4
 8004896:	ca06      	ldmia	r2, {r1, r2}
 8004898:	f7ff ff68 	bl	800476c <ssd1306_WriteChar>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d002      	beq.n	80048ae <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	e008      	b.n	80048c0 <ssd1306_WriteString+0x44>
        }
        str++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e8      	bne.n	800488e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	781b      	ldrb	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	460a      	mov	r2, r1
 80048d2:	71fb      	strb	r3, [r7, #7]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	b29a      	uxth	r2, r3
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <ssd1306_SetCursor+0x2c>)
 80048de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80048e0:	79bb      	ldrb	r3, [r7, #6]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <ssd1306_SetCursor+0x2c>)
 80048e6:	805a      	strh	r2, [r3, #2]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	200007e4 	.word	0x200007e4

080048f8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	4623      	mov	r3, r4
 8004908:	71fb      	strb	r3, [r7, #7]
 800490a:	4603      	mov	r3, r0
 800490c:	71bb      	strb	r3, [r7, #6]
 800490e:	460b      	mov	r3, r1
 8004910:	717b      	strb	r3, [r7, #5]
 8004912:	4613      	mov	r3, r2
 8004914:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8004916:	797a      	ldrb	r2, [r7, #5]
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	bfb8      	it	lt
 8004920:	425b      	neglt	r3, r3
 8004922:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8004924:	793a      	ldrb	r2, [r7, #4]
 8004926:	79bb      	ldrb	r3, [r7, #6]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	bfb8      	it	lt
 800492e:	425b      	neglt	r3, r3
 8004930:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8004932:	79fa      	ldrb	r2, [r7, #7]
 8004934:	797b      	ldrb	r3, [r7, #5]
 8004936:	429a      	cmp	r2, r3
 8004938:	d201      	bcs.n	800493e <ssd1306_Line+0x46>
 800493a:	2301      	movs	r3, #1
 800493c:	e001      	b.n	8004942 <ssd1306_Line+0x4a>
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8004944:	79ba      	ldrb	r2, [r7, #6]
 8004946:	793b      	ldrb	r3, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d201      	bcs.n	8004950 <ssd1306_Line+0x58>
 800494c:	2301      	movs	r3, #1
 800494e:	e001      	b.n	8004954 <ssd1306_Line+0x5c>
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800495e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004962:	7939      	ldrb	r1, [r7, #4]
 8004964:	797b      	ldrb	r3, [r7, #5]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff feac 	bl	80046c4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800496c:	e024      	b.n	80049b8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800496e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004972:	79b9      	ldrb	r1, [r7, #6]
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fea4 	bl	80046c4 <ssd1306_DrawPixel>
        error2 = error * 2;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	425b      	negs	r3, r3
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	429a      	cmp	r2, r3
 800498a:	dd08      	ble.n	800499e <ssd1306_Line+0xa6>
            error -= deltaY;
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	4413      	add	r3, r2
 800499c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	da08      	bge.n	80049b8 <ssd1306_Line+0xc0>
            error += deltaX;
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	4413      	add	r3, r2
 80049ac:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	79bb      	ldrb	r3, [r7, #6]
 80049b4:	4413      	add	r3, r2
 80049b6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80049b8:	79fa      	ldrb	r2, [r7, #7]
 80049ba:	797b      	ldrb	r3, [r7, #5]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1d6      	bne.n	800496e <ssd1306_Line+0x76>
 80049c0:	79ba      	ldrb	r2, [r7, #6]
 80049c2:	793b      	ldrb	r3, [r7, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1d2      	bne.n	800496e <ssd1306_Line+0x76>
        }
    }
    return;
 80049c8:	bf00      	nop
}
 80049ca:	3724      	adds	r7, #36	; 0x24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}

080049d0 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
 80049dc:	4613      	mov	r3, r2
 80049de:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d02a      	beq.n	8004a3c <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 80049e6:	2301      	movs	r3, #1
 80049e8:	81fb      	strh	r3, [r7, #14]
 80049ea:	e022      	b.n	8004a32 <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049f2:	3b01      	subs	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	7818      	ldrb	r0, [r3, #0]
 80049fc:	89fb      	ldrh	r3, [r7, #14]
 80049fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a02:	3b01      	subs	r3, #1
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	7859      	ldrb	r1, [r3, #1]
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	781c      	ldrb	r4, [r3, #0]
 8004a16:	89fb      	ldrh	r3, [r7, #14]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	785a      	ldrb	r2, [r3, #1]
 8004a20:	787b      	ldrb	r3, [r7, #1]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	4622      	mov	r2, r4
 8004a28:	f7ff ff66 	bl	80048f8 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8004a2c:	89fb      	ldrh	r3, [r7, #14]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	81fb      	strh	r3, [r7, #14]
 8004a32:	89fa      	ldrh	r2, [r7, #14]
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3d8      	bcc.n	80049ec <ssd1306_Polyline+0x1c>
    }

    return;
 8004a3a:	e000      	b.n	8004a3e <ssd1306_Polyline+0x6e>
        return;
 8004a3c:	bf00      	nop
}
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd90      	pop	{r4, r7, pc}
 8004a44:	0000      	movs	r0, r0
	...

08004a48 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fb fd98 	bl	8000588 <__aeabi_f2d>
 8004a58:	a30e      	add	r3, pc, #56	; (adr r3, 8004a94 <ssd1306_DegToRad+0x4c>)
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f7fb fdeb 	bl	8000638 <__aeabi_dmul>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <ssd1306_DegToRad+0x48>)
 8004a70:	f7fb ff0c 	bl	800088c <__aeabi_ddiv>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f7fc f8b4 	bl	8000be8 <__aeabi_d2f>
 8004a80:	4603      	mov	r3, r0
 8004a82:	ee07 3a90 	vmov	s15, r3
}
 8004a86:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40668000 	.word	0x40668000
 8004a94:	51eb851f 	.word	0x51eb851f
 8004a98:	40091eb8 	.word	0x40091eb8

08004a9c <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8004aac:	d802      	bhi.n	8004ab4 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	81fb      	strh	r3, [r7, #14]
 8004ab2:	e013      	b.n	8004adc <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	08da      	lsrs	r2, r3, #3
 8004ab8:	490c      	ldr	r1, [pc, #48]	; (8004aec <ssd1306_NormalizeTo0_360+0x50>)
 8004aba:	fba1 1202 	umull	r1, r2, r1, r2
 8004abe:	0892      	lsrs	r2, r2, #2
 8004ac0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004ac4:	fb01 f202 	mul.w	r2, r1, r2
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	81fb      	strh	r3, [r7, #14]
        loc_angle = ((par_deg != 0)?par_deg:360);
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <ssd1306_NormalizeTo0_360+0x3a>
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	e001      	b.n	8004ada <ssd1306_NormalizeTo0_360+0x3e>
 8004ad6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004ada:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8004adc:	89fb      	ldrh	r3, [r7, #14]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	16c16c17 	.word	0x16c16c17

08004af0 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	71fb      	strb	r3, [r7, #7]
 8004b02:	4603      	mov	r3, r0
 8004b04:	71bb      	strb	r3, [r7, #6]
 8004b06:	460b      	mov	r3, r1
 8004b08:	717b      	strb	r3, [r7, #5]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8004b16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ffbf 	bl	8004a9c <ssd1306_NormalizeTo0_360>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ffb9 	bl	8004a9c <ssd1306_NormalizeTo0_360>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b77      	ldr	r3, [pc, #476]	; (8004d0c <ssd1306_DrawArc+0x21c>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	4a76      	ldr	r2, [pc, #472]	; (8004d10 <ssd1306_DrawArc+0x220>)
 8004b38:	fb82 1203 	smull	r1, r2, r2, r3
 8004b3c:	441a      	add	r2, r3
 8004b3e:	1212      	asrs	r2, r2, #8
 8004b40:	17db      	asrs	r3, r3, #31
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8004b46:	4b71      	ldr	r3, [pc, #452]	; (8004d0c <ssd1306_DrawArc+0x21c>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	08db      	lsrs	r3, r3, #3
 8004b54:	4a6f      	ldr	r2, [pc, #444]	; (8004d14 <ssd1306_DrawArc+0x224>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b76:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 8004b7a:	e0be      	b.n	8004cfa <ssd1306_DrawArc+0x20a>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b92:	f7ff ff59 	bl	8004a48 <ssd1306_DegToRad>
 8004b96:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8004b9a:	69b8      	ldr	r0, [r7, #24]
 8004b9c:	f7fb fcf4 	bl	8000588 <__aeabi_f2d>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	ec43 2b10 	vmov	d0, r2, r3
 8004ba8:	f000 ff92 	bl	8005ad0 <sin>
 8004bac:	ec55 4b10 	vmov	r4, r5, d0
 8004bb0:	797b      	ldrb	r3, [r7, #5]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb fcd6 	bl	8000564 <__aeabi_i2d>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb fd3a 	bl	8000638 <__aeabi_dmul>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7fb ffe4 	bl	8000b98 <__aeabi_d2iz>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	b25b      	sxtb	r3, r3
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	4413      	add	r3, r2
 8004bda:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8004bdc:	69b8      	ldr	r0, [r7, #24]
 8004bde:	f7fb fcd3 	bl	8000588 <__aeabi_f2d>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	ec43 2b10 	vmov	d0, r2, r3
 8004bea:	f000 ff1d 	bl	8005a28 <cos>
 8004bee:	ec55 4b10 	vmov	r4, r5, d0
 8004bf2:	797b      	ldrb	r3, [r7, #5]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fb fcb5 	bl	8000564 <__aeabi_i2d>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	f7fb fd19 	bl	8000638 <__aeabi_dmul>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f7fb ffc3 	bl	8000b98 <__aeabi_d2iz>
 8004c12:	4603      	mov	r3, r0
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	79bb      	ldrb	r3, [r7, #6]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	72bb      	strb	r3, [r7, #10]
        count++;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3301      	adds	r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d00f      	beq.n	8004c4c <ssd1306_DrawArc+0x15c>
            rad = ssd1306_DegToRad(count*approx_degree);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c42:	f7ff ff01 	bl	8004a48 <ssd1306_DegToRad>
 8004c46:	ed87 0a06 	vstr	s0, [r7, #24]
 8004c4a:	e00a      	b.n	8004c62 <ssd1306_DrawArc+0x172>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5a:	f7ff fef5 	bl	8004a48 <ssd1306_DegToRad>
 8004c5e:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8004c62:	69b8      	ldr	r0, [r7, #24]
 8004c64:	f7fb fc90 	bl	8000588 <__aeabi_f2d>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	ec43 2b10 	vmov	d0, r2, r3
 8004c70:	f000 ff2e 	bl	8005ad0 <sin>
 8004c74:	ec55 4b10 	vmov	r4, r5, d0
 8004c78:	797b      	ldrb	r3, [r7, #5]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fb fc72 	bl	8000564 <__aeabi_i2d>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4620      	mov	r0, r4
 8004c86:	4629      	mov	r1, r5
 8004c88:	f7fb fcd6 	bl	8000638 <__aeabi_dmul>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7fb ff80 	bl	8000b98 <__aeabi_d2iz>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8004ca4:	69b8      	ldr	r0, [r7, #24]
 8004ca6:	f7fb fc6f 	bl	8000588 <__aeabi_f2d>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	ec43 2b10 	vmov	d0, r2, r3
 8004cb2:	f000 feb9 	bl	8005a28 <cos>
 8004cb6:	ec55 4b10 	vmov	r4, r5, d0
 8004cba:	797b      	ldrb	r3, [r7, #5]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb fc51 	bl	8000564 <__aeabi_i2d>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fcb5 	bl	8000638 <__aeabi_dmul>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f7fb ff5f 	bl	8000b98 <__aeabi_d2iz>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	79bb      	ldrb	r3, [r7, #6]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8004ce6:	7a3c      	ldrb	r4, [r7, #8]
 8004ce8:	7a7a      	ldrb	r2, [r7, #9]
 8004cea:	7ab9      	ldrb	r1, [r7, #10]
 8004cec:	7af8      	ldrb	r0, [r7, #11]
 8004cee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	f7ff fdff 	bl	80048f8 <ssd1306_Line>
    while(count < approx_segments)
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	f4ff af3c 	bcc.w	8004b7c <ssd1306_DrawArc+0x8c>
    }
    
    return;
 8004d04:	bf00      	nop
}
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0c:	08009970 	.word	0x08009970
 8004d10:	b60b60b7 	.word	0xb60b60b7
 8004d14:	16c16c17 	.word	0x16c16c17

08004d18 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8004d18:	b5b0      	push	{r4, r5, r7, lr}
 8004d1a:	b08c      	sub	sp, #48	; 0x30
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	71fb      	strb	r3, [r7, #7]
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71bb      	strb	r3, [r7, #6]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	717b      	strb	r3, [r7, #5]
 8004d32:	4613      	mov	r3, r2
 8004d34:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1 = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	76fb      	strb	r3, [r7, #27]
    uint8_t xp2 = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t yp1 = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	76bb      	strb	r3, [r7, #26]
    uint8_t yp2 = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	623b      	str	r3, [r7, #32]
    uint32_t loc_sweep = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8004d52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fea1 	bl	8004a9c <ssd1306_NormalizeTo0_360>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fe9b 	bl	8004a9c <ssd1306_NormalizeTo0_360>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4bad      	ldr	r3, [pc, #692]	; (8005020 <ssd1306_DrawArcWithRadiusLine+0x308>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	4aac      	ldr	r2, [pc, #688]	; (8005024 <ssd1306_DrawArcWithRadiusLine+0x30c>)
 8004d74:	fb82 1203 	smull	r1, r2, r2, r3
 8004d78:	441a      	add	r2, r3
 8004d7a:	1212      	asrs	r2, r2, #8
 8004d7c:	17db      	asrs	r3, r3, #31
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8004d82:	4ba7      	ldr	r3, [pc, #668]	; (8005020 <ssd1306_DrawArcWithRadiusLine+0x308>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	08db      	lsrs	r3, r3, #3
 8004d90:	4aa5      	ldr	r2, [pc, #660]	; (8005028 <ssd1306_DrawArcWithRadiusLine+0x310>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db2:	edc7 7a03 	vstr	s15, [r7, #12]

    rad = ssd1306_DegToRad(count*approx_degree);
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dcc:	f7ff fe3c 	bl	8004a48 <ssd1306_DegToRad>
 8004dd0:	ed87 0a07 	vstr	s0, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sin(rad)*radius);
 8004dd4:	69f8      	ldr	r0, [r7, #28]
 8004dd6:	f7fb fbd7 	bl	8000588 <__aeabi_f2d>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	ec43 2b10 	vmov	d0, r2, r3
 8004de2:	f000 fe75 	bl	8005ad0 <sin>
 8004de6:	ec55 4b10 	vmov	r4, r5, d0
 8004dea:	797b      	ldrb	r3, [r7, #5]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb fbb9 	bl	8000564 <__aeabi_i2d>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4620      	mov	r0, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7fb fc1d 	bl	8000638 <__aeabi_dmul>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	f7fb fec7 	bl	8000b98 <__aeabi_d2iz>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	4413      	add	r3, r2
 8004e14:	72fb      	strb	r3, [r7, #11]
    uint8_t first_point_y = y + (int8_t)(cos(rad)*radius);   
 8004e16:	69f8      	ldr	r0, [r7, #28]
 8004e18:	f7fb fbb6 	bl	8000588 <__aeabi_f2d>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	ec43 2b10 	vmov	d0, r2, r3
 8004e24:	f000 fe00 	bl	8005a28 <cos>
 8004e28:	ec55 4b10 	vmov	r4, r5, d0
 8004e2c:	797b      	ldrb	r3, [r7, #5]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb fb98 	bl	8000564 <__aeabi_i2d>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4620      	mov	r0, r4
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	f7fb fbfc 	bl	8000638 <__aeabi_dmul>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4610      	mov	r0, r2
 8004e46:	4619      	mov	r1, r3
 8004e48:	f7fb fea6 	bl	8000b98 <__aeabi_d2iz>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	b25b      	sxtb	r3, r3
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	79bb      	ldrb	r3, [r7, #6]
 8004e54:	4413      	add	r3, r2
 8004e56:	72bb      	strb	r3, [r7, #10]
    while (count < approx_segments) {
 8004e58:	e0c2      	b.n	8004fe0 <ssd1306_DrawArcWithRadiusLine+0x2c8>
        rad = ssd1306_DegToRad(count*approx_degree);
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e70:	f7ff fdea 	bl	8004a48 <ssd1306_DegToRad>
 8004e74:	ed87 0a07 	vstr	s0, [r7, #28]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8004e78:	69f8      	ldr	r0, [r7, #28]
 8004e7a:	f7fb fb85 	bl	8000588 <__aeabi_f2d>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	ec43 2b10 	vmov	d0, r2, r3
 8004e86:	f000 fe23 	bl	8005ad0 <sin>
 8004e8a:	ec55 4b10 	vmov	r4, r5, d0
 8004e8e:	797b      	ldrb	r3, [r7, #5]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb fb67 	bl	8000564 <__aeabi_i2d>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f7fb fbcb 	bl	8000638 <__aeabi_dmul>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f7fb fe75 	bl	8000b98 <__aeabi_d2iz>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	76fb      	strb	r3, [r7, #27]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8004eba:	69f8      	ldr	r0, [r7, #28]
 8004ebc:	f7fb fb64 	bl	8000588 <__aeabi_f2d>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	ec43 2b10 	vmov	d0, r2, r3
 8004ec8:	f000 fdae 	bl	8005a28 <cos>
 8004ecc:	ec55 4b10 	vmov	r4, r5, d0
 8004ed0:	797b      	ldrb	r3, [r7, #5]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fb fb46 	bl	8000564 <__aeabi_i2d>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4620      	mov	r0, r4
 8004ede:	4629      	mov	r1, r5
 8004ee0:	f7fb fbaa 	bl	8000638 <__aeabi_dmul>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	f7fb fe54 	bl	8000b98 <__aeabi_d2iz>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	79bb      	ldrb	r3, [r7, #6]
 8004ef8:	4413      	add	r3, r2
 8004efa:	76bb      	strb	r3, [r7, #26]
        count++;
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	3301      	adds	r3, #1
 8004f00:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d00f      	beq.n	8004f2a <ssd1306_DrawArcWithRadiusLine+0x212>
            rad = ssd1306_DegToRad(count*approx_degree);
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f20:	f7ff fd92 	bl	8004a48 <ssd1306_DegToRad>
 8004f24:	ed87 0a07 	vstr	s0, [r7, #28]
 8004f28:	e00a      	b.n	8004f40 <ssd1306_DrawArcWithRadiusLine+0x228>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f34:	eeb0 0a67 	vmov.f32	s0, s15
 8004f38:	f7ff fd86 	bl	8004a48 <ssd1306_DegToRad>
 8004f3c:	ed87 0a07 	vstr	s0, [r7, #28]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8004f40:	69f8      	ldr	r0, [r7, #28]
 8004f42:	f7fb fb21 	bl	8000588 <__aeabi_f2d>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	ec43 2b10 	vmov	d0, r2, r3
 8004f4e:	f000 fdbf 	bl	8005ad0 <sin>
 8004f52:	ec55 4b10 	vmov	r4, r5, d0
 8004f56:	797b      	ldrb	r3, [r7, #5]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fb03 	bl	8000564 <__aeabi_i2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb fb67 	bl	8000638 <__aeabi_dmul>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	f7fb fe11 	bl	8000b98 <__aeabi_d2iz>
 8004f76:	4603      	mov	r3, r0
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8004f84:	69f8      	ldr	r0, [r7, #28]
 8004f86:	f7fb faff 	bl	8000588 <__aeabi_f2d>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	ec43 2b10 	vmov	d0, r2, r3
 8004f92:	f000 fd49 	bl	8005a28 <cos>
 8004f96:	ec55 4b10 	vmov	r4, r5, d0
 8004f9a:	797b      	ldrb	r3, [r7, #5]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fb fae1 	bl	8000564 <__aeabi_i2d>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb fb45 	bl	8000638 <__aeabi_dmul>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f7fb fdef 	bl	8000b98 <__aeabi_d2iz>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	b25b      	sxtb	r3, r3
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	79bb      	ldrb	r3, [r7, #6]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8004fc8:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8004fcc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004fd0:	7eb9      	ldrb	r1, [r7, #26]
 8004fd2:	7ef8      	ldrb	r0, [r7, #27]
 8004fd4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	4623      	mov	r3, r4
 8004fdc:	f7ff fc8c 	bl	80048f8 <ssd1306_Line>
    while (count < approx_segments) {
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	f4ff af38 	bcc.w	8004e5a <ssd1306_DrawArcWithRadiusLine+0x142>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8004fea:	7abc      	ldrb	r4, [r7, #10]
 8004fec:	7afa      	ldrb	r2, [r7, #11]
 8004fee:	79b9      	ldrb	r1, [r7, #6]
 8004ff0:	79f8      	ldrb	r0, [r7, #7]
 8004ff2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	f7ff fc7d 	bl	80048f8 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8004ffe:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8005002:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005006:	79b9      	ldrb	r1, [r7, #6]
 8005008:	79f8      	ldrb	r0, [r7, #7]
 800500a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	4623      	mov	r3, r4
 8005012:	f7ff fc71 	bl	80048f8 <ssd1306_Line>
    return;
 8005016:	bf00      	nop
}
 8005018:	3728      	adds	r7, #40	; 0x28
 800501a:	46bd      	mov	sp, r7
 800501c:	bdb0      	pop	{r4, r5, r7, pc}
 800501e:	bf00      	nop
 8005020:	08009971 	.word	0x08009971
 8005024:	b60b60b7 	.word	0xb60b60b7
 8005028:	16c16c17 	.word	0x16c16c17

0800502c <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4623      	mov	r3, r4
 800503c:	71fb      	strb	r3, [r7, #7]
 800503e:	4603      	mov	r3, r0
 8005040:	71bb      	strb	r3, [r7, #6]
 8005042:	460b      	mov	r3, r1
 8005044:	717b      	strb	r3, [r7, #5]
 8005046:	4613      	mov	r3, r2
 8005048:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800504a:	797b      	ldrb	r3, [r7, #5]
 800504c:	425b      	negs	r3, r3
 800504e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8005054:	797b      	ldrb	r3, [r7, #5]
 8005056:	f1c3 0301 	rsb	r3, r3, #1
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	2b00      	cmp	r3, #0
 8005064:	db65      	blt.n	8005132 <ssd1306_DrawCircle+0x106>
 8005066:	79bb      	ldrb	r3, [r7, #6]
 8005068:	2b3f      	cmp	r3, #63	; 0x3f
 800506a:	d862      	bhi.n	8005132 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	79fa      	ldrb	r2, [r7, #7]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	b2d8      	uxtb	r0, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	79bb      	ldrb	r3, [r7, #6]
 800507c:	4413      	add	r3, r2
 800507e:	b2db      	uxtb	r3, r3
 8005080:	793a      	ldrb	r2, [r7, #4]
 8005082:	4619      	mov	r1, r3
 8005084:	f7ff fb1e 	bl	80046c4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	4413      	add	r3, r2
 8005090:	b2d8      	uxtb	r0, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	b2da      	uxtb	r2, r3
 8005096:	79bb      	ldrb	r3, [r7, #6]
 8005098:	4413      	add	r3, r2
 800509a:	b2db      	uxtb	r3, r3
 800509c:	793a      	ldrb	r2, [r7, #4]
 800509e:	4619      	mov	r1, r3
 80050a0:	f7ff fb10 	bl	80046c4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	4413      	add	r3, r2
 80050ac:	b2d8      	uxtb	r0, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	79ba      	ldrb	r2, [r7, #6]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	793a      	ldrb	r2, [r7, #4]
 80050ba:	4619      	mov	r1, r3
 80050bc:	f7ff fb02 	bl	80046c4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	79fa      	ldrb	r2, [r7, #7]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	b2d8      	uxtb	r0, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	79ba      	ldrb	r2, [r7, #6]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	793a      	ldrb	r2, [r7, #4]
 80050d6:	4619      	mov	r1, r3
 80050d8:	f7ff faf4 	bl	80046c4 <ssd1306_DrawPixel>
        e2 = err;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	dc13      	bgt.n	8005110 <ssd1306_DrawCircle+0xe4>
            y++;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	3301      	adds	r3, #1
 80050ec:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	3301      	adds	r3, #1
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	425b      	negs	r3, r3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	d105      	bne.n	8005110 <ssd1306_DrawCircle+0xe4>
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	dc01      	bgt.n	8005110 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	dd08      	ble.n	800512a <ssd1306_DrawCircle+0xfe>
            x++;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	3301      	adds	r3, #1
 800511c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	3301      	adds	r3, #1
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	dd9d      	ble.n	800506c <ssd1306_DrawCircle+0x40>

    return;
 8005130:	e000      	b.n	8005134 <ssd1306_DrawCircle+0x108>
        return;
 8005132:	bf00      	nop
}
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}

0800513a <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800513a:	b590      	push	{r4, r7, lr}
 800513c:	b089      	sub	sp, #36	; 0x24
 800513e:	af00      	add	r7, sp, #0
 8005140:	4604      	mov	r4, r0
 8005142:	4608      	mov	r0, r1
 8005144:	4611      	mov	r1, r2
 8005146:	461a      	mov	r2, r3
 8005148:	4623      	mov	r3, r4
 800514a:	71fb      	strb	r3, [r7, #7]
 800514c:	4603      	mov	r3, r0
 800514e:	71bb      	strb	r3, [r7, #6]
 8005150:	460b      	mov	r3, r1
 8005152:	717b      	strb	r3, [r7, #5]
 8005154:	4613      	mov	r3, r2
 8005156:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8005158:	797b      	ldrb	r3, [r7, #5]
 800515a:	425b      	negs	r3, r3
 800515c:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8005162:	797b      	ldrb	r3, [r7, #5]
 8005164:	f1c3 0301 	rsb	r3, r3, #1
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800516c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005170:	2b00      	cmp	r3, #0
 8005172:	db51      	blt.n	8005218 <ssd1306_FillCircle+0xde>
 8005174:	79bb      	ldrb	r3, [r7, #6]
 8005176:	2b3f      	cmp	r3, #63	; 0x3f
 8005178:	d84e      	bhi.n	8005218 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	79bb      	ldrb	r3, [r7, #6]
 8005180:	4413      	add	r3, r2
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	e017      	b.n	80051b6 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	79fa      	ldrb	r2, [r7, #7]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	73bb      	strb	r3, [r7, #14]
 8005190:	e008      	b.n	80051a4 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8005192:	793a      	ldrb	r2, [r7, #4]
 8005194:	7bf9      	ldrb	r1, [r7, #15]
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fa93 	bl	80046c4 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 800519e:	7bbb      	ldrb	r3, [r7, #14]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	73bb      	strb	r3, [r7, #14]
 80051a4:	7bba      	ldrb	r2, [r7, #14]
 80051a6:	79f9      	ldrb	r1, [r7, #7]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	440b      	add	r3, r1
 80051ac:	429a      	cmp	r2, r3
 80051ae:	daf0      	bge.n	8005192 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
 80051b6:	7bfa      	ldrb	r2, [r7, #15]
 80051b8:	79b9      	ldrb	r1, [r7, #6]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	1acb      	subs	r3, r1, r3
 80051be:	429a      	cmp	r2, r3
 80051c0:	dae1      	bge.n	8005186 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	dc13      	bgt.n	80051f6 <ssd1306_FillCircle+0xbc>
            y++;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	3301      	adds	r3, #1
 80051d2:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	3301      	adds	r3, #1
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	425b      	negs	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d105      	bne.n	80051f6 <ssd1306_FillCircle+0xbc>
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	dc01      	bgt.n	80051f6 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	dd08      	ble.n	8005210 <ssd1306_FillCircle+0xd6>
            x++;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3301      	adds	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	3301      	adds	r3, #1
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4413      	add	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	ddb1      	ble.n	800517a <ssd1306_FillCircle+0x40>

    return;
 8005216:	e000      	b.n	800521a <ssd1306_FillCircle+0xe0>
        return;
 8005218:	bf00      	nop
}
 800521a:	3724      	adds	r7, #36	; 0x24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd90      	pop	{r4, r7, pc}

08005220 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005220:	b590      	push	{r4, r7, lr}
 8005222:	b085      	sub	sp, #20
 8005224:	af02      	add	r7, sp, #8
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4623      	mov	r3, r4
 8005230:	71fb      	strb	r3, [r7, #7]
 8005232:	4603      	mov	r3, r0
 8005234:	71bb      	strb	r3, [r7, #6]
 8005236:	460b      	mov	r3, r1
 8005238:	717b      	strb	r3, [r7, #5]
 800523a:	4613      	mov	r3, r2
 800523c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800523e:	79bc      	ldrb	r4, [r7, #6]
 8005240:	797a      	ldrb	r2, [r7, #5]
 8005242:	79b9      	ldrb	r1, [r7, #6]
 8005244:	79f8      	ldrb	r0, [r7, #7]
 8005246:	7e3b      	ldrb	r3, [r7, #24]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	4623      	mov	r3, r4
 800524c:	f7ff fb54 	bl	80048f8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8005250:	793c      	ldrb	r4, [r7, #4]
 8005252:	797a      	ldrb	r2, [r7, #5]
 8005254:	79b9      	ldrb	r1, [r7, #6]
 8005256:	7978      	ldrb	r0, [r7, #5]
 8005258:	7e3b      	ldrb	r3, [r7, #24]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	4623      	mov	r3, r4
 800525e:	f7ff fb4b 	bl	80048f8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8005262:	793c      	ldrb	r4, [r7, #4]
 8005264:	79fa      	ldrb	r2, [r7, #7]
 8005266:	7939      	ldrb	r1, [r7, #4]
 8005268:	7978      	ldrb	r0, [r7, #5]
 800526a:	7e3b      	ldrb	r3, [r7, #24]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	4623      	mov	r3, r4
 8005270:	f7ff fb42 	bl	80048f8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8005274:	79bc      	ldrb	r4, [r7, #6]
 8005276:	79fa      	ldrb	r2, [r7, #7]
 8005278:	7939      	ldrb	r1, [r7, #4]
 800527a:	79f8      	ldrb	r0, [r7, #7]
 800527c:	7e3b      	ldrb	r3, [r7, #24]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4623      	mov	r3, r4
 8005282:	f7ff fb39 	bl	80048f8 <ssd1306_Line>

    return;
 8005286:	bf00      	nop
}
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	bd90      	pop	{r4, r7, pc}

0800528e <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800528e:	b590      	push	{r4, r7, lr}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	4604      	mov	r4, r0
 8005296:	4608      	mov	r0, r1
 8005298:	4611      	mov	r1, r2
 800529a:	461a      	mov	r2, r3
 800529c:	4623      	mov	r3, r4
 800529e:	71fb      	strb	r3, [r7, #7]
 80052a0:	4603      	mov	r3, r0
 80052a2:	71bb      	strb	r3, [r7, #6]
 80052a4:	460b      	mov	r3, r1
 80052a6:	717b      	strb	r3, [r7, #5]
 80052a8:	4613      	mov	r3, r2
 80052aa:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80052ac:	79fa      	ldrb	r2, [r7, #7]
 80052ae:	797b      	ldrb	r3, [r7, #5]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bf28      	it	cs
 80052b4:	4613      	movcs	r3, r2
 80052b6:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80052b8:	797a      	ldrb	r2, [r7, #5]
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf38      	it	cc
 80052c0:	4613      	movcc	r3, r2
 80052c2:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80052c4:	79ba      	ldrb	r2, [r7, #6]
 80052c6:	793b      	ldrb	r3, [r7, #4]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bf28      	it	cs
 80052cc:	4613      	movcs	r3, r2
 80052ce:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80052d0:	793a      	ldrb	r2, [r7, #4]
 80052d2:	79bb      	ldrb	r3, [r7, #6]
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bf38      	it	cc
 80052d8:	4613      	movcc	r3, r2
 80052da:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80052dc:	7afb      	ldrb	r3, [r7, #11]
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	e017      	b.n	8005312 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80052e2:	7b7b      	ldrb	r3, [r7, #13]
 80052e4:	73bb      	strb	r3, [r7, #14]
 80052e6:	e009      	b.n	80052fc <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80052e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80052ec:	7bf9      	ldrb	r1, [r7, #15]
 80052ee:	7bbb      	ldrb	r3, [r7, #14]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff f9e7 	bl	80046c4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	3301      	adds	r3, #1
 80052fa:	73bb      	strb	r3, [r7, #14]
 80052fc:	7bba      	ldrb	r2, [r7, #14]
 80052fe:	7b3b      	ldrb	r3, [r7, #12]
 8005300:	429a      	cmp	r2, r3
 8005302:	d803      	bhi.n	800530c <ssd1306_FillRectangle+0x7e>
 8005304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005308:	2b00      	cmp	r3, #0
 800530a:	daed      	bge.n	80052e8 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	3301      	adds	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	7bfa      	ldrb	r2, [r7, #15]
 8005314:	7abb      	ldrb	r3, [r7, #10]
 8005316:	429a      	cmp	r2, r3
 8005318:	d803      	bhi.n	8005322 <ssd1306_FillRectangle+0x94>
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b3f      	cmp	r3, #63	; 0x3f
 800531e:	d9e0      	bls.n	80052e2 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8005320:	bf00      	nop
 8005322:	bf00      	nop
}
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bd90      	pop	{r4, r7, pc}

0800532a <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	603a      	str	r2, [r7, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	4603      	mov	r3, r0
 8005336:	71fb      	strb	r3, [r7, #7]
 8005338:	460b      	mov	r3, r1
 800533a:	71bb      	strb	r3, [r7, #6]
 800533c:	4613      	mov	r3, r2
 800533e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8005340:	797b      	ldrb	r3, [r7, #5]
 8005342:	3307      	adds	r3, #7
 8005344:	2b00      	cmp	r3, #0
 8005346:	da00      	bge.n	800534a <ssd1306_DrawBitmap+0x20>
 8005348:	3307      	adds	r3, #7
 800534a:	10db      	asrs	r3, r3, #3
 800534c:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005356:	2b00      	cmp	r3, #0
 8005358:	db3e      	blt.n	80053d8 <ssd1306_DrawBitmap+0xae>
 800535a:	79bb      	ldrb	r3, [r7, #6]
 800535c:	2b3f      	cmp	r3, #63	; 0x3f
 800535e:	d83b      	bhi.n	80053d8 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8005360:	2300      	movs	r3, #0
 8005362:	73bb      	strb	r3, [r7, #14]
 8005364:	e033      	b.n	80053ce <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8005366:	2300      	movs	r3, #0
 8005368:	737b      	strb	r3, [r7, #13]
 800536a:	e026      	b.n	80053ba <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800536c:	7b7b      	ldrb	r3, [r7, #13]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e00d      	b.n	800539a <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800537e:	7bbb      	ldrb	r3, [r7, #14]
 8005380:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	7b7a      	ldrb	r2, [r7, #13]
 800538a:	08d2      	lsrs	r2, r2, #3
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	4413      	add	r3, r2
 8005390:	461a      	mov	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	4413      	add	r3, r2
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 800539a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da08      	bge.n	80053b4 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80053a2:	79fa      	ldrb	r2, [r7, #7]
 80053a4:	7b7b      	ldrb	r3, [r7, #13]
 80053a6:	4413      	add	r3, r2
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	7f3a      	ldrb	r2, [r7, #28]
 80053ac:	79b9      	ldrb	r1, [r7, #6]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff f988 	bl	80046c4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80053b4:	7b7b      	ldrb	r3, [r7, #13]
 80053b6:	3301      	adds	r3, #1
 80053b8:	737b      	strb	r3, [r7, #13]
 80053ba:	7b7a      	ldrb	r2, [r7, #13]
 80053bc:	797b      	ldrb	r3, [r7, #5]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3d4      	bcc.n	800536c <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	3301      	adds	r3, #1
 80053c6:	73bb      	strb	r3, [r7, #14]
 80053c8:	79bb      	ldrb	r3, [r7, #6]
 80053ca:	3301      	adds	r3, #1
 80053cc:	71bb      	strb	r3, [r7, #6]
 80053ce:	7bba      	ldrb	r2, [r7, #14]
 80053d0:	7e3b      	ldrb	r3, [r7, #24]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d3c7      	bcc.n	8005366 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80053d6:	e000      	b.n	80053da <ssd1306_DrawBitmap+0xb0>
        return;
 80053d8:	bf00      	nop
}
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80053ea:	2381      	movs	r3, #129	; 0x81
 80053ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff f87f 	bl	80044f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff f87b 	bl	80044f4 <ssd1306_WriteCommand>
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005418:	23af      	movs	r3, #175	; 0xaf
 800541a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <ssd1306_SetDisplayOn+0x38>)
 800541e:	2201      	movs	r2, #1
 8005420:	715a      	strb	r2, [r3, #5]
 8005422:	e004      	b.n	800542e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005424:	23ae      	movs	r3, #174	; 0xae
 8005426:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <ssd1306_SetDisplayOn+0x38>)
 800542a:	2200      	movs	r2, #0
 800542c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff f85f 	bl	80044f4 <ssd1306_WriteCommand>
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	200007e4 	.word	0x200007e4

08005444 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800544a:	2000      	movs	r0, #0
 800544c:	f7ff f8ee 	bl	800462c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8005450:	f7fc fc98 	bl	8001d84 <HAL_GetTick>
 8005454:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8005462:	7bb9      	ldrb	r1, [r7, #14]
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2200      	movs	r2, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff f92b 	bl	80046c4 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <ssd1306_TestBorder+0x3e>
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b7e      	cmp	r3, #126	; 0x7e
 8005478:	d803      	bhi.n	8005482 <ssd1306_TestBorder+0x3e>
            x++;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	3301      	adds	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e016      	b.n	80054b0 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b7f      	cmp	r3, #127	; 0x7f
 8005486:	d106      	bne.n	8005496 <ssd1306_TestBorder+0x52>
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	2b3e      	cmp	r3, #62	; 0x3e
 800548c:	d803      	bhi.n	8005496 <ssd1306_TestBorder+0x52>
            y++;
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	3301      	adds	r3, #1
 8005492:	73bb      	strb	r3, [r7, #14]
 8005494:	e00c      	b.n	80054b0 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	2b3f      	cmp	r3, #63	; 0x3f
 800549a:	d106      	bne.n	80054aa <ssd1306_TestBorder+0x66>
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <ssd1306_TestBorder+0x66>
            x--;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	e002      	b.n	80054b0 <ssd1306_TestBorder+0x6c>
        else
            y--;
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 80054b0:	7bb9      	ldrb	r1, [r7, #14]
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2201      	movs	r2, #1
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff f904 	bl	80046c4 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 80054bc:	f7ff f8da 	bl	8004674 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 80054c0:	2005      	movs	r0, #5
 80054c2:	f7fc fc6b 	bl	8001d9c <HAL_Delay>
        end = HAL_GetTick();
 80054c6:	f7fc fc5d 	bl	8001d84 <HAL_GetTick>
 80054ca:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80054d6:	d3c4      	bcc.n	8005462 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 80054d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054dc:	f7fc fc5e 	bl	8001d9c <HAL_Delay>
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 80054f2:	2000      	movs	r0, #0
 80054f4:	f7ff f89a 	bl	800462c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	4619      	mov	r1, r3
 80054fc:	2002      	movs	r0, #2
 80054fe:	f7ff f9e3 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <ssd1306_TestFonts1+0x88>)
 8005504:	2301      	movs	r3, #1
 8005506:	ca06      	ldmia	r2, {r1, r2}
 8005508:	481a      	ldr	r0, [pc, #104]	; (8005574 <ssd1306_TestFonts1+0x8c>)
 800550a:	f7ff f9b7 	bl	800487c <ssd1306_WriteString>
    y += 26;
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	331a      	adds	r3, #26
 8005512:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	4619      	mov	r1, r3
 8005518:	2002      	movs	r0, #2
 800551a:	f7ff f9d5 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <ssd1306_TestFonts1+0x90>)
 8005520:	2301      	movs	r3, #1
 8005522:	ca06      	ldmia	r2, {r1, r2}
 8005524:	4815      	ldr	r0, [pc, #84]	; (800557c <ssd1306_TestFonts1+0x94>)
 8005526:	f7ff f9a9 	bl	800487c <ssd1306_WriteString>
    y += 18;
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	3312      	adds	r3, #18
 800552e:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	4619      	mov	r1, r3
 8005534:	2002      	movs	r0, #2
 8005536:	f7ff f9c7 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 800553a:	4a11      	ldr	r2, [pc, #68]	; (8005580 <ssd1306_TestFonts1+0x98>)
 800553c:	2301      	movs	r3, #1
 800553e:	ca06      	ldmia	r2, {r1, r2}
 8005540:	4810      	ldr	r0, [pc, #64]	; (8005584 <ssd1306_TestFonts1+0x9c>)
 8005542:	f7ff f99b 	bl	800487c <ssd1306_WriteString>
    y += 10;
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	330a      	adds	r3, #10
 800554a:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	4619      	mov	r1, r3
 8005550:	2002      	movs	r0, #2
 8005552:	f7ff f9b9 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8005556:	4a0c      	ldr	r2, [pc, #48]	; (8005588 <ssd1306_TestFonts1+0xa0>)
 8005558:	2301      	movs	r3, #1
 800555a:	ca06      	ldmia	r2, {r1, r2}
 800555c:	480b      	ldr	r0, [pc, #44]	; (800558c <ssd1306_TestFonts1+0xa4>)
 800555e:	f7ff f98d 	bl	800487c <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8005562:	f7ff f887 	bl	8004674 <ssd1306_UpdateScreen>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000024 	.word	0x20000024
 8005574:	080098d4 	.word	0x080098d4
 8005578:	2000001c 	.word	0x2000001c
 800557c:	080098e0 	.word	0x080098e0
 8005580:	20000014 	.word	0x20000014
 8005584:	080098ec 	.word	0x080098ec
 8005588:	2000000c 	.word	0x2000000c
 800558c:	080098f8 	.word	0x080098f8

08005590 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b085      	sub	sp, #20
 8005594:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8005596:	2000      	movs	r0, #0
 8005598:	f7ff f848 	bl	800462c <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 800559c:	2104      	movs	r1, #4
 800559e:	2000      	movs	r0, #0
 80055a0:	f7ff f992 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <ssd1306_TestFonts2+0x64>)
 80055a6:	2301      	movs	r3, #1
 80055a8:	ca06      	ldmia	r2, {r1, r2}
 80055aa:	4813      	ldr	r0, [pc, #76]	; (80055f8 <ssd1306_TestFonts2+0x68>)
 80055ac:	f7ff f966 	bl	800487c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 80055b0:	2124      	movs	r1, #36	; 0x24
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7ff f988 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 80055b8:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <ssd1306_TestFonts2+0x64>)
 80055ba:	2301      	movs	r3, #1
 80055bc:	ca06      	ldmia	r2, {r1, r2}
 80055be:	480f      	ldr	r0, [pc, #60]	; (80055fc <ssd1306_TestFonts2+0x6c>)
 80055c0:	f7ff f95c 	bl	800487c <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 80055c4:	2360      	movs	r3, #96	; 0x60
 80055c6:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 80055c8:	233c      	movs	r3, #60	; 0x3c
 80055ca:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	3310      	adds	r3, #16
 80055d0:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 80055d2:	79bb      	ldrb	r3, [r7, #6]
 80055d4:	3302      	adds	r3, #2
 80055d6:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 80055d8:	793b      	ldrb	r3, [r7, #4]
 80055da:	797a      	ldrb	r2, [r7, #5]
 80055dc:	79b9      	ldrb	r1, [r7, #6]
 80055de:	79f8      	ldrb	r0, [r7, #7]
 80055e0:	2401      	movs	r4, #1
 80055e2:	9400      	str	r4, [sp, #0]
 80055e4:	f7ff fe53 	bl	800528e <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 80055e8:	f7ff f844 	bl	8004674 <ssd1306_UpdateScreen>
#endif
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd90      	pop	{r4, r7, pc}
 80055f4:	2000002c 	.word	0x2000002c
 80055f8:	08009904 	.word	0x08009904
 80055fc:	08009910 	.word	0x08009910

08005600 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8005600:	b5b0      	push	{r4, r5, r7, lr}
 8005602:	b098      	sub	sp, #96	; 0x60
 8005604:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8005606:	2001      	movs	r0, #1
 8005608:	f7ff f810 	bl	800462c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 800560c:	f7fc fbba 	bl	8001d84 <HAL_GetTick>
 8005610:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 8005612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005614:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 800561a:	4a43      	ldr	r2, [pc, #268]	; (8005728 <ssd1306_TestFPS+0x128>)
 800561c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005620:	ca07      	ldmia	r2, {r0, r1, r2}
 8005622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8005626:	2100      	movs	r1, #0
 8005628:	2002      	movs	r0, #2
 800562a:	f7ff f94d 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 800562e:	4a3f      	ldr	r2, [pc, #252]	; (800572c <ssd1306_TestFPS+0x12c>)
 8005630:	2300      	movs	r3, #0
 8005632:	ca06      	ldmia	r2, {r1, r2}
 8005634:	483e      	ldr	r0, [pc, #248]	; (8005730 <ssd1306_TestFPS+0x130>)
 8005636:	f7ff f921 	bl	800487c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 800563a:	2124      	movs	r1, #36	; 0x24
 800563c:	2002      	movs	r0, #2
 800563e:	f7ff f943 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8005642:	4a3a      	ldr	r2, [pc, #232]	; (800572c <ssd1306_TestFPS+0x12c>)
 8005644:	2300      	movs	r3, #0
 8005646:	ca06      	ldmia	r2, {r1, r2}
 8005648:	483a      	ldr	r0, [pc, #232]	; (8005734 <ssd1306_TestFPS+0x134>)
 800564a:	f7ff f917 	bl	800487c <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 800564e:	2112      	movs	r1, #18
 8005650:	2002      	movs	r0, #2
 8005652:	f7ff f939 	bl	80048c8 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8005656:	4a35      	ldr	r2, [pc, #212]	; (800572c <ssd1306_TestFPS+0x12c>)
 8005658:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800565c:	2300      	movs	r3, #0
 800565e:	ca06      	ldmia	r2, {r1, r2}
 8005660:	f7ff f90c 	bl	800487c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8005664:	f7ff f806 	bl	8004674 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8005668:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800566c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 8005670:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005674:	3301      	adds	r3, #1
 8005676:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800567a:	220a      	movs	r2, #10
 800567c:	4619      	mov	r1, r3
 800567e:	f002 f8a8 	bl	80077d2 <memmove>
        message[sizeof(message)-2] = ch;
 8005682:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005686:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 800568a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800568c:	3301      	adds	r3, #1
 800568e:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8005690:	f7fc fb78 	bl	8001d84 <HAL_GetTick>
 8005694:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8005696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3287 	movw	r2, #4999	; 0x1387
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d9d4      	bls.n	800564e <ssd1306_TestFPS+0x4e>
   
    HAL_Delay(5000);
 80056a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80056a8:	f7fc fb78 	bl	8001d9c <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 80056ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b6:	ee17 0a90 	vmov	r0, s15
 80056ba:	f7fa ff65 	bl	8000588 <__aeabi_f2d>
 80056be:	4604      	mov	r4, r0
 80056c0:	460d      	mov	r5, r1
 80056c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fa ff3b 	bl	8000544 <__aeabi_ui2d>
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	4b19      	ldr	r3, [pc, #100]	; (8005738 <ssd1306_TestFPS+0x138>)
 80056d4:	f7fb f8da 	bl	800088c <__aeabi_ddiv>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fb f8d4 	bl	800088c <__aeabi_ddiv>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4610      	mov	r0, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	f7fb fa54 	bl	8000b98 <__aeabi_d2iz>
 80056f0:	4603      	mov	r3, r0
 80056f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80056f4:	1d38      	adds	r0, r7, #4
 80056f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f8:	4a10      	ldr	r2, [pc, #64]	; (800573c <ssd1306_TestFPS+0x13c>)
 80056fa:	2140      	movs	r1, #64	; 0x40
 80056fc:	f001 fff2 	bl	80076e4 <sniprintf>
   
    ssd1306_Fill(White);
 8005700:	2001      	movs	r0, #1
 8005702:	f7fe ff93 	bl	800462c <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8005706:	2102      	movs	r1, #2
 8005708:	2002      	movs	r0, #2
 800570a:	f7ff f8dd 	bl	80048c8 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 800570e:	4a07      	ldr	r2, [pc, #28]	; (800572c <ssd1306_TestFPS+0x12c>)
 8005710:	1d38      	adds	r0, r7, #4
 8005712:	2300      	movs	r3, #0
 8005714:	ca06      	ldmia	r2, {r1, r2}
 8005716:	f7ff f8b1 	bl	800487c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800571a:	f7fe ffab 	bl	8004674 <ssd1306_UpdateScreen>
}
 800571e:	bf00      	nop
 8005720:	3760      	adds	r7, #96	; 0x60
 8005722:	46bd      	mov	sp, r7
 8005724:	bdb0      	pop	{r4, r5, r7, pc}
 8005726:	bf00      	nop
 8005728:	0800993c 	.word	0x0800993c
 800572c:	2000001c 	.word	0x2000001c
 8005730:	0800991c 	.word	0x0800991c
 8005734:	08009928 	.word	0x08009928
 8005738:	408f4000 	.word	0x408f4000
 800573c:	08009934 	.word	0x08009934

08005740 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8005746:	2301      	movs	r3, #1
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	233f      	movs	r3, #63	; 0x3f
 800574c:	227f      	movs	r2, #127	; 0x7f
 800574e:	2101      	movs	r1, #1
 8005750:	2001      	movs	r0, #1
 8005752:	f7ff f8d1 	bl	80048f8 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8005756:	2301      	movs	r3, #1
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	233f      	movs	r3, #63	; 0x3f
 800575c:	2201      	movs	r2, #1
 800575e:	2101      	movs	r1, #1
 8005760:	207f      	movs	r0, #127	; 0x7f
 8005762:	f7ff f8c9 	bl	80048f8 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8005766:	f7fe ff85 	bl	8004674 <ssd1306_UpdateScreen>
  return;
 800576a:	bf00      	nop
}
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b085      	sub	sp, #20
 8005774:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
 800577a:	e028      	b.n	80057ce <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	4413      	add	r3, r2
 8005786:	b2db      	uxtb	r3, r3
 8005788:	3301      	adds	r3, #1
 800578a:	b2d8      	uxtb	r0, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	0092      	lsls	r2, r2, #2
 8005794:	4413      	add	r3, r2
 8005796:	b2db      	uxtb	r3, r3
 8005798:	3301      	adds	r3, #1
 800579a:	b2d9      	uxtb	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	0092      	lsls	r2, r2, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461c      	mov	r4, r3
 80057b4:	00a4      	lsls	r4, r4, #2
 80057b6:	4423      	add	r3, r4
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2401      	movs	r4, #1
 80057c2:	9400      	str	r4, [sp, #0]
 80057c4:	f7ff fd2c 	bl	8005220 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3301      	adds	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d9d3      	bls.n	800577c <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 80057d4:	f7fe ff4e 	bl	8004674 <ssd1306_UpdateScreen>
  return;
 80057d8:	bf00      	nop
}
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd90      	pop	{r4, r7, pc}

080057e0 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 80057e6:	2301      	movs	r3, #1
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	2323      	movs	r3, #35	; 0x23
 80057ec:	2241      	movs	r2, #65	; 0x41
 80057ee:	2101      	movs	r1, #1
 80057f0:	201f      	movs	r0, #31
 80057f2:	f7ff fd4c 	bl	800528e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 80057f6:	2301      	movs	r3, #1
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	233c      	movs	r3, #60	; 0x3c
 80057fc:	2246      	movs	r2, #70	; 0x46
 80057fe:	212d      	movs	r1, #45	; 0x2d
 8005800:	200a      	movs	r0, #10
 8005802:	f7ff fd44 	bl	800528e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8005806:	2301      	movs	r3, #1
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	232d      	movs	r3, #45	; 0x2d
 800580c:	2264      	movs	r2, #100	; 0x64
 800580e:	210a      	movs	r1, #10
 8005810:	204b      	movs	r0, #75	; 0x4b
 8005812:	f7ff fd3c 	bl	800528e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8005816:	2300      	movs	r3, #0
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2337      	movs	r3, #55	; 0x37
 800581c:	2250      	movs	r2, #80	; 0x50
 800581e:	211e      	movs	r1, #30
 8005820:	2037      	movs	r0, #55	; 0x37
 8005822:	f7ff fd34 	bl	800528e <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8005826:	f7fe ff25 	bl	8004674 <ssd1306_UpdateScreen>
}
 800582a:	bf00      	nop
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	e010      	b.n	800585e <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	0092      	lsls	r2, r2, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	b2db      	uxtb	r3, r3
 800584a:	331e      	adds	r3, #30
 800584c:	b2d8      	uxtb	r0, r3
 800584e:	2301      	movs	r3, #1
 8005850:	220a      	movs	r2, #10
 8005852:	210f      	movs	r1, #15
 8005854:	f7ff fbea 	bl	800502c <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3301      	adds	r3, #1
 800585c:	607b      	str	r3, [r7, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b04      	cmp	r3, #4
 8005862:	d9eb      	bls.n	800583c <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8005864:	2300      	movs	r3, #0
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	e011      	b.n	800588e <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	0052      	lsls	r2, r2, #1
 8005872:	441a      	add	r2, r3
 8005874:	00d2      	lsls	r2, r2, #3
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	b2db      	uxtb	r3, r3
 800587a:	330f      	adds	r3, #15
 800587c:	b2d8      	uxtb	r0, r3
 800587e:	2301      	movs	r3, #1
 8005880:	220a      	movs	r2, #10
 8005882:	2128      	movs	r1, #40	; 0x28
 8005884:	f7ff fc59 	bl	800513a <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3301      	adds	r3, #1
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d9ea      	bls.n	800586a <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8005894:	f7fe feee 	bl	8004674 <ssd1306_UpdateScreen>
  return;
 8005898:	bf00      	nop
}
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 80058a6:	2301      	movs	r3, #1
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2314      	movs	r3, #20
 80058b2:	221e      	movs	r2, #30
 80058b4:	211e      	movs	r1, #30
 80058b6:	201e      	movs	r0, #30
 80058b8:	f7ff f91a 	bl	8004af0 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 80058bc:	2301      	movs	r3, #1
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	231e      	movs	r3, #30
 80058c8:	220a      	movs	r2, #10
 80058ca:	2137      	movs	r1, #55	; 0x37
 80058cc:	2050      	movs	r0, #80	; 0x50
 80058ce:	f7ff fa23 	bl	8004d18 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 80058d2:	f7fe fecf 	bl	8004674 <ssd1306_UpdateScreen>
  return;
 80058d6:	bf00      	nop
}
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <ssd1306_TestPolyline+0x28>)
 80058e4:	463c      	mov	r4, r7
 80058e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058e8:	c407      	stmia	r4!, {r0, r1, r2}
 80058ea:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 80058ec:	463b      	mov	r3, r7
 80058ee:	2201      	movs	r2, #1
 80058f0:	2107      	movs	r1, #7
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff f86c 	bl	80049d0 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 80058f8:	f7fe febc 	bl	8004674 <ssd1306_UpdateScreen>
  return;
 80058fc:	bf00      	nop
}
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	bd90      	pop	{r4, r7, pc}
 8005904:	08009948 	.word	0x08009948

08005908 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800590e:	2001      	movs	r0, #1
 8005910:	f7fe fe8c 	bl	800462c <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8005914:	2300      	movs	r3, #0
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	2340      	movs	r3, #64	; 0x40
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <ssd1306_TestDrawBitmap+0x78>)
 8005920:	2100      	movs	r1, #0
 8005922:	2000      	movs	r0, #0
 8005924:	f7ff fd01 	bl	800532a <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8005928:	f7fe fea4 	bl	8004674 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 800592c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005930:	f7fc fa34 	bl	8001d9c <HAL_Delay>
    ssd1306_Fill(Black);
 8005934:	2000      	movs	r0, #0
 8005936:	f7fe fe79 	bl	800462c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 800593a:	2301      	movs	r3, #1
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	2340      	movs	r3, #64	; 0x40
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	4a0f      	ldr	r2, [pc, #60]	; (8005984 <ssd1306_TestDrawBitmap+0x7c>)
 8005946:	2100      	movs	r1, #0
 8005948:	2020      	movs	r0, #32
 800594a:	f7ff fcee 	bl	800532a <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800594e:	f7fe fe91 	bl	8004674 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8005952:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005956:	f7fc fa21 	bl	8001d9c <HAL_Delay>
    ssd1306_Fill(White);
 800595a:	2001      	movs	r0, #1
 800595c:	f7fe fe66 	bl	800462c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8005960:	2300      	movs	r3, #0
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	2340      	movs	r3, #64	; 0x40
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	2340      	movs	r3, #64	; 0x40
 800596a:	4a06      	ldr	r2, [pc, #24]	; (8005984 <ssd1306_TestDrawBitmap+0x7c>)
 800596c:	2100      	movs	r1, #0
 800596e:	2020      	movs	r0, #32
 8005970:	f7ff fcdb 	bl	800532a <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8005974:	f7fe fe7e 	bl	8004674 <ssd1306_UpdateScreen>
}
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	0800d948 	.word	0x0800d948
 8005984:	0800dd48 	.word	0x0800dd48

08005988 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 800598c:	f7fe fde4 	bl	8004558 <ssd1306_Init>

    ssd1306_TestFPS();
 8005990:	f7ff fe36 	bl	8005600 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8005994:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005998:	f7fc fa00 	bl	8001d9c <HAL_Delay>
    ssd1306_TestBorder();
 800599c:	f7ff fd52 	bl	8005444 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 80059a0:	f7ff fda2 	bl	80054e8 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 80059a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80059a8:	f7fc f9f8 	bl	8001d9c <HAL_Delay>
    ssd1306_TestFonts2();
 80059ac:	f7ff fdf0 	bl	8005590 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 80059b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80059b4:	f7fc f9f2 	bl	8001d9c <HAL_Delay>
    ssd1306_Fill(Black);
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7fe fe37 	bl	800462c <ssd1306_Fill>
    ssd1306_TestRectangle();
 80059be:	f7ff fed7 	bl	8005770 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 80059c2:	f7ff febd 	bl	8005740 <ssd1306_TestLine>
    HAL_Delay(3000);
 80059c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80059ca:	f7fc f9e7 	bl	8001d9c <HAL_Delay>
    ssd1306_Fill(Black);
 80059ce:	2000      	movs	r0, #0
 80059d0:	f7fe fe2c 	bl	800462c <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 80059d4:	f7ff ff04 	bl	80057e0 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 80059d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80059dc:	f7fc f9de 	bl	8001d9c <HAL_Delay>
    ssd1306_Fill(Black);
 80059e0:	2000      	movs	r0, #0
 80059e2:	f7fe fe23 	bl	800462c <ssd1306_Fill>
    ssd1306_TestPolyline();
 80059e6:	f7ff ff79 	bl	80058dc <ssd1306_TestPolyline>
    HAL_Delay(3000);
 80059ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80059ee:	f7fc f9d5 	bl	8001d9c <HAL_Delay>
    ssd1306_Fill(Black);
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7fe fe1a 	bl	800462c <ssd1306_Fill>
    ssd1306_TestArc();
 80059f8:	f7ff ff52 	bl	80058a0 <ssd1306_TestArc>
    HAL_Delay(3000);
 80059fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005a00:	f7fc f9cc 	bl	8001d9c <HAL_Delay>
    ssd1306_Fill(Black);
 8005a04:	2000      	movs	r0, #0
 8005a06:	f7fe fe11 	bl	800462c <ssd1306_Fill>
    ssd1306_TestCircle();
 8005a0a:	f7ff ff11 	bl	8005830 <ssd1306_TestCircle>
    HAL_Delay(3000);
 8005a0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005a12:	f7fc f9c3 	bl	8001d9c <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8005a16:	f7ff ff77 	bl	8005908 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8005a1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005a1e:	f7fc f9bd 	bl	8001d9c <HAL_Delay>
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <cos>:
 8005a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a2a:	ec53 2b10 	vmov	r2, r3, d0
 8005a2e:	4826      	ldr	r0, [pc, #152]	; (8005ac8 <cos+0xa0>)
 8005a30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a34:	4281      	cmp	r1, r0
 8005a36:	dc06      	bgt.n	8005a46 <cos+0x1e>
 8005a38:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005ac0 <cos+0x98>
 8005a3c:	b005      	add	sp, #20
 8005a3e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a42:	f000 b89d 	b.w	8005b80 <__kernel_cos>
 8005a46:	4821      	ldr	r0, [pc, #132]	; (8005acc <cos+0xa4>)
 8005a48:	4281      	cmp	r1, r0
 8005a4a:	dd09      	ble.n	8005a60 <cos+0x38>
 8005a4c:	ee10 0a10 	vmov	r0, s0
 8005a50:	4619      	mov	r1, r3
 8005a52:	f7fa fc39 	bl	80002c8 <__aeabi_dsub>
 8005a56:	ec41 0b10 	vmov	d0, r0, r1
 8005a5a:	b005      	add	sp, #20
 8005a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a60:	4668      	mov	r0, sp
 8005a62:	f000 fa15 	bl	8005e90 <__ieee754_rem_pio2>
 8005a66:	f000 0003 	and.w	r0, r0, #3
 8005a6a:	2801      	cmp	r0, #1
 8005a6c:	d00b      	beq.n	8005a86 <cos+0x5e>
 8005a6e:	2802      	cmp	r0, #2
 8005a70:	d016      	beq.n	8005aa0 <cos+0x78>
 8005a72:	b9e0      	cbnz	r0, 8005aae <cos+0x86>
 8005a74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a78:	ed9d 0b00 	vldr	d0, [sp]
 8005a7c:	f000 f880 	bl	8005b80 <__kernel_cos>
 8005a80:	ec51 0b10 	vmov	r0, r1, d0
 8005a84:	e7e7      	b.n	8005a56 <cos+0x2e>
 8005a86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a8a:	ed9d 0b00 	vldr	d0, [sp]
 8005a8e:	f000 f93f 	bl	8005d10 <__kernel_sin>
 8005a92:	ec53 2b10 	vmov	r2, r3, d0
 8005a96:	ee10 0a10 	vmov	r0, s0
 8005a9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a9e:	e7da      	b.n	8005a56 <cos+0x2e>
 8005aa0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005aa4:	ed9d 0b00 	vldr	d0, [sp]
 8005aa8:	f000 f86a 	bl	8005b80 <__kernel_cos>
 8005aac:	e7f1      	b.n	8005a92 <cos+0x6a>
 8005aae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ab2:	ed9d 0b00 	vldr	d0, [sp]
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f000 f92a 	bl	8005d10 <__kernel_sin>
 8005abc:	e7e0      	b.n	8005a80 <cos+0x58>
 8005abe:	bf00      	nop
	...
 8005ac8:	3fe921fb 	.word	0x3fe921fb
 8005acc:	7fefffff 	.word	0x7fefffff

08005ad0 <sin>:
 8005ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ad2:	ec53 2b10 	vmov	r2, r3, d0
 8005ad6:	4828      	ldr	r0, [pc, #160]	; (8005b78 <sin+0xa8>)
 8005ad8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005adc:	4281      	cmp	r1, r0
 8005ade:	dc07      	bgt.n	8005af0 <sin+0x20>
 8005ae0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005b70 <sin+0xa0>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	b005      	add	sp, #20
 8005ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aec:	f000 b910 	b.w	8005d10 <__kernel_sin>
 8005af0:	4822      	ldr	r0, [pc, #136]	; (8005b7c <sin+0xac>)
 8005af2:	4281      	cmp	r1, r0
 8005af4:	dd09      	ble.n	8005b0a <sin+0x3a>
 8005af6:	ee10 0a10 	vmov	r0, s0
 8005afa:	4619      	mov	r1, r3
 8005afc:	f7fa fbe4 	bl	80002c8 <__aeabi_dsub>
 8005b00:	ec41 0b10 	vmov	d0, r0, r1
 8005b04:	b005      	add	sp, #20
 8005b06:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b0a:	4668      	mov	r0, sp
 8005b0c:	f000 f9c0 	bl	8005e90 <__ieee754_rem_pio2>
 8005b10:	f000 0003 	and.w	r0, r0, #3
 8005b14:	2801      	cmp	r0, #1
 8005b16:	d00c      	beq.n	8005b32 <sin+0x62>
 8005b18:	2802      	cmp	r0, #2
 8005b1a:	d011      	beq.n	8005b40 <sin+0x70>
 8005b1c:	b9f0      	cbnz	r0, 8005b5c <sin+0x8c>
 8005b1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b22:	ed9d 0b00 	vldr	d0, [sp]
 8005b26:	2001      	movs	r0, #1
 8005b28:	f000 f8f2 	bl	8005d10 <__kernel_sin>
 8005b2c:	ec51 0b10 	vmov	r0, r1, d0
 8005b30:	e7e6      	b.n	8005b00 <sin+0x30>
 8005b32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b36:	ed9d 0b00 	vldr	d0, [sp]
 8005b3a:	f000 f821 	bl	8005b80 <__kernel_cos>
 8005b3e:	e7f5      	b.n	8005b2c <sin+0x5c>
 8005b40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b44:	ed9d 0b00 	vldr	d0, [sp]
 8005b48:	2001      	movs	r0, #1
 8005b4a:	f000 f8e1 	bl	8005d10 <__kernel_sin>
 8005b4e:	ec53 2b10 	vmov	r2, r3, d0
 8005b52:	ee10 0a10 	vmov	r0, s0
 8005b56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005b5a:	e7d1      	b.n	8005b00 <sin+0x30>
 8005b5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b60:	ed9d 0b00 	vldr	d0, [sp]
 8005b64:	f000 f80c 	bl	8005b80 <__kernel_cos>
 8005b68:	e7f1      	b.n	8005b4e <sin+0x7e>
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w
	...
 8005b78:	3fe921fb 	.word	0x3fe921fb
 8005b7c:	7fefffff 	.word	0x7fefffff

08005b80 <__kernel_cos>:
 8005b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	ec57 6b10 	vmov	r6, r7, d0
 8005b88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005b8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005b90:	ed8d 1b00 	vstr	d1, [sp]
 8005b94:	da07      	bge.n	8005ba6 <__kernel_cos+0x26>
 8005b96:	ee10 0a10 	vmov	r0, s0
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa fffc 	bl	8000b98 <__aeabi_d2iz>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	f000 8088 	beq.w	8005cb6 <__kernel_cos+0x136>
 8005ba6:	4632      	mov	r2, r6
 8005ba8:	463b      	mov	r3, r7
 8005baa:	4630      	mov	r0, r6
 8005bac:	4639      	mov	r1, r7
 8005bae:	f7fa fd43 	bl	8000638 <__aeabi_dmul>
 8005bb2:	4b51      	ldr	r3, [pc, #324]	; (8005cf8 <__kernel_cos+0x178>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	460d      	mov	r5, r1
 8005bba:	f7fa fd3d 	bl	8000638 <__aeabi_dmul>
 8005bbe:	a340      	add	r3, pc, #256	; (adr r3, 8005cc0 <__kernel_cos+0x140>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	4682      	mov	sl, r0
 8005bc6:	468b      	mov	fp, r1
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f7fa fd34 	bl	8000638 <__aeabi_dmul>
 8005bd0:	a33d      	add	r3, pc, #244	; (adr r3, 8005cc8 <__kernel_cos+0x148>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fb79 	bl	80002cc <__adddf3>
 8005bda:	4622      	mov	r2, r4
 8005bdc:	462b      	mov	r3, r5
 8005bde:	f7fa fd2b 	bl	8000638 <__aeabi_dmul>
 8005be2:	a33b      	add	r3, pc, #236	; (adr r3, 8005cd0 <__kernel_cos+0x150>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fb6e 	bl	80002c8 <__aeabi_dsub>
 8005bec:	4622      	mov	r2, r4
 8005bee:	462b      	mov	r3, r5
 8005bf0:	f7fa fd22 	bl	8000638 <__aeabi_dmul>
 8005bf4:	a338      	add	r3, pc, #224	; (adr r3, 8005cd8 <__kernel_cos+0x158>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fb67 	bl	80002cc <__adddf3>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f7fa fd19 	bl	8000638 <__aeabi_dmul>
 8005c06:	a336      	add	r3, pc, #216	; (adr r3, 8005ce0 <__kernel_cos+0x160>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa fb5c 	bl	80002c8 <__aeabi_dsub>
 8005c10:	4622      	mov	r2, r4
 8005c12:	462b      	mov	r3, r5
 8005c14:	f7fa fd10 	bl	8000638 <__aeabi_dmul>
 8005c18:	a333      	add	r3, pc, #204	; (adr r3, 8005ce8 <__kernel_cos+0x168>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fb55 	bl	80002cc <__adddf3>
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f7fa fd07 	bl	8000638 <__aeabi_dmul>
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	f7fa fd03 	bl	8000638 <__aeabi_dmul>
 8005c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c36:	4604      	mov	r4, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	f7fa fcfb 	bl	8000638 <__aeabi_dmul>
 8005c42:	460b      	mov	r3, r1
 8005c44:	4602      	mov	r2, r0
 8005c46:	4629      	mov	r1, r5
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7fa fb3d 	bl	80002c8 <__aeabi_dsub>
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <__kernel_cos+0x17c>)
 8005c50:	4598      	cmp	r8, r3
 8005c52:	4606      	mov	r6, r0
 8005c54:	460f      	mov	r7, r1
 8005c56:	dc10      	bgt.n	8005c7a <__kernel_cos+0xfa>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	4659      	mov	r1, fp
 8005c60:	f7fa fb32 	bl	80002c8 <__aeabi_dsub>
 8005c64:	460b      	mov	r3, r1
 8005c66:	4926      	ldr	r1, [pc, #152]	; (8005d00 <__kernel_cos+0x180>)
 8005c68:	4602      	mov	r2, r0
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f7fa fb2c 	bl	80002c8 <__aeabi_dsub>
 8005c70:	ec41 0b10 	vmov	d0, r0, r1
 8005c74:	b003      	add	sp, #12
 8005c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7a:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <__kernel_cos+0x184>)
 8005c7c:	4920      	ldr	r1, [pc, #128]	; (8005d00 <__kernel_cos+0x180>)
 8005c7e:	4598      	cmp	r8, r3
 8005c80:	bfcc      	ite	gt
 8005c82:	4d21      	ldrgt	r5, [pc, #132]	; (8005d08 <__kernel_cos+0x188>)
 8005c84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005c88:	2400      	movs	r4, #0
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f7fa fb1a 	bl	80002c8 <__aeabi_dsub>
 8005c94:	4622      	mov	r2, r4
 8005c96:	4680      	mov	r8, r0
 8005c98:	4689      	mov	r9, r1
 8005c9a:	462b      	mov	r3, r5
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	f7fa fb12 	bl	80002c8 <__aeabi_dsub>
 8005ca4:	4632      	mov	r2, r6
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	f7fa fb0e 	bl	80002c8 <__aeabi_dsub>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	e7da      	b.n	8005c6c <__kernel_cos+0xec>
 8005cb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005cf0 <__kernel_cos+0x170>
 8005cba:	e7db      	b.n	8005c74 <__kernel_cos+0xf4>
 8005cbc:	f3af 8000 	nop.w
 8005cc0:	be8838d4 	.word	0xbe8838d4
 8005cc4:	bda8fae9 	.word	0xbda8fae9
 8005cc8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ccc:	3e21ee9e 	.word	0x3e21ee9e
 8005cd0:	809c52ad 	.word	0x809c52ad
 8005cd4:	3e927e4f 	.word	0x3e927e4f
 8005cd8:	19cb1590 	.word	0x19cb1590
 8005cdc:	3efa01a0 	.word	0x3efa01a0
 8005ce0:	16c15177 	.word	0x16c15177
 8005ce4:	3f56c16c 	.word	0x3f56c16c
 8005ce8:	5555554c 	.word	0x5555554c
 8005cec:	3fa55555 	.word	0x3fa55555
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	3ff00000 	.word	0x3ff00000
 8005cf8:	3fe00000 	.word	0x3fe00000
 8005cfc:	3fd33332 	.word	0x3fd33332
 8005d00:	3ff00000 	.word	0x3ff00000
 8005d04:	3fe90000 	.word	0x3fe90000
 8005d08:	3fd20000 	.word	0x3fd20000
 8005d0c:	00000000 	.word	0x00000000

08005d10 <__kernel_sin>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	ed2d 8b04 	vpush	{d8-d9}
 8005d18:	eeb0 8a41 	vmov.f32	s16, s2
 8005d1c:	eef0 8a61 	vmov.f32	s17, s3
 8005d20:	ec55 4b10 	vmov	r4, r5, d0
 8005d24:	b083      	sub	sp, #12
 8005d26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d2e:	9001      	str	r0, [sp, #4]
 8005d30:	da06      	bge.n	8005d40 <__kernel_sin+0x30>
 8005d32:	ee10 0a10 	vmov	r0, s0
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa ff2e 	bl	8000b98 <__aeabi_d2iz>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d051      	beq.n	8005de4 <__kernel_sin+0xd4>
 8005d40:	4622      	mov	r2, r4
 8005d42:	462b      	mov	r3, r5
 8005d44:	4620      	mov	r0, r4
 8005d46:	4629      	mov	r1, r5
 8005d48:	f7fa fc76 	bl	8000638 <__aeabi_dmul>
 8005d4c:	4682      	mov	sl, r0
 8005d4e:	468b      	mov	fp, r1
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fc6e 	bl	8000638 <__aeabi_dmul>
 8005d5c:	a341      	add	r3, pc, #260	; (adr r3, 8005e64 <__kernel_sin+0x154>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	4680      	mov	r8, r0
 8005d64:	4689      	mov	r9, r1
 8005d66:	4650      	mov	r0, sl
 8005d68:	4659      	mov	r1, fp
 8005d6a:	f7fa fc65 	bl	8000638 <__aeabi_dmul>
 8005d6e:	a33f      	add	r3, pc, #252	; (adr r3, 8005e6c <__kernel_sin+0x15c>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa faa8 	bl	80002c8 <__aeabi_dsub>
 8005d78:	4652      	mov	r2, sl
 8005d7a:	465b      	mov	r3, fp
 8005d7c:	f7fa fc5c 	bl	8000638 <__aeabi_dmul>
 8005d80:	a33c      	add	r3, pc, #240	; (adr r3, 8005e74 <__kernel_sin+0x164>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa faa1 	bl	80002cc <__adddf3>
 8005d8a:	4652      	mov	r2, sl
 8005d8c:	465b      	mov	r3, fp
 8005d8e:	f7fa fc53 	bl	8000638 <__aeabi_dmul>
 8005d92:	a33a      	add	r3, pc, #232	; (adr r3, 8005e7c <__kernel_sin+0x16c>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fa96 	bl	80002c8 <__aeabi_dsub>
 8005d9c:	4652      	mov	r2, sl
 8005d9e:	465b      	mov	r3, fp
 8005da0:	f7fa fc4a 	bl	8000638 <__aeabi_dmul>
 8005da4:	a337      	add	r3, pc, #220	; (adr r3, 8005e84 <__kernel_sin+0x174>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fa8f 	bl	80002cc <__adddf3>
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	4606      	mov	r6, r0
 8005db2:	460f      	mov	r7, r1
 8005db4:	b9eb      	cbnz	r3, 8005df2 <__kernel_sin+0xe2>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	f7fa fc3b 	bl	8000638 <__aeabi_dmul>
 8005dc2:	a325      	add	r3, pc, #148	; (adr r3, 8005e58 <__kernel_sin+0x148>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f7fa fa7e 	bl	80002c8 <__aeabi_dsub>
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	f7fa fc32 	bl	8000638 <__aeabi_dmul>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7fa fa76 	bl	80002cc <__adddf3>
 8005de0:	4604      	mov	r4, r0
 8005de2:	460d      	mov	r5, r1
 8005de4:	ec45 4b10 	vmov	d0, r4, r5
 8005de8:	b003      	add	sp, #12
 8005dea:	ecbd 8b04 	vpop	{d8-d9}
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <__kernel_sin+0x150>)
 8005df4:	ec51 0b18 	vmov	r0, r1, d8
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f7fa fc1d 	bl	8000638 <__aeabi_dmul>
 8005dfe:	4632      	mov	r2, r6
 8005e00:	ec41 0b19 	vmov	d9, r0, r1
 8005e04:	463b      	mov	r3, r7
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa fc15 	bl	8000638 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	ec51 0b19 	vmov	r0, r1, d9
 8005e16:	f7fa fa57 	bl	80002c8 <__aeabi_dsub>
 8005e1a:	4652      	mov	r2, sl
 8005e1c:	465b      	mov	r3, fp
 8005e1e:	f7fa fc0b 	bl	8000638 <__aeabi_dmul>
 8005e22:	ec53 2b18 	vmov	r2, r3, d8
 8005e26:	f7fa fa4f 	bl	80002c8 <__aeabi_dsub>
 8005e2a:	a30b      	add	r3, pc, #44	; (adr r3, 8005e58 <__kernel_sin+0x148>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	4606      	mov	r6, r0
 8005e32:	460f      	mov	r7, r1
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa fbfe 	bl	8000638 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4630      	mov	r0, r6
 8005e42:	4639      	mov	r1, r7
 8005e44:	f7fa fa42 	bl	80002cc <__adddf3>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f7fa fa3a 	bl	80002c8 <__aeabi_dsub>
 8005e54:	e7c4      	b.n	8005de0 <__kernel_sin+0xd0>
 8005e56:	bf00      	nop
 8005e58:	55555549 	.word	0x55555549
 8005e5c:	3fc55555 	.word	0x3fc55555
 8005e60:	3fe00000 	.word	0x3fe00000
 8005e64:	5acfd57c 	.word	0x5acfd57c
 8005e68:	3de5d93a 	.word	0x3de5d93a
 8005e6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e70:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e74:	57b1fe7d 	.word	0x57b1fe7d
 8005e78:	3ec71de3 	.word	0x3ec71de3
 8005e7c:	19c161d5 	.word	0x19c161d5
 8005e80:	3f2a01a0 	.word	0x3f2a01a0
 8005e84:	1110f8a6 	.word	0x1110f8a6
 8005e88:	3f811111 	.word	0x3f811111
 8005e8c:	00000000 	.word	0x00000000

08005e90 <__ieee754_rem_pio2>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	ed2d 8b02 	vpush	{d8}
 8005e98:	ec55 4b10 	vmov	r4, r5, d0
 8005e9c:	4bca      	ldr	r3, [pc, #808]	; (80061c8 <__ieee754_rem_pio2+0x338>)
 8005e9e:	b08b      	sub	sp, #44	; 0x2c
 8005ea0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005ea4:	4598      	cmp	r8, r3
 8005ea6:	4682      	mov	sl, r0
 8005ea8:	9502      	str	r5, [sp, #8]
 8005eaa:	dc08      	bgt.n	8005ebe <__ieee754_rem_pio2+0x2e>
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	ed80 0b00 	vstr	d0, [r0]
 8005eb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005eb8:	f04f 0b00 	mov.w	fp, #0
 8005ebc:	e028      	b.n	8005f10 <__ieee754_rem_pio2+0x80>
 8005ebe:	4bc3      	ldr	r3, [pc, #780]	; (80061cc <__ieee754_rem_pio2+0x33c>)
 8005ec0:	4598      	cmp	r8, r3
 8005ec2:	dc78      	bgt.n	8005fb6 <__ieee754_rem_pio2+0x126>
 8005ec4:	9b02      	ldr	r3, [sp, #8]
 8005ec6:	4ec2      	ldr	r6, [pc, #776]	; (80061d0 <__ieee754_rem_pio2+0x340>)
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	ee10 0a10 	vmov	r0, s0
 8005ece:	a3b0      	add	r3, pc, #704	; (adr r3, 8006190 <__ieee754_rem_pio2+0x300>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	dd39      	ble.n	8005f4c <__ieee754_rem_pio2+0xbc>
 8005ed8:	f7fa f9f6 	bl	80002c8 <__aeabi_dsub>
 8005edc:	45b0      	cmp	r8, r6
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	d01b      	beq.n	8005f1c <__ieee754_rem_pio2+0x8c>
 8005ee4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006198 <__ieee754_rem_pio2+0x308>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa f9ed 	bl	80002c8 <__aeabi_dsub>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	e9ca 2300 	strd	r2, r3, [sl]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	4629      	mov	r1, r5
 8005efa:	f7fa f9e5 	bl	80002c8 <__aeabi_dsub>
 8005efe:	a3a6      	add	r3, pc, #664	; (adr r3, 8006198 <__ieee754_rem_pio2+0x308>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa f9e0 	bl	80002c8 <__aeabi_dsub>
 8005f08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005f0c:	f04f 0b01 	mov.w	fp, #1
 8005f10:	4658      	mov	r0, fp
 8005f12:	b00b      	add	sp, #44	; 0x2c
 8005f14:	ecbd 8b02 	vpop	{d8}
 8005f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1c:	a3a0      	add	r3, pc, #640	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x310>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f7fa f9d1 	bl	80002c8 <__aeabi_dsub>
 8005f26:	a3a0      	add	r3, pc, #640	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x318>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	460d      	mov	r5, r1
 8005f30:	f7fa f9ca 	bl	80002c8 <__aeabi_dsub>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	e9ca 2300 	strd	r2, r3, [sl]
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa f9c2 	bl	80002c8 <__aeabi_dsub>
 8005f44:	a398      	add	r3, pc, #608	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x318>)
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	e7db      	b.n	8005f04 <__ieee754_rem_pio2+0x74>
 8005f4c:	f7fa f9be 	bl	80002cc <__adddf3>
 8005f50:	45b0      	cmp	r8, r6
 8005f52:	4604      	mov	r4, r0
 8005f54:	460d      	mov	r5, r1
 8005f56:	d016      	beq.n	8005f86 <__ieee754_rem_pio2+0xf6>
 8005f58:	a38f      	add	r3, pc, #572	; (adr r3, 8006198 <__ieee754_rem_pio2+0x308>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa f9b5 	bl	80002cc <__adddf3>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	e9ca 2300 	strd	r2, r3, [sl]
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f7fa f9ab 	bl	80002c8 <__aeabi_dsub>
 8005f72:	a389      	add	r3, pc, #548	; (adr r3, 8006198 <__ieee754_rem_pio2+0x308>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa f9a8 	bl	80002cc <__adddf3>
 8005f7c:	f04f 3bff 	mov.w	fp, #4294967295
 8005f80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005f84:	e7c4      	b.n	8005f10 <__ieee754_rem_pio2+0x80>
 8005f86:	a386      	add	r3, pc, #536	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x310>)
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f7fa f99e 	bl	80002cc <__adddf3>
 8005f90:	a385      	add	r3, pc, #532	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x318>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	4604      	mov	r4, r0
 8005f98:	460d      	mov	r5, r1
 8005f9a:	f7fa f997 	bl	80002cc <__adddf3>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	e9ca 2300 	strd	r2, r3, [sl]
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f7fa f98d 	bl	80002c8 <__aeabi_dsub>
 8005fae:	a37e      	add	r3, pc, #504	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x318>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	e7e0      	b.n	8005f78 <__ieee754_rem_pio2+0xe8>
 8005fb6:	4b87      	ldr	r3, [pc, #540]	; (80061d4 <__ieee754_rem_pio2+0x344>)
 8005fb8:	4598      	cmp	r8, r3
 8005fba:	f300 80d8 	bgt.w	800616e <__ieee754_rem_pio2+0x2de>
 8005fbe:	f000 f96d 	bl	800629c <fabs>
 8005fc2:	ec55 4b10 	vmov	r4, r5, d0
 8005fc6:	ee10 0a10 	vmov	r0, s0
 8005fca:	a379      	add	r3, pc, #484	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x320>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa fb31 	bl	8000638 <__aeabi_dmul>
 8005fd6:	4b80      	ldr	r3, [pc, #512]	; (80061d8 <__ieee754_rem_pio2+0x348>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f7fa f977 	bl	80002cc <__adddf3>
 8005fde:	f7fa fddb 	bl	8000b98 <__aeabi_d2iz>
 8005fe2:	4683      	mov	fp, r0
 8005fe4:	f7fa fabe 	bl	8000564 <__aeabi_i2d>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	ec43 2b18 	vmov	d8, r2, r3
 8005ff0:	a367      	add	r3, pc, #412	; (adr r3, 8006190 <__ieee754_rem_pio2+0x300>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f7fa fb1f 	bl	8000638 <__aeabi_dmul>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa f961 	bl	80002c8 <__aeabi_dsub>
 8006006:	a364      	add	r3, pc, #400	; (adr r3, 8006198 <__ieee754_rem_pio2+0x308>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	4606      	mov	r6, r0
 800600e:	460f      	mov	r7, r1
 8006010:	ec51 0b18 	vmov	r0, r1, d8
 8006014:	f7fa fb10 	bl	8000638 <__aeabi_dmul>
 8006018:	f1bb 0f1f 	cmp.w	fp, #31
 800601c:	4604      	mov	r4, r0
 800601e:	460d      	mov	r5, r1
 8006020:	dc0d      	bgt.n	800603e <__ieee754_rem_pio2+0x1ae>
 8006022:	4b6e      	ldr	r3, [pc, #440]	; (80061dc <__ieee754_rem_pio2+0x34c>)
 8006024:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	4543      	cmp	r3, r8
 800602e:	d006      	beq.n	800603e <__ieee754_rem_pio2+0x1ae>
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	4630      	mov	r0, r6
 8006036:	4639      	mov	r1, r7
 8006038:	f7fa f946 	bl	80002c8 <__aeabi_dsub>
 800603c:	e00e      	b.n	800605c <__ieee754_rem_pio2+0x1cc>
 800603e:	462b      	mov	r3, r5
 8006040:	4622      	mov	r2, r4
 8006042:	4630      	mov	r0, r6
 8006044:	4639      	mov	r1, r7
 8006046:	f7fa f93f 	bl	80002c8 <__aeabi_dsub>
 800604a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006054:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006058:	2b10      	cmp	r3, #16
 800605a:	dc02      	bgt.n	8006062 <__ieee754_rem_pio2+0x1d2>
 800605c:	e9ca 0100 	strd	r0, r1, [sl]
 8006060:	e039      	b.n	80060d6 <__ieee754_rem_pio2+0x246>
 8006062:	a34f      	add	r3, pc, #316	; (adr r3, 80061a0 <__ieee754_rem_pio2+0x310>)
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	ec51 0b18 	vmov	r0, r1, d8
 800606c:	f7fa fae4 	bl	8000638 <__aeabi_dmul>
 8006070:	4604      	mov	r4, r0
 8006072:	460d      	mov	r5, r1
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4630      	mov	r0, r6
 800607a:	4639      	mov	r1, r7
 800607c:	f7fa f924 	bl	80002c8 <__aeabi_dsub>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4680      	mov	r8, r0
 8006086:	4689      	mov	r9, r1
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa f91c 	bl	80002c8 <__aeabi_dsub>
 8006090:	4622      	mov	r2, r4
 8006092:	462b      	mov	r3, r5
 8006094:	f7fa f918 	bl	80002c8 <__aeabi_dsub>
 8006098:	a343      	add	r3, pc, #268	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x318>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	4604      	mov	r4, r0
 80060a0:	460d      	mov	r5, r1
 80060a2:	ec51 0b18 	vmov	r0, r1, d8
 80060a6:	f7fa fac7 	bl	8000638 <__aeabi_dmul>
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	f7fa f90b 	bl	80002c8 <__aeabi_dsub>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4604      	mov	r4, r0
 80060b8:	460d      	mov	r5, r1
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa f903 	bl	80002c8 <__aeabi_dsub>
 80060c2:	9a03      	ldr	r2, [sp, #12]
 80060c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b31      	cmp	r3, #49	; 0x31
 80060cc:	dc24      	bgt.n	8006118 <__ieee754_rem_pio2+0x288>
 80060ce:	e9ca 0100 	strd	r0, r1, [sl]
 80060d2:	4646      	mov	r6, r8
 80060d4:	464f      	mov	r7, r9
 80060d6:	e9da 8900 	ldrd	r8, r9, [sl]
 80060da:	4630      	mov	r0, r6
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa f8f1 	bl	80002c8 <__aeabi_dsub>
 80060e6:	462b      	mov	r3, r5
 80060e8:	4622      	mov	r2, r4
 80060ea:	f7fa f8ed 	bl	80002c8 <__aeabi_dsub>
 80060ee:	9b02      	ldr	r3, [sp, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80060f6:	f6bf af0b 	bge.w	8005f10 <__ieee754_rem_pio2+0x80>
 80060fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80060fe:	f8ca 3004 	str.w	r3, [sl, #4]
 8006102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006106:	f8ca 8000 	str.w	r8, [sl]
 800610a:	f8ca 0008 	str.w	r0, [sl, #8]
 800610e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006112:	f1cb 0b00 	rsb	fp, fp, #0
 8006116:	e6fb      	b.n	8005f10 <__ieee754_rem_pio2+0x80>
 8006118:	a327      	add	r3, pc, #156	; (adr r3, 80061b8 <__ieee754_rem_pio2+0x328>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	ec51 0b18 	vmov	r0, r1, d8
 8006122:	f7fa fa89 	bl	8000638 <__aeabi_dmul>
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa f8c9 	bl	80002c8 <__aeabi_dsub>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4606      	mov	r6, r0
 800613c:	460f      	mov	r7, r1
 800613e:	4640      	mov	r0, r8
 8006140:	4649      	mov	r1, r9
 8006142:	f7fa f8c1 	bl	80002c8 <__aeabi_dsub>
 8006146:	4622      	mov	r2, r4
 8006148:	462b      	mov	r3, r5
 800614a:	f7fa f8bd 	bl	80002c8 <__aeabi_dsub>
 800614e:	a31c      	add	r3, pc, #112	; (adr r3, 80061c0 <__ieee754_rem_pio2+0x330>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	4604      	mov	r4, r0
 8006156:	460d      	mov	r5, r1
 8006158:	ec51 0b18 	vmov	r0, r1, d8
 800615c:	f7fa fa6c 	bl	8000638 <__aeabi_dmul>
 8006160:	4622      	mov	r2, r4
 8006162:	462b      	mov	r3, r5
 8006164:	f7fa f8b0 	bl	80002c8 <__aeabi_dsub>
 8006168:	4604      	mov	r4, r0
 800616a:	460d      	mov	r5, r1
 800616c:	e760      	b.n	8006030 <__ieee754_rem_pio2+0x1a0>
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <__ieee754_rem_pio2+0x350>)
 8006170:	4598      	cmp	r8, r3
 8006172:	dd37      	ble.n	80061e4 <__ieee754_rem_pio2+0x354>
 8006174:	ee10 2a10 	vmov	r2, s0
 8006178:	462b      	mov	r3, r5
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f7fa f8a3 	bl	80002c8 <__aeabi_dsub>
 8006182:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006186:	e9ca 0100 	strd	r0, r1, [sl]
 800618a:	e695      	b.n	8005eb8 <__ieee754_rem_pio2+0x28>
 800618c:	f3af 8000 	nop.w
 8006190:	54400000 	.word	0x54400000
 8006194:	3ff921fb 	.word	0x3ff921fb
 8006198:	1a626331 	.word	0x1a626331
 800619c:	3dd0b461 	.word	0x3dd0b461
 80061a0:	1a600000 	.word	0x1a600000
 80061a4:	3dd0b461 	.word	0x3dd0b461
 80061a8:	2e037073 	.word	0x2e037073
 80061ac:	3ba3198a 	.word	0x3ba3198a
 80061b0:	6dc9c883 	.word	0x6dc9c883
 80061b4:	3fe45f30 	.word	0x3fe45f30
 80061b8:	2e000000 	.word	0x2e000000
 80061bc:	3ba3198a 	.word	0x3ba3198a
 80061c0:	252049c1 	.word	0x252049c1
 80061c4:	397b839a 	.word	0x397b839a
 80061c8:	3fe921fb 	.word	0x3fe921fb
 80061cc:	4002d97b 	.word	0x4002d97b
 80061d0:	3ff921fb 	.word	0x3ff921fb
 80061d4:	413921fb 	.word	0x413921fb
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	0800df48 	.word	0x0800df48
 80061e0:	7fefffff 	.word	0x7fefffff
 80061e4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80061e8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80061ec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80061f0:	4620      	mov	r0, r4
 80061f2:	460d      	mov	r5, r1
 80061f4:	f7fa fcd0 	bl	8000b98 <__aeabi_d2iz>
 80061f8:	f7fa f9b4 	bl	8000564 <__aeabi_i2d>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006208:	f7fa f85e 	bl	80002c8 <__aeabi_dsub>
 800620c:	4b21      	ldr	r3, [pc, #132]	; (8006294 <__ieee754_rem_pio2+0x404>)
 800620e:	2200      	movs	r2, #0
 8006210:	f7fa fa12 	bl	8000638 <__aeabi_dmul>
 8006214:	460d      	mov	r5, r1
 8006216:	4604      	mov	r4, r0
 8006218:	f7fa fcbe 	bl	8000b98 <__aeabi_d2iz>
 800621c:	f7fa f9a2 	bl	8000564 <__aeabi_i2d>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800622c:	f7fa f84c 	bl	80002c8 <__aeabi_dsub>
 8006230:	4b18      	ldr	r3, [pc, #96]	; (8006294 <__ieee754_rem_pio2+0x404>)
 8006232:	2200      	movs	r2, #0
 8006234:	f7fa fa00 	bl	8000638 <__aeabi_dmul>
 8006238:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800623c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006240:	2703      	movs	r7, #3
 8006242:	2400      	movs	r4, #0
 8006244:	2500      	movs	r5, #0
 8006246:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800624a:	4622      	mov	r2, r4
 800624c:	462b      	mov	r3, r5
 800624e:	46b9      	mov	r9, r7
 8006250:	3f01      	subs	r7, #1
 8006252:	f7fa fc59 	bl	8000b08 <__aeabi_dcmpeq>
 8006256:	2800      	cmp	r0, #0
 8006258:	d1f5      	bne.n	8006246 <__ieee754_rem_pio2+0x3b6>
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <__ieee754_rem_pio2+0x408>)
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	2302      	movs	r3, #2
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	4632      	mov	r2, r6
 8006264:	464b      	mov	r3, r9
 8006266:	4651      	mov	r1, sl
 8006268:	a804      	add	r0, sp, #16
 800626a:	f000 f821 	bl	80062b0 <__kernel_rem_pio2>
 800626e:	9b02      	ldr	r3, [sp, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	4683      	mov	fp, r0
 8006274:	f6bf ae4c 	bge.w	8005f10 <__ieee754_rem_pio2+0x80>
 8006278:	e9da 2100 	ldrd	r2, r1, [sl]
 800627c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006280:	e9ca 2300 	strd	r2, r3, [sl]
 8006284:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800628c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006290:	e73f      	b.n	8006112 <__ieee754_rem_pio2+0x282>
 8006292:	bf00      	nop
 8006294:	41700000 	.word	0x41700000
 8006298:	0800dfc8 	.word	0x0800dfc8

0800629c <fabs>:
 800629c:	ec51 0b10 	vmov	r0, r1, d0
 80062a0:	ee10 2a10 	vmov	r2, s0
 80062a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80062a8:	ec43 2b10 	vmov	d0, r2, r3
 80062ac:	4770      	bx	lr
	...

080062b0 <__kernel_rem_pio2>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	ed2d 8b02 	vpush	{d8}
 80062b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80062bc:	f112 0f14 	cmn.w	r2, #20
 80062c0:	9306      	str	r3, [sp, #24]
 80062c2:	9104      	str	r1, [sp, #16]
 80062c4:	4bc2      	ldr	r3, [pc, #776]	; (80065d0 <__kernel_rem_pio2+0x320>)
 80062c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80062c8:	9009      	str	r0, [sp, #36]	; 0x24
 80062ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	9b06      	ldr	r3, [sp, #24]
 80062d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062d6:	bfa8      	it	ge
 80062d8:	1ed4      	subge	r4, r2, #3
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	bfb2      	itee	lt
 80062de:	2400      	movlt	r4, #0
 80062e0:	2318      	movge	r3, #24
 80062e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80062e6:	f06f 0317 	mvn.w	r3, #23
 80062ea:	fb04 3303 	mla	r3, r4, r3, r3
 80062ee:	eb03 0a02 	add.w	sl, r3, r2
 80062f2:	9b00      	ldr	r3, [sp, #0]
 80062f4:	9a05      	ldr	r2, [sp, #20]
 80062f6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80065c0 <__kernel_rem_pio2+0x310>
 80062fa:	eb03 0802 	add.w	r8, r3, r2
 80062fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006300:	1aa7      	subs	r7, r4, r2
 8006302:	ae20      	add	r6, sp, #128	; 0x80
 8006304:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006308:	2500      	movs	r5, #0
 800630a:	4545      	cmp	r5, r8
 800630c:	dd13      	ble.n	8006336 <__kernel_rem_pio2+0x86>
 800630e:	9b06      	ldr	r3, [sp, #24]
 8006310:	aa20      	add	r2, sp, #128	; 0x80
 8006312:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006316:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800631a:	f04f 0800 	mov.w	r8, #0
 800631e:	9b00      	ldr	r3, [sp, #0]
 8006320:	4598      	cmp	r8, r3
 8006322:	dc31      	bgt.n	8006388 <__kernel_rem_pio2+0xd8>
 8006324:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80065c0 <__kernel_rem_pio2+0x310>
 8006328:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800632c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006330:	462f      	mov	r7, r5
 8006332:	2600      	movs	r6, #0
 8006334:	e01b      	b.n	800636e <__kernel_rem_pio2+0xbe>
 8006336:	42ef      	cmn	r7, r5
 8006338:	d407      	bmi.n	800634a <__kernel_rem_pio2+0x9a>
 800633a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800633e:	f7fa f911 	bl	8000564 <__aeabi_i2d>
 8006342:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006346:	3501      	adds	r5, #1
 8006348:	e7df      	b.n	800630a <__kernel_rem_pio2+0x5a>
 800634a:	ec51 0b18 	vmov	r0, r1, d8
 800634e:	e7f8      	b.n	8006342 <__kernel_rem_pio2+0x92>
 8006350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006354:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006358:	f7fa f96e 	bl	8000638 <__aeabi_dmul>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006364:	f7f9 ffb2 	bl	80002cc <__adddf3>
 8006368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800636c:	3601      	adds	r6, #1
 800636e:	9b05      	ldr	r3, [sp, #20]
 8006370:	429e      	cmp	r6, r3
 8006372:	f1a7 0708 	sub.w	r7, r7, #8
 8006376:	ddeb      	ble.n	8006350 <__kernel_rem_pio2+0xa0>
 8006378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800637c:	f108 0801 	add.w	r8, r8, #1
 8006380:	ecab 7b02 	vstmia	fp!, {d7}
 8006384:	3508      	adds	r5, #8
 8006386:	e7ca      	b.n	800631e <__kernel_rem_pio2+0x6e>
 8006388:	9b00      	ldr	r3, [sp, #0]
 800638a:	aa0c      	add	r2, sp, #48	; 0x30
 800638c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006390:	930b      	str	r3, [sp, #44]	; 0x2c
 8006392:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006394:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006398:	9c00      	ldr	r4, [sp, #0]
 800639a:	930a      	str	r3, [sp, #40]	; 0x28
 800639c:	00e3      	lsls	r3, r4, #3
 800639e:	9308      	str	r3, [sp, #32]
 80063a0:	ab98      	add	r3, sp, #608	; 0x260
 80063a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80063aa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80063ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80063b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80063b4:	46c3      	mov	fp, r8
 80063b6:	46a1      	mov	r9, r4
 80063b8:	f1b9 0f00 	cmp.w	r9, #0
 80063bc:	f1a5 0508 	sub.w	r5, r5, #8
 80063c0:	dc77      	bgt.n	80064b2 <__kernel_rem_pio2+0x202>
 80063c2:	ec47 6b10 	vmov	d0, r6, r7
 80063c6:	4650      	mov	r0, sl
 80063c8:	f000 fac2 	bl	8006950 <scalbn>
 80063cc:	ec57 6b10 	vmov	r6, r7, d0
 80063d0:	2200      	movs	r2, #0
 80063d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80063d6:	ee10 0a10 	vmov	r0, s0
 80063da:	4639      	mov	r1, r7
 80063dc:	f7fa f92c 	bl	8000638 <__aeabi_dmul>
 80063e0:	ec41 0b10 	vmov	d0, r0, r1
 80063e4:	f000 fb34 	bl	8006a50 <floor>
 80063e8:	4b7a      	ldr	r3, [pc, #488]	; (80065d4 <__kernel_rem_pio2+0x324>)
 80063ea:	ec51 0b10 	vmov	r0, r1, d0
 80063ee:	2200      	movs	r2, #0
 80063f0:	f7fa f922 	bl	8000638 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7f9 ff64 	bl	80002c8 <__aeabi_dsub>
 8006400:	460f      	mov	r7, r1
 8006402:	4606      	mov	r6, r0
 8006404:	f7fa fbc8 	bl	8000b98 <__aeabi_d2iz>
 8006408:	9002      	str	r0, [sp, #8]
 800640a:	f7fa f8ab 	bl	8000564 <__aeabi_i2d>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7f9 ff57 	bl	80002c8 <__aeabi_dsub>
 800641a:	f1ba 0f00 	cmp.w	sl, #0
 800641e:	4606      	mov	r6, r0
 8006420:	460f      	mov	r7, r1
 8006422:	dd6d      	ble.n	8006500 <__kernel_rem_pio2+0x250>
 8006424:	1e61      	subs	r1, r4, #1
 8006426:	ab0c      	add	r3, sp, #48	; 0x30
 8006428:	9d02      	ldr	r5, [sp, #8]
 800642a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800642e:	f1ca 0018 	rsb	r0, sl, #24
 8006432:	fa43 f200 	asr.w	r2, r3, r0
 8006436:	4415      	add	r5, r2
 8006438:	4082      	lsls	r2, r0
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	aa0c      	add	r2, sp, #48	; 0x30
 800643e:	9502      	str	r5, [sp, #8]
 8006440:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006444:	f1ca 0217 	rsb	r2, sl, #23
 8006448:	fa43 fb02 	asr.w	fp, r3, r2
 800644c:	f1bb 0f00 	cmp.w	fp, #0
 8006450:	dd65      	ble.n	800651e <__kernel_rem_pio2+0x26e>
 8006452:	9b02      	ldr	r3, [sp, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	3301      	adds	r3, #1
 8006458:	9302      	str	r3, [sp, #8]
 800645a:	4615      	mov	r5, r2
 800645c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006460:	4294      	cmp	r4, r2
 8006462:	f300 809f 	bgt.w	80065a4 <__kernel_rem_pio2+0x2f4>
 8006466:	f1ba 0f00 	cmp.w	sl, #0
 800646a:	dd07      	ble.n	800647c <__kernel_rem_pio2+0x1cc>
 800646c:	f1ba 0f01 	cmp.w	sl, #1
 8006470:	f000 80c1 	beq.w	80065f6 <__kernel_rem_pio2+0x346>
 8006474:	f1ba 0f02 	cmp.w	sl, #2
 8006478:	f000 80c7 	beq.w	800660a <__kernel_rem_pio2+0x35a>
 800647c:	f1bb 0f02 	cmp.w	fp, #2
 8006480:	d14d      	bne.n	800651e <__kernel_rem_pio2+0x26e>
 8006482:	4632      	mov	r2, r6
 8006484:	463b      	mov	r3, r7
 8006486:	4954      	ldr	r1, [pc, #336]	; (80065d8 <__kernel_rem_pio2+0x328>)
 8006488:	2000      	movs	r0, #0
 800648a:	f7f9 ff1d 	bl	80002c8 <__aeabi_dsub>
 800648e:	4606      	mov	r6, r0
 8006490:	460f      	mov	r7, r1
 8006492:	2d00      	cmp	r5, #0
 8006494:	d043      	beq.n	800651e <__kernel_rem_pio2+0x26e>
 8006496:	4650      	mov	r0, sl
 8006498:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80065c8 <__kernel_rem_pio2+0x318>
 800649c:	f000 fa58 	bl	8006950 <scalbn>
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	ec53 2b10 	vmov	r2, r3, d0
 80064a8:	f7f9 ff0e 	bl	80002c8 <__aeabi_dsub>
 80064ac:	4606      	mov	r6, r0
 80064ae:	460f      	mov	r7, r1
 80064b0:	e035      	b.n	800651e <__kernel_rem_pio2+0x26e>
 80064b2:	4b4a      	ldr	r3, [pc, #296]	; (80065dc <__kernel_rem_pio2+0x32c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa f8bd 	bl	8000638 <__aeabi_dmul>
 80064be:	f7fa fb6b 	bl	8000b98 <__aeabi_d2iz>
 80064c2:	f7fa f84f 	bl	8000564 <__aeabi_i2d>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	ec43 2b18 	vmov	d8, r2, r3
 80064ce:	4b44      	ldr	r3, [pc, #272]	; (80065e0 <__kernel_rem_pio2+0x330>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	f7fa f8b1 	bl	8000638 <__aeabi_dmul>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4630      	mov	r0, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	f7f9 fef3 	bl	80002c8 <__aeabi_dsub>
 80064e2:	f7fa fb59 	bl	8000b98 <__aeabi_d2iz>
 80064e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064ea:	f84b 0b04 	str.w	r0, [fp], #4
 80064ee:	ec51 0b18 	vmov	r0, r1, d8
 80064f2:	f7f9 feeb 	bl	80002cc <__adddf3>
 80064f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80064fa:	4606      	mov	r6, r0
 80064fc:	460f      	mov	r7, r1
 80064fe:	e75b      	b.n	80063b8 <__kernel_rem_pio2+0x108>
 8006500:	d106      	bne.n	8006510 <__kernel_rem_pio2+0x260>
 8006502:	1e63      	subs	r3, r4, #1
 8006504:	aa0c      	add	r2, sp, #48	; 0x30
 8006506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800650e:	e79d      	b.n	800644c <__kernel_rem_pio2+0x19c>
 8006510:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <__kernel_rem_pio2+0x334>)
 8006512:	2200      	movs	r2, #0
 8006514:	f7fa fb16 	bl	8000b44 <__aeabi_dcmpge>
 8006518:	2800      	cmp	r0, #0
 800651a:	d140      	bne.n	800659e <__kernel_rem_pio2+0x2ee>
 800651c:	4683      	mov	fp, r0
 800651e:	2200      	movs	r2, #0
 8006520:	2300      	movs	r3, #0
 8006522:	4630      	mov	r0, r6
 8006524:	4639      	mov	r1, r7
 8006526:	f7fa faef 	bl	8000b08 <__aeabi_dcmpeq>
 800652a:	2800      	cmp	r0, #0
 800652c:	f000 80c1 	beq.w	80066b2 <__kernel_rem_pio2+0x402>
 8006530:	1e65      	subs	r5, r4, #1
 8006532:	462b      	mov	r3, r5
 8006534:	2200      	movs	r2, #0
 8006536:	9900      	ldr	r1, [sp, #0]
 8006538:	428b      	cmp	r3, r1
 800653a:	da6d      	bge.n	8006618 <__kernel_rem_pio2+0x368>
 800653c:	2a00      	cmp	r2, #0
 800653e:	f000 808a 	beq.w	8006656 <__kernel_rem_pio2+0x3a6>
 8006542:	ab0c      	add	r3, sp, #48	; 0x30
 8006544:	f1aa 0a18 	sub.w	sl, sl, #24
 8006548:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80ae 	beq.w	80066ae <__kernel_rem_pio2+0x3fe>
 8006552:	4650      	mov	r0, sl
 8006554:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80065c8 <__kernel_rem_pio2+0x318>
 8006558:	f000 f9fa 	bl	8006950 <scalbn>
 800655c:	1c6b      	adds	r3, r5, #1
 800655e:	00da      	lsls	r2, r3, #3
 8006560:	9205      	str	r2, [sp, #20]
 8006562:	ec57 6b10 	vmov	r6, r7, d0
 8006566:	aa70      	add	r2, sp, #448	; 0x1c0
 8006568:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80065dc <__kernel_rem_pio2+0x32c>
 800656c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006570:	462c      	mov	r4, r5
 8006572:	f04f 0800 	mov.w	r8, #0
 8006576:	2c00      	cmp	r4, #0
 8006578:	f280 80d4 	bge.w	8006724 <__kernel_rem_pio2+0x474>
 800657c:	462c      	mov	r4, r5
 800657e:	2c00      	cmp	r4, #0
 8006580:	f2c0 8102 	blt.w	8006788 <__kernel_rem_pio2+0x4d8>
 8006584:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <__kernel_rem_pio2+0x338>)
 8006586:	461e      	mov	r6, r3
 8006588:	ab70      	add	r3, sp, #448	; 0x1c0
 800658a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800658e:	1b2b      	subs	r3, r5, r4
 8006590:	f04f 0900 	mov.w	r9, #0
 8006594:	f04f 0a00 	mov.w	sl, #0
 8006598:	2700      	movs	r7, #0
 800659a:	9306      	str	r3, [sp, #24]
 800659c:	e0e6      	b.n	800676c <__kernel_rem_pio2+0x4bc>
 800659e:	f04f 0b02 	mov.w	fp, #2
 80065a2:	e756      	b.n	8006452 <__kernel_rem_pio2+0x1a2>
 80065a4:	f8d8 3000 	ldr.w	r3, [r8]
 80065a8:	bb05      	cbnz	r5, 80065ec <__kernel_rem_pio2+0x33c>
 80065aa:	b123      	cbz	r3, 80065b6 <__kernel_rem_pio2+0x306>
 80065ac:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80065b0:	f8c8 3000 	str.w	r3, [r8]
 80065b4:	2301      	movs	r3, #1
 80065b6:	3201      	adds	r2, #1
 80065b8:	f108 0804 	add.w	r8, r8, #4
 80065bc:	461d      	mov	r5, r3
 80065be:	e74f      	b.n	8006460 <__kernel_rem_pio2+0x1b0>
	...
 80065cc:	3ff00000 	.word	0x3ff00000
 80065d0:	0800e110 	.word	0x0800e110
 80065d4:	40200000 	.word	0x40200000
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	3e700000 	.word	0x3e700000
 80065e0:	41700000 	.word	0x41700000
 80065e4:	3fe00000 	.word	0x3fe00000
 80065e8:	0800e0d0 	.word	0x0800e0d0
 80065ec:	1acb      	subs	r3, r1, r3
 80065ee:	f8c8 3000 	str.w	r3, [r8]
 80065f2:	462b      	mov	r3, r5
 80065f4:	e7df      	b.n	80065b6 <__kernel_rem_pio2+0x306>
 80065f6:	1e62      	subs	r2, r4, #1
 80065f8:	ab0c      	add	r3, sp, #48	; 0x30
 80065fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006602:	a90c      	add	r1, sp, #48	; 0x30
 8006604:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006608:	e738      	b.n	800647c <__kernel_rem_pio2+0x1cc>
 800660a:	1e62      	subs	r2, r4, #1
 800660c:	ab0c      	add	r3, sp, #48	; 0x30
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006616:	e7f4      	b.n	8006602 <__kernel_rem_pio2+0x352>
 8006618:	a90c      	add	r1, sp, #48	; 0x30
 800661a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800661e:	3b01      	subs	r3, #1
 8006620:	430a      	orrs	r2, r1
 8006622:	e788      	b.n	8006536 <__kernel_rem_pio2+0x286>
 8006624:	3301      	adds	r3, #1
 8006626:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800662a:	2900      	cmp	r1, #0
 800662c:	d0fa      	beq.n	8006624 <__kernel_rem_pio2+0x374>
 800662e:	9a08      	ldr	r2, [sp, #32]
 8006630:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006634:	446a      	add	r2, sp
 8006636:	3a98      	subs	r2, #152	; 0x98
 8006638:	9208      	str	r2, [sp, #32]
 800663a:	9a06      	ldr	r2, [sp, #24]
 800663c:	a920      	add	r1, sp, #128	; 0x80
 800663e:	18a2      	adds	r2, r4, r2
 8006640:	18e3      	adds	r3, r4, r3
 8006642:	f104 0801 	add.w	r8, r4, #1
 8006646:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800664a:	9302      	str	r3, [sp, #8]
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	4543      	cmp	r3, r8
 8006650:	da04      	bge.n	800665c <__kernel_rem_pio2+0x3ac>
 8006652:	461c      	mov	r4, r3
 8006654:	e6a2      	b.n	800639c <__kernel_rem_pio2+0xec>
 8006656:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006658:	2301      	movs	r3, #1
 800665a:	e7e4      	b.n	8006626 <__kernel_rem_pio2+0x376>
 800665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006662:	f7f9 ff7f 	bl	8000564 <__aeabi_i2d>
 8006666:	e8e5 0102 	strd	r0, r1, [r5], #8
 800666a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666c:	46ab      	mov	fp, r5
 800666e:	461c      	mov	r4, r3
 8006670:	f04f 0900 	mov.w	r9, #0
 8006674:	2600      	movs	r6, #0
 8006676:	2700      	movs	r7, #0
 8006678:	9b05      	ldr	r3, [sp, #20]
 800667a:	4599      	cmp	r9, r3
 800667c:	dd06      	ble.n	800668c <__kernel_rem_pio2+0x3dc>
 800667e:	9b08      	ldr	r3, [sp, #32]
 8006680:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006684:	f108 0801 	add.w	r8, r8, #1
 8006688:	9308      	str	r3, [sp, #32]
 800668a:	e7df      	b.n	800664c <__kernel_rem_pio2+0x39c>
 800668c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006690:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006694:	f7f9 ffd0 	bl	8000638 <__aeabi_dmul>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4630      	mov	r0, r6
 800669e:	4639      	mov	r1, r7
 80066a0:	f7f9 fe14 	bl	80002cc <__adddf3>
 80066a4:	f109 0901 	add.w	r9, r9, #1
 80066a8:	4606      	mov	r6, r0
 80066aa:	460f      	mov	r7, r1
 80066ac:	e7e4      	b.n	8006678 <__kernel_rem_pio2+0x3c8>
 80066ae:	3d01      	subs	r5, #1
 80066b0:	e747      	b.n	8006542 <__kernel_rem_pio2+0x292>
 80066b2:	ec47 6b10 	vmov	d0, r6, r7
 80066b6:	f1ca 0000 	rsb	r0, sl, #0
 80066ba:	f000 f949 	bl	8006950 <scalbn>
 80066be:	ec57 6b10 	vmov	r6, r7, d0
 80066c2:	4ba0      	ldr	r3, [pc, #640]	; (8006944 <__kernel_rem_pio2+0x694>)
 80066c4:	ee10 0a10 	vmov	r0, s0
 80066c8:	2200      	movs	r2, #0
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa fa3a 	bl	8000b44 <__aeabi_dcmpge>
 80066d0:	b1f8      	cbz	r0, 8006712 <__kernel_rem_pio2+0x462>
 80066d2:	4b9d      	ldr	r3, [pc, #628]	; (8006948 <__kernel_rem_pio2+0x698>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7f9 ffad 	bl	8000638 <__aeabi_dmul>
 80066de:	f7fa fa5b 	bl	8000b98 <__aeabi_d2iz>
 80066e2:	4680      	mov	r8, r0
 80066e4:	f7f9 ff3e 	bl	8000564 <__aeabi_i2d>
 80066e8:	4b96      	ldr	r3, [pc, #600]	; (8006944 <__kernel_rem_pio2+0x694>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	f7f9 ffa4 	bl	8000638 <__aeabi_dmul>
 80066f0:	460b      	mov	r3, r1
 80066f2:	4602      	mov	r2, r0
 80066f4:	4639      	mov	r1, r7
 80066f6:	4630      	mov	r0, r6
 80066f8:	f7f9 fde6 	bl	80002c8 <__aeabi_dsub>
 80066fc:	f7fa fa4c 	bl	8000b98 <__aeabi_d2iz>
 8006700:	1c65      	adds	r5, r4, #1
 8006702:	ab0c      	add	r3, sp, #48	; 0x30
 8006704:	f10a 0a18 	add.w	sl, sl, #24
 8006708:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800670c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006710:	e71f      	b.n	8006552 <__kernel_rem_pio2+0x2a2>
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	f7fa fa3f 	bl	8000b98 <__aeabi_d2iz>
 800671a:	ab0c      	add	r3, sp, #48	; 0x30
 800671c:	4625      	mov	r5, r4
 800671e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006722:	e716      	b.n	8006552 <__kernel_rem_pio2+0x2a2>
 8006724:	ab0c      	add	r3, sp, #48	; 0x30
 8006726:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800672a:	f7f9 ff1b 	bl	8000564 <__aeabi_i2d>
 800672e:	4632      	mov	r2, r6
 8006730:	463b      	mov	r3, r7
 8006732:	f7f9 ff81 	bl	8000638 <__aeabi_dmul>
 8006736:	4642      	mov	r2, r8
 8006738:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800673c:	464b      	mov	r3, r9
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	f7f9 ff79 	bl	8000638 <__aeabi_dmul>
 8006746:	3c01      	subs	r4, #1
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	e713      	b.n	8006576 <__kernel_rem_pio2+0x2c6>
 800674e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006752:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006756:	f7f9 ff6f 	bl	8000638 <__aeabi_dmul>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4648      	mov	r0, r9
 8006760:	4651      	mov	r1, sl
 8006762:	f7f9 fdb3 	bl	80002cc <__adddf3>
 8006766:	3701      	adds	r7, #1
 8006768:	4681      	mov	r9, r0
 800676a:	468a      	mov	sl, r1
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	429f      	cmp	r7, r3
 8006770:	dc02      	bgt.n	8006778 <__kernel_rem_pio2+0x4c8>
 8006772:	9b06      	ldr	r3, [sp, #24]
 8006774:	429f      	cmp	r7, r3
 8006776:	ddea      	ble.n	800674e <__kernel_rem_pio2+0x49e>
 8006778:	9a06      	ldr	r2, [sp, #24]
 800677a:	ab48      	add	r3, sp, #288	; 0x120
 800677c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006780:	e9c6 9a00 	strd	r9, sl, [r6]
 8006784:	3c01      	subs	r4, #1
 8006786:	e6fa      	b.n	800657e <__kernel_rem_pio2+0x2ce>
 8006788:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800678a:	2b02      	cmp	r3, #2
 800678c:	dc0b      	bgt.n	80067a6 <__kernel_rem_pio2+0x4f6>
 800678e:	2b00      	cmp	r3, #0
 8006790:	dc39      	bgt.n	8006806 <__kernel_rem_pio2+0x556>
 8006792:	d05d      	beq.n	8006850 <__kernel_rem_pio2+0x5a0>
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	f003 0007 	and.w	r0, r3, #7
 800679a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800679e:	ecbd 8b02 	vpop	{d8}
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d1f3      	bne.n	8006794 <__kernel_rem_pio2+0x4e4>
 80067ac:	9b05      	ldr	r3, [sp, #20]
 80067ae:	9500      	str	r5, [sp, #0]
 80067b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80067b4:	eb0d 0403 	add.w	r4, sp, r3
 80067b8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80067bc:	46a2      	mov	sl, r4
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f1aa 0a08 	sub.w	sl, sl, #8
 80067c6:	dc69      	bgt.n	800689c <__kernel_rem_pio2+0x5ec>
 80067c8:	46aa      	mov	sl, r5
 80067ca:	f1ba 0f01 	cmp.w	sl, #1
 80067ce:	f1a4 0408 	sub.w	r4, r4, #8
 80067d2:	f300 8083 	bgt.w	80068dc <__kernel_rem_pio2+0x62c>
 80067d6:	9c05      	ldr	r4, [sp, #20]
 80067d8:	ab48      	add	r3, sp, #288	; 0x120
 80067da:	441c      	add	r4, r3
 80067dc:	2000      	movs	r0, #0
 80067de:	2100      	movs	r1, #0
 80067e0:	2d01      	cmp	r5, #1
 80067e2:	f300 809a 	bgt.w	800691a <__kernel_rem_pio2+0x66a>
 80067e6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80067ea:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80067ee:	f1bb 0f00 	cmp.w	fp, #0
 80067f2:	f040 8098 	bne.w	8006926 <__kernel_rem_pio2+0x676>
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	e9c3 7800 	strd	r7, r8, [r3]
 80067fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006800:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006804:	e7c6      	b.n	8006794 <__kernel_rem_pio2+0x4e4>
 8006806:	9e05      	ldr	r6, [sp, #20]
 8006808:	ab48      	add	r3, sp, #288	; 0x120
 800680a:	441e      	add	r6, r3
 800680c:	462c      	mov	r4, r5
 800680e:	2000      	movs	r0, #0
 8006810:	2100      	movs	r1, #0
 8006812:	2c00      	cmp	r4, #0
 8006814:	da33      	bge.n	800687e <__kernel_rem_pio2+0x5ce>
 8006816:	f1bb 0f00 	cmp.w	fp, #0
 800681a:	d036      	beq.n	800688a <__kernel_rem_pio2+0x5da>
 800681c:	4602      	mov	r2, r0
 800681e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006822:	9c04      	ldr	r4, [sp, #16]
 8006824:	e9c4 2300 	strd	r2, r3, [r4]
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006830:	f7f9 fd4a 	bl	80002c8 <__aeabi_dsub>
 8006834:	ae4a      	add	r6, sp, #296	; 0x128
 8006836:	2401      	movs	r4, #1
 8006838:	42a5      	cmp	r5, r4
 800683a:	da29      	bge.n	8006890 <__kernel_rem_pio2+0x5e0>
 800683c:	f1bb 0f00 	cmp.w	fp, #0
 8006840:	d002      	beq.n	8006848 <__kernel_rem_pio2+0x598>
 8006842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006846:	4619      	mov	r1, r3
 8006848:	9b04      	ldr	r3, [sp, #16]
 800684a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800684e:	e7a1      	b.n	8006794 <__kernel_rem_pio2+0x4e4>
 8006850:	9c05      	ldr	r4, [sp, #20]
 8006852:	ab48      	add	r3, sp, #288	; 0x120
 8006854:	441c      	add	r4, r3
 8006856:	2000      	movs	r0, #0
 8006858:	2100      	movs	r1, #0
 800685a:	2d00      	cmp	r5, #0
 800685c:	da09      	bge.n	8006872 <__kernel_rem_pio2+0x5c2>
 800685e:	f1bb 0f00 	cmp.w	fp, #0
 8006862:	d002      	beq.n	800686a <__kernel_rem_pio2+0x5ba>
 8006864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006868:	4619      	mov	r1, r3
 800686a:	9b04      	ldr	r3, [sp, #16]
 800686c:	e9c3 0100 	strd	r0, r1, [r3]
 8006870:	e790      	b.n	8006794 <__kernel_rem_pio2+0x4e4>
 8006872:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006876:	f7f9 fd29 	bl	80002cc <__adddf3>
 800687a:	3d01      	subs	r5, #1
 800687c:	e7ed      	b.n	800685a <__kernel_rem_pio2+0x5aa>
 800687e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006882:	f7f9 fd23 	bl	80002cc <__adddf3>
 8006886:	3c01      	subs	r4, #1
 8006888:	e7c3      	b.n	8006812 <__kernel_rem_pio2+0x562>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	e7c8      	b.n	8006822 <__kernel_rem_pio2+0x572>
 8006890:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006894:	f7f9 fd1a 	bl	80002cc <__adddf3>
 8006898:	3401      	adds	r4, #1
 800689a:	e7cd      	b.n	8006838 <__kernel_rem_pio2+0x588>
 800689c:	e9da 8900 	ldrd	r8, r9, [sl]
 80068a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80068a4:	9b00      	ldr	r3, [sp, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4632      	mov	r2, r6
 80068ac:	463b      	mov	r3, r7
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7f9 fd0b 	bl	80002cc <__adddf3>
 80068b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4640      	mov	r0, r8
 80068c0:	4649      	mov	r1, r9
 80068c2:	f7f9 fd01 	bl	80002c8 <__aeabi_dsub>
 80068c6:	4632      	mov	r2, r6
 80068c8:	463b      	mov	r3, r7
 80068ca:	f7f9 fcff 	bl	80002cc <__adddf3>
 80068ce:	ed9d 7b06 	vldr	d7, [sp, #24]
 80068d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80068d6:	ed8a 7b00 	vstr	d7, [sl]
 80068da:	e770      	b.n	80067be <__kernel_rem_pio2+0x50e>
 80068dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80068e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80068e4:	4640      	mov	r0, r8
 80068e6:	4632      	mov	r2, r6
 80068e8:	463b      	mov	r3, r7
 80068ea:	4649      	mov	r1, r9
 80068ec:	f7f9 fcee 	bl	80002cc <__adddf3>
 80068f0:	e9cd 0100 	strd	r0, r1, [sp]
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4640      	mov	r0, r8
 80068fa:	4649      	mov	r1, r9
 80068fc:	f7f9 fce4 	bl	80002c8 <__aeabi_dsub>
 8006900:	4632      	mov	r2, r6
 8006902:	463b      	mov	r3, r7
 8006904:	f7f9 fce2 	bl	80002cc <__adddf3>
 8006908:	ed9d 7b00 	vldr	d7, [sp]
 800690c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006910:	ed84 7b00 	vstr	d7, [r4]
 8006914:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006918:	e757      	b.n	80067ca <__kernel_rem_pio2+0x51a>
 800691a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800691e:	f7f9 fcd5 	bl	80002cc <__adddf3>
 8006922:	3d01      	subs	r5, #1
 8006924:	e75c      	b.n	80067e0 <__kernel_rem_pio2+0x530>
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	9a04      	ldr	r2, [sp, #16]
 800692a:	601f      	str	r7, [r3, #0]
 800692c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006930:	605c      	str	r4, [r3, #4]
 8006932:	609d      	str	r5, [r3, #8]
 8006934:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006938:	60d3      	str	r3, [r2, #12]
 800693a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800693e:	6110      	str	r0, [r2, #16]
 8006940:	6153      	str	r3, [r2, #20]
 8006942:	e727      	b.n	8006794 <__kernel_rem_pio2+0x4e4>
 8006944:	41700000 	.word	0x41700000
 8006948:	3e700000 	.word	0x3e700000
 800694c:	00000000 	.word	0x00000000

08006950 <scalbn>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	ec55 4b10 	vmov	r4, r5, d0
 8006956:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800695a:	4606      	mov	r6, r0
 800695c:	462b      	mov	r3, r5
 800695e:	b999      	cbnz	r1, 8006988 <scalbn+0x38>
 8006960:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006964:	4323      	orrs	r3, r4
 8006966:	d03f      	beq.n	80069e8 <scalbn+0x98>
 8006968:	4b35      	ldr	r3, [pc, #212]	; (8006a40 <scalbn+0xf0>)
 800696a:	4629      	mov	r1, r5
 800696c:	ee10 0a10 	vmov	r0, s0
 8006970:	2200      	movs	r2, #0
 8006972:	f7f9 fe61 	bl	8000638 <__aeabi_dmul>
 8006976:	4b33      	ldr	r3, [pc, #204]	; (8006a44 <scalbn+0xf4>)
 8006978:	429e      	cmp	r6, r3
 800697a:	4604      	mov	r4, r0
 800697c:	460d      	mov	r5, r1
 800697e:	da10      	bge.n	80069a2 <scalbn+0x52>
 8006980:	a327      	add	r3, pc, #156	; (adr r3, 8006a20 <scalbn+0xd0>)
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	e01f      	b.n	80069c8 <scalbn+0x78>
 8006988:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800698c:	4291      	cmp	r1, r2
 800698e:	d10c      	bne.n	80069aa <scalbn+0x5a>
 8006990:	ee10 2a10 	vmov	r2, s0
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fc98 	bl	80002cc <__adddf3>
 800699c:	4604      	mov	r4, r0
 800699e:	460d      	mov	r5, r1
 80069a0:	e022      	b.n	80069e8 <scalbn+0x98>
 80069a2:	460b      	mov	r3, r1
 80069a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80069a8:	3936      	subs	r1, #54	; 0x36
 80069aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80069ae:	4296      	cmp	r6, r2
 80069b0:	dd0d      	ble.n	80069ce <scalbn+0x7e>
 80069b2:	2d00      	cmp	r5, #0
 80069b4:	a11c      	add	r1, pc, #112	; (adr r1, 8006a28 <scalbn+0xd8>)
 80069b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ba:	da02      	bge.n	80069c2 <scalbn+0x72>
 80069bc:	a11c      	add	r1, pc, #112	; (adr r1, 8006a30 <scalbn+0xe0>)
 80069be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c2:	a319      	add	r3, pc, #100	; (adr r3, 8006a28 <scalbn+0xd8>)
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f7f9 fe36 	bl	8000638 <__aeabi_dmul>
 80069cc:	e7e6      	b.n	800699c <scalbn+0x4c>
 80069ce:	1872      	adds	r2, r6, r1
 80069d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80069d4:	428a      	cmp	r2, r1
 80069d6:	dcec      	bgt.n	80069b2 <scalbn+0x62>
 80069d8:	2a00      	cmp	r2, #0
 80069da:	dd08      	ble.n	80069ee <scalbn+0x9e>
 80069dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069e8:	ec45 4b10 	vmov	d0, r4, r5
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80069f2:	da08      	bge.n	8006a06 <scalbn+0xb6>
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	a10a      	add	r1, pc, #40	; (adr r1, 8006a20 <scalbn+0xd0>)
 80069f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fc:	dac0      	bge.n	8006980 <scalbn+0x30>
 80069fe:	a10e      	add	r1, pc, #56	; (adr r1, 8006a38 <scalbn+0xe8>)
 8006a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a04:	e7bc      	b.n	8006980 <scalbn+0x30>
 8006a06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a0a:	3236      	adds	r2, #54	; 0x36
 8006a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006a14:	4620      	mov	r0, r4
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <scalbn+0xf8>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	e7d5      	b.n	80069c8 <scalbn+0x78>
 8006a1c:	f3af 8000 	nop.w
 8006a20:	c2f8f359 	.word	0xc2f8f359
 8006a24:	01a56e1f 	.word	0x01a56e1f
 8006a28:	8800759c 	.word	0x8800759c
 8006a2c:	7e37e43c 	.word	0x7e37e43c
 8006a30:	8800759c 	.word	0x8800759c
 8006a34:	fe37e43c 	.word	0xfe37e43c
 8006a38:	c2f8f359 	.word	0xc2f8f359
 8006a3c:	81a56e1f 	.word	0x81a56e1f
 8006a40:	43500000 	.word	0x43500000
 8006a44:	ffff3cb0 	.word	0xffff3cb0
 8006a48:	3c900000 	.word	0x3c900000
 8006a4c:	00000000 	.word	0x00000000

08006a50 <floor>:
 8006a50:	ec51 0b10 	vmov	r0, r1, d0
 8006a54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006a60:	2e13      	cmp	r6, #19
 8006a62:	ee10 5a10 	vmov	r5, s0
 8006a66:	ee10 8a10 	vmov	r8, s0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	dc31      	bgt.n	8006ad2 <floor+0x82>
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	da14      	bge.n	8006a9c <floor+0x4c>
 8006a72:	a333      	add	r3, pc, #204	; (adr r3, 8006b40 <floor+0xf0>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f7f9 fc28 	bl	80002cc <__adddf3>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f7fa f86a 	bl	8000b58 <__aeabi_dcmpgt>
 8006a84:	b138      	cbz	r0, 8006a96 <floor+0x46>
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	da53      	bge.n	8006b32 <floor+0xe2>
 8006a8a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006a8e:	4325      	orrs	r5, r4
 8006a90:	d052      	beq.n	8006b38 <floor+0xe8>
 8006a92:	4c2d      	ldr	r4, [pc, #180]	; (8006b48 <floor+0xf8>)
 8006a94:	2500      	movs	r5, #0
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	e024      	b.n	8006ae6 <floor+0x96>
 8006a9c:	4f2b      	ldr	r7, [pc, #172]	; (8006b4c <floor+0xfc>)
 8006a9e:	4137      	asrs	r7, r6
 8006aa0:	ea01 0307 	and.w	r3, r1, r7
 8006aa4:	4303      	orrs	r3, r0
 8006aa6:	d01e      	beq.n	8006ae6 <floor+0x96>
 8006aa8:	a325      	add	r3, pc, #148	; (adr r3, 8006b40 <floor+0xf0>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f7f9 fc0d 	bl	80002cc <__adddf3>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f7fa f84f 	bl	8000b58 <__aeabi_dcmpgt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d0eb      	beq.n	8006a96 <floor+0x46>
 8006abe:	2c00      	cmp	r4, #0
 8006ac0:	bfbe      	ittt	lt
 8006ac2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006ac6:	4133      	asrlt	r3, r6
 8006ac8:	18e4      	addlt	r4, r4, r3
 8006aca:	ea24 0407 	bic.w	r4, r4, r7
 8006ace:	2500      	movs	r5, #0
 8006ad0:	e7e1      	b.n	8006a96 <floor+0x46>
 8006ad2:	2e33      	cmp	r6, #51	; 0x33
 8006ad4:	dd0b      	ble.n	8006aee <floor+0x9e>
 8006ad6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006ada:	d104      	bne.n	8006ae6 <floor+0x96>
 8006adc:	ee10 2a10 	vmov	r2, s0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	f7f9 fbf3 	bl	80002cc <__adddf3>
 8006ae6:	ec41 0b10 	vmov	d0, r0, r1
 8006aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006af2:	f04f 37ff 	mov.w	r7, #4294967295
 8006af6:	40df      	lsrs	r7, r3
 8006af8:	4238      	tst	r0, r7
 8006afa:	d0f4      	beq.n	8006ae6 <floor+0x96>
 8006afc:	a310      	add	r3, pc, #64	; (adr r3, 8006b40 <floor+0xf0>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fbe3 	bl	80002cc <__adddf3>
 8006b06:	2200      	movs	r2, #0
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f7fa f825 	bl	8000b58 <__aeabi_dcmpgt>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d0c1      	beq.n	8006a96 <floor+0x46>
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	da0a      	bge.n	8006b2c <floor+0xdc>
 8006b16:	2e14      	cmp	r6, #20
 8006b18:	d101      	bne.n	8006b1e <floor+0xce>
 8006b1a:	3401      	adds	r4, #1
 8006b1c:	e006      	b.n	8006b2c <floor+0xdc>
 8006b1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006b22:	2301      	movs	r3, #1
 8006b24:	40b3      	lsls	r3, r6
 8006b26:	441d      	add	r5, r3
 8006b28:	45a8      	cmp	r8, r5
 8006b2a:	d8f6      	bhi.n	8006b1a <floor+0xca>
 8006b2c:	ea25 0507 	bic.w	r5, r5, r7
 8006b30:	e7b1      	b.n	8006a96 <floor+0x46>
 8006b32:	2500      	movs	r5, #0
 8006b34:	462c      	mov	r4, r5
 8006b36:	e7ae      	b.n	8006a96 <floor+0x46>
 8006b38:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006b3c:	e7ab      	b.n	8006a96 <floor+0x46>
 8006b3e:	bf00      	nop
 8006b40:	8800759c 	.word	0x8800759c
 8006b44:	7e37e43c 	.word	0x7e37e43c
 8006b48:	bff00000 	.word	0xbff00000
 8006b4c:	000fffff 	.word	0x000fffff

08006b50 <malloc>:
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <malloc+0xc>)
 8006b52:	4601      	mov	r1, r0
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f000 b823 	b.w	8006ba0 <_malloc_r>
 8006b5a:	bf00      	nop
 8006b5c:	2000008c 	.word	0x2000008c

08006b60 <sbrk_aligned>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	4e0e      	ldr	r6, [pc, #56]	; (8006b9c <sbrk_aligned+0x3c>)
 8006b64:	460c      	mov	r4, r1
 8006b66:	6831      	ldr	r1, [r6, #0]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	b911      	cbnz	r1, 8006b72 <sbrk_aligned+0x12>
 8006b6c:	f000 fe8c 	bl	8007888 <_sbrk_r>
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 fe87 	bl	8007888 <_sbrk_r>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d00a      	beq.n	8006b94 <sbrk_aligned+0x34>
 8006b7e:	1cc4      	adds	r4, r0, #3
 8006b80:	f024 0403 	bic.w	r4, r4, #3
 8006b84:	42a0      	cmp	r0, r4
 8006b86:	d007      	beq.n	8006b98 <sbrk_aligned+0x38>
 8006b88:	1a21      	subs	r1, r4, r0
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 fe7c 	bl	8007888 <_sbrk_r>
 8006b90:	3001      	adds	r0, #1
 8006b92:	d101      	bne.n	8006b98 <sbrk_aligned+0x38>
 8006b94:	f04f 34ff 	mov.w	r4, #4294967295
 8006b98:	4620      	mov	r0, r4
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	200007f0 	.word	0x200007f0

08006ba0 <_malloc_r>:
 8006ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba4:	1ccd      	adds	r5, r1, #3
 8006ba6:	f025 0503 	bic.w	r5, r5, #3
 8006baa:	3508      	adds	r5, #8
 8006bac:	2d0c      	cmp	r5, #12
 8006bae:	bf38      	it	cc
 8006bb0:	250c      	movcc	r5, #12
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	db01      	blt.n	8006bbc <_malloc_r+0x1c>
 8006bb8:	42a9      	cmp	r1, r5
 8006bba:	d905      	bls.n	8006bc8 <_malloc_r+0x28>
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	2600      	movs	r6, #0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c9c <_malloc_r+0xfc>
 8006bcc:	f000 f868 	bl	8006ca0 <__malloc_lock>
 8006bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd4:	461c      	mov	r4, r3
 8006bd6:	bb5c      	cbnz	r4, 8006c30 <_malloc_r+0x90>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f7ff ffc0 	bl	8006b60 <sbrk_aligned>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	4604      	mov	r4, r0
 8006be4:	d155      	bne.n	8006c92 <_malloc_r+0xf2>
 8006be6:	f8d8 4000 	ldr.w	r4, [r8]
 8006bea:	4626      	mov	r6, r4
 8006bec:	2e00      	cmp	r6, #0
 8006bee:	d145      	bne.n	8006c7c <_malloc_r+0xdc>
 8006bf0:	2c00      	cmp	r4, #0
 8006bf2:	d048      	beq.n	8006c86 <_malloc_r+0xe6>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	eb04 0903 	add.w	r9, r4, r3
 8006bfe:	f000 fe43 	bl	8007888 <_sbrk_r>
 8006c02:	4581      	cmp	r9, r0
 8006c04:	d13f      	bne.n	8006c86 <_malloc_r+0xe6>
 8006c06:	6821      	ldr	r1, [r4, #0]
 8006c08:	1a6d      	subs	r5, r5, r1
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	f7ff ffa7 	bl	8006b60 <sbrk_aligned>
 8006c12:	3001      	adds	r0, #1
 8006c14:	d037      	beq.n	8006c86 <_malloc_r+0xe6>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	442b      	add	r3, r5
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d038      	beq.n	8006c96 <_malloc_r+0xf6>
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	42a2      	cmp	r2, r4
 8006c28:	d12b      	bne.n	8006c82 <_malloc_r+0xe2>
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	e00f      	b.n	8006c50 <_malloc_r+0xb0>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	1b52      	subs	r2, r2, r5
 8006c34:	d41f      	bmi.n	8006c76 <_malloc_r+0xd6>
 8006c36:	2a0b      	cmp	r2, #11
 8006c38:	d917      	bls.n	8006c6a <_malloc_r+0xca>
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	6025      	str	r5, [r4, #0]
 8006c40:	bf18      	it	ne
 8006c42:	6059      	strne	r1, [r3, #4]
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	bf08      	it	eq
 8006c48:	f8c8 1000 	streq.w	r1, [r8]
 8006c4c:	5162      	str	r2, [r4, r5]
 8006c4e:	604b      	str	r3, [r1, #4]
 8006c50:	4638      	mov	r0, r7
 8006c52:	f104 060b 	add.w	r6, r4, #11
 8006c56:	f000 f829 	bl	8006cac <__malloc_unlock>
 8006c5a:	f026 0607 	bic.w	r6, r6, #7
 8006c5e:	1d23      	adds	r3, r4, #4
 8006c60:	1af2      	subs	r2, r6, r3
 8006c62:	d0ae      	beq.n	8006bc2 <_malloc_r+0x22>
 8006c64:	1b9b      	subs	r3, r3, r6
 8006c66:	50a3      	str	r3, [r4, r2]
 8006c68:	e7ab      	b.n	8006bc2 <_malloc_r+0x22>
 8006c6a:	42a3      	cmp	r3, r4
 8006c6c:	6862      	ldr	r2, [r4, #4]
 8006c6e:	d1dd      	bne.n	8006c2c <_malloc_r+0x8c>
 8006c70:	f8c8 2000 	str.w	r2, [r8]
 8006c74:	e7ec      	b.n	8006c50 <_malloc_r+0xb0>
 8006c76:	4623      	mov	r3, r4
 8006c78:	6864      	ldr	r4, [r4, #4]
 8006c7a:	e7ac      	b.n	8006bd6 <_malloc_r+0x36>
 8006c7c:	4634      	mov	r4, r6
 8006c7e:	6876      	ldr	r6, [r6, #4]
 8006c80:	e7b4      	b.n	8006bec <_malloc_r+0x4c>
 8006c82:	4613      	mov	r3, r2
 8006c84:	e7cc      	b.n	8006c20 <_malloc_r+0x80>
 8006c86:	230c      	movs	r3, #12
 8006c88:	603b      	str	r3, [r7, #0]
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	f000 f80e 	bl	8006cac <__malloc_unlock>
 8006c90:	e797      	b.n	8006bc2 <_malloc_r+0x22>
 8006c92:	6025      	str	r5, [r4, #0]
 8006c94:	e7dc      	b.n	8006c50 <_malloc_r+0xb0>
 8006c96:	605b      	str	r3, [r3, #4]
 8006c98:	deff      	udf	#255	; 0xff
 8006c9a:	bf00      	nop
 8006c9c:	200007ec 	.word	0x200007ec

08006ca0 <__malloc_lock>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	; (8006ca8 <__malloc_lock+0x8>)
 8006ca2:	f000 be3d 	b.w	8007920 <__retarget_lock_acquire_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	20000934 	.word	0x20000934

08006cac <__malloc_unlock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__malloc_unlock+0x8>)
 8006cae:	f000 be38 	b.w	8007922 <__retarget_lock_release_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	20000934 	.word	0x20000934

08006cb8 <__cvt>:
 8006cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	ec55 4b10 	vmov	r4, r5, d0
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	460e      	mov	r6, r1
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	bfbb      	ittet	lt
 8006cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cce:	461d      	movlt	r5, r3
 8006cd0:	2300      	movge	r3, #0
 8006cd2:	232d      	movlt	r3, #45	; 0x2d
 8006cd4:	700b      	strb	r3, [r1, #0]
 8006cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cdc:	4691      	mov	r9, r2
 8006cde:	f023 0820 	bic.w	r8, r3, #32
 8006ce2:	bfbc      	itt	lt
 8006ce4:	4622      	movlt	r2, r4
 8006ce6:	4614      	movlt	r4, r2
 8006ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cec:	d005      	beq.n	8006cfa <__cvt+0x42>
 8006cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cf2:	d100      	bne.n	8006cf6 <__cvt+0x3e>
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	e000      	b.n	8006cfc <__cvt+0x44>
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	ab03      	add	r3, sp, #12
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	ab02      	add	r3, sp, #8
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	ec45 4b10 	vmov	d0, r4, r5
 8006d08:	4653      	mov	r3, sl
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	f000 fea0 	bl	8007a50 <_dtoa_r>
 8006d10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d14:	4607      	mov	r7, r0
 8006d16:	d102      	bne.n	8006d1e <__cvt+0x66>
 8006d18:	f019 0f01 	tst.w	r9, #1
 8006d1c:	d022      	beq.n	8006d64 <__cvt+0xac>
 8006d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d22:	eb07 0906 	add.w	r9, r7, r6
 8006d26:	d110      	bne.n	8006d4a <__cvt+0x92>
 8006d28:	783b      	ldrb	r3, [r7, #0]
 8006d2a:	2b30      	cmp	r3, #48	; 0x30
 8006d2c:	d10a      	bne.n	8006d44 <__cvt+0x8c>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2300      	movs	r3, #0
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fee7 	bl	8000b08 <__aeabi_dcmpeq>
 8006d3a:	b918      	cbnz	r0, 8006d44 <__cvt+0x8c>
 8006d3c:	f1c6 0601 	rsb	r6, r6, #1
 8006d40:	f8ca 6000 	str.w	r6, [sl]
 8006d44:	f8da 3000 	ldr.w	r3, [sl]
 8006d48:	4499      	add	r9, r3
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fed9 	bl	8000b08 <__aeabi_dcmpeq>
 8006d56:	b108      	cbz	r0, 8006d5c <__cvt+0xa4>
 8006d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d5c:	2230      	movs	r2, #48	; 0x30
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	454b      	cmp	r3, r9
 8006d62:	d307      	bcc.n	8006d74 <__cvt+0xbc>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d68:	1bdb      	subs	r3, r3, r7
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	b004      	add	sp, #16
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	1c59      	adds	r1, r3, #1
 8006d76:	9103      	str	r1, [sp, #12]
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	e7f0      	b.n	8006d5e <__cvt+0xa6>

08006d7c <__exponent>:
 8006d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2900      	cmp	r1, #0
 8006d82:	bfb8      	it	lt
 8006d84:	4249      	neglt	r1, r1
 8006d86:	f803 2b02 	strb.w	r2, [r3], #2
 8006d8a:	bfb4      	ite	lt
 8006d8c:	222d      	movlt	r2, #45	; 0x2d
 8006d8e:	222b      	movge	r2, #43	; 0x2b
 8006d90:	2909      	cmp	r1, #9
 8006d92:	7042      	strb	r2, [r0, #1]
 8006d94:	dd2a      	ble.n	8006dec <__exponent+0x70>
 8006d96:	f10d 0207 	add.w	r2, sp, #7
 8006d9a:	4617      	mov	r7, r2
 8006d9c:	260a      	movs	r6, #10
 8006d9e:	4694      	mov	ip, r2
 8006da0:	fb91 f5f6 	sdiv	r5, r1, r6
 8006da4:	fb06 1415 	mls	r4, r6, r5, r1
 8006da8:	3430      	adds	r4, #48	; 0x30
 8006daa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006dae:	460c      	mov	r4, r1
 8006db0:	2c63      	cmp	r4, #99	; 0x63
 8006db2:	f102 32ff 	add.w	r2, r2, #4294967295
 8006db6:	4629      	mov	r1, r5
 8006db8:	dcf1      	bgt.n	8006d9e <__exponent+0x22>
 8006dba:	3130      	adds	r1, #48	; 0x30
 8006dbc:	f1ac 0402 	sub.w	r4, ip, #2
 8006dc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006dc4:	1c41      	adds	r1, r0, #1
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	42ba      	cmp	r2, r7
 8006dca:	d30a      	bcc.n	8006de2 <__exponent+0x66>
 8006dcc:	f10d 0209 	add.w	r2, sp, #9
 8006dd0:	eba2 020c 	sub.w	r2, r2, ip
 8006dd4:	42bc      	cmp	r4, r7
 8006dd6:	bf88      	it	hi
 8006dd8:	2200      	movhi	r2, #0
 8006dda:	4413      	add	r3, r2
 8006ddc:	1a18      	subs	r0, r3, r0
 8006dde:	b003      	add	sp, #12
 8006de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006de6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006dea:	e7ed      	b.n	8006dc8 <__exponent+0x4c>
 8006dec:	2330      	movs	r3, #48	; 0x30
 8006dee:	3130      	adds	r1, #48	; 0x30
 8006df0:	7083      	strb	r3, [r0, #2]
 8006df2:	70c1      	strb	r1, [r0, #3]
 8006df4:	1d03      	adds	r3, r0, #4
 8006df6:	e7f1      	b.n	8006ddc <__exponent+0x60>

08006df8 <_printf_float>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ed2d 8b02 	vpush	{d8}
 8006e00:	b08d      	sub	sp, #52	; 0x34
 8006e02:	460c      	mov	r4, r1
 8006e04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e08:	4616      	mov	r6, r2
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	f000 fd03 	bl	8007818 <_localeconv_r>
 8006e12:	f8d0 a000 	ldr.w	sl, [r0]
 8006e16:	4650      	mov	r0, sl
 8006e18:	f7f9 fa4a 	bl	80002b0 <strlen>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	f8d8 3000 	ldr.w	r3, [r8]
 8006e28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e2c:	3307      	adds	r3, #7
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	f103 0208 	add.w	r2, r3, #8
 8006e36:	f8c8 2000 	str.w	r2, [r8]
 8006e3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e42:	9307      	str	r3, [sp, #28]
 8006e44:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e48:	ee08 0a10 	vmov	s16, r0
 8006e4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e54:	4b9e      	ldr	r3, [pc, #632]	; (80070d0 <_printf_float+0x2d8>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	f7f9 fe87 	bl	8000b6c <__aeabi_dcmpun>
 8006e5e:	bb88      	cbnz	r0, 8006ec4 <_printf_float+0xcc>
 8006e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e64:	4b9a      	ldr	r3, [pc, #616]	; (80070d0 <_printf_float+0x2d8>)
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6a:	f7f9 fe61 	bl	8000b30 <__aeabi_dcmple>
 8006e6e:	bb48      	cbnz	r0, 8006ec4 <_printf_float+0xcc>
 8006e70:	2200      	movs	r2, #0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4640      	mov	r0, r8
 8006e76:	4649      	mov	r1, r9
 8006e78:	f7f9 fe50 	bl	8000b1c <__aeabi_dcmplt>
 8006e7c:	b110      	cbz	r0, 8006e84 <_printf_float+0x8c>
 8006e7e:	232d      	movs	r3, #45	; 0x2d
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e84:	4a93      	ldr	r2, [pc, #588]	; (80070d4 <_printf_float+0x2dc>)
 8006e86:	4b94      	ldr	r3, [pc, #592]	; (80070d8 <_printf_float+0x2e0>)
 8006e88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e8c:	bf94      	ite	ls
 8006e8e:	4690      	movls	r8, r2
 8006e90:	4698      	movhi	r8, r3
 8006e92:	2303      	movs	r3, #3
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	9b05      	ldr	r3, [sp, #20]
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	f04f 0900 	mov.w	r9, #0
 8006ea2:	9700      	str	r7, [sp, #0]
 8006ea4:	4633      	mov	r3, r6
 8006ea6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f9da 	bl	8007264 <_printf_common>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f040 8090 	bne.w	8006fd6 <_printf_float+0x1de>
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	b00d      	add	sp, #52	; 0x34
 8006ebc:	ecbd 8b02 	vpop	{d8}
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fe4e 	bl	8000b6c <__aeabi_dcmpun>
 8006ed0:	b140      	cbz	r0, 8006ee4 <_printf_float+0xec>
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfbc      	itt	lt
 8006ed8:	232d      	movlt	r3, #45	; 0x2d
 8006eda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ede:	4a7f      	ldr	r2, [pc, #508]	; (80070dc <_printf_float+0x2e4>)
 8006ee0:	4b7f      	ldr	r3, [pc, #508]	; (80070e0 <_printf_float+0x2e8>)
 8006ee2:	e7d1      	b.n	8006e88 <_printf_float+0x90>
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eea:	9206      	str	r2, [sp, #24]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	d13f      	bne.n	8006f70 <_printf_float+0x178>
 8006ef0:	2306      	movs	r3, #6
 8006ef2:	6063      	str	r3, [r4, #4]
 8006ef4:	9b05      	ldr	r3, [sp, #20]
 8006ef6:	6861      	ldr	r1, [r4, #4]
 8006ef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006efc:	2300      	movs	r3, #0
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	ab0a      	add	r3, sp, #40	; 0x28
 8006f02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f06:	ab09      	add	r3, sp, #36	; 0x24
 8006f08:	ec49 8b10 	vmov	d0, r8, r9
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6022      	str	r2, [r4, #0]
 8006f10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f14:	4628      	mov	r0, r5
 8006f16:	f7ff fecf 	bl	8006cb8 <__cvt>
 8006f1a:	9b06      	ldr	r3, [sp, #24]
 8006f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f1e:	2b47      	cmp	r3, #71	; 0x47
 8006f20:	4680      	mov	r8, r0
 8006f22:	d108      	bne.n	8006f36 <_printf_float+0x13e>
 8006f24:	1cc8      	adds	r0, r1, #3
 8006f26:	db02      	blt.n	8006f2e <_printf_float+0x136>
 8006f28:	6863      	ldr	r3, [r4, #4]
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	dd41      	ble.n	8006fb2 <_printf_float+0x1ba>
 8006f2e:	f1ab 0302 	sub.w	r3, fp, #2
 8006f32:	fa5f fb83 	uxtb.w	fp, r3
 8006f36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f3a:	d820      	bhi.n	8006f7e <_printf_float+0x186>
 8006f3c:	3901      	subs	r1, #1
 8006f3e:	465a      	mov	r2, fp
 8006f40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f44:	9109      	str	r1, [sp, #36]	; 0x24
 8006f46:	f7ff ff19 	bl	8006d7c <__exponent>
 8006f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4c:	1813      	adds	r3, r2, r0
 8006f4e:	2a01      	cmp	r2, #1
 8006f50:	4681      	mov	r9, r0
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	dc02      	bgt.n	8006f5c <_printf_float+0x164>
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	07d2      	lsls	r2, r2, #31
 8006f5a:	d501      	bpl.n	8006f60 <_printf_float+0x168>
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d09c      	beq.n	8006ea2 <_printf_float+0xaa>
 8006f68:	232d      	movs	r3, #45	; 0x2d
 8006f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6e:	e798      	b.n	8006ea2 <_printf_float+0xaa>
 8006f70:	9a06      	ldr	r2, [sp, #24]
 8006f72:	2a47      	cmp	r2, #71	; 0x47
 8006f74:	d1be      	bne.n	8006ef4 <_printf_float+0xfc>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1bc      	bne.n	8006ef4 <_printf_float+0xfc>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7b9      	b.n	8006ef2 <_printf_float+0xfa>
 8006f7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f82:	d118      	bne.n	8006fb6 <_printf_float+0x1be>
 8006f84:	2900      	cmp	r1, #0
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	dd0b      	ble.n	8006fa2 <_printf_float+0x1aa>
 8006f8a:	6121      	str	r1, [r4, #16]
 8006f8c:	b913      	cbnz	r3, 8006f94 <_printf_float+0x19c>
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	07d0      	lsls	r0, r2, #31
 8006f92:	d502      	bpl.n	8006f9a <_printf_float+0x1a2>
 8006f94:	3301      	adds	r3, #1
 8006f96:	440b      	add	r3, r1
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f9c:	f04f 0900 	mov.w	r9, #0
 8006fa0:	e7de      	b.n	8006f60 <_printf_float+0x168>
 8006fa2:	b913      	cbnz	r3, 8006faa <_printf_float+0x1b2>
 8006fa4:	6822      	ldr	r2, [r4, #0]
 8006fa6:	07d2      	lsls	r2, r2, #31
 8006fa8:	d501      	bpl.n	8006fae <_printf_float+0x1b6>
 8006faa:	3302      	adds	r3, #2
 8006fac:	e7f4      	b.n	8006f98 <_printf_float+0x1a0>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e7f2      	b.n	8006f98 <_printf_float+0x1a0>
 8006fb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb8:	4299      	cmp	r1, r3
 8006fba:	db05      	blt.n	8006fc8 <_printf_float+0x1d0>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	6121      	str	r1, [r4, #16]
 8006fc0:	07d8      	lsls	r0, r3, #31
 8006fc2:	d5ea      	bpl.n	8006f9a <_printf_float+0x1a2>
 8006fc4:	1c4b      	adds	r3, r1, #1
 8006fc6:	e7e7      	b.n	8006f98 <_printf_float+0x1a0>
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	bfd4      	ite	le
 8006fcc:	f1c1 0202 	rsble	r2, r1, #2
 8006fd0:	2201      	movgt	r2, #1
 8006fd2:	4413      	add	r3, r2
 8006fd4:	e7e0      	b.n	8006f98 <_printf_float+0x1a0>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	055a      	lsls	r2, r3, #21
 8006fda:	d407      	bmi.n	8006fec <_printf_float+0x1f4>
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	4642      	mov	r2, r8
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d12c      	bne.n	8007044 <_printf_float+0x24c>
 8006fea:	e764      	b.n	8006eb6 <_printf_float+0xbe>
 8006fec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ff0:	f240 80e0 	bls.w	80071b4 <_printf_float+0x3bc>
 8006ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f7f9 fd84 	bl	8000b08 <__aeabi_dcmpeq>
 8007000:	2800      	cmp	r0, #0
 8007002:	d034      	beq.n	800706e <_printf_float+0x276>
 8007004:	4a37      	ldr	r2, [pc, #220]	; (80070e4 <_printf_float+0x2ec>)
 8007006:	2301      	movs	r3, #1
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	47b8      	blx	r7
 800700e:	3001      	adds	r0, #1
 8007010:	f43f af51 	beq.w	8006eb6 <_printf_float+0xbe>
 8007014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007018:	429a      	cmp	r2, r3
 800701a:	db02      	blt.n	8007022 <_printf_float+0x22a>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07d8      	lsls	r0, r3, #31
 8007020:	d510      	bpl.n	8007044 <_printf_float+0x24c>
 8007022:	ee18 3a10 	vmov	r3, s16
 8007026:	4652      	mov	r2, sl
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f af41 	beq.w	8006eb6 <_printf_float+0xbe>
 8007034:	f04f 0800 	mov.w	r8, #0
 8007038:	f104 091a 	add.w	r9, r4, #26
 800703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703e:	3b01      	subs	r3, #1
 8007040:	4543      	cmp	r3, r8
 8007042:	dc09      	bgt.n	8007058 <_printf_float+0x260>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	079b      	lsls	r3, r3, #30
 8007048:	f100 8107 	bmi.w	800725a <_printf_float+0x462>
 800704c:	68e0      	ldr	r0, [r4, #12]
 800704e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007050:	4298      	cmp	r0, r3
 8007052:	bfb8      	it	lt
 8007054:	4618      	movlt	r0, r3
 8007056:	e730      	b.n	8006eba <_printf_float+0xc2>
 8007058:	2301      	movs	r3, #1
 800705a:	464a      	mov	r2, r9
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f af27 	beq.w	8006eb6 <_printf_float+0xbe>
 8007068:	f108 0801 	add.w	r8, r8, #1
 800706c:	e7e6      	b.n	800703c <_printf_float+0x244>
 800706e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	dc39      	bgt.n	80070e8 <_printf_float+0x2f0>
 8007074:	4a1b      	ldr	r2, [pc, #108]	; (80070e4 <_printf_float+0x2ec>)
 8007076:	2301      	movs	r3, #1
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f af19 	beq.w	8006eb6 <_printf_float+0xbe>
 8007084:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007088:	4313      	orrs	r3, r2
 800708a:	d102      	bne.n	8007092 <_printf_float+0x29a>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	07d9      	lsls	r1, r3, #31
 8007090:	d5d8      	bpl.n	8007044 <_printf_float+0x24c>
 8007092:	ee18 3a10 	vmov	r3, s16
 8007096:	4652      	mov	r2, sl
 8007098:	4631      	mov	r1, r6
 800709a:	4628      	mov	r0, r5
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	f43f af09 	beq.w	8006eb6 <_printf_float+0xbe>
 80070a4:	f04f 0900 	mov.w	r9, #0
 80070a8:	f104 0a1a 	add.w	sl, r4, #26
 80070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ae:	425b      	negs	r3, r3
 80070b0:	454b      	cmp	r3, r9
 80070b2:	dc01      	bgt.n	80070b8 <_printf_float+0x2c0>
 80070b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b6:	e792      	b.n	8006fde <_printf_float+0x1e6>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f aef7 	beq.w	8006eb6 <_printf_float+0xbe>
 80070c8:	f109 0901 	add.w	r9, r9, #1
 80070cc:	e7ee      	b.n	80070ac <_printf_float+0x2b4>
 80070ce:	bf00      	nop
 80070d0:	7fefffff 	.word	0x7fefffff
 80070d4:	0800e120 	.word	0x0800e120
 80070d8:	0800e124 	.word	0x0800e124
 80070dc:	0800e128 	.word	0x0800e128
 80070e0:	0800e12c 	.word	0x0800e12c
 80070e4:	0800e130 	.word	0x0800e130
 80070e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bfa8      	it	ge
 80070f0:	461a      	movge	r2, r3
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	4691      	mov	r9, r2
 80070f6:	dc37      	bgt.n	8007168 <_printf_float+0x370>
 80070f8:	f04f 0b00 	mov.w	fp, #0
 80070fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007100:	f104 021a 	add.w	r2, r4, #26
 8007104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	eba3 0309 	sub.w	r3, r3, r9
 800710c:	455b      	cmp	r3, fp
 800710e:	dc33      	bgt.n	8007178 <_printf_float+0x380>
 8007110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007114:	429a      	cmp	r2, r3
 8007116:	db3b      	blt.n	8007190 <_printf_float+0x398>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	07da      	lsls	r2, r3, #31
 800711c:	d438      	bmi.n	8007190 <_printf_float+0x398>
 800711e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007122:	eba2 0903 	sub.w	r9, r2, r3
 8007126:	9b05      	ldr	r3, [sp, #20]
 8007128:	1ad2      	subs	r2, r2, r3
 800712a:	4591      	cmp	r9, r2
 800712c:	bfa8      	it	ge
 800712e:	4691      	movge	r9, r2
 8007130:	f1b9 0f00 	cmp.w	r9, #0
 8007134:	dc35      	bgt.n	80071a2 <_printf_float+0x3aa>
 8007136:	f04f 0800 	mov.w	r8, #0
 800713a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800713e:	f104 0a1a 	add.w	sl, r4, #26
 8007142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	eba3 0309 	sub.w	r3, r3, r9
 800714c:	4543      	cmp	r3, r8
 800714e:	f77f af79 	ble.w	8007044 <_printf_float+0x24c>
 8007152:	2301      	movs	r3, #1
 8007154:	4652      	mov	r2, sl
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f aeaa 	beq.w	8006eb6 <_printf_float+0xbe>
 8007162:	f108 0801 	add.w	r8, r8, #1
 8007166:	e7ec      	b.n	8007142 <_printf_float+0x34a>
 8007168:	4613      	mov	r3, r2
 800716a:	4631      	mov	r1, r6
 800716c:	4642      	mov	r2, r8
 800716e:	4628      	mov	r0, r5
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	d1c0      	bne.n	80070f8 <_printf_float+0x300>
 8007176:	e69e      	b.n	8006eb6 <_printf_float+0xbe>
 8007178:	2301      	movs	r3, #1
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	9205      	str	r2, [sp, #20]
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f ae97 	beq.w	8006eb6 <_printf_float+0xbe>
 8007188:	9a05      	ldr	r2, [sp, #20]
 800718a:	f10b 0b01 	add.w	fp, fp, #1
 800718e:	e7b9      	b.n	8007104 <_printf_float+0x30c>
 8007190:	ee18 3a10 	vmov	r3, s16
 8007194:	4652      	mov	r2, sl
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	d1be      	bne.n	800711e <_printf_float+0x326>
 80071a0:	e689      	b.n	8006eb6 <_printf_float+0xbe>
 80071a2:	9a05      	ldr	r2, [sp, #20]
 80071a4:	464b      	mov	r3, r9
 80071a6:	4442      	add	r2, r8
 80071a8:	4631      	mov	r1, r6
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	d1c1      	bne.n	8007136 <_printf_float+0x33e>
 80071b2:	e680      	b.n	8006eb6 <_printf_float+0xbe>
 80071b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071b6:	2a01      	cmp	r2, #1
 80071b8:	dc01      	bgt.n	80071be <_printf_float+0x3c6>
 80071ba:	07db      	lsls	r3, r3, #31
 80071bc:	d53a      	bpl.n	8007234 <_printf_float+0x43c>
 80071be:	2301      	movs	r3, #1
 80071c0:	4642      	mov	r2, r8
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	f43f ae74 	beq.w	8006eb6 <_printf_float+0xbe>
 80071ce:	ee18 3a10 	vmov	r3, s16
 80071d2:	4652      	mov	r2, sl
 80071d4:	4631      	mov	r1, r6
 80071d6:	4628      	mov	r0, r5
 80071d8:	47b8      	blx	r7
 80071da:	3001      	adds	r0, #1
 80071dc:	f43f ae6b 	beq.w	8006eb6 <_printf_float+0xbe>
 80071e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071e4:	2200      	movs	r2, #0
 80071e6:	2300      	movs	r3, #0
 80071e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80071ec:	f7f9 fc8c 	bl	8000b08 <__aeabi_dcmpeq>
 80071f0:	b9d8      	cbnz	r0, 800722a <_printf_float+0x432>
 80071f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80071f6:	f108 0201 	add.w	r2, r8, #1
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	d10e      	bne.n	8007222 <_printf_float+0x42a>
 8007204:	e657      	b.n	8006eb6 <_printf_float+0xbe>
 8007206:	2301      	movs	r3, #1
 8007208:	4652      	mov	r2, sl
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f ae50 	beq.w	8006eb6 <_printf_float+0xbe>
 8007216:	f108 0801 	add.w	r8, r8, #1
 800721a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721c:	3b01      	subs	r3, #1
 800721e:	4543      	cmp	r3, r8
 8007220:	dcf1      	bgt.n	8007206 <_printf_float+0x40e>
 8007222:	464b      	mov	r3, r9
 8007224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007228:	e6da      	b.n	8006fe0 <_printf_float+0x1e8>
 800722a:	f04f 0800 	mov.w	r8, #0
 800722e:	f104 0a1a 	add.w	sl, r4, #26
 8007232:	e7f2      	b.n	800721a <_printf_float+0x422>
 8007234:	2301      	movs	r3, #1
 8007236:	4642      	mov	r2, r8
 8007238:	e7df      	b.n	80071fa <_printf_float+0x402>
 800723a:	2301      	movs	r3, #1
 800723c:	464a      	mov	r2, r9
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f ae36 	beq.w	8006eb6 <_printf_float+0xbe>
 800724a:	f108 0801 	add.w	r8, r8, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	4543      	cmp	r3, r8
 8007256:	dcf0      	bgt.n	800723a <_printf_float+0x442>
 8007258:	e6f8      	b.n	800704c <_printf_float+0x254>
 800725a:	f04f 0800 	mov.w	r8, #0
 800725e:	f104 0919 	add.w	r9, r4, #25
 8007262:	e7f4      	b.n	800724e <_printf_float+0x456>

08007264 <_printf_common>:
 8007264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007268:	4616      	mov	r6, r2
 800726a:	4699      	mov	r9, r3
 800726c:	688a      	ldr	r2, [r1, #8]
 800726e:	690b      	ldr	r3, [r1, #16]
 8007270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007274:	4293      	cmp	r3, r2
 8007276:	bfb8      	it	lt
 8007278:	4613      	movlt	r3, r2
 800727a:	6033      	str	r3, [r6, #0]
 800727c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007280:	4607      	mov	r7, r0
 8007282:	460c      	mov	r4, r1
 8007284:	b10a      	cbz	r2, 800728a <_printf_common+0x26>
 8007286:	3301      	adds	r3, #1
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	0699      	lsls	r1, r3, #26
 800728e:	bf42      	ittt	mi
 8007290:	6833      	ldrmi	r3, [r6, #0]
 8007292:	3302      	addmi	r3, #2
 8007294:	6033      	strmi	r3, [r6, #0]
 8007296:	6825      	ldr	r5, [r4, #0]
 8007298:	f015 0506 	ands.w	r5, r5, #6
 800729c:	d106      	bne.n	80072ac <_printf_common+0x48>
 800729e:	f104 0a19 	add.w	sl, r4, #25
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	6832      	ldr	r2, [r6, #0]
 80072a6:	1a9b      	subs	r3, r3, r2
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dc26      	bgt.n	80072fa <_printf_common+0x96>
 80072ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b0:	1e13      	subs	r3, r2, #0
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	bf18      	it	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	0692      	lsls	r2, r2, #26
 80072ba:	d42b      	bmi.n	8007314 <_printf_common+0xb0>
 80072bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c0:	4649      	mov	r1, r9
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c0      	blx	r8
 80072c6:	3001      	adds	r0, #1
 80072c8:	d01e      	beq.n	8007308 <_printf_common+0xa4>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	f003 0306 	and.w	r3, r3, #6
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	bf02      	ittt	eq
 80072d6:	68e5      	ldreq	r5, [r4, #12]
 80072d8:	6833      	ldreq	r3, [r6, #0]
 80072da:	1aed      	subeq	r5, r5, r3
 80072dc:	68a3      	ldr	r3, [r4, #8]
 80072de:	bf0c      	ite	eq
 80072e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e4:	2500      	movne	r5, #0
 80072e6:	4293      	cmp	r3, r2
 80072e8:	bfc4      	itt	gt
 80072ea:	1a9b      	subgt	r3, r3, r2
 80072ec:	18ed      	addgt	r5, r5, r3
 80072ee:	2600      	movs	r6, #0
 80072f0:	341a      	adds	r4, #26
 80072f2:	42b5      	cmp	r5, r6
 80072f4:	d11a      	bne.n	800732c <_printf_common+0xc8>
 80072f6:	2000      	movs	r0, #0
 80072f8:	e008      	b.n	800730c <_printf_common+0xa8>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4652      	mov	r2, sl
 80072fe:	4649      	mov	r1, r9
 8007300:	4638      	mov	r0, r7
 8007302:	47c0      	blx	r8
 8007304:	3001      	adds	r0, #1
 8007306:	d103      	bne.n	8007310 <_printf_common+0xac>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007310:	3501      	adds	r5, #1
 8007312:	e7c6      	b.n	80072a2 <_printf_common+0x3e>
 8007314:	18e1      	adds	r1, r4, r3
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	2030      	movs	r0, #48	; 0x30
 800731a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800731e:	4422      	add	r2, r4
 8007320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007328:	3302      	adds	r3, #2
 800732a:	e7c7      	b.n	80072bc <_printf_common+0x58>
 800732c:	2301      	movs	r3, #1
 800732e:	4622      	mov	r2, r4
 8007330:	4649      	mov	r1, r9
 8007332:	4638      	mov	r0, r7
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d0e6      	beq.n	8007308 <_printf_common+0xa4>
 800733a:	3601      	adds	r6, #1
 800733c:	e7d9      	b.n	80072f2 <_printf_common+0x8e>
	...

08007340 <_printf_i>:
 8007340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	7e0f      	ldrb	r7, [r1, #24]
 8007346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007348:	2f78      	cmp	r7, #120	; 0x78
 800734a:	4691      	mov	r9, r2
 800734c:	4680      	mov	r8, r0
 800734e:	460c      	mov	r4, r1
 8007350:	469a      	mov	sl, r3
 8007352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007356:	d807      	bhi.n	8007368 <_printf_i+0x28>
 8007358:	2f62      	cmp	r7, #98	; 0x62
 800735a:	d80a      	bhi.n	8007372 <_printf_i+0x32>
 800735c:	2f00      	cmp	r7, #0
 800735e:	f000 80d4 	beq.w	800750a <_printf_i+0x1ca>
 8007362:	2f58      	cmp	r7, #88	; 0x58
 8007364:	f000 80c0 	beq.w	80074e8 <_printf_i+0x1a8>
 8007368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800736c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007370:	e03a      	b.n	80073e8 <_printf_i+0xa8>
 8007372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007376:	2b15      	cmp	r3, #21
 8007378:	d8f6      	bhi.n	8007368 <_printf_i+0x28>
 800737a:	a101      	add	r1, pc, #4	; (adr r1, 8007380 <_printf_i+0x40>)
 800737c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007380:	080073d9 	.word	0x080073d9
 8007384:	080073ed 	.word	0x080073ed
 8007388:	08007369 	.word	0x08007369
 800738c:	08007369 	.word	0x08007369
 8007390:	08007369 	.word	0x08007369
 8007394:	08007369 	.word	0x08007369
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007369 	.word	0x08007369
 80073a0:	08007369 	.word	0x08007369
 80073a4:	08007369 	.word	0x08007369
 80073a8:	08007369 	.word	0x08007369
 80073ac:	080074f1 	.word	0x080074f1
 80073b0:	08007419 	.word	0x08007419
 80073b4:	080074ab 	.word	0x080074ab
 80073b8:	08007369 	.word	0x08007369
 80073bc:	08007369 	.word	0x08007369
 80073c0:	08007513 	.word	0x08007513
 80073c4:	08007369 	.word	0x08007369
 80073c8:	08007419 	.word	0x08007419
 80073cc:	08007369 	.word	0x08007369
 80073d0:	08007369 	.word	0x08007369
 80073d4:	080074b3 	.word	0x080074b3
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	602a      	str	r2, [r5, #0]
 80073e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e8:	2301      	movs	r3, #1
 80073ea:	e09f      	b.n	800752c <_printf_i+0x1ec>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	682b      	ldr	r3, [r5, #0]
 80073f0:	0607      	lsls	r7, r0, #24
 80073f2:	f103 0104 	add.w	r1, r3, #4
 80073f6:	6029      	str	r1, [r5, #0]
 80073f8:	d501      	bpl.n	80073fe <_printf_i+0xbe>
 80073fa:	681e      	ldr	r6, [r3, #0]
 80073fc:	e003      	b.n	8007406 <_printf_i+0xc6>
 80073fe:	0646      	lsls	r6, r0, #25
 8007400:	d5fb      	bpl.n	80073fa <_printf_i+0xba>
 8007402:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007406:	2e00      	cmp	r6, #0
 8007408:	da03      	bge.n	8007412 <_printf_i+0xd2>
 800740a:	232d      	movs	r3, #45	; 0x2d
 800740c:	4276      	negs	r6, r6
 800740e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007412:	485a      	ldr	r0, [pc, #360]	; (800757c <_printf_i+0x23c>)
 8007414:	230a      	movs	r3, #10
 8007416:	e012      	b.n	800743e <_printf_i+0xfe>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	1d19      	adds	r1, r3, #4
 800741e:	6029      	str	r1, [r5, #0]
 8007420:	0605      	lsls	r5, r0, #24
 8007422:	d501      	bpl.n	8007428 <_printf_i+0xe8>
 8007424:	681e      	ldr	r6, [r3, #0]
 8007426:	e002      	b.n	800742e <_printf_i+0xee>
 8007428:	0641      	lsls	r1, r0, #25
 800742a:	d5fb      	bpl.n	8007424 <_printf_i+0xe4>
 800742c:	881e      	ldrh	r6, [r3, #0]
 800742e:	4853      	ldr	r0, [pc, #332]	; (800757c <_printf_i+0x23c>)
 8007430:	2f6f      	cmp	r7, #111	; 0x6f
 8007432:	bf0c      	ite	eq
 8007434:	2308      	moveq	r3, #8
 8007436:	230a      	movne	r3, #10
 8007438:	2100      	movs	r1, #0
 800743a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800743e:	6865      	ldr	r5, [r4, #4]
 8007440:	60a5      	str	r5, [r4, #8]
 8007442:	2d00      	cmp	r5, #0
 8007444:	bfa2      	ittt	ge
 8007446:	6821      	ldrge	r1, [r4, #0]
 8007448:	f021 0104 	bicge.w	r1, r1, #4
 800744c:	6021      	strge	r1, [r4, #0]
 800744e:	b90e      	cbnz	r6, 8007454 <_printf_i+0x114>
 8007450:	2d00      	cmp	r5, #0
 8007452:	d04b      	beq.n	80074ec <_printf_i+0x1ac>
 8007454:	4615      	mov	r5, r2
 8007456:	fbb6 f1f3 	udiv	r1, r6, r3
 800745a:	fb03 6711 	mls	r7, r3, r1, r6
 800745e:	5dc7      	ldrb	r7, [r0, r7]
 8007460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007464:	4637      	mov	r7, r6
 8007466:	42bb      	cmp	r3, r7
 8007468:	460e      	mov	r6, r1
 800746a:	d9f4      	bls.n	8007456 <_printf_i+0x116>
 800746c:	2b08      	cmp	r3, #8
 800746e:	d10b      	bne.n	8007488 <_printf_i+0x148>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	07de      	lsls	r6, r3, #31
 8007474:	d508      	bpl.n	8007488 <_printf_i+0x148>
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	6861      	ldr	r1, [r4, #4]
 800747a:	4299      	cmp	r1, r3
 800747c:	bfde      	ittt	le
 800747e:	2330      	movle	r3, #48	; 0x30
 8007480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007488:	1b52      	subs	r2, r2, r5
 800748a:	6122      	str	r2, [r4, #16]
 800748c:	f8cd a000 	str.w	sl, [sp]
 8007490:	464b      	mov	r3, r9
 8007492:	aa03      	add	r2, sp, #12
 8007494:	4621      	mov	r1, r4
 8007496:	4640      	mov	r0, r8
 8007498:	f7ff fee4 	bl	8007264 <_printf_common>
 800749c:	3001      	adds	r0, #1
 800749e:	d14a      	bne.n	8007536 <_printf_i+0x1f6>
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	b004      	add	sp, #16
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f043 0320 	orr.w	r3, r3, #32
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	4833      	ldr	r0, [pc, #204]	; (8007580 <_printf_i+0x240>)
 80074b4:	2778      	movs	r7, #120	; 0x78
 80074b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	6829      	ldr	r1, [r5, #0]
 80074be:	061f      	lsls	r7, r3, #24
 80074c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074c4:	d402      	bmi.n	80074cc <_printf_i+0x18c>
 80074c6:	065f      	lsls	r7, r3, #25
 80074c8:	bf48      	it	mi
 80074ca:	b2b6      	uxthmi	r6, r6
 80074cc:	07df      	lsls	r7, r3, #31
 80074ce:	bf48      	it	mi
 80074d0:	f043 0320 	orrmi.w	r3, r3, #32
 80074d4:	6029      	str	r1, [r5, #0]
 80074d6:	bf48      	it	mi
 80074d8:	6023      	strmi	r3, [r4, #0]
 80074da:	b91e      	cbnz	r6, 80074e4 <_printf_i+0x1a4>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	f023 0320 	bic.w	r3, r3, #32
 80074e2:	6023      	str	r3, [r4, #0]
 80074e4:	2310      	movs	r3, #16
 80074e6:	e7a7      	b.n	8007438 <_printf_i+0xf8>
 80074e8:	4824      	ldr	r0, [pc, #144]	; (800757c <_printf_i+0x23c>)
 80074ea:	e7e4      	b.n	80074b6 <_printf_i+0x176>
 80074ec:	4615      	mov	r5, r2
 80074ee:	e7bd      	b.n	800746c <_printf_i+0x12c>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	6826      	ldr	r6, [r4, #0]
 80074f4:	6961      	ldr	r1, [r4, #20]
 80074f6:	1d18      	adds	r0, r3, #4
 80074f8:	6028      	str	r0, [r5, #0]
 80074fa:	0635      	lsls	r5, r6, #24
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0x1c4>
 8007500:	6019      	str	r1, [r3, #0]
 8007502:	e002      	b.n	800750a <_printf_i+0x1ca>
 8007504:	0670      	lsls	r0, r6, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0x1c0>
 8007508:	8019      	strh	r1, [r3, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	4615      	mov	r5, r2
 8007510:	e7bc      	b.n	800748c <_printf_i+0x14c>
 8007512:	682b      	ldr	r3, [r5, #0]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	602a      	str	r2, [r5, #0]
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	6862      	ldr	r2, [r4, #4]
 800751c:	2100      	movs	r1, #0
 800751e:	4628      	mov	r0, r5
 8007520:	f7f8 fe76 	bl	8000210 <memchr>
 8007524:	b108      	cbz	r0, 800752a <_printf_i+0x1ea>
 8007526:	1b40      	subs	r0, r0, r5
 8007528:	6060      	str	r0, [r4, #4]
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	2300      	movs	r3, #0
 8007530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007534:	e7aa      	b.n	800748c <_printf_i+0x14c>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	462a      	mov	r2, r5
 800753a:	4649      	mov	r1, r9
 800753c:	4640      	mov	r0, r8
 800753e:	47d0      	blx	sl
 8007540:	3001      	adds	r0, #1
 8007542:	d0ad      	beq.n	80074a0 <_printf_i+0x160>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	079b      	lsls	r3, r3, #30
 8007548:	d413      	bmi.n	8007572 <_printf_i+0x232>
 800754a:	68e0      	ldr	r0, [r4, #12]
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	4298      	cmp	r0, r3
 8007550:	bfb8      	it	lt
 8007552:	4618      	movlt	r0, r3
 8007554:	e7a6      	b.n	80074a4 <_printf_i+0x164>
 8007556:	2301      	movs	r3, #1
 8007558:	4632      	mov	r2, r6
 800755a:	4649      	mov	r1, r9
 800755c:	4640      	mov	r0, r8
 800755e:	47d0      	blx	sl
 8007560:	3001      	adds	r0, #1
 8007562:	d09d      	beq.n	80074a0 <_printf_i+0x160>
 8007564:	3501      	adds	r5, #1
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	9903      	ldr	r1, [sp, #12]
 800756a:	1a5b      	subs	r3, r3, r1
 800756c:	42ab      	cmp	r3, r5
 800756e:	dcf2      	bgt.n	8007556 <_printf_i+0x216>
 8007570:	e7eb      	b.n	800754a <_printf_i+0x20a>
 8007572:	2500      	movs	r5, #0
 8007574:	f104 0619 	add.w	r6, r4, #25
 8007578:	e7f5      	b.n	8007566 <_printf_i+0x226>
 800757a:	bf00      	nop
 800757c:	0800e132 	.word	0x0800e132
 8007580:	0800e143 	.word	0x0800e143

08007584 <std>:
 8007584:	2300      	movs	r3, #0
 8007586:	b510      	push	{r4, lr}
 8007588:	4604      	mov	r4, r0
 800758a:	e9c0 3300 	strd	r3, r3, [r0]
 800758e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007592:	6083      	str	r3, [r0, #8]
 8007594:	8181      	strh	r1, [r0, #12]
 8007596:	6643      	str	r3, [r0, #100]	; 0x64
 8007598:	81c2      	strh	r2, [r0, #14]
 800759a:	6183      	str	r3, [r0, #24]
 800759c:	4619      	mov	r1, r3
 800759e:	2208      	movs	r2, #8
 80075a0:	305c      	adds	r0, #92	; 0x5c
 80075a2:	f000 f930 	bl	8007806 <memset>
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <std+0x38>)
 80075a8:	6263      	str	r3, [r4, #36]	; 0x24
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <std+0x3c>)
 80075ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <std+0x40>)
 80075b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <std+0x44>)
 80075b4:	6224      	str	r4, [r4, #32]
 80075b6:	6323      	str	r3, [r4, #48]	; 0x30
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	bf00      	nop
 80075bc:	0800774d 	.word	0x0800774d
 80075c0:	0800776f 	.word	0x0800776f
 80075c4:	080077a7 	.word	0x080077a7
 80075c8:	080077cb 	.word	0x080077cb

080075cc <stdio_exit_handler>:
 80075cc:	4a02      	ldr	r2, [pc, #8]	; (80075d8 <stdio_exit_handler+0xc>)
 80075ce:	4903      	ldr	r1, [pc, #12]	; (80075dc <stdio_exit_handler+0x10>)
 80075d0:	4803      	ldr	r0, [pc, #12]	; (80075e0 <stdio_exit_handler+0x14>)
 80075d2:	f000 b869 	b.w	80076a8 <_fwalk_sglue>
 80075d6:	bf00      	nop
 80075d8:	20000034 	.word	0x20000034
 80075dc:	08009181 	.word	0x08009181
 80075e0:	20000040 	.word	0x20000040

080075e4 <cleanup_stdio>:
 80075e4:	6841      	ldr	r1, [r0, #4]
 80075e6:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <cleanup_stdio+0x34>)
 80075e8:	4299      	cmp	r1, r3
 80075ea:	b510      	push	{r4, lr}
 80075ec:	4604      	mov	r4, r0
 80075ee:	d001      	beq.n	80075f4 <cleanup_stdio+0x10>
 80075f0:	f001 fdc6 	bl	8009180 <_fflush_r>
 80075f4:	68a1      	ldr	r1, [r4, #8]
 80075f6:	4b09      	ldr	r3, [pc, #36]	; (800761c <cleanup_stdio+0x38>)
 80075f8:	4299      	cmp	r1, r3
 80075fa:	d002      	beq.n	8007602 <cleanup_stdio+0x1e>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f001 fdbf 	bl	8009180 <_fflush_r>
 8007602:	68e1      	ldr	r1, [r4, #12]
 8007604:	4b06      	ldr	r3, [pc, #24]	; (8007620 <cleanup_stdio+0x3c>)
 8007606:	4299      	cmp	r1, r3
 8007608:	d004      	beq.n	8007614 <cleanup_stdio+0x30>
 800760a:	4620      	mov	r0, r4
 800760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007610:	f001 bdb6 	b.w	8009180 <_fflush_r>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	bf00      	nop
 8007618:	200007f4 	.word	0x200007f4
 800761c:	2000085c 	.word	0x2000085c
 8007620:	200008c4 	.word	0x200008c4

08007624 <global_stdio_init.part.0>:
 8007624:	b510      	push	{r4, lr}
 8007626:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <global_stdio_init.part.0+0x30>)
 8007628:	4c0b      	ldr	r4, [pc, #44]	; (8007658 <global_stdio_init.part.0+0x34>)
 800762a:	4a0c      	ldr	r2, [pc, #48]	; (800765c <global_stdio_init.part.0+0x38>)
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	4620      	mov	r0, r4
 8007630:	2200      	movs	r2, #0
 8007632:	2104      	movs	r1, #4
 8007634:	f7ff ffa6 	bl	8007584 <std>
 8007638:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800763c:	2201      	movs	r2, #1
 800763e:	2109      	movs	r1, #9
 8007640:	f7ff ffa0 	bl	8007584 <std>
 8007644:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007648:	2202      	movs	r2, #2
 800764a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764e:	2112      	movs	r1, #18
 8007650:	f7ff bf98 	b.w	8007584 <std>
 8007654:	2000092c 	.word	0x2000092c
 8007658:	200007f4 	.word	0x200007f4
 800765c:	080075cd 	.word	0x080075cd

08007660 <__sfp_lock_acquire>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__sfp_lock_acquire+0x8>)
 8007662:	f000 b95d 	b.w	8007920 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	20000935 	.word	0x20000935

0800766c <__sfp_lock_release>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__sfp_lock_release+0x8>)
 800766e:	f000 b958 	b.w	8007922 <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	20000935 	.word	0x20000935

08007678 <__sinit>:
 8007678:	b510      	push	{r4, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	f7ff fff0 	bl	8007660 <__sfp_lock_acquire>
 8007680:	6a23      	ldr	r3, [r4, #32]
 8007682:	b11b      	cbz	r3, 800768c <__sinit+0x14>
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	f7ff bff0 	b.w	800766c <__sfp_lock_release>
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <__sinit+0x28>)
 800768e:	6223      	str	r3, [r4, #32]
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <__sinit+0x2c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f5      	bne.n	8007684 <__sinit+0xc>
 8007698:	f7ff ffc4 	bl	8007624 <global_stdio_init.part.0>
 800769c:	e7f2      	b.n	8007684 <__sinit+0xc>
 800769e:	bf00      	nop
 80076a0:	080075e5 	.word	0x080075e5
 80076a4:	2000092c 	.word	0x2000092c

080076a8 <_fwalk_sglue>:
 80076a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ac:	4607      	mov	r7, r0
 80076ae:	4688      	mov	r8, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	2600      	movs	r6, #0
 80076b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076b8:	f1b9 0901 	subs.w	r9, r9, #1
 80076bc:	d505      	bpl.n	80076ca <_fwalk_sglue+0x22>
 80076be:	6824      	ldr	r4, [r4, #0]
 80076c0:	2c00      	cmp	r4, #0
 80076c2:	d1f7      	bne.n	80076b4 <_fwalk_sglue+0xc>
 80076c4:	4630      	mov	r0, r6
 80076c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d907      	bls.n	80076e0 <_fwalk_sglue+0x38>
 80076d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076d4:	3301      	adds	r3, #1
 80076d6:	d003      	beq.n	80076e0 <_fwalk_sglue+0x38>
 80076d8:	4629      	mov	r1, r5
 80076da:	4638      	mov	r0, r7
 80076dc:	47c0      	blx	r8
 80076de:	4306      	orrs	r6, r0
 80076e0:	3568      	adds	r5, #104	; 0x68
 80076e2:	e7e9      	b.n	80076b8 <_fwalk_sglue+0x10>

080076e4 <sniprintf>:
 80076e4:	b40c      	push	{r2, r3}
 80076e6:	b530      	push	{r4, r5, lr}
 80076e8:	4b17      	ldr	r3, [pc, #92]	; (8007748 <sniprintf+0x64>)
 80076ea:	1e0c      	subs	r4, r1, #0
 80076ec:	681d      	ldr	r5, [r3, #0]
 80076ee:	b09d      	sub	sp, #116	; 0x74
 80076f0:	da08      	bge.n	8007704 <sniprintf+0x20>
 80076f2:	238b      	movs	r3, #139	; 0x8b
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	f04f 30ff 	mov.w	r0, #4294967295
 80076fa:	b01d      	add	sp, #116	; 0x74
 80076fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007700:	b002      	add	sp, #8
 8007702:	4770      	bx	lr
 8007704:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007708:	f8ad 3014 	strh.w	r3, [sp, #20]
 800770c:	bf14      	ite	ne
 800770e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007712:	4623      	moveq	r3, r4
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	9307      	str	r3, [sp, #28]
 8007718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800771c:	9002      	str	r0, [sp, #8]
 800771e:	9006      	str	r0, [sp, #24]
 8007720:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007724:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007726:	ab21      	add	r3, sp, #132	; 0x84
 8007728:	a902      	add	r1, sp, #8
 800772a:	4628      	mov	r0, r5
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	f001 fba3 	bl	8008e78 <_svfiprintf_r>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	bfbc      	itt	lt
 8007736:	238b      	movlt	r3, #139	; 0x8b
 8007738:	602b      	strlt	r3, [r5, #0]
 800773a:	2c00      	cmp	r4, #0
 800773c:	d0dd      	beq.n	80076fa <sniprintf+0x16>
 800773e:	9b02      	ldr	r3, [sp, #8]
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e7d9      	b.n	80076fa <sniprintf+0x16>
 8007746:	bf00      	nop
 8007748:	2000008c 	.word	0x2000008c

0800774c <__sread>:
 800774c:	b510      	push	{r4, lr}
 800774e:	460c      	mov	r4, r1
 8007750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007754:	f000 f886 	bl	8007864 <_read_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	bfab      	itete	ge
 800775c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800775e:	89a3      	ldrhlt	r3, [r4, #12]
 8007760:	181b      	addge	r3, r3, r0
 8007762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007766:	bfac      	ite	ge
 8007768:	6563      	strge	r3, [r4, #84]	; 0x54
 800776a:	81a3      	strhlt	r3, [r4, #12]
 800776c:	bd10      	pop	{r4, pc}

0800776e <__swrite>:
 800776e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007772:	461f      	mov	r7, r3
 8007774:	898b      	ldrh	r3, [r1, #12]
 8007776:	05db      	lsls	r3, r3, #23
 8007778:	4605      	mov	r5, r0
 800777a:	460c      	mov	r4, r1
 800777c:	4616      	mov	r6, r2
 800777e:	d505      	bpl.n	800778c <__swrite+0x1e>
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	2302      	movs	r3, #2
 8007786:	2200      	movs	r2, #0
 8007788:	f000 f85a 	bl	8007840 <_lseek_r>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a2:	f000 b881 	b.w	80078a8 <_write_r>

080077a6 <__sseek>:
 80077a6:	b510      	push	{r4, lr}
 80077a8:	460c      	mov	r4, r1
 80077aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ae:	f000 f847 	bl	8007840 <_lseek_r>
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	bf15      	itete	ne
 80077b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077c2:	81a3      	strheq	r3, [r4, #12]
 80077c4:	bf18      	it	ne
 80077c6:	81a3      	strhne	r3, [r4, #12]
 80077c8:	bd10      	pop	{r4, pc}

080077ca <__sclose>:
 80077ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ce:	f000 b827 	b.w	8007820 <_close_r>

080077d2 <memmove>:
 80077d2:	4288      	cmp	r0, r1
 80077d4:	b510      	push	{r4, lr}
 80077d6:	eb01 0402 	add.w	r4, r1, r2
 80077da:	d902      	bls.n	80077e2 <memmove+0x10>
 80077dc:	4284      	cmp	r4, r0
 80077de:	4623      	mov	r3, r4
 80077e0:	d807      	bhi.n	80077f2 <memmove+0x20>
 80077e2:	1e43      	subs	r3, r0, #1
 80077e4:	42a1      	cmp	r1, r4
 80077e6:	d008      	beq.n	80077fa <memmove+0x28>
 80077e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077f0:	e7f8      	b.n	80077e4 <memmove+0x12>
 80077f2:	4402      	add	r2, r0
 80077f4:	4601      	mov	r1, r0
 80077f6:	428a      	cmp	r2, r1
 80077f8:	d100      	bne.n	80077fc <memmove+0x2a>
 80077fa:	bd10      	pop	{r4, pc}
 80077fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007800:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007804:	e7f7      	b.n	80077f6 <memmove+0x24>

08007806 <memset>:
 8007806:	4402      	add	r2, r0
 8007808:	4603      	mov	r3, r0
 800780a:	4293      	cmp	r3, r2
 800780c:	d100      	bne.n	8007810 <memset+0xa>
 800780e:	4770      	bx	lr
 8007810:	f803 1b01 	strb.w	r1, [r3], #1
 8007814:	e7f9      	b.n	800780a <memset+0x4>
	...

08007818 <_localeconv_r>:
 8007818:	4800      	ldr	r0, [pc, #0]	; (800781c <_localeconv_r+0x4>)
 800781a:	4770      	bx	lr
 800781c:	20000180 	.word	0x20000180

08007820 <_close_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d06      	ldr	r5, [pc, #24]	; (800783c <_close_r+0x1c>)
 8007824:	2300      	movs	r3, #0
 8007826:	4604      	mov	r4, r0
 8007828:	4608      	mov	r0, r1
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	f7fa f99d 	bl	8001b6a <_close>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_close_r+0x1a>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_close_r+0x1a>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000930 	.word	0x20000930

08007840 <_lseek_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d07      	ldr	r5, [pc, #28]	; (8007860 <_lseek_r+0x20>)
 8007844:	4604      	mov	r4, r0
 8007846:	4608      	mov	r0, r1
 8007848:	4611      	mov	r1, r2
 800784a:	2200      	movs	r2, #0
 800784c:	602a      	str	r2, [r5, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	f7fa f9b2 	bl	8001bb8 <_lseek>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_lseek_r+0x1e>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_lseek_r+0x1e>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20000930 	.word	0x20000930

08007864 <_read_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d07      	ldr	r5, [pc, #28]	; (8007884 <_read_r+0x20>)
 8007868:	4604      	mov	r4, r0
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	2200      	movs	r2, #0
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f7fa f940 	bl	8001af8 <_read>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_read_r+0x1e>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_read_r+0x1e>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	20000930 	.word	0x20000930

08007888 <_sbrk_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	; (80078a4 <_sbrk_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7fa f99e 	bl	8001bd4 <_sbrk>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_sbrk_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_sbrk_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000930 	.word	0x20000930

080078a8 <_write_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	; (80078c8 <_write_r+0x20>)
 80078ac:	4604      	mov	r4, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	602a      	str	r2, [r5, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7fa f93b 	bl	8001b32 <_write>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_write_r+0x1e>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_write_r+0x1e>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000930 	.word	0x20000930

080078cc <__errno>:
 80078cc:	4b01      	ldr	r3, [pc, #4]	; (80078d4 <__errno+0x8>)
 80078ce:	6818      	ldr	r0, [r3, #0]
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	2000008c 	.word	0x2000008c

080078d8 <__libc_init_array>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4d0d      	ldr	r5, [pc, #52]	; (8007910 <__libc_init_array+0x38>)
 80078dc:	4c0d      	ldr	r4, [pc, #52]	; (8007914 <__libc_init_array+0x3c>)
 80078de:	1b64      	subs	r4, r4, r5
 80078e0:	10a4      	asrs	r4, r4, #2
 80078e2:	2600      	movs	r6, #0
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	d109      	bne.n	80078fc <__libc_init_array+0x24>
 80078e8:	4d0b      	ldr	r5, [pc, #44]	; (8007918 <__libc_init_array+0x40>)
 80078ea:	4c0c      	ldr	r4, [pc, #48]	; (800791c <__libc_init_array+0x44>)
 80078ec:	f001 ffb4 	bl	8009858 <_init>
 80078f0:	1b64      	subs	r4, r4, r5
 80078f2:	10a4      	asrs	r4, r4, #2
 80078f4:	2600      	movs	r6, #0
 80078f6:	42a6      	cmp	r6, r4
 80078f8:	d105      	bne.n	8007906 <__libc_init_array+0x2e>
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007900:	4798      	blx	r3
 8007902:	3601      	adds	r6, #1
 8007904:	e7ee      	b.n	80078e4 <__libc_init_array+0xc>
 8007906:	f855 3b04 	ldr.w	r3, [r5], #4
 800790a:	4798      	blx	r3
 800790c:	3601      	adds	r6, #1
 800790e:	e7f2      	b.n	80078f6 <__libc_init_array+0x1e>
 8007910:	0800e49c 	.word	0x0800e49c
 8007914:	0800e49c 	.word	0x0800e49c
 8007918:	0800e49c 	.word	0x0800e49c
 800791c:	0800e4a0 	.word	0x0800e4a0

08007920 <__retarget_lock_acquire_recursive>:
 8007920:	4770      	bx	lr

08007922 <__retarget_lock_release_recursive>:
 8007922:	4770      	bx	lr

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <quorem>:
 8007940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	6903      	ldr	r3, [r0, #16]
 8007946:	690c      	ldr	r4, [r1, #16]
 8007948:	42a3      	cmp	r3, r4
 800794a:	4607      	mov	r7, r0
 800794c:	db7e      	blt.n	8007a4c <quorem+0x10c>
 800794e:	3c01      	subs	r4, #1
 8007950:	f101 0814 	add.w	r8, r1, #20
 8007954:	f100 0514 	add.w	r5, r0, #20
 8007958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007962:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007966:	3301      	adds	r3, #1
 8007968:	429a      	cmp	r2, r3
 800796a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800796e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007972:	fbb2 f6f3 	udiv	r6, r2, r3
 8007976:	d331      	bcc.n	80079dc <quorem+0x9c>
 8007978:	f04f 0e00 	mov.w	lr, #0
 800797c:	4640      	mov	r0, r8
 800797e:	46ac      	mov	ip, r5
 8007980:	46f2      	mov	sl, lr
 8007982:	f850 2b04 	ldr.w	r2, [r0], #4
 8007986:	b293      	uxth	r3, r2
 8007988:	fb06 e303 	mla	r3, r6, r3, lr
 800798c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007990:	0c1a      	lsrs	r2, r3, #16
 8007992:	b29b      	uxth	r3, r3
 8007994:	ebaa 0303 	sub.w	r3, sl, r3
 8007998:	f8dc a000 	ldr.w	sl, [ip]
 800799c:	fa13 f38a 	uxtah	r3, r3, sl
 80079a0:	fb06 220e 	mla	r2, r6, lr, r2
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ac:	b292      	uxth	r2, r2
 80079ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80079ba:	4581      	cmp	r9, r0
 80079bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c0:	f84c 3b04 	str.w	r3, [ip], #4
 80079c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079c8:	d2db      	bcs.n	8007982 <quorem+0x42>
 80079ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80079ce:	b92b      	cbnz	r3, 80079dc <quorem+0x9c>
 80079d0:	9b01      	ldr	r3, [sp, #4]
 80079d2:	3b04      	subs	r3, #4
 80079d4:	429d      	cmp	r5, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	d32c      	bcc.n	8007a34 <quorem+0xf4>
 80079da:	613c      	str	r4, [r7, #16]
 80079dc:	4638      	mov	r0, r7
 80079de:	f001 f8f1 	bl	8008bc4 <__mcmp>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	db22      	blt.n	8007a2c <quorem+0xec>
 80079e6:	3601      	adds	r6, #1
 80079e8:	4629      	mov	r1, r5
 80079ea:	2000      	movs	r0, #0
 80079ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80079f0:	f8d1 c000 	ldr.w	ip, [r1]
 80079f4:	b293      	uxth	r3, r2
 80079f6:	1ac3      	subs	r3, r0, r3
 80079f8:	0c12      	lsrs	r2, r2, #16
 80079fa:	fa13 f38c 	uxtah	r3, r3, ip
 80079fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0c:	45c1      	cmp	r9, r8
 8007a0e:	f841 3b04 	str.w	r3, [r1], #4
 8007a12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a16:	d2e9      	bcs.n	80079ec <quorem+0xac>
 8007a18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a20:	b922      	cbnz	r2, 8007a2c <quorem+0xec>
 8007a22:	3b04      	subs	r3, #4
 8007a24:	429d      	cmp	r5, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	d30a      	bcc.n	8007a40 <quorem+0x100>
 8007a2a:	613c      	str	r4, [r7, #16]
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	b003      	add	sp, #12
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a34:	6812      	ldr	r2, [r2, #0]
 8007a36:	3b04      	subs	r3, #4
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	d1ce      	bne.n	80079da <quorem+0x9a>
 8007a3c:	3c01      	subs	r4, #1
 8007a3e:	e7c9      	b.n	80079d4 <quorem+0x94>
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	3b04      	subs	r3, #4
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d1f0      	bne.n	8007a2a <quorem+0xea>
 8007a48:	3c01      	subs	r4, #1
 8007a4a:	e7eb      	b.n	8007a24 <quorem+0xe4>
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	e7ee      	b.n	8007a2e <quorem+0xee>

08007a50 <_dtoa_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	ed2d 8b04 	vpush	{d8-d9}
 8007a58:	69c5      	ldr	r5, [r0, #28]
 8007a5a:	b093      	sub	sp, #76	; 0x4c
 8007a5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a60:	ec57 6b10 	vmov	r6, r7, d0
 8007a64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a68:	9107      	str	r1, [sp, #28]
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a70:	b975      	cbnz	r5, 8007a90 <_dtoa_r+0x40>
 8007a72:	2010      	movs	r0, #16
 8007a74:	f7ff f86c 	bl	8006b50 <malloc>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	61e0      	str	r0, [r4, #28]
 8007a7c:	b920      	cbnz	r0, 8007a88 <_dtoa_r+0x38>
 8007a7e:	4bae      	ldr	r3, [pc, #696]	; (8007d38 <_dtoa_r+0x2e8>)
 8007a80:	21ef      	movs	r1, #239	; 0xef
 8007a82:	48ae      	ldr	r0, [pc, #696]	; (8007d3c <_dtoa_r+0x2ec>)
 8007a84:	f001 fba4 	bl	80091d0 <__assert_func>
 8007a88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a8c:	6005      	str	r5, [r0, #0]
 8007a8e:	60c5      	str	r5, [r0, #12]
 8007a90:	69e3      	ldr	r3, [r4, #28]
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	b151      	cbz	r1, 8007aac <_dtoa_r+0x5c>
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	604a      	str	r2, [r1, #4]
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4093      	lsls	r3, r2
 8007a9e:	608b      	str	r3, [r1, #8]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fe53 	bl	800874c <_Bfree>
 8007aa6:	69e3      	ldr	r3, [r4, #28]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	1e3b      	subs	r3, r7, #0
 8007aae:	bfbb      	ittet	lt
 8007ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ab4:	9303      	strlt	r3, [sp, #12]
 8007ab6:	2300      	movge	r3, #0
 8007ab8:	2201      	movlt	r2, #1
 8007aba:	bfac      	ite	ge
 8007abc:	f8c8 3000 	strge.w	r3, [r8]
 8007ac0:	f8c8 2000 	strlt.w	r2, [r8]
 8007ac4:	4b9e      	ldr	r3, [pc, #632]	; (8007d40 <_dtoa_r+0x2f0>)
 8007ac6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007aca:	ea33 0308 	bics.w	r3, r3, r8
 8007ace:	d11b      	bne.n	8007b08 <_dtoa_r+0xb8>
 8007ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ad2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007adc:	4333      	orrs	r3, r6
 8007ade:	f000 8593 	beq.w	8008608 <_dtoa_r+0xbb8>
 8007ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae4:	b963      	cbnz	r3, 8007b00 <_dtoa_r+0xb0>
 8007ae6:	4b97      	ldr	r3, [pc, #604]	; (8007d44 <_dtoa_r+0x2f4>)
 8007ae8:	e027      	b.n	8007b3a <_dtoa_r+0xea>
 8007aea:	4b97      	ldr	r3, [pc, #604]	; (8007d48 <_dtoa_r+0x2f8>)
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	9800      	ldr	r0, [sp, #0]
 8007af6:	b013      	add	sp, #76	; 0x4c
 8007af8:	ecbd 8b04 	vpop	{d8-d9}
 8007afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b00:	4b90      	ldr	r3, [pc, #576]	; (8007d44 <_dtoa_r+0x2f4>)
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	3303      	adds	r3, #3
 8007b06:	e7f3      	b.n	8007af0 <_dtoa_r+0xa0>
 8007b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	ec51 0b17 	vmov	r0, r1, d7
 8007b12:	eeb0 8a47 	vmov.f32	s16, s14
 8007b16:	eef0 8a67 	vmov.f32	s17, s15
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f7f8 fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8007b20:	4681      	mov	r9, r0
 8007b22:	b160      	cbz	r0, 8007b3e <_dtoa_r+0xee>
 8007b24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b26:	2301      	movs	r3, #1
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8568 	beq.w	8008602 <_dtoa_r+0xbb2>
 8007b32:	4b86      	ldr	r3, [pc, #536]	; (8007d4c <_dtoa_r+0x2fc>)
 8007b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	e7da      	b.n	8007af4 <_dtoa_r+0xa4>
 8007b3e:	aa10      	add	r2, sp, #64	; 0x40
 8007b40:	a911      	add	r1, sp, #68	; 0x44
 8007b42:	4620      	mov	r0, r4
 8007b44:	eeb0 0a48 	vmov.f32	s0, s16
 8007b48:	eef0 0a68 	vmov.f32	s1, s17
 8007b4c:	f001 f8e0 	bl	8008d10 <__d2b>
 8007b50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b54:	4682      	mov	sl, r0
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	d07f      	beq.n	8007c5a <_dtoa_r+0x20a>
 8007b5a:	ee18 3a90 	vmov	r3, s17
 8007b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b66:	ec51 0b18 	vmov	r0, r1, d8
 8007b6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b76:	4619      	mov	r1, r3
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4b75      	ldr	r3, [pc, #468]	; (8007d50 <_dtoa_r+0x300>)
 8007b7c:	f7f8 fba4 	bl	80002c8 <__aeabi_dsub>
 8007b80:	a367      	add	r3, pc, #412	; (adr r3, 8007d20 <_dtoa_r+0x2d0>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fd57 	bl	8000638 <__aeabi_dmul>
 8007b8a:	a367      	add	r3, pc, #412	; (adr r3, 8007d28 <_dtoa_r+0x2d8>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fb9c 	bl	80002cc <__adddf3>
 8007b94:	4606      	mov	r6, r0
 8007b96:	4628      	mov	r0, r5
 8007b98:	460f      	mov	r7, r1
 8007b9a:	f7f8 fce3 	bl	8000564 <__aeabi_i2d>
 8007b9e:	a364      	add	r3, pc, #400	; (adr r3, 8007d30 <_dtoa_r+0x2e0>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fd48 	bl	8000638 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 fb8c 	bl	80002cc <__adddf3>
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	f7f8 ffee 	bl	8000b98 <__aeabi_d2iz>
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4683      	mov	fp, r0
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 ffa9 	bl	8000b1c <__aeabi_dcmplt>
 8007bca:	b148      	cbz	r0, 8007be0 <_dtoa_r+0x190>
 8007bcc:	4658      	mov	r0, fp
 8007bce:	f7f8 fcc9 	bl	8000564 <__aeabi_i2d>
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	f7f8 ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8007bda:	b908      	cbnz	r0, 8007be0 <_dtoa_r+0x190>
 8007bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007be0:	f1bb 0f16 	cmp.w	fp, #22
 8007be4:	d857      	bhi.n	8007c96 <_dtoa_r+0x246>
 8007be6:	4b5b      	ldr	r3, [pc, #364]	; (8007d54 <_dtoa_r+0x304>)
 8007be8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	ec51 0b18 	vmov	r0, r1, d8
 8007bf4:	f7f8 ff92 	bl	8000b1c <__aeabi_dcmplt>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d04e      	beq.n	8007c9a <_dtoa_r+0x24a>
 8007bfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c00:	2300      	movs	r3, #0
 8007c02:	930c      	str	r3, [sp, #48]	; 0x30
 8007c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c06:	1b5b      	subs	r3, r3, r5
 8007c08:	1e5a      	subs	r2, r3, #1
 8007c0a:	bf45      	ittet	mi
 8007c0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c10:	9305      	strmi	r3, [sp, #20]
 8007c12:	2300      	movpl	r3, #0
 8007c14:	2300      	movmi	r3, #0
 8007c16:	9206      	str	r2, [sp, #24]
 8007c18:	bf54      	ite	pl
 8007c1a:	9305      	strpl	r3, [sp, #20]
 8007c1c:	9306      	strmi	r3, [sp, #24]
 8007c1e:	f1bb 0f00 	cmp.w	fp, #0
 8007c22:	db3c      	blt.n	8007c9e <_dtoa_r+0x24e>
 8007c24:	9b06      	ldr	r3, [sp, #24]
 8007c26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c2a:	445b      	add	r3, fp
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9308      	str	r3, [sp, #32]
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d868      	bhi.n	8007d0a <_dtoa_r+0x2ba>
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	bfc4      	itt	gt
 8007c3c:	3b04      	subgt	r3, #4
 8007c3e:	9307      	strgt	r3, [sp, #28]
 8007c40:	9b07      	ldr	r3, [sp, #28]
 8007c42:	f1a3 0302 	sub.w	r3, r3, #2
 8007c46:	bfcc      	ite	gt
 8007c48:	2500      	movgt	r5, #0
 8007c4a:	2501      	movle	r5, #1
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	f200 8085 	bhi.w	8007d5c <_dtoa_r+0x30c>
 8007c52:	e8df f003 	tbb	[pc, r3]
 8007c56:	3b2e      	.short	0x3b2e
 8007c58:	5839      	.short	0x5839
 8007c5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c5e:	441d      	add	r5, r3
 8007c60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	bfc1      	itttt	gt
 8007c68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c78:	bfd6      	itet	le
 8007c7a:	f1c3 0320 	rsble	r3, r3, #32
 8007c7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c82:	fa06 f003 	lslle.w	r0, r6, r3
 8007c86:	f7f8 fc5d 	bl	8000544 <__aeabi_ui2d>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c90:	3d01      	subs	r5, #1
 8007c92:	920e      	str	r2, [sp, #56]	; 0x38
 8007c94:	e76f      	b.n	8007b76 <_dtoa_r+0x126>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7b3      	b.n	8007c02 <_dtoa_r+0x1b2>
 8007c9a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c9c:	e7b2      	b.n	8007c04 <_dtoa_r+0x1b4>
 8007c9e:	9b05      	ldr	r3, [sp, #20]
 8007ca0:	eba3 030b 	sub.w	r3, r3, fp
 8007ca4:	9305      	str	r3, [sp, #20]
 8007ca6:	f1cb 0300 	rsb	r3, fp, #0
 8007caa:	9308      	str	r3, [sp, #32]
 8007cac:	2300      	movs	r3, #0
 8007cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cb0:	e7bf      	b.n	8007c32 <_dtoa_r+0x1e2>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc52      	bgt.n	8007d62 <_dtoa_r+0x312>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007cc6:	e00b      	b.n	8007ce0 <_dtoa_r+0x290>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e7f3      	b.n	8007cb4 <_dtoa_r+0x264>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd2:	445b      	add	r3, fp
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	bfb8      	it	lt
 8007cde:	2301      	movlt	r3, #1
 8007ce0:	69e0      	ldr	r0, [r4, #28]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	f102 0614 	add.w	r6, r2, #20
 8007cea:	429e      	cmp	r6, r3
 8007cec:	d93d      	bls.n	8007d6a <_dtoa_r+0x31a>
 8007cee:	6041      	str	r1, [r0, #4]
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fceb 	bl	80086cc <_Balloc>
 8007cf6:	9000      	str	r0, [sp, #0]
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d139      	bne.n	8007d70 <_dtoa_r+0x320>
 8007cfc:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <_dtoa_r+0x308>)
 8007cfe:	4602      	mov	r2, r0
 8007d00:	f240 11af 	movw	r1, #431	; 0x1af
 8007d04:	e6bd      	b.n	8007a82 <_dtoa_r+0x32>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e7e1      	b.n	8007cce <_dtoa_r+0x27e>
 8007d0a:	2501      	movs	r5, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	9509      	str	r5, [sp, #36]	; 0x24
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2312      	movs	r3, #18
 8007d1e:	e7d1      	b.n	8007cc4 <_dtoa_r+0x274>
 8007d20:	636f4361 	.word	0x636f4361
 8007d24:	3fd287a7 	.word	0x3fd287a7
 8007d28:	8b60c8b3 	.word	0x8b60c8b3
 8007d2c:	3fc68a28 	.word	0x3fc68a28
 8007d30:	509f79fb 	.word	0x509f79fb
 8007d34:	3fd34413 	.word	0x3fd34413
 8007d38:	0800e161 	.word	0x0800e161
 8007d3c:	0800e178 	.word	0x0800e178
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	0800e15d 	.word	0x0800e15d
 8007d48:	0800e154 	.word	0x0800e154
 8007d4c:	0800e131 	.word	0x0800e131
 8007d50:	3ff80000 	.word	0x3ff80000
 8007d54:	0800e268 	.word	0x0800e268
 8007d58:	0800e1d0 	.word	0x0800e1d0
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d60:	e7d7      	b.n	8007d12 <_dtoa_r+0x2c2>
 8007d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	e7ba      	b.n	8007ce0 <_dtoa_r+0x290>
 8007d6a:	3101      	adds	r1, #1
 8007d6c:	0052      	lsls	r2, r2, #1
 8007d6e:	e7ba      	b.n	8007ce6 <_dtoa_r+0x296>
 8007d70:	69e3      	ldr	r3, [r4, #28]
 8007d72:	9a00      	ldr	r2, [sp, #0]
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	2b0e      	cmp	r3, #14
 8007d7a:	f200 80a8 	bhi.w	8007ece <_dtoa_r+0x47e>
 8007d7e:	2d00      	cmp	r5, #0
 8007d80:	f000 80a5 	beq.w	8007ece <_dtoa_r+0x47e>
 8007d84:	f1bb 0f00 	cmp.w	fp, #0
 8007d88:	dd38      	ble.n	8007dfc <_dtoa_r+0x3ac>
 8007d8a:	4bc0      	ldr	r3, [pc, #768]	; (800808c <_dtoa_r+0x63c>)
 8007d8c:	f00b 020f 	and.w	r2, fp, #15
 8007d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007da0:	d019      	beq.n	8007dd6 <_dtoa_r+0x386>
 8007da2:	4bbb      	ldr	r3, [pc, #748]	; (8008090 <_dtoa_r+0x640>)
 8007da4:	ec51 0b18 	vmov	r0, r1, d8
 8007da8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dac:	f7f8 fd6e 	bl	800088c <__aeabi_ddiv>
 8007db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db4:	f008 080f 	and.w	r8, r8, #15
 8007db8:	2503      	movs	r5, #3
 8007dba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008090 <_dtoa_r+0x640>
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d10a      	bne.n	8007dda <_dtoa_r+0x38a>
 8007dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc8:	4632      	mov	r2, r6
 8007dca:	463b      	mov	r3, r7
 8007dcc:	f7f8 fd5e 	bl	800088c <__aeabi_ddiv>
 8007dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd4:	e02b      	b.n	8007e2e <_dtoa_r+0x3de>
 8007dd6:	2502      	movs	r5, #2
 8007dd8:	e7ef      	b.n	8007dba <_dtoa_r+0x36a>
 8007dda:	f018 0f01 	tst.w	r8, #1
 8007dde:	d008      	beq.n	8007df2 <_dtoa_r+0x3a2>
 8007de0:	4630      	mov	r0, r6
 8007de2:	4639      	mov	r1, r7
 8007de4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007de8:	f7f8 fc26 	bl	8000638 <__aeabi_dmul>
 8007dec:	3501      	adds	r5, #1
 8007dee:	4606      	mov	r6, r0
 8007df0:	460f      	mov	r7, r1
 8007df2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007df6:	f109 0908 	add.w	r9, r9, #8
 8007dfa:	e7e0      	b.n	8007dbe <_dtoa_r+0x36e>
 8007dfc:	f000 809f 	beq.w	8007f3e <_dtoa_r+0x4ee>
 8007e00:	f1cb 0600 	rsb	r6, fp, #0
 8007e04:	4ba1      	ldr	r3, [pc, #644]	; (800808c <_dtoa_r+0x63c>)
 8007e06:	4fa2      	ldr	r7, [pc, #648]	; (8008090 <_dtoa_r+0x640>)
 8007e08:	f006 020f 	and.w	r2, r6, #15
 8007e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	ec51 0b18 	vmov	r0, r1, d8
 8007e18:	f7f8 fc0e 	bl	8000638 <__aeabi_dmul>
 8007e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e20:	1136      	asrs	r6, r6, #4
 8007e22:	2300      	movs	r3, #0
 8007e24:	2502      	movs	r5, #2
 8007e26:	2e00      	cmp	r6, #0
 8007e28:	d17e      	bne.n	8007f28 <_dtoa_r+0x4d8>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1d0      	bne.n	8007dd0 <_dtoa_r+0x380>
 8007e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8084 	beq.w	8007f42 <_dtoa_r+0x4f2>
 8007e3a:	4b96      	ldr	r3, [pc, #600]	; (8008094 <_dtoa_r+0x644>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7f8 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d07b      	beq.n	8007f42 <_dtoa_r+0x4f2>
 8007e4a:	9b04      	ldr	r3, [sp, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d078      	beq.n	8007f42 <_dtoa_r+0x4f2>
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dd39      	ble.n	8007eca <_dtoa_r+0x47a>
 8007e56:	4b90      	ldr	r3, [pc, #576]	; (8008098 <_dtoa_r+0x648>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	f7f8 fbeb 	bl	8000638 <__aeabi_dmul>
 8007e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e66:	9e01      	ldr	r6, [sp, #4]
 8007e68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7f8 fb76 	bl	8000564 <__aeabi_i2d>
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	f7f8 fbdc 	bl	8000638 <__aeabi_dmul>
 8007e80:	4b86      	ldr	r3, [pc, #536]	; (800809c <_dtoa_r+0x64c>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	f7f8 fa22 	bl	80002cc <__adddf3>
 8007e88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e90:	9303      	str	r3, [sp, #12]
 8007e92:	2e00      	cmp	r6, #0
 8007e94:	d158      	bne.n	8007f48 <_dtoa_r+0x4f8>
 8007e96:	4b82      	ldr	r3, [pc, #520]	; (80080a0 <_dtoa_r+0x650>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	f7f8 fa13 	bl	80002c8 <__aeabi_dsub>
 8007ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	4689      	mov	r9, r1
 8007eaa:	f7f8 fe55 	bl	8000b58 <__aeabi_dcmpgt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f040 8296 	bne.w	80083e0 <_dtoa_r+0x990>
 8007eb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007eb8:	4640      	mov	r0, r8
 8007eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 8289 	bne.w	80083dc <_dtoa_r+0x98c>
 8007eca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f2c0 814e 	blt.w	8008172 <_dtoa_r+0x722>
 8007ed6:	f1bb 0f0e 	cmp.w	fp, #14
 8007eda:	f300 814a 	bgt.w	8008172 <_dtoa_r+0x722>
 8007ede:	4b6b      	ldr	r3, [pc, #428]	; (800808c <_dtoa_r+0x63c>)
 8007ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f280 80dc 	bge.w	80080a8 <_dtoa_r+0x658>
 8007ef0:	9b04      	ldr	r3, [sp, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f300 80d8 	bgt.w	80080a8 <_dtoa_r+0x658>
 8007ef8:	f040 826f 	bne.w	80083da <_dtoa_r+0x98a>
 8007efc:	4b68      	ldr	r3, [pc, #416]	; (80080a0 <_dtoa_r+0x650>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	4640      	mov	r0, r8
 8007f02:	4649      	mov	r1, r9
 8007f04:	f7f8 fb98 	bl	8000638 <__aeabi_dmul>
 8007f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f0c:	f7f8 fe1a 	bl	8000b44 <__aeabi_dcmpge>
 8007f10:	9e04      	ldr	r6, [sp, #16]
 8007f12:	4637      	mov	r7, r6
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f040 8245 	bne.w	80083a4 <_dtoa_r+0x954>
 8007f1a:	9d00      	ldr	r5, [sp, #0]
 8007f1c:	2331      	movs	r3, #49	; 0x31
 8007f1e:	f805 3b01 	strb.w	r3, [r5], #1
 8007f22:	f10b 0b01 	add.w	fp, fp, #1
 8007f26:	e241      	b.n	80083ac <_dtoa_r+0x95c>
 8007f28:	07f2      	lsls	r2, r6, #31
 8007f2a:	d505      	bpl.n	8007f38 <_dtoa_r+0x4e8>
 8007f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f30:	f7f8 fb82 	bl	8000638 <__aeabi_dmul>
 8007f34:	3501      	adds	r5, #1
 8007f36:	2301      	movs	r3, #1
 8007f38:	1076      	asrs	r6, r6, #1
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	e773      	b.n	8007e26 <_dtoa_r+0x3d6>
 8007f3e:	2502      	movs	r5, #2
 8007f40:	e775      	b.n	8007e2e <_dtoa_r+0x3de>
 8007f42:	9e04      	ldr	r6, [sp, #16]
 8007f44:	465f      	mov	r7, fp
 8007f46:	e792      	b.n	8007e6e <_dtoa_r+0x41e>
 8007f48:	9900      	ldr	r1, [sp, #0]
 8007f4a:	4b50      	ldr	r3, [pc, #320]	; (800808c <_dtoa_r+0x63c>)
 8007f4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f50:	4431      	add	r1, r6
 8007f52:	9102      	str	r1, [sp, #8]
 8007f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f56:	eeb0 9a47 	vmov.f32	s18, s14
 8007f5a:	eef0 9a67 	vmov.f32	s19, s15
 8007f5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d044      	beq.n	8007ff4 <_dtoa_r+0x5a4>
 8007f6a:	494e      	ldr	r1, [pc, #312]	; (80080a4 <_dtoa_r+0x654>)
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	f7f8 fc8d 	bl	800088c <__aeabi_ddiv>
 8007f72:	ec53 2b19 	vmov	r2, r3, d9
 8007f76:	f7f8 f9a7 	bl	80002c8 <__aeabi_dsub>
 8007f7a:	9d00      	ldr	r5, [sp, #0]
 8007f7c:	ec41 0b19 	vmov	d9, r0, r1
 8007f80:	4649      	mov	r1, r9
 8007f82:	4640      	mov	r0, r8
 8007f84:	f7f8 fe08 	bl	8000b98 <__aeabi_d2iz>
 8007f88:	4606      	mov	r6, r0
 8007f8a:	f7f8 faeb 	bl	8000564 <__aeabi_i2d>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4640      	mov	r0, r8
 8007f94:	4649      	mov	r1, r9
 8007f96:	f7f8 f997 	bl	80002c8 <__aeabi_dsub>
 8007f9a:	3630      	adds	r6, #48	; 0x30
 8007f9c:	f805 6b01 	strb.w	r6, [r5], #1
 8007fa0:	ec53 2b19 	vmov	r2, r3, d9
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	f7f8 fdb8 	bl	8000b1c <__aeabi_dcmplt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d164      	bne.n	800807a <_dtoa_r+0x62a>
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	4937      	ldr	r1, [pc, #220]	; (8008094 <_dtoa_r+0x644>)
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f7f8 f986 	bl	80002c8 <__aeabi_dsub>
 8007fbc:	ec53 2b19 	vmov	r2, r3, d9
 8007fc0:	f7f8 fdac 	bl	8000b1c <__aeabi_dcmplt>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f040 80b6 	bne.w	8008136 <_dtoa_r+0x6e6>
 8007fca:	9b02      	ldr	r3, [sp, #8]
 8007fcc:	429d      	cmp	r5, r3
 8007fce:	f43f af7c 	beq.w	8007eca <_dtoa_r+0x47a>
 8007fd2:	4b31      	ldr	r3, [pc, #196]	; (8008098 <_dtoa_r+0x648>)
 8007fd4:	ec51 0b19 	vmov	r0, r1, d9
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7f8 fb2d 	bl	8000638 <__aeabi_dmul>
 8007fde:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <_dtoa_r+0x648>)
 8007fe0:	ec41 0b19 	vmov	d9, r0, r1
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	4649      	mov	r1, r9
 8007fea:	f7f8 fb25 	bl	8000638 <__aeabi_dmul>
 8007fee:	4680      	mov	r8, r0
 8007ff0:	4689      	mov	r9, r1
 8007ff2:	e7c5      	b.n	8007f80 <_dtoa_r+0x530>
 8007ff4:	ec51 0b17 	vmov	r0, r1, d7
 8007ff8:	f7f8 fb1e 	bl	8000638 <__aeabi_dmul>
 8007ffc:	9b02      	ldr	r3, [sp, #8]
 8007ffe:	9d00      	ldr	r5, [sp, #0]
 8008000:	930f      	str	r3, [sp, #60]	; 0x3c
 8008002:	ec41 0b19 	vmov	d9, r0, r1
 8008006:	4649      	mov	r1, r9
 8008008:	4640      	mov	r0, r8
 800800a:	f7f8 fdc5 	bl	8000b98 <__aeabi_d2iz>
 800800e:	4606      	mov	r6, r0
 8008010:	f7f8 faa8 	bl	8000564 <__aeabi_i2d>
 8008014:	3630      	adds	r6, #48	; 0x30
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4640      	mov	r0, r8
 800801c:	4649      	mov	r1, r9
 800801e:	f7f8 f953 	bl	80002c8 <__aeabi_dsub>
 8008022:	f805 6b01 	strb.w	r6, [r5], #1
 8008026:	9b02      	ldr	r3, [sp, #8]
 8008028:	429d      	cmp	r5, r3
 800802a:	4680      	mov	r8, r0
 800802c:	4689      	mov	r9, r1
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	d124      	bne.n	800807e <_dtoa_r+0x62e>
 8008034:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <_dtoa_r+0x654>)
 8008036:	ec51 0b19 	vmov	r0, r1, d9
 800803a:	f7f8 f947 	bl	80002cc <__adddf3>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 fd87 	bl	8000b58 <__aeabi_dcmpgt>
 800804a:	2800      	cmp	r0, #0
 800804c:	d173      	bne.n	8008136 <_dtoa_r+0x6e6>
 800804e:	ec53 2b19 	vmov	r2, r3, d9
 8008052:	4914      	ldr	r1, [pc, #80]	; (80080a4 <_dtoa_r+0x654>)
 8008054:	2000      	movs	r0, #0
 8008056:	f7f8 f937 	bl	80002c8 <__aeabi_dsub>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f af2f 	beq.w	8007eca <_dtoa_r+0x47a>
 800806c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800806e:	1e6b      	subs	r3, r5, #1
 8008070:	930f      	str	r3, [sp, #60]	; 0x3c
 8008072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008076:	2b30      	cmp	r3, #48	; 0x30
 8008078:	d0f8      	beq.n	800806c <_dtoa_r+0x61c>
 800807a:	46bb      	mov	fp, r7
 800807c:	e04a      	b.n	8008114 <_dtoa_r+0x6c4>
 800807e:	4b06      	ldr	r3, [pc, #24]	; (8008098 <_dtoa_r+0x648>)
 8008080:	f7f8 fada 	bl	8000638 <__aeabi_dmul>
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	e7bd      	b.n	8008006 <_dtoa_r+0x5b6>
 800808a:	bf00      	nop
 800808c:	0800e268 	.word	0x0800e268
 8008090:	0800e240 	.word	0x0800e240
 8008094:	3ff00000 	.word	0x3ff00000
 8008098:	40240000 	.word	0x40240000
 800809c:	401c0000 	.word	0x401c0000
 80080a0:	40140000 	.word	0x40140000
 80080a4:	3fe00000 	.word	0x3fe00000
 80080a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ac:	9d00      	ldr	r5, [sp, #0]
 80080ae:	4642      	mov	r2, r8
 80080b0:	464b      	mov	r3, r9
 80080b2:	4630      	mov	r0, r6
 80080b4:	4639      	mov	r1, r7
 80080b6:	f7f8 fbe9 	bl	800088c <__aeabi_ddiv>
 80080ba:	f7f8 fd6d 	bl	8000b98 <__aeabi_d2iz>
 80080be:	9001      	str	r0, [sp, #4]
 80080c0:	f7f8 fa50 	bl	8000564 <__aeabi_i2d>
 80080c4:	4642      	mov	r2, r8
 80080c6:	464b      	mov	r3, r9
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 f8f8 	bl	80002c8 <__aeabi_dsub>
 80080d8:	9e01      	ldr	r6, [sp, #4]
 80080da:	9f04      	ldr	r7, [sp, #16]
 80080dc:	3630      	adds	r6, #48	; 0x30
 80080de:	f805 6b01 	strb.w	r6, [r5], #1
 80080e2:	9e00      	ldr	r6, [sp, #0]
 80080e4:	1bae      	subs	r6, r5, r6
 80080e6:	42b7      	cmp	r7, r6
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	d134      	bne.n	8008158 <_dtoa_r+0x708>
 80080ee:	f7f8 f8ed 	bl	80002cc <__adddf3>
 80080f2:	4642      	mov	r2, r8
 80080f4:	464b      	mov	r3, r9
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	f7f8 fd2d 	bl	8000b58 <__aeabi_dcmpgt>
 80080fe:	b9c8      	cbnz	r0, 8008134 <_dtoa_r+0x6e4>
 8008100:	4642      	mov	r2, r8
 8008102:	464b      	mov	r3, r9
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 fcfe 	bl	8000b08 <__aeabi_dcmpeq>
 800810c:	b110      	cbz	r0, 8008114 <_dtoa_r+0x6c4>
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	07db      	lsls	r3, r3, #31
 8008112:	d40f      	bmi.n	8008134 <_dtoa_r+0x6e4>
 8008114:	4651      	mov	r1, sl
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fb18 	bl	800874c <_Bfree>
 800811c:	2300      	movs	r3, #0
 800811e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008120:	702b      	strb	r3, [r5, #0]
 8008122:	f10b 0301 	add.w	r3, fp, #1
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800812a:	2b00      	cmp	r3, #0
 800812c:	f43f ace2 	beq.w	8007af4 <_dtoa_r+0xa4>
 8008130:	601d      	str	r5, [r3, #0]
 8008132:	e4df      	b.n	8007af4 <_dtoa_r+0xa4>
 8008134:	465f      	mov	r7, fp
 8008136:	462b      	mov	r3, r5
 8008138:	461d      	mov	r5, r3
 800813a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800813e:	2a39      	cmp	r2, #57	; 0x39
 8008140:	d106      	bne.n	8008150 <_dtoa_r+0x700>
 8008142:	9a00      	ldr	r2, [sp, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d1f7      	bne.n	8008138 <_dtoa_r+0x6e8>
 8008148:	9900      	ldr	r1, [sp, #0]
 800814a:	2230      	movs	r2, #48	; 0x30
 800814c:	3701      	adds	r7, #1
 800814e:	700a      	strb	r2, [r1, #0]
 8008150:	781a      	ldrb	r2, [r3, #0]
 8008152:	3201      	adds	r2, #1
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	e790      	b.n	800807a <_dtoa_r+0x62a>
 8008158:	4ba3      	ldr	r3, [pc, #652]	; (80083e8 <_dtoa_r+0x998>)
 800815a:	2200      	movs	r2, #0
 800815c:	f7f8 fa6c 	bl	8000638 <__aeabi_dmul>
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	4606      	mov	r6, r0
 8008166:	460f      	mov	r7, r1
 8008168:	f7f8 fcce 	bl	8000b08 <__aeabi_dcmpeq>
 800816c:	2800      	cmp	r0, #0
 800816e:	d09e      	beq.n	80080ae <_dtoa_r+0x65e>
 8008170:	e7d0      	b.n	8008114 <_dtoa_r+0x6c4>
 8008172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008174:	2a00      	cmp	r2, #0
 8008176:	f000 80ca 	beq.w	800830e <_dtoa_r+0x8be>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	2a01      	cmp	r2, #1
 800817e:	f300 80ad 	bgt.w	80082dc <_dtoa_r+0x88c>
 8008182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008184:	2a00      	cmp	r2, #0
 8008186:	f000 80a5 	beq.w	80082d4 <_dtoa_r+0x884>
 800818a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800818e:	9e08      	ldr	r6, [sp, #32]
 8008190:	9d05      	ldr	r5, [sp, #20]
 8008192:	9a05      	ldr	r2, [sp, #20]
 8008194:	441a      	add	r2, r3
 8008196:	9205      	str	r2, [sp, #20]
 8008198:	9a06      	ldr	r2, [sp, #24]
 800819a:	2101      	movs	r1, #1
 800819c:	441a      	add	r2, r3
 800819e:	4620      	mov	r0, r4
 80081a0:	9206      	str	r2, [sp, #24]
 80081a2:	f000 fb89 	bl	80088b8 <__i2b>
 80081a6:	4607      	mov	r7, r0
 80081a8:	b165      	cbz	r5, 80081c4 <_dtoa_r+0x774>
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dd09      	ble.n	80081c4 <_dtoa_r+0x774>
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	9a05      	ldr	r2, [sp, #20]
 80081b4:	bfa8      	it	ge
 80081b6:	462b      	movge	r3, r5
 80081b8:	1ad2      	subs	r2, r2, r3
 80081ba:	9205      	str	r2, [sp, #20]
 80081bc:	9a06      	ldr	r2, [sp, #24]
 80081be:	1aed      	subs	r5, r5, r3
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	9306      	str	r3, [sp, #24]
 80081c4:	9b08      	ldr	r3, [sp, #32]
 80081c6:	b1f3      	cbz	r3, 8008206 <_dtoa_r+0x7b6>
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80a3 	beq.w	8008316 <_dtoa_r+0x8c6>
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	dd10      	ble.n	80081f6 <_dtoa_r+0x7a6>
 80081d4:	4639      	mov	r1, r7
 80081d6:	4632      	mov	r2, r6
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fc2d 	bl	8008a38 <__pow5mult>
 80081de:	4652      	mov	r2, sl
 80081e0:	4601      	mov	r1, r0
 80081e2:	4607      	mov	r7, r0
 80081e4:	4620      	mov	r0, r4
 80081e6:	f000 fb7d 	bl	80088e4 <__multiply>
 80081ea:	4651      	mov	r1, sl
 80081ec:	4680      	mov	r8, r0
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 faac 	bl	800874c <_Bfree>
 80081f4:	46c2      	mov	sl, r8
 80081f6:	9b08      	ldr	r3, [sp, #32]
 80081f8:	1b9a      	subs	r2, r3, r6
 80081fa:	d004      	beq.n	8008206 <_dtoa_r+0x7b6>
 80081fc:	4651      	mov	r1, sl
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 fc1a 	bl	8008a38 <__pow5mult>
 8008204:	4682      	mov	sl, r0
 8008206:	2101      	movs	r1, #1
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fb55 	bl	80088b8 <__i2b>
 800820e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008210:	2b00      	cmp	r3, #0
 8008212:	4606      	mov	r6, r0
 8008214:	f340 8081 	ble.w	800831a <_dtoa_r+0x8ca>
 8008218:	461a      	mov	r2, r3
 800821a:	4601      	mov	r1, r0
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fc0b 	bl	8008a38 <__pow5mult>
 8008222:	9b07      	ldr	r3, [sp, #28]
 8008224:	2b01      	cmp	r3, #1
 8008226:	4606      	mov	r6, r0
 8008228:	dd7a      	ble.n	8008320 <_dtoa_r+0x8d0>
 800822a:	f04f 0800 	mov.w	r8, #0
 800822e:	6933      	ldr	r3, [r6, #16]
 8008230:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008234:	6918      	ldr	r0, [r3, #16]
 8008236:	f000 faf1 	bl	800881c <__hi0bits>
 800823a:	f1c0 0020 	rsb	r0, r0, #32
 800823e:	9b06      	ldr	r3, [sp, #24]
 8008240:	4418      	add	r0, r3
 8008242:	f010 001f 	ands.w	r0, r0, #31
 8008246:	f000 8094 	beq.w	8008372 <_dtoa_r+0x922>
 800824a:	f1c0 0320 	rsb	r3, r0, #32
 800824e:	2b04      	cmp	r3, #4
 8008250:	f340 8085 	ble.w	800835e <_dtoa_r+0x90e>
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	f1c0 001c 	rsb	r0, r0, #28
 800825a:	4403      	add	r3, r0
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	4403      	add	r3, r0
 8008262:	4405      	add	r5, r0
 8008264:	9306      	str	r3, [sp, #24]
 8008266:	9b05      	ldr	r3, [sp, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dd05      	ble.n	8008278 <_dtoa_r+0x828>
 800826c:	4651      	mov	r1, sl
 800826e:	461a      	mov	r2, r3
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fc3b 	bl	8008aec <__lshift>
 8008276:	4682      	mov	sl, r0
 8008278:	9b06      	ldr	r3, [sp, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd05      	ble.n	800828a <_dtoa_r+0x83a>
 800827e:	4631      	mov	r1, r6
 8008280:	461a      	mov	r2, r3
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fc32 	bl	8008aec <__lshift>
 8008288:	4606      	mov	r6, r0
 800828a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	d072      	beq.n	8008376 <_dtoa_r+0x926>
 8008290:	4631      	mov	r1, r6
 8008292:	4650      	mov	r0, sl
 8008294:	f000 fc96 	bl	8008bc4 <__mcmp>
 8008298:	2800      	cmp	r0, #0
 800829a:	da6c      	bge.n	8008376 <_dtoa_r+0x926>
 800829c:	2300      	movs	r3, #0
 800829e:	4651      	mov	r1, sl
 80082a0:	220a      	movs	r2, #10
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fa74 	bl	8008790 <__multadd>
 80082a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082ae:	4682      	mov	sl, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 81b0 	beq.w	8008616 <_dtoa_r+0xbc6>
 80082b6:	2300      	movs	r3, #0
 80082b8:	4639      	mov	r1, r7
 80082ba:	220a      	movs	r2, #10
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fa67 	bl	8008790 <__multadd>
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	4607      	mov	r7, r0
 80082c8:	f300 8096 	bgt.w	80083f8 <_dtoa_r+0x9a8>
 80082cc:	9b07      	ldr	r3, [sp, #28]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dc59      	bgt.n	8008386 <_dtoa_r+0x936>
 80082d2:	e091      	b.n	80083f8 <_dtoa_r+0x9a8>
 80082d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082da:	e758      	b.n	800818e <_dtoa_r+0x73e>
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	1e5e      	subs	r6, r3, #1
 80082e0:	9b08      	ldr	r3, [sp, #32]
 80082e2:	42b3      	cmp	r3, r6
 80082e4:	bfbf      	itttt	lt
 80082e6:	9b08      	ldrlt	r3, [sp, #32]
 80082e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80082ea:	9608      	strlt	r6, [sp, #32]
 80082ec:	1af3      	sublt	r3, r6, r3
 80082ee:	bfb4      	ite	lt
 80082f0:	18d2      	addlt	r2, r2, r3
 80082f2:	1b9e      	subge	r6, r3, r6
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	bfbc      	itt	lt
 80082f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80082fa:	2600      	movlt	r6, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfb7      	itett	lt
 8008300:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008304:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008308:	1a9d      	sublt	r5, r3, r2
 800830a:	2300      	movlt	r3, #0
 800830c:	e741      	b.n	8008192 <_dtoa_r+0x742>
 800830e:	9e08      	ldr	r6, [sp, #32]
 8008310:	9d05      	ldr	r5, [sp, #20]
 8008312:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008314:	e748      	b.n	80081a8 <_dtoa_r+0x758>
 8008316:	9a08      	ldr	r2, [sp, #32]
 8008318:	e770      	b.n	80081fc <_dtoa_r+0x7ac>
 800831a:	9b07      	ldr	r3, [sp, #28]
 800831c:	2b01      	cmp	r3, #1
 800831e:	dc19      	bgt.n	8008354 <_dtoa_r+0x904>
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	b9bb      	cbnz	r3, 8008354 <_dtoa_r+0x904>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800832a:	b99b      	cbnz	r3, 8008354 <_dtoa_r+0x904>
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008332:	0d1b      	lsrs	r3, r3, #20
 8008334:	051b      	lsls	r3, r3, #20
 8008336:	b183      	cbz	r3, 800835a <_dtoa_r+0x90a>
 8008338:	9b05      	ldr	r3, [sp, #20]
 800833a:	3301      	adds	r3, #1
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	3301      	adds	r3, #1
 8008342:	9306      	str	r3, [sp, #24]
 8008344:	f04f 0801 	mov.w	r8, #1
 8008348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800834a:	2b00      	cmp	r3, #0
 800834c:	f47f af6f 	bne.w	800822e <_dtoa_r+0x7de>
 8008350:	2001      	movs	r0, #1
 8008352:	e774      	b.n	800823e <_dtoa_r+0x7ee>
 8008354:	f04f 0800 	mov.w	r8, #0
 8008358:	e7f6      	b.n	8008348 <_dtoa_r+0x8f8>
 800835a:	4698      	mov	r8, r3
 800835c:	e7f4      	b.n	8008348 <_dtoa_r+0x8f8>
 800835e:	d082      	beq.n	8008266 <_dtoa_r+0x816>
 8008360:	9a05      	ldr	r2, [sp, #20]
 8008362:	331c      	adds	r3, #28
 8008364:	441a      	add	r2, r3
 8008366:	9205      	str	r2, [sp, #20]
 8008368:	9a06      	ldr	r2, [sp, #24]
 800836a:	441a      	add	r2, r3
 800836c:	441d      	add	r5, r3
 800836e:	9206      	str	r2, [sp, #24]
 8008370:	e779      	b.n	8008266 <_dtoa_r+0x816>
 8008372:	4603      	mov	r3, r0
 8008374:	e7f4      	b.n	8008360 <_dtoa_r+0x910>
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	dc37      	bgt.n	80083ec <_dtoa_r+0x99c>
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	2b02      	cmp	r3, #2
 8008380:	dd34      	ble.n	80083ec <_dtoa_r+0x99c>
 8008382:	9b04      	ldr	r3, [sp, #16]
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	9b01      	ldr	r3, [sp, #4]
 8008388:	b963      	cbnz	r3, 80083a4 <_dtoa_r+0x954>
 800838a:	4631      	mov	r1, r6
 800838c:	2205      	movs	r2, #5
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f9fe 	bl	8008790 <__multadd>
 8008394:	4601      	mov	r1, r0
 8008396:	4606      	mov	r6, r0
 8008398:	4650      	mov	r0, sl
 800839a:	f000 fc13 	bl	8008bc4 <__mcmp>
 800839e:	2800      	cmp	r0, #0
 80083a0:	f73f adbb 	bgt.w	8007f1a <_dtoa_r+0x4ca>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	9d00      	ldr	r5, [sp, #0]
 80083a8:	ea6f 0b03 	mvn.w	fp, r3
 80083ac:	f04f 0800 	mov.w	r8, #0
 80083b0:	4631      	mov	r1, r6
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f9ca 	bl	800874c <_Bfree>
 80083b8:	2f00      	cmp	r7, #0
 80083ba:	f43f aeab 	beq.w	8008114 <_dtoa_r+0x6c4>
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	d005      	beq.n	80083d0 <_dtoa_r+0x980>
 80083c4:	45b8      	cmp	r8, r7
 80083c6:	d003      	beq.n	80083d0 <_dtoa_r+0x980>
 80083c8:	4641      	mov	r1, r8
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f9be 	bl	800874c <_Bfree>
 80083d0:	4639      	mov	r1, r7
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 f9ba 	bl	800874c <_Bfree>
 80083d8:	e69c      	b.n	8008114 <_dtoa_r+0x6c4>
 80083da:	2600      	movs	r6, #0
 80083dc:	4637      	mov	r7, r6
 80083de:	e7e1      	b.n	80083a4 <_dtoa_r+0x954>
 80083e0:	46bb      	mov	fp, r7
 80083e2:	4637      	mov	r7, r6
 80083e4:	e599      	b.n	8007f1a <_dtoa_r+0x4ca>
 80083e6:	bf00      	nop
 80083e8:	40240000 	.word	0x40240000
 80083ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80c8 	beq.w	8008584 <_dtoa_r+0xb34>
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	dd05      	ble.n	8008408 <_dtoa_r+0x9b8>
 80083fc:	4639      	mov	r1, r7
 80083fe:	462a      	mov	r2, r5
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fb73 	bl	8008aec <__lshift>
 8008406:	4607      	mov	r7, r0
 8008408:	f1b8 0f00 	cmp.w	r8, #0
 800840c:	d05b      	beq.n	80084c6 <_dtoa_r+0xa76>
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4620      	mov	r0, r4
 8008412:	f000 f95b 	bl	80086cc <_Balloc>
 8008416:	4605      	mov	r5, r0
 8008418:	b928      	cbnz	r0, 8008426 <_dtoa_r+0x9d6>
 800841a:	4b83      	ldr	r3, [pc, #524]	; (8008628 <_dtoa_r+0xbd8>)
 800841c:	4602      	mov	r2, r0
 800841e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008422:	f7ff bb2e 	b.w	8007a82 <_dtoa_r+0x32>
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	3202      	adds	r2, #2
 800842a:	0092      	lsls	r2, r2, #2
 800842c:	f107 010c 	add.w	r1, r7, #12
 8008430:	300c      	adds	r0, #12
 8008432:	f7ff fa77 	bl	8007924 <memcpy>
 8008436:	2201      	movs	r2, #1
 8008438:	4629      	mov	r1, r5
 800843a:	4620      	mov	r0, r4
 800843c:	f000 fb56 	bl	8008aec <__lshift>
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844a:	4413      	add	r3, r2
 800844c:	9308      	str	r3, [sp, #32]
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	46b8      	mov	r8, r7
 8008456:	9306      	str	r3, [sp, #24]
 8008458:	4607      	mov	r7, r0
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	4631      	mov	r1, r6
 800845e:	3b01      	subs	r3, #1
 8008460:	4650      	mov	r0, sl
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	f7ff fa6c 	bl	8007940 <quorem>
 8008468:	4641      	mov	r1, r8
 800846a:	9002      	str	r0, [sp, #8]
 800846c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008470:	4650      	mov	r0, sl
 8008472:	f000 fba7 	bl	8008bc4 <__mcmp>
 8008476:	463a      	mov	r2, r7
 8008478:	9005      	str	r0, [sp, #20]
 800847a:	4631      	mov	r1, r6
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fbbd 	bl	8008bfc <__mdiff>
 8008482:	68c2      	ldr	r2, [r0, #12]
 8008484:	4605      	mov	r5, r0
 8008486:	bb02      	cbnz	r2, 80084ca <_dtoa_r+0xa7a>
 8008488:	4601      	mov	r1, r0
 800848a:	4650      	mov	r0, sl
 800848c:	f000 fb9a 	bl	8008bc4 <__mcmp>
 8008490:	4602      	mov	r2, r0
 8008492:	4629      	mov	r1, r5
 8008494:	4620      	mov	r0, r4
 8008496:	9209      	str	r2, [sp, #36]	; 0x24
 8008498:	f000 f958 	bl	800874c <_Bfree>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a0:	9d04      	ldr	r5, [sp, #16]
 80084a2:	ea43 0102 	orr.w	r1, r3, r2
 80084a6:	9b06      	ldr	r3, [sp, #24]
 80084a8:	4319      	orrs	r1, r3
 80084aa:	d110      	bne.n	80084ce <_dtoa_r+0xa7e>
 80084ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084b0:	d029      	beq.n	8008506 <_dtoa_r+0xab6>
 80084b2:	9b05      	ldr	r3, [sp, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd02      	ble.n	80084be <_dtoa_r+0xa6e>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084be:	9b01      	ldr	r3, [sp, #4]
 80084c0:	f883 9000 	strb.w	r9, [r3]
 80084c4:	e774      	b.n	80083b0 <_dtoa_r+0x960>
 80084c6:	4638      	mov	r0, r7
 80084c8:	e7ba      	b.n	8008440 <_dtoa_r+0x9f0>
 80084ca:	2201      	movs	r2, #1
 80084cc:	e7e1      	b.n	8008492 <_dtoa_r+0xa42>
 80084ce:	9b05      	ldr	r3, [sp, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db04      	blt.n	80084de <_dtoa_r+0xa8e>
 80084d4:	9907      	ldr	r1, [sp, #28]
 80084d6:	430b      	orrs	r3, r1
 80084d8:	9906      	ldr	r1, [sp, #24]
 80084da:	430b      	orrs	r3, r1
 80084dc:	d120      	bne.n	8008520 <_dtoa_r+0xad0>
 80084de:	2a00      	cmp	r2, #0
 80084e0:	dded      	ble.n	80084be <_dtoa_r+0xa6e>
 80084e2:	4651      	mov	r1, sl
 80084e4:	2201      	movs	r2, #1
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 fb00 	bl	8008aec <__lshift>
 80084ec:	4631      	mov	r1, r6
 80084ee:	4682      	mov	sl, r0
 80084f0:	f000 fb68 	bl	8008bc4 <__mcmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dc03      	bgt.n	8008500 <_dtoa_r+0xab0>
 80084f8:	d1e1      	bne.n	80084be <_dtoa_r+0xa6e>
 80084fa:	f019 0f01 	tst.w	r9, #1
 80084fe:	d0de      	beq.n	80084be <_dtoa_r+0xa6e>
 8008500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008504:	d1d8      	bne.n	80084b8 <_dtoa_r+0xa68>
 8008506:	9a01      	ldr	r2, [sp, #4]
 8008508:	2339      	movs	r3, #57	; 0x39
 800850a:	7013      	strb	r3, [r2, #0]
 800850c:	462b      	mov	r3, r5
 800850e:	461d      	mov	r5, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008516:	2a39      	cmp	r2, #57	; 0x39
 8008518:	d06c      	beq.n	80085f4 <_dtoa_r+0xba4>
 800851a:	3201      	adds	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e747      	b.n	80083b0 <_dtoa_r+0x960>
 8008520:	2a00      	cmp	r2, #0
 8008522:	dd07      	ble.n	8008534 <_dtoa_r+0xae4>
 8008524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008528:	d0ed      	beq.n	8008506 <_dtoa_r+0xab6>
 800852a:	9a01      	ldr	r2, [sp, #4]
 800852c:	f109 0301 	add.w	r3, r9, #1
 8008530:	7013      	strb	r3, [r2, #0]
 8008532:	e73d      	b.n	80083b0 <_dtoa_r+0x960>
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	9a08      	ldr	r2, [sp, #32]
 8008538:	f803 9c01 	strb.w	r9, [r3, #-1]
 800853c:	4293      	cmp	r3, r2
 800853e:	d043      	beq.n	80085c8 <_dtoa_r+0xb78>
 8008540:	4651      	mov	r1, sl
 8008542:	2300      	movs	r3, #0
 8008544:	220a      	movs	r2, #10
 8008546:	4620      	mov	r0, r4
 8008548:	f000 f922 	bl	8008790 <__multadd>
 800854c:	45b8      	cmp	r8, r7
 800854e:	4682      	mov	sl, r0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	f04f 020a 	mov.w	r2, #10
 8008558:	4641      	mov	r1, r8
 800855a:	4620      	mov	r0, r4
 800855c:	d107      	bne.n	800856e <_dtoa_r+0xb1e>
 800855e:	f000 f917 	bl	8008790 <__multadd>
 8008562:	4680      	mov	r8, r0
 8008564:	4607      	mov	r7, r0
 8008566:	9b04      	ldr	r3, [sp, #16]
 8008568:	3301      	adds	r3, #1
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	e775      	b.n	800845a <_dtoa_r+0xa0a>
 800856e:	f000 f90f 	bl	8008790 <__multadd>
 8008572:	4639      	mov	r1, r7
 8008574:	4680      	mov	r8, r0
 8008576:	2300      	movs	r3, #0
 8008578:	220a      	movs	r2, #10
 800857a:	4620      	mov	r0, r4
 800857c:	f000 f908 	bl	8008790 <__multadd>
 8008580:	4607      	mov	r7, r0
 8008582:	e7f0      	b.n	8008566 <_dtoa_r+0xb16>
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	9d00      	ldr	r5, [sp, #0]
 800858a:	4631      	mov	r1, r6
 800858c:	4650      	mov	r0, sl
 800858e:	f7ff f9d7 	bl	8007940 <quorem>
 8008592:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	f805 9b01 	strb.w	r9, [r5], #1
 800859c:	1aea      	subs	r2, r5, r3
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	dd07      	ble.n	80085b4 <_dtoa_r+0xb64>
 80085a4:	4651      	mov	r1, sl
 80085a6:	2300      	movs	r3, #0
 80085a8:	220a      	movs	r2, #10
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f8f0 	bl	8008790 <__multadd>
 80085b0:	4682      	mov	sl, r0
 80085b2:	e7ea      	b.n	800858a <_dtoa_r+0xb3a>
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bfc8      	it	gt
 80085ba:	461d      	movgt	r5, r3
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	bfd8      	it	le
 80085c0:	2501      	movle	r5, #1
 80085c2:	441d      	add	r5, r3
 80085c4:	f04f 0800 	mov.w	r8, #0
 80085c8:	4651      	mov	r1, sl
 80085ca:	2201      	movs	r2, #1
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fa8d 	bl	8008aec <__lshift>
 80085d2:	4631      	mov	r1, r6
 80085d4:	4682      	mov	sl, r0
 80085d6:	f000 faf5 	bl	8008bc4 <__mcmp>
 80085da:	2800      	cmp	r0, #0
 80085dc:	dc96      	bgt.n	800850c <_dtoa_r+0xabc>
 80085de:	d102      	bne.n	80085e6 <_dtoa_r+0xb96>
 80085e0:	f019 0f01 	tst.w	r9, #1
 80085e4:	d192      	bne.n	800850c <_dtoa_r+0xabc>
 80085e6:	462b      	mov	r3, r5
 80085e8:	461d      	mov	r5, r3
 80085ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ee:	2a30      	cmp	r2, #48	; 0x30
 80085f0:	d0fa      	beq.n	80085e8 <_dtoa_r+0xb98>
 80085f2:	e6dd      	b.n	80083b0 <_dtoa_r+0x960>
 80085f4:	9a00      	ldr	r2, [sp, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d189      	bne.n	800850e <_dtoa_r+0xabe>
 80085fa:	f10b 0b01 	add.w	fp, fp, #1
 80085fe:	2331      	movs	r3, #49	; 0x31
 8008600:	e796      	b.n	8008530 <_dtoa_r+0xae0>
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <_dtoa_r+0xbdc>)
 8008604:	f7ff ba99 	b.w	8007b3a <_dtoa_r+0xea>
 8008608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800860a:	2b00      	cmp	r3, #0
 800860c:	f47f aa6d 	bne.w	8007aea <_dtoa_r+0x9a>
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <_dtoa_r+0xbe0>)
 8008612:	f7ff ba92 	b.w	8007b3a <_dtoa_r+0xea>
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	dcb5      	bgt.n	8008588 <_dtoa_r+0xb38>
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	2b02      	cmp	r3, #2
 8008620:	f73f aeb1 	bgt.w	8008386 <_dtoa_r+0x936>
 8008624:	e7b0      	b.n	8008588 <_dtoa_r+0xb38>
 8008626:	bf00      	nop
 8008628:	0800e1d0 	.word	0x0800e1d0
 800862c:	0800e130 	.word	0x0800e130
 8008630:	0800e154 	.word	0x0800e154

08008634 <_free_r>:
 8008634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008636:	2900      	cmp	r1, #0
 8008638:	d044      	beq.n	80086c4 <_free_r+0x90>
 800863a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800863e:	9001      	str	r0, [sp, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f1a1 0404 	sub.w	r4, r1, #4
 8008646:	bfb8      	it	lt
 8008648:	18e4      	addlt	r4, r4, r3
 800864a:	f7fe fb29 	bl	8006ca0 <__malloc_lock>
 800864e:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <_free_r+0x94>)
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	b933      	cbnz	r3, 8008664 <_free_r+0x30>
 8008656:	6063      	str	r3, [r4, #4]
 8008658:	6014      	str	r4, [r2, #0]
 800865a:	b003      	add	sp, #12
 800865c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008660:	f7fe bb24 	b.w	8006cac <__malloc_unlock>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d908      	bls.n	800867a <_free_r+0x46>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf01      	itttt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	1949      	addeq	r1, r1, r5
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	e7ed      	b.n	8008656 <_free_r+0x22>
 800867a:	461a      	mov	r2, r3
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b10b      	cbz	r3, 8008684 <_free_r+0x50>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d9fa      	bls.n	800867a <_free_r+0x46>
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	1855      	adds	r5, r2, r1
 8008688:	42a5      	cmp	r5, r4
 800868a:	d10b      	bne.n	80086a4 <_free_r+0x70>
 800868c:	6824      	ldr	r4, [r4, #0]
 800868e:	4421      	add	r1, r4
 8008690:	1854      	adds	r4, r2, r1
 8008692:	42a3      	cmp	r3, r4
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	d1e0      	bne.n	800865a <_free_r+0x26>
 8008698:	681c      	ldr	r4, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	6053      	str	r3, [r2, #4]
 800869e:	440c      	add	r4, r1
 80086a0:	6014      	str	r4, [r2, #0]
 80086a2:	e7da      	b.n	800865a <_free_r+0x26>
 80086a4:	d902      	bls.n	80086ac <_free_r+0x78>
 80086a6:	230c      	movs	r3, #12
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	e7d6      	b.n	800865a <_free_r+0x26>
 80086ac:	6825      	ldr	r5, [r4, #0]
 80086ae:	1961      	adds	r1, r4, r5
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf04      	itt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	bf04      	itt	eq
 80086bc:	1949      	addeq	r1, r1, r5
 80086be:	6021      	streq	r1, [r4, #0]
 80086c0:	6054      	str	r4, [r2, #4]
 80086c2:	e7ca      	b.n	800865a <_free_r+0x26>
 80086c4:	b003      	add	sp, #12
 80086c6:	bd30      	pop	{r4, r5, pc}
 80086c8:	200007ec 	.word	0x200007ec

080086cc <_Balloc>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	69c6      	ldr	r6, [r0, #28]
 80086d0:	4604      	mov	r4, r0
 80086d2:	460d      	mov	r5, r1
 80086d4:	b976      	cbnz	r6, 80086f4 <_Balloc+0x28>
 80086d6:	2010      	movs	r0, #16
 80086d8:	f7fe fa3a 	bl	8006b50 <malloc>
 80086dc:	4602      	mov	r2, r0
 80086de:	61e0      	str	r0, [r4, #28]
 80086e0:	b920      	cbnz	r0, 80086ec <_Balloc+0x20>
 80086e2:	4b18      	ldr	r3, [pc, #96]	; (8008744 <_Balloc+0x78>)
 80086e4:	4818      	ldr	r0, [pc, #96]	; (8008748 <_Balloc+0x7c>)
 80086e6:	216b      	movs	r1, #107	; 0x6b
 80086e8:	f000 fd72 	bl	80091d0 <__assert_func>
 80086ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086f0:	6006      	str	r6, [r0, #0]
 80086f2:	60c6      	str	r6, [r0, #12]
 80086f4:	69e6      	ldr	r6, [r4, #28]
 80086f6:	68f3      	ldr	r3, [r6, #12]
 80086f8:	b183      	cbz	r3, 800871c <_Balloc+0x50>
 80086fa:	69e3      	ldr	r3, [r4, #28]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008702:	b9b8      	cbnz	r0, 8008734 <_Balloc+0x68>
 8008704:	2101      	movs	r1, #1
 8008706:	fa01 f605 	lsl.w	r6, r1, r5
 800870a:	1d72      	adds	r2, r6, #5
 800870c:	0092      	lsls	r2, r2, #2
 800870e:	4620      	mov	r0, r4
 8008710:	f000 fd7c 	bl	800920c <_calloc_r>
 8008714:	b160      	cbz	r0, 8008730 <_Balloc+0x64>
 8008716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800871a:	e00e      	b.n	800873a <_Balloc+0x6e>
 800871c:	2221      	movs	r2, #33	; 0x21
 800871e:	2104      	movs	r1, #4
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fd73 	bl	800920c <_calloc_r>
 8008726:	69e3      	ldr	r3, [r4, #28]
 8008728:	60f0      	str	r0, [r6, #12]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e4      	bne.n	80086fa <_Balloc+0x2e>
 8008730:	2000      	movs	r0, #0
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	6802      	ldr	r2, [r0, #0]
 8008736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800873a:	2300      	movs	r3, #0
 800873c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008740:	e7f7      	b.n	8008732 <_Balloc+0x66>
 8008742:	bf00      	nop
 8008744:	0800e161 	.word	0x0800e161
 8008748:	0800e1e1 	.word	0x0800e1e1

0800874c <_Bfree>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	69c6      	ldr	r6, [r0, #28]
 8008750:	4605      	mov	r5, r0
 8008752:	460c      	mov	r4, r1
 8008754:	b976      	cbnz	r6, 8008774 <_Bfree+0x28>
 8008756:	2010      	movs	r0, #16
 8008758:	f7fe f9fa 	bl	8006b50 <malloc>
 800875c:	4602      	mov	r2, r0
 800875e:	61e8      	str	r0, [r5, #28]
 8008760:	b920      	cbnz	r0, 800876c <_Bfree+0x20>
 8008762:	4b09      	ldr	r3, [pc, #36]	; (8008788 <_Bfree+0x3c>)
 8008764:	4809      	ldr	r0, [pc, #36]	; (800878c <_Bfree+0x40>)
 8008766:	218f      	movs	r1, #143	; 0x8f
 8008768:	f000 fd32 	bl	80091d0 <__assert_func>
 800876c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008770:	6006      	str	r6, [r0, #0]
 8008772:	60c6      	str	r6, [r0, #12]
 8008774:	b13c      	cbz	r4, 8008786 <_Bfree+0x3a>
 8008776:	69eb      	ldr	r3, [r5, #28]
 8008778:	6862      	ldr	r2, [r4, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008780:	6021      	str	r1, [r4, #0]
 8008782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	0800e161 	.word	0x0800e161
 800878c:	0800e1e1 	.word	0x0800e1e1

08008790 <__multadd>:
 8008790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008794:	690d      	ldr	r5, [r1, #16]
 8008796:	4607      	mov	r7, r0
 8008798:	460c      	mov	r4, r1
 800879a:	461e      	mov	r6, r3
 800879c:	f101 0c14 	add.w	ip, r1, #20
 80087a0:	2000      	movs	r0, #0
 80087a2:	f8dc 3000 	ldr.w	r3, [ip]
 80087a6:	b299      	uxth	r1, r3
 80087a8:	fb02 6101 	mla	r1, r2, r1, r6
 80087ac:	0c1e      	lsrs	r6, r3, #16
 80087ae:	0c0b      	lsrs	r3, r1, #16
 80087b0:	fb02 3306 	mla	r3, r2, r6, r3
 80087b4:	b289      	uxth	r1, r1
 80087b6:	3001      	adds	r0, #1
 80087b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087bc:	4285      	cmp	r5, r0
 80087be:	f84c 1b04 	str.w	r1, [ip], #4
 80087c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087c6:	dcec      	bgt.n	80087a2 <__multadd+0x12>
 80087c8:	b30e      	cbz	r6, 800880e <__multadd+0x7e>
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	42ab      	cmp	r3, r5
 80087ce:	dc19      	bgt.n	8008804 <__multadd+0x74>
 80087d0:	6861      	ldr	r1, [r4, #4]
 80087d2:	4638      	mov	r0, r7
 80087d4:	3101      	adds	r1, #1
 80087d6:	f7ff ff79 	bl	80086cc <_Balloc>
 80087da:	4680      	mov	r8, r0
 80087dc:	b928      	cbnz	r0, 80087ea <__multadd+0x5a>
 80087de:	4602      	mov	r2, r0
 80087e0:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <__multadd+0x84>)
 80087e2:	480d      	ldr	r0, [pc, #52]	; (8008818 <__multadd+0x88>)
 80087e4:	21ba      	movs	r1, #186	; 0xba
 80087e6:	f000 fcf3 	bl	80091d0 <__assert_func>
 80087ea:	6922      	ldr	r2, [r4, #16]
 80087ec:	3202      	adds	r2, #2
 80087ee:	f104 010c 	add.w	r1, r4, #12
 80087f2:	0092      	lsls	r2, r2, #2
 80087f4:	300c      	adds	r0, #12
 80087f6:	f7ff f895 	bl	8007924 <memcpy>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ffa5 	bl	800874c <_Bfree>
 8008802:	4644      	mov	r4, r8
 8008804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008808:	3501      	adds	r5, #1
 800880a:	615e      	str	r6, [r3, #20]
 800880c:	6125      	str	r5, [r4, #16]
 800880e:	4620      	mov	r0, r4
 8008810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008814:	0800e1d0 	.word	0x0800e1d0
 8008818:	0800e1e1 	.word	0x0800e1e1

0800881c <__hi0bits>:
 800881c:	0c03      	lsrs	r3, r0, #16
 800881e:	041b      	lsls	r3, r3, #16
 8008820:	b9d3      	cbnz	r3, 8008858 <__hi0bits+0x3c>
 8008822:	0400      	lsls	r0, r0, #16
 8008824:	2310      	movs	r3, #16
 8008826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800882a:	bf04      	itt	eq
 800882c:	0200      	lsleq	r0, r0, #8
 800882e:	3308      	addeq	r3, #8
 8008830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008834:	bf04      	itt	eq
 8008836:	0100      	lsleq	r0, r0, #4
 8008838:	3304      	addeq	r3, #4
 800883a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800883e:	bf04      	itt	eq
 8008840:	0080      	lsleq	r0, r0, #2
 8008842:	3302      	addeq	r3, #2
 8008844:	2800      	cmp	r0, #0
 8008846:	db05      	blt.n	8008854 <__hi0bits+0x38>
 8008848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800884c:	f103 0301 	add.w	r3, r3, #1
 8008850:	bf08      	it	eq
 8008852:	2320      	moveq	r3, #32
 8008854:	4618      	mov	r0, r3
 8008856:	4770      	bx	lr
 8008858:	2300      	movs	r3, #0
 800885a:	e7e4      	b.n	8008826 <__hi0bits+0xa>

0800885c <__lo0bits>:
 800885c:	6803      	ldr	r3, [r0, #0]
 800885e:	f013 0207 	ands.w	r2, r3, #7
 8008862:	d00c      	beq.n	800887e <__lo0bits+0x22>
 8008864:	07d9      	lsls	r1, r3, #31
 8008866:	d422      	bmi.n	80088ae <__lo0bits+0x52>
 8008868:	079a      	lsls	r2, r3, #30
 800886a:	bf49      	itett	mi
 800886c:	085b      	lsrmi	r3, r3, #1
 800886e:	089b      	lsrpl	r3, r3, #2
 8008870:	6003      	strmi	r3, [r0, #0]
 8008872:	2201      	movmi	r2, #1
 8008874:	bf5c      	itt	pl
 8008876:	6003      	strpl	r3, [r0, #0]
 8008878:	2202      	movpl	r2, #2
 800887a:	4610      	mov	r0, r2
 800887c:	4770      	bx	lr
 800887e:	b299      	uxth	r1, r3
 8008880:	b909      	cbnz	r1, 8008886 <__lo0bits+0x2a>
 8008882:	0c1b      	lsrs	r3, r3, #16
 8008884:	2210      	movs	r2, #16
 8008886:	b2d9      	uxtb	r1, r3
 8008888:	b909      	cbnz	r1, 800888e <__lo0bits+0x32>
 800888a:	3208      	adds	r2, #8
 800888c:	0a1b      	lsrs	r3, r3, #8
 800888e:	0719      	lsls	r1, r3, #28
 8008890:	bf04      	itt	eq
 8008892:	091b      	lsreq	r3, r3, #4
 8008894:	3204      	addeq	r2, #4
 8008896:	0799      	lsls	r1, r3, #30
 8008898:	bf04      	itt	eq
 800889a:	089b      	lsreq	r3, r3, #2
 800889c:	3202      	addeq	r2, #2
 800889e:	07d9      	lsls	r1, r3, #31
 80088a0:	d403      	bmi.n	80088aa <__lo0bits+0x4e>
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	f102 0201 	add.w	r2, r2, #1
 80088a8:	d003      	beq.n	80088b2 <__lo0bits+0x56>
 80088aa:	6003      	str	r3, [r0, #0]
 80088ac:	e7e5      	b.n	800887a <__lo0bits+0x1e>
 80088ae:	2200      	movs	r2, #0
 80088b0:	e7e3      	b.n	800887a <__lo0bits+0x1e>
 80088b2:	2220      	movs	r2, #32
 80088b4:	e7e1      	b.n	800887a <__lo0bits+0x1e>
	...

080088b8 <__i2b>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	460c      	mov	r4, r1
 80088bc:	2101      	movs	r1, #1
 80088be:	f7ff ff05 	bl	80086cc <_Balloc>
 80088c2:	4602      	mov	r2, r0
 80088c4:	b928      	cbnz	r0, 80088d2 <__i2b+0x1a>
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <__i2b+0x24>)
 80088c8:	4805      	ldr	r0, [pc, #20]	; (80088e0 <__i2b+0x28>)
 80088ca:	f240 1145 	movw	r1, #325	; 0x145
 80088ce:	f000 fc7f 	bl	80091d0 <__assert_func>
 80088d2:	2301      	movs	r3, #1
 80088d4:	6144      	str	r4, [r0, #20]
 80088d6:	6103      	str	r3, [r0, #16]
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	0800e1d0 	.word	0x0800e1d0
 80088e0:	0800e1e1 	.word	0x0800e1e1

080088e4 <__multiply>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	4691      	mov	r9, r2
 80088ea:	690a      	ldr	r2, [r1, #16]
 80088ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	bfb8      	it	lt
 80088f4:	460b      	movlt	r3, r1
 80088f6:	460c      	mov	r4, r1
 80088f8:	bfbc      	itt	lt
 80088fa:	464c      	movlt	r4, r9
 80088fc:	4699      	movlt	r9, r3
 80088fe:	6927      	ldr	r7, [r4, #16]
 8008900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008904:	68a3      	ldr	r3, [r4, #8]
 8008906:	6861      	ldr	r1, [r4, #4]
 8008908:	eb07 060a 	add.w	r6, r7, sl
 800890c:	42b3      	cmp	r3, r6
 800890e:	b085      	sub	sp, #20
 8008910:	bfb8      	it	lt
 8008912:	3101      	addlt	r1, #1
 8008914:	f7ff feda 	bl	80086cc <_Balloc>
 8008918:	b930      	cbnz	r0, 8008928 <__multiply+0x44>
 800891a:	4602      	mov	r2, r0
 800891c:	4b44      	ldr	r3, [pc, #272]	; (8008a30 <__multiply+0x14c>)
 800891e:	4845      	ldr	r0, [pc, #276]	; (8008a34 <__multiply+0x150>)
 8008920:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008924:	f000 fc54 	bl	80091d0 <__assert_func>
 8008928:	f100 0514 	add.w	r5, r0, #20
 800892c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008930:	462b      	mov	r3, r5
 8008932:	2200      	movs	r2, #0
 8008934:	4543      	cmp	r3, r8
 8008936:	d321      	bcc.n	800897c <__multiply+0x98>
 8008938:	f104 0314 	add.w	r3, r4, #20
 800893c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008940:	f109 0314 	add.w	r3, r9, #20
 8008944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008948:	9202      	str	r2, [sp, #8]
 800894a:	1b3a      	subs	r2, r7, r4
 800894c:	3a15      	subs	r2, #21
 800894e:	f022 0203 	bic.w	r2, r2, #3
 8008952:	3204      	adds	r2, #4
 8008954:	f104 0115 	add.w	r1, r4, #21
 8008958:	428f      	cmp	r7, r1
 800895a:	bf38      	it	cc
 800895c:	2204      	movcc	r2, #4
 800895e:	9201      	str	r2, [sp, #4]
 8008960:	9a02      	ldr	r2, [sp, #8]
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	429a      	cmp	r2, r3
 8008966:	d80c      	bhi.n	8008982 <__multiply+0x9e>
 8008968:	2e00      	cmp	r6, #0
 800896a:	dd03      	ble.n	8008974 <__multiply+0x90>
 800896c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008970:	2b00      	cmp	r3, #0
 8008972:	d05b      	beq.n	8008a2c <__multiply+0x148>
 8008974:	6106      	str	r6, [r0, #16]
 8008976:	b005      	add	sp, #20
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897c:	f843 2b04 	str.w	r2, [r3], #4
 8008980:	e7d8      	b.n	8008934 <__multiply+0x50>
 8008982:	f8b3 a000 	ldrh.w	sl, [r3]
 8008986:	f1ba 0f00 	cmp.w	sl, #0
 800898a:	d024      	beq.n	80089d6 <__multiply+0xf2>
 800898c:	f104 0e14 	add.w	lr, r4, #20
 8008990:	46a9      	mov	r9, r5
 8008992:	f04f 0c00 	mov.w	ip, #0
 8008996:	f85e 2b04 	ldr.w	r2, [lr], #4
 800899a:	f8d9 1000 	ldr.w	r1, [r9]
 800899e:	fa1f fb82 	uxth.w	fp, r2
 80089a2:	b289      	uxth	r1, r1
 80089a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80089a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089ac:	f8d9 2000 	ldr.w	r2, [r9]
 80089b0:	4461      	add	r1, ip
 80089b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80089ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089be:	b289      	uxth	r1, r1
 80089c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089c4:	4577      	cmp	r7, lr
 80089c6:	f849 1b04 	str.w	r1, [r9], #4
 80089ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ce:	d8e2      	bhi.n	8008996 <__multiply+0xb2>
 80089d0:	9a01      	ldr	r2, [sp, #4]
 80089d2:	f845 c002 	str.w	ip, [r5, r2]
 80089d6:	9a03      	ldr	r2, [sp, #12]
 80089d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089dc:	3304      	adds	r3, #4
 80089de:	f1b9 0f00 	cmp.w	r9, #0
 80089e2:	d021      	beq.n	8008a28 <__multiply+0x144>
 80089e4:	6829      	ldr	r1, [r5, #0]
 80089e6:	f104 0c14 	add.w	ip, r4, #20
 80089ea:	46ae      	mov	lr, r5
 80089ec:	f04f 0a00 	mov.w	sl, #0
 80089f0:	f8bc b000 	ldrh.w	fp, [ip]
 80089f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089f8:	fb09 220b 	mla	r2, r9, fp, r2
 80089fc:	4452      	add	r2, sl
 80089fe:	b289      	uxth	r1, r1
 8008a00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a04:	f84e 1b04 	str.w	r1, [lr], #4
 8008a08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a10:	f8be 1000 	ldrh.w	r1, [lr]
 8008a14:	fb09 110a 	mla	r1, r9, sl, r1
 8008a18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a1c:	4567      	cmp	r7, ip
 8008a1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a22:	d8e5      	bhi.n	80089f0 <__multiply+0x10c>
 8008a24:	9a01      	ldr	r2, [sp, #4]
 8008a26:	50a9      	str	r1, [r5, r2]
 8008a28:	3504      	adds	r5, #4
 8008a2a:	e799      	b.n	8008960 <__multiply+0x7c>
 8008a2c:	3e01      	subs	r6, #1
 8008a2e:	e79b      	b.n	8008968 <__multiply+0x84>
 8008a30:	0800e1d0 	.word	0x0800e1d0
 8008a34:	0800e1e1 	.word	0x0800e1e1

08008a38 <__pow5mult>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	f012 0203 	ands.w	r2, r2, #3
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	d007      	beq.n	8008a58 <__pow5mult+0x20>
 8008a48:	4c25      	ldr	r4, [pc, #148]	; (8008ae0 <__pow5mult+0xa8>)
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a52:	f7ff fe9d 	bl	8008790 <__multadd>
 8008a56:	4607      	mov	r7, r0
 8008a58:	10ad      	asrs	r5, r5, #2
 8008a5a:	d03d      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008a5c:	69f4      	ldr	r4, [r6, #28]
 8008a5e:	b97c      	cbnz	r4, 8008a80 <__pow5mult+0x48>
 8008a60:	2010      	movs	r0, #16
 8008a62:	f7fe f875 	bl	8006b50 <malloc>
 8008a66:	4602      	mov	r2, r0
 8008a68:	61f0      	str	r0, [r6, #28]
 8008a6a:	b928      	cbnz	r0, 8008a78 <__pow5mult+0x40>
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <__pow5mult+0xac>)
 8008a6e:	481e      	ldr	r0, [pc, #120]	; (8008ae8 <__pow5mult+0xb0>)
 8008a70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008a74:	f000 fbac 	bl	80091d0 <__assert_func>
 8008a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a7c:	6004      	str	r4, [r0, #0]
 8008a7e:	60c4      	str	r4, [r0, #12]
 8008a80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a88:	b94c      	cbnz	r4, 8008a9e <__pow5mult+0x66>
 8008a8a:	f240 2171 	movw	r1, #625	; 0x271
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7ff ff12 	bl	80088b8 <__i2b>
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	07eb      	lsls	r3, r5, #31
 8008aa4:	d50a      	bpl.n	8008abc <__pow5mult+0x84>
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7ff ff1a 	bl	80088e4 <__multiply>
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff fe49 	bl	800874c <_Bfree>
 8008aba:	4647      	mov	r7, r8
 8008abc:	106d      	asrs	r5, r5, #1
 8008abe:	d00b      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	b938      	cbnz	r0, 8008ad4 <__pow5mult+0x9c>
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ff0b 	bl	80088e4 <__multiply>
 8008ace:	6020      	str	r0, [r4, #0]
 8008ad0:	f8c0 9000 	str.w	r9, [r0]
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	e7e4      	b.n	8008aa2 <__pow5mult+0x6a>
 8008ad8:	4638      	mov	r0, r7
 8008ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800e330 	.word	0x0800e330
 8008ae4:	0800e161 	.word	0x0800e161
 8008ae8:	0800e1e1 	.word	0x0800e1e1

08008aec <__lshift>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	6849      	ldr	r1, [r1, #4]
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	4607      	mov	r7, r0
 8008afe:	4691      	mov	r9, r2
 8008b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b04:	f108 0601 	add.w	r6, r8, #1
 8008b08:	42b3      	cmp	r3, r6
 8008b0a:	db0b      	blt.n	8008b24 <__lshift+0x38>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff fddd 	bl	80086cc <_Balloc>
 8008b12:	4605      	mov	r5, r0
 8008b14:	b948      	cbnz	r0, 8008b2a <__lshift+0x3e>
 8008b16:	4602      	mov	r2, r0
 8008b18:	4b28      	ldr	r3, [pc, #160]	; (8008bbc <__lshift+0xd0>)
 8008b1a:	4829      	ldr	r0, [pc, #164]	; (8008bc0 <__lshift+0xd4>)
 8008b1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008b20:	f000 fb56 	bl	80091d0 <__assert_func>
 8008b24:	3101      	adds	r1, #1
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	e7ee      	b.n	8008b08 <__lshift+0x1c>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f100 0114 	add.w	r1, r0, #20
 8008b30:	f100 0210 	add.w	r2, r0, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	4553      	cmp	r3, sl
 8008b38:	db33      	blt.n	8008ba2 <__lshift+0xb6>
 8008b3a:	6920      	ldr	r0, [r4, #16]
 8008b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b40:	f104 0314 	add.w	r3, r4, #20
 8008b44:	f019 091f 	ands.w	r9, r9, #31
 8008b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b50:	d02b      	beq.n	8008baa <__lshift+0xbe>
 8008b52:	f1c9 0e20 	rsb	lr, r9, #32
 8008b56:	468a      	mov	sl, r1
 8008b58:	2200      	movs	r2, #0
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8008b60:	4310      	orrs	r0, r2
 8008b62:	f84a 0b04 	str.w	r0, [sl], #4
 8008b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6a:	459c      	cmp	ip, r3
 8008b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b70:	d8f3      	bhi.n	8008b5a <__lshift+0x6e>
 8008b72:	ebac 0304 	sub.w	r3, ip, r4
 8008b76:	3b15      	subs	r3, #21
 8008b78:	f023 0303 	bic.w	r3, r3, #3
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	f104 0015 	add.w	r0, r4, #21
 8008b82:	4584      	cmp	ip, r0
 8008b84:	bf38      	it	cc
 8008b86:	2304      	movcc	r3, #4
 8008b88:	50ca      	str	r2, [r1, r3]
 8008b8a:	b10a      	cbz	r2, 8008b90 <__lshift+0xa4>
 8008b8c:	f108 0602 	add.w	r6, r8, #2
 8008b90:	3e01      	subs	r6, #1
 8008b92:	4638      	mov	r0, r7
 8008b94:	612e      	str	r6, [r5, #16]
 8008b96:	4621      	mov	r1, r4
 8008b98:	f7ff fdd8 	bl	800874c <_Bfree>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	e7c5      	b.n	8008b36 <__lshift+0x4a>
 8008baa:	3904      	subs	r1, #4
 8008bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bb4:	459c      	cmp	ip, r3
 8008bb6:	d8f9      	bhi.n	8008bac <__lshift+0xc0>
 8008bb8:	e7ea      	b.n	8008b90 <__lshift+0xa4>
 8008bba:	bf00      	nop
 8008bbc:	0800e1d0 	.word	0x0800e1d0
 8008bc0:	0800e1e1 	.word	0x0800e1e1

08008bc4 <__mcmp>:
 8008bc4:	b530      	push	{r4, r5, lr}
 8008bc6:	6902      	ldr	r2, [r0, #16]
 8008bc8:	690c      	ldr	r4, [r1, #16]
 8008bca:	1b12      	subs	r2, r2, r4
 8008bcc:	d10e      	bne.n	8008bec <__mcmp+0x28>
 8008bce:	f100 0314 	add.w	r3, r0, #20
 8008bd2:	3114      	adds	r1, #20
 8008bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008be4:	42a5      	cmp	r5, r4
 8008be6:	d003      	beq.n	8008bf0 <__mcmp+0x2c>
 8008be8:	d305      	bcc.n	8008bf6 <__mcmp+0x32>
 8008bea:	2201      	movs	r2, #1
 8008bec:	4610      	mov	r0, r2
 8008bee:	bd30      	pop	{r4, r5, pc}
 8008bf0:	4283      	cmp	r3, r0
 8008bf2:	d3f3      	bcc.n	8008bdc <__mcmp+0x18>
 8008bf4:	e7fa      	b.n	8008bec <__mcmp+0x28>
 8008bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfa:	e7f7      	b.n	8008bec <__mcmp+0x28>

08008bfc <__mdiff>:
 8008bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	460c      	mov	r4, r1
 8008c02:	4606      	mov	r6, r0
 8008c04:	4611      	mov	r1, r2
 8008c06:	4620      	mov	r0, r4
 8008c08:	4690      	mov	r8, r2
 8008c0a:	f7ff ffdb 	bl	8008bc4 <__mcmp>
 8008c0e:	1e05      	subs	r5, r0, #0
 8008c10:	d110      	bne.n	8008c34 <__mdiff+0x38>
 8008c12:	4629      	mov	r1, r5
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7ff fd59 	bl	80086cc <_Balloc>
 8008c1a:	b930      	cbnz	r0, 8008c2a <__mdiff+0x2e>
 8008c1c:	4b3a      	ldr	r3, [pc, #232]	; (8008d08 <__mdiff+0x10c>)
 8008c1e:	4602      	mov	r2, r0
 8008c20:	f240 2137 	movw	r1, #567	; 0x237
 8008c24:	4839      	ldr	r0, [pc, #228]	; (8008d0c <__mdiff+0x110>)
 8008c26:	f000 fad3 	bl	80091d0 <__assert_func>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	bfa4      	itt	ge
 8008c36:	4643      	movge	r3, r8
 8008c38:	46a0      	movge	r8, r4
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c40:	bfa6      	itte	ge
 8008c42:	461c      	movge	r4, r3
 8008c44:	2500      	movge	r5, #0
 8008c46:	2501      	movlt	r5, #1
 8008c48:	f7ff fd40 	bl	80086cc <_Balloc>
 8008c4c:	b920      	cbnz	r0, 8008c58 <__mdiff+0x5c>
 8008c4e:	4b2e      	ldr	r3, [pc, #184]	; (8008d08 <__mdiff+0x10c>)
 8008c50:	4602      	mov	r2, r0
 8008c52:	f240 2145 	movw	r1, #581	; 0x245
 8008c56:	e7e5      	b.n	8008c24 <__mdiff+0x28>
 8008c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c5c:	6926      	ldr	r6, [r4, #16]
 8008c5e:	60c5      	str	r5, [r0, #12]
 8008c60:	f104 0914 	add.w	r9, r4, #20
 8008c64:	f108 0514 	add.w	r5, r8, #20
 8008c68:	f100 0e14 	add.w	lr, r0, #20
 8008c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c74:	f108 0210 	add.w	r2, r8, #16
 8008c78:	46f2      	mov	sl, lr
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c84:	fa11 f88b 	uxtah	r8, r1, fp
 8008c88:	b299      	uxth	r1, r3
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	eba8 0801 	sub.w	r8, r8, r1
 8008c90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c98:	fa1f f888 	uxth.w	r8, r8
 8008c9c:	1419      	asrs	r1, r3, #16
 8008c9e:	454e      	cmp	r6, r9
 8008ca0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ca4:	f84a 3b04 	str.w	r3, [sl], #4
 8008ca8:	d8e8      	bhi.n	8008c7c <__mdiff+0x80>
 8008caa:	1b33      	subs	r3, r6, r4
 8008cac:	3b15      	subs	r3, #21
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	3415      	adds	r4, #21
 8008cb6:	42a6      	cmp	r6, r4
 8008cb8:	bf38      	it	cc
 8008cba:	2304      	movcc	r3, #4
 8008cbc:	441d      	add	r5, r3
 8008cbe:	4473      	add	r3, lr
 8008cc0:	469e      	mov	lr, r3
 8008cc2:	462e      	mov	r6, r5
 8008cc4:	4566      	cmp	r6, ip
 8008cc6:	d30e      	bcc.n	8008ce6 <__mdiff+0xea>
 8008cc8:	f10c 0203 	add.w	r2, ip, #3
 8008ccc:	1b52      	subs	r2, r2, r5
 8008cce:	f022 0203 	bic.w	r2, r2, #3
 8008cd2:	3d03      	subs	r5, #3
 8008cd4:	45ac      	cmp	ip, r5
 8008cd6:	bf38      	it	cc
 8008cd8:	2200      	movcc	r2, #0
 8008cda:	4413      	add	r3, r2
 8008cdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ce0:	b17a      	cbz	r2, 8008d02 <__mdiff+0x106>
 8008ce2:	6107      	str	r7, [r0, #16]
 8008ce4:	e7a4      	b.n	8008c30 <__mdiff+0x34>
 8008ce6:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cea:	fa11 f288 	uxtah	r2, r1, r8
 8008cee:	1414      	asrs	r4, r2, #16
 8008cf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cf4:	b292      	uxth	r2, r2
 8008cf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008cfa:	f84e 2b04 	str.w	r2, [lr], #4
 8008cfe:	1421      	asrs	r1, r4, #16
 8008d00:	e7e0      	b.n	8008cc4 <__mdiff+0xc8>
 8008d02:	3f01      	subs	r7, #1
 8008d04:	e7ea      	b.n	8008cdc <__mdiff+0xe0>
 8008d06:	bf00      	nop
 8008d08:	0800e1d0 	.word	0x0800e1d0
 8008d0c:	0800e1e1 	.word	0x0800e1e1

08008d10 <__d2b>:
 8008d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	460f      	mov	r7, r1
 8008d16:	2101      	movs	r1, #1
 8008d18:	ec59 8b10 	vmov	r8, r9, d0
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	f7ff fcd5 	bl	80086cc <_Balloc>
 8008d22:	4604      	mov	r4, r0
 8008d24:	b930      	cbnz	r0, 8008d34 <__d2b+0x24>
 8008d26:	4602      	mov	r2, r0
 8008d28:	4b24      	ldr	r3, [pc, #144]	; (8008dbc <__d2b+0xac>)
 8008d2a:	4825      	ldr	r0, [pc, #148]	; (8008dc0 <__d2b+0xb0>)
 8008d2c:	f240 310f 	movw	r1, #783	; 0x30f
 8008d30:	f000 fa4e 	bl	80091d0 <__assert_func>
 8008d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d3c:	bb2d      	cbnz	r5, 8008d8a <__d2b+0x7a>
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	f1b8 0300 	subs.w	r3, r8, #0
 8008d44:	d026      	beq.n	8008d94 <__d2b+0x84>
 8008d46:	4668      	mov	r0, sp
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	f7ff fd87 	bl	800885c <__lo0bits>
 8008d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d52:	b1e8      	cbz	r0, 8008d90 <__d2b+0x80>
 8008d54:	f1c0 0320 	rsb	r3, r0, #32
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	40c2      	lsrs	r2, r0
 8008d60:	6163      	str	r3, [r4, #20]
 8008d62:	9201      	str	r2, [sp, #4]
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	61a3      	str	r3, [r4, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	bf14      	ite	ne
 8008d6c:	2202      	movne	r2, #2
 8008d6e:	2201      	moveq	r2, #1
 8008d70:	6122      	str	r2, [r4, #16]
 8008d72:	b1bd      	cbz	r5, 8008da4 <__d2b+0x94>
 8008d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d78:	4405      	add	r5, r0
 8008d7a:	603d      	str	r5, [r7, #0]
 8008d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d80:	6030      	str	r0, [r6, #0]
 8008d82:	4620      	mov	r0, r4
 8008d84:	b003      	add	sp, #12
 8008d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d8e:	e7d6      	b.n	8008d3e <__d2b+0x2e>
 8008d90:	6161      	str	r1, [r4, #20]
 8008d92:	e7e7      	b.n	8008d64 <__d2b+0x54>
 8008d94:	a801      	add	r0, sp, #4
 8008d96:	f7ff fd61 	bl	800885c <__lo0bits>
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	6163      	str	r3, [r4, #20]
 8008d9e:	3020      	adds	r0, #32
 8008da0:	2201      	movs	r2, #1
 8008da2:	e7e5      	b.n	8008d70 <__d2b+0x60>
 8008da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dac:	6038      	str	r0, [r7, #0]
 8008dae:	6918      	ldr	r0, [r3, #16]
 8008db0:	f7ff fd34 	bl	800881c <__hi0bits>
 8008db4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008db8:	e7e2      	b.n	8008d80 <__d2b+0x70>
 8008dba:	bf00      	nop
 8008dbc:	0800e1d0 	.word	0x0800e1d0
 8008dc0:	0800e1e1 	.word	0x0800e1e1

08008dc4 <__ssputs_r>:
 8008dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	688e      	ldr	r6, [r1, #8]
 8008dca:	461f      	mov	r7, r3
 8008dcc:	42be      	cmp	r6, r7
 8008dce:	680b      	ldr	r3, [r1, #0]
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	4690      	mov	r8, r2
 8008dd6:	d82c      	bhi.n	8008e32 <__ssputs_r+0x6e>
 8008dd8:	898a      	ldrh	r2, [r1, #12]
 8008dda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dde:	d026      	beq.n	8008e2e <__ssputs_r+0x6a>
 8008de0:	6965      	ldr	r5, [r4, #20]
 8008de2:	6909      	ldr	r1, [r1, #16]
 8008de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008de8:	eba3 0901 	sub.w	r9, r3, r1
 8008dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008df0:	1c7b      	adds	r3, r7, #1
 8008df2:	444b      	add	r3, r9
 8008df4:	106d      	asrs	r5, r5, #1
 8008df6:	429d      	cmp	r5, r3
 8008df8:	bf38      	it	cc
 8008dfa:	461d      	movcc	r5, r3
 8008dfc:	0553      	lsls	r3, r2, #21
 8008dfe:	d527      	bpl.n	8008e50 <__ssputs_r+0x8c>
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7fd fecd 	bl	8006ba0 <_malloc_r>
 8008e06:	4606      	mov	r6, r0
 8008e08:	b360      	cbz	r0, 8008e64 <__ssputs_r+0xa0>
 8008e0a:	6921      	ldr	r1, [r4, #16]
 8008e0c:	464a      	mov	r2, r9
 8008e0e:	f7fe fd89 	bl	8007924 <memcpy>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1c:	81a3      	strh	r3, [r4, #12]
 8008e1e:	6126      	str	r6, [r4, #16]
 8008e20:	6165      	str	r5, [r4, #20]
 8008e22:	444e      	add	r6, r9
 8008e24:	eba5 0509 	sub.w	r5, r5, r9
 8008e28:	6026      	str	r6, [r4, #0]
 8008e2a:	60a5      	str	r5, [r4, #8]
 8008e2c:	463e      	mov	r6, r7
 8008e2e:	42be      	cmp	r6, r7
 8008e30:	d900      	bls.n	8008e34 <__ssputs_r+0x70>
 8008e32:	463e      	mov	r6, r7
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	4632      	mov	r2, r6
 8008e38:	4641      	mov	r1, r8
 8008e3a:	f7fe fcca 	bl	80077d2 <memmove>
 8008e3e:	68a3      	ldr	r3, [r4, #8]
 8008e40:	1b9b      	subs	r3, r3, r6
 8008e42:	60a3      	str	r3, [r4, #8]
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	4433      	add	r3, r6
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e50:	462a      	mov	r2, r5
 8008e52:	f000 fa03 	bl	800925c <_realloc_r>
 8008e56:	4606      	mov	r6, r0
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d1e0      	bne.n	8008e1e <__ssputs_r+0x5a>
 8008e5c:	6921      	ldr	r1, [r4, #16]
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f7ff fbe8 	bl	8008634 <_free_r>
 8008e64:	230c      	movs	r3, #12
 8008e66:	f8ca 3000 	str.w	r3, [sl]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
 8008e76:	e7e9      	b.n	8008e4c <__ssputs_r+0x88>

08008e78 <_svfiprintf_r>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	4698      	mov	r8, r3
 8008e7e:	898b      	ldrh	r3, [r1, #12]
 8008e80:	061b      	lsls	r3, r3, #24
 8008e82:	b09d      	sub	sp, #116	; 0x74
 8008e84:	4607      	mov	r7, r0
 8008e86:	460d      	mov	r5, r1
 8008e88:	4614      	mov	r4, r2
 8008e8a:	d50e      	bpl.n	8008eaa <_svfiprintf_r+0x32>
 8008e8c:	690b      	ldr	r3, [r1, #16]
 8008e8e:	b963      	cbnz	r3, 8008eaa <_svfiprintf_r+0x32>
 8008e90:	2140      	movs	r1, #64	; 0x40
 8008e92:	f7fd fe85 	bl	8006ba0 <_malloc_r>
 8008e96:	6028      	str	r0, [r5, #0]
 8008e98:	6128      	str	r0, [r5, #16]
 8008e9a:	b920      	cbnz	r0, 8008ea6 <_svfiprintf_r+0x2e>
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea4:	e0d0      	b.n	8009048 <_svfiprintf_r+0x1d0>
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	616b      	str	r3, [r5, #20]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9309      	str	r3, [sp, #36]	; 0x24
 8008eae:	2320      	movs	r3, #32
 8008eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb8:	2330      	movs	r3, #48	; 0x30
 8008eba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009060 <_svfiprintf_r+0x1e8>
 8008ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec2:	f04f 0901 	mov.w	r9, #1
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	469a      	mov	sl, r3
 8008eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ece:	b10a      	cbz	r2, 8008ed4 <_svfiprintf_r+0x5c>
 8008ed0:	2a25      	cmp	r2, #37	; 0x25
 8008ed2:	d1f9      	bne.n	8008ec8 <_svfiprintf_r+0x50>
 8008ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed8:	d00b      	beq.n	8008ef2 <_svfiprintf_r+0x7a>
 8008eda:	465b      	mov	r3, fp
 8008edc:	4622      	mov	r2, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ff6f 	bl	8008dc4 <__ssputs_r>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f000 80a9 	beq.w	800903e <_svfiprintf_r+0x1c6>
 8008eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eee:	445a      	add	r2, fp
 8008ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 80a1 	beq.w	800903e <_svfiprintf_r+0x1c6>
 8008efc:	2300      	movs	r3, #0
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295
 8008f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f06:	f10a 0a01 	add.w	sl, sl, #1
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	9307      	str	r3, [sp, #28]
 8008f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f12:	931a      	str	r3, [sp, #104]	; 0x68
 8008f14:	4654      	mov	r4, sl
 8008f16:	2205      	movs	r2, #5
 8008f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1c:	4850      	ldr	r0, [pc, #320]	; (8009060 <_svfiprintf_r+0x1e8>)
 8008f1e:	f7f7 f977 	bl	8000210 <memchr>
 8008f22:	9a04      	ldr	r2, [sp, #16]
 8008f24:	b9d8      	cbnz	r0, 8008f5e <_svfiprintf_r+0xe6>
 8008f26:	06d0      	lsls	r0, r2, #27
 8008f28:	bf44      	itt	mi
 8008f2a:	2320      	movmi	r3, #32
 8008f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f30:	0711      	lsls	r1, r2, #28
 8008f32:	bf44      	itt	mi
 8008f34:	232b      	movmi	r3, #43	; 0x2b
 8008f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f40:	d015      	beq.n	8008f6e <_svfiprintf_r+0xf6>
 8008f42:	9a07      	ldr	r2, [sp, #28]
 8008f44:	4654      	mov	r4, sl
 8008f46:	2000      	movs	r0, #0
 8008f48:	f04f 0c0a 	mov.w	ip, #10
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f52:	3b30      	subs	r3, #48	; 0x30
 8008f54:	2b09      	cmp	r3, #9
 8008f56:	d94d      	bls.n	8008ff4 <_svfiprintf_r+0x17c>
 8008f58:	b1b0      	cbz	r0, 8008f88 <_svfiprintf_r+0x110>
 8008f5a:	9207      	str	r2, [sp, #28]
 8008f5c:	e014      	b.n	8008f88 <_svfiprintf_r+0x110>
 8008f5e:	eba0 0308 	sub.w	r3, r0, r8
 8008f62:	fa09 f303 	lsl.w	r3, r9, r3
 8008f66:	4313      	orrs	r3, r2
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	46a2      	mov	sl, r4
 8008f6c:	e7d2      	b.n	8008f14 <_svfiprintf_r+0x9c>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	1d19      	adds	r1, r3, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	9103      	str	r1, [sp, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfbb      	ittet	lt
 8008f7a:	425b      	neglt	r3, r3
 8008f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f80:	9307      	strge	r3, [sp, #28]
 8008f82:	9307      	strlt	r3, [sp, #28]
 8008f84:	bfb8      	it	lt
 8008f86:	9204      	strlt	r2, [sp, #16]
 8008f88:	7823      	ldrb	r3, [r4, #0]
 8008f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f8c:	d10c      	bne.n	8008fa8 <_svfiprintf_r+0x130>
 8008f8e:	7863      	ldrb	r3, [r4, #1]
 8008f90:	2b2a      	cmp	r3, #42	; 0x2a
 8008f92:	d134      	bne.n	8008ffe <_svfiprintf_r+0x186>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	1d1a      	adds	r2, r3, #4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	9203      	str	r2, [sp, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	bfb8      	it	lt
 8008fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fa4:	3402      	adds	r4, #2
 8008fa6:	9305      	str	r3, [sp, #20]
 8008fa8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009070 <_svfiprintf_r+0x1f8>
 8008fac:	7821      	ldrb	r1, [r4, #0]
 8008fae:	2203      	movs	r2, #3
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	f7f7 f92d 	bl	8000210 <memchr>
 8008fb6:	b138      	cbz	r0, 8008fc8 <_svfiprintf_r+0x150>
 8008fb8:	9b04      	ldr	r3, [sp, #16]
 8008fba:	eba0 000a 	sub.w	r0, r0, sl
 8008fbe:	2240      	movs	r2, #64	; 0x40
 8008fc0:	4082      	lsls	r2, r0
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	3401      	adds	r4, #1
 8008fc6:	9304      	str	r3, [sp, #16]
 8008fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fcc:	4825      	ldr	r0, [pc, #148]	; (8009064 <_svfiprintf_r+0x1ec>)
 8008fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fd2:	2206      	movs	r2, #6
 8008fd4:	f7f7 f91c 	bl	8000210 <memchr>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d038      	beq.n	800904e <_svfiprintf_r+0x1d6>
 8008fdc:	4b22      	ldr	r3, [pc, #136]	; (8009068 <_svfiprintf_r+0x1f0>)
 8008fde:	bb1b      	cbnz	r3, 8009028 <_svfiprintf_r+0x1b0>
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	3307      	adds	r3, #7
 8008fe4:	f023 0307 	bic.w	r3, r3, #7
 8008fe8:	3308      	adds	r3, #8
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fee:	4433      	add	r3, r6
 8008ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff2:	e768      	b.n	8008ec6 <_svfiprintf_r+0x4e>
 8008ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	e7a6      	b.n	8008f4c <_svfiprintf_r+0xd4>
 8008ffe:	2300      	movs	r3, #0
 8009000:	3401      	adds	r4, #1
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	4619      	mov	r1, r3
 8009006:	f04f 0c0a 	mov.w	ip, #10
 800900a:	4620      	mov	r0, r4
 800900c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009010:	3a30      	subs	r2, #48	; 0x30
 8009012:	2a09      	cmp	r2, #9
 8009014:	d903      	bls.n	800901e <_svfiprintf_r+0x1a6>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0c6      	beq.n	8008fa8 <_svfiprintf_r+0x130>
 800901a:	9105      	str	r1, [sp, #20]
 800901c:	e7c4      	b.n	8008fa8 <_svfiprintf_r+0x130>
 800901e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009022:	4604      	mov	r4, r0
 8009024:	2301      	movs	r3, #1
 8009026:	e7f0      	b.n	800900a <_svfiprintf_r+0x192>
 8009028:	ab03      	add	r3, sp, #12
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	462a      	mov	r2, r5
 800902e:	4b0f      	ldr	r3, [pc, #60]	; (800906c <_svfiprintf_r+0x1f4>)
 8009030:	a904      	add	r1, sp, #16
 8009032:	4638      	mov	r0, r7
 8009034:	f7fd fee0 	bl	8006df8 <_printf_float>
 8009038:	1c42      	adds	r2, r0, #1
 800903a:	4606      	mov	r6, r0
 800903c:	d1d6      	bne.n	8008fec <_svfiprintf_r+0x174>
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	065b      	lsls	r3, r3, #25
 8009042:	f53f af2d 	bmi.w	8008ea0 <_svfiprintf_r+0x28>
 8009046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009048:	b01d      	add	sp, #116	; 0x74
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	ab03      	add	r3, sp, #12
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	462a      	mov	r2, r5
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <_svfiprintf_r+0x1f4>)
 8009056:	a904      	add	r1, sp, #16
 8009058:	4638      	mov	r0, r7
 800905a:	f7fe f971 	bl	8007340 <_printf_i>
 800905e:	e7eb      	b.n	8009038 <_svfiprintf_r+0x1c0>
 8009060:	0800e33c 	.word	0x0800e33c
 8009064:	0800e346 	.word	0x0800e346
 8009068:	08006df9 	.word	0x08006df9
 800906c:	08008dc5 	.word	0x08008dc5
 8009070:	0800e342 	.word	0x0800e342

08009074 <__sflush_r>:
 8009074:	898a      	ldrh	r2, [r1, #12]
 8009076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907a:	4605      	mov	r5, r0
 800907c:	0710      	lsls	r0, r2, #28
 800907e:	460c      	mov	r4, r1
 8009080:	d458      	bmi.n	8009134 <__sflush_r+0xc0>
 8009082:	684b      	ldr	r3, [r1, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	dc05      	bgt.n	8009094 <__sflush_r+0x20>
 8009088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	dc02      	bgt.n	8009094 <__sflush_r+0x20>
 800908e:	2000      	movs	r0, #0
 8009090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009096:	2e00      	cmp	r6, #0
 8009098:	d0f9      	beq.n	800908e <__sflush_r+0x1a>
 800909a:	2300      	movs	r3, #0
 800909c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090a0:	682f      	ldr	r7, [r5, #0]
 80090a2:	6a21      	ldr	r1, [r4, #32]
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	d032      	beq.n	800910e <__sflush_r+0x9a>
 80090a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	075a      	lsls	r2, r3, #29
 80090ae:	d505      	bpl.n	80090bc <__sflush_r+0x48>
 80090b0:	6863      	ldr	r3, [r4, #4]
 80090b2:	1ac0      	subs	r0, r0, r3
 80090b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090b6:	b10b      	cbz	r3, 80090bc <__sflush_r+0x48>
 80090b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090ba:	1ac0      	subs	r0, r0, r3
 80090bc:	2300      	movs	r3, #0
 80090be:	4602      	mov	r2, r0
 80090c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090c2:	6a21      	ldr	r1, [r4, #32]
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b0      	blx	r6
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	d106      	bne.n	80090dc <__sflush_r+0x68>
 80090ce:	6829      	ldr	r1, [r5, #0]
 80090d0:	291d      	cmp	r1, #29
 80090d2:	d82b      	bhi.n	800912c <__sflush_r+0xb8>
 80090d4:	4a29      	ldr	r2, [pc, #164]	; (800917c <__sflush_r+0x108>)
 80090d6:	410a      	asrs	r2, r1
 80090d8:	07d6      	lsls	r6, r2, #31
 80090da:	d427      	bmi.n	800912c <__sflush_r+0xb8>
 80090dc:	2200      	movs	r2, #0
 80090de:	6062      	str	r2, [r4, #4]
 80090e0:	04d9      	lsls	r1, r3, #19
 80090e2:	6922      	ldr	r2, [r4, #16]
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	d504      	bpl.n	80090f2 <__sflush_r+0x7e>
 80090e8:	1c42      	adds	r2, r0, #1
 80090ea:	d101      	bne.n	80090f0 <__sflush_r+0x7c>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b903      	cbnz	r3, 80090f2 <__sflush_r+0x7e>
 80090f0:	6560      	str	r0, [r4, #84]	; 0x54
 80090f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090f4:	602f      	str	r7, [r5, #0]
 80090f6:	2900      	cmp	r1, #0
 80090f8:	d0c9      	beq.n	800908e <__sflush_r+0x1a>
 80090fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090fe:	4299      	cmp	r1, r3
 8009100:	d002      	beq.n	8009108 <__sflush_r+0x94>
 8009102:	4628      	mov	r0, r5
 8009104:	f7ff fa96 	bl	8008634 <_free_r>
 8009108:	2000      	movs	r0, #0
 800910a:	6360      	str	r0, [r4, #52]	; 0x34
 800910c:	e7c0      	b.n	8009090 <__sflush_r+0x1c>
 800910e:	2301      	movs	r3, #1
 8009110:	4628      	mov	r0, r5
 8009112:	47b0      	blx	r6
 8009114:	1c41      	adds	r1, r0, #1
 8009116:	d1c8      	bne.n	80090aa <__sflush_r+0x36>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0c5      	beq.n	80090aa <__sflush_r+0x36>
 800911e:	2b1d      	cmp	r3, #29
 8009120:	d001      	beq.n	8009126 <__sflush_r+0xb2>
 8009122:	2b16      	cmp	r3, #22
 8009124:	d101      	bne.n	800912a <__sflush_r+0xb6>
 8009126:	602f      	str	r7, [r5, #0]
 8009128:	e7b1      	b.n	800908e <__sflush_r+0x1a>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	e7ad      	b.n	8009090 <__sflush_r+0x1c>
 8009134:	690f      	ldr	r7, [r1, #16]
 8009136:	2f00      	cmp	r7, #0
 8009138:	d0a9      	beq.n	800908e <__sflush_r+0x1a>
 800913a:	0793      	lsls	r3, r2, #30
 800913c:	680e      	ldr	r6, [r1, #0]
 800913e:	bf08      	it	eq
 8009140:	694b      	ldreq	r3, [r1, #20]
 8009142:	600f      	str	r7, [r1, #0]
 8009144:	bf18      	it	ne
 8009146:	2300      	movne	r3, #0
 8009148:	eba6 0807 	sub.w	r8, r6, r7
 800914c:	608b      	str	r3, [r1, #8]
 800914e:	f1b8 0f00 	cmp.w	r8, #0
 8009152:	dd9c      	ble.n	800908e <__sflush_r+0x1a>
 8009154:	6a21      	ldr	r1, [r4, #32]
 8009156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009158:	4643      	mov	r3, r8
 800915a:	463a      	mov	r2, r7
 800915c:	4628      	mov	r0, r5
 800915e:	47b0      	blx	r6
 8009160:	2800      	cmp	r0, #0
 8009162:	dc06      	bgt.n	8009172 <__sflush_r+0xfe>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	e78e      	b.n	8009090 <__sflush_r+0x1c>
 8009172:	4407      	add	r7, r0
 8009174:	eba8 0800 	sub.w	r8, r8, r0
 8009178:	e7e9      	b.n	800914e <__sflush_r+0xda>
 800917a:	bf00      	nop
 800917c:	dfbffffe 	.word	0xdfbffffe

08009180 <_fflush_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	690b      	ldr	r3, [r1, #16]
 8009184:	4605      	mov	r5, r0
 8009186:	460c      	mov	r4, r1
 8009188:	b913      	cbnz	r3, 8009190 <_fflush_r+0x10>
 800918a:	2500      	movs	r5, #0
 800918c:	4628      	mov	r0, r5
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	b118      	cbz	r0, 800919a <_fflush_r+0x1a>
 8009192:	6a03      	ldr	r3, [r0, #32]
 8009194:	b90b      	cbnz	r3, 800919a <_fflush_r+0x1a>
 8009196:	f7fe fa6f 	bl	8007678 <__sinit>
 800919a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0f3      	beq.n	800918a <_fflush_r+0xa>
 80091a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091a4:	07d0      	lsls	r0, r2, #31
 80091a6:	d404      	bmi.n	80091b2 <_fflush_r+0x32>
 80091a8:	0599      	lsls	r1, r3, #22
 80091aa:	d402      	bmi.n	80091b2 <_fflush_r+0x32>
 80091ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ae:	f7fe fbb7 	bl	8007920 <__retarget_lock_acquire_recursive>
 80091b2:	4628      	mov	r0, r5
 80091b4:	4621      	mov	r1, r4
 80091b6:	f7ff ff5d 	bl	8009074 <__sflush_r>
 80091ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091bc:	07da      	lsls	r2, r3, #31
 80091be:	4605      	mov	r5, r0
 80091c0:	d4e4      	bmi.n	800918c <_fflush_r+0xc>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	059b      	lsls	r3, r3, #22
 80091c6:	d4e1      	bmi.n	800918c <_fflush_r+0xc>
 80091c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ca:	f7fe fbaa 	bl	8007922 <__retarget_lock_release_recursive>
 80091ce:	e7dd      	b.n	800918c <_fflush_r+0xc>

080091d0 <__assert_func>:
 80091d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091d2:	4614      	mov	r4, r2
 80091d4:	461a      	mov	r2, r3
 80091d6:	4b09      	ldr	r3, [pc, #36]	; (80091fc <__assert_func+0x2c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4605      	mov	r5, r0
 80091dc:	68d8      	ldr	r0, [r3, #12]
 80091de:	b14c      	cbz	r4, 80091f4 <__assert_func+0x24>
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <__assert_func+0x30>)
 80091e2:	9100      	str	r1, [sp, #0]
 80091e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091e8:	4906      	ldr	r1, [pc, #24]	; (8009204 <__assert_func+0x34>)
 80091ea:	462b      	mov	r3, r5
 80091ec:	f000 f872 	bl	80092d4 <fiprintf>
 80091f0:	f000 f882 	bl	80092f8 <abort>
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <__assert_func+0x38>)
 80091f6:	461c      	mov	r4, r3
 80091f8:	e7f3      	b.n	80091e2 <__assert_func+0x12>
 80091fa:	bf00      	nop
 80091fc:	2000008c 	.word	0x2000008c
 8009200:	0800e357 	.word	0x0800e357
 8009204:	0800e364 	.word	0x0800e364
 8009208:	0800e392 	.word	0x0800e392

0800920c <_calloc_r>:
 800920c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800920e:	fba1 2402 	umull	r2, r4, r1, r2
 8009212:	b94c      	cbnz	r4, 8009228 <_calloc_r+0x1c>
 8009214:	4611      	mov	r1, r2
 8009216:	9201      	str	r2, [sp, #4]
 8009218:	f7fd fcc2 	bl	8006ba0 <_malloc_r>
 800921c:	9a01      	ldr	r2, [sp, #4]
 800921e:	4605      	mov	r5, r0
 8009220:	b930      	cbnz	r0, 8009230 <_calloc_r+0x24>
 8009222:	4628      	mov	r0, r5
 8009224:	b003      	add	sp, #12
 8009226:	bd30      	pop	{r4, r5, pc}
 8009228:	220c      	movs	r2, #12
 800922a:	6002      	str	r2, [r0, #0]
 800922c:	2500      	movs	r5, #0
 800922e:	e7f8      	b.n	8009222 <_calloc_r+0x16>
 8009230:	4621      	mov	r1, r4
 8009232:	f7fe fae8 	bl	8007806 <memset>
 8009236:	e7f4      	b.n	8009222 <_calloc_r+0x16>

08009238 <__ascii_mbtowc>:
 8009238:	b082      	sub	sp, #8
 800923a:	b901      	cbnz	r1, 800923e <__ascii_mbtowc+0x6>
 800923c:	a901      	add	r1, sp, #4
 800923e:	b142      	cbz	r2, 8009252 <__ascii_mbtowc+0x1a>
 8009240:	b14b      	cbz	r3, 8009256 <__ascii_mbtowc+0x1e>
 8009242:	7813      	ldrb	r3, [r2, #0]
 8009244:	600b      	str	r3, [r1, #0]
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	1e10      	subs	r0, r2, #0
 800924a:	bf18      	it	ne
 800924c:	2001      	movne	r0, #1
 800924e:	b002      	add	sp, #8
 8009250:	4770      	bx	lr
 8009252:	4610      	mov	r0, r2
 8009254:	e7fb      	b.n	800924e <__ascii_mbtowc+0x16>
 8009256:	f06f 0001 	mvn.w	r0, #1
 800925a:	e7f8      	b.n	800924e <__ascii_mbtowc+0x16>

0800925c <_realloc_r>:
 800925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009260:	4680      	mov	r8, r0
 8009262:	4614      	mov	r4, r2
 8009264:	460e      	mov	r6, r1
 8009266:	b921      	cbnz	r1, 8009272 <_realloc_r+0x16>
 8009268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800926c:	4611      	mov	r1, r2
 800926e:	f7fd bc97 	b.w	8006ba0 <_malloc_r>
 8009272:	b92a      	cbnz	r2, 8009280 <_realloc_r+0x24>
 8009274:	f7ff f9de 	bl	8008634 <_free_r>
 8009278:	4625      	mov	r5, r4
 800927a:	4628      	mov	r0, r5
 800927c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009280:	f000 f841 	bl	8009306 <_malloc_usable_size_r>
 8009284:	4284      	cmp	r4, r0
 8009286:	4607      	mov	r7, r0
 8009288:	d802      	bhi.n	8009290 <_realloc_r+0x34>
 800928a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800928e:	d812      	bhi.n	80092b6 <_realloc_r+0x5a>
 8009290:	4621      	mov	r1, r4
 8009292:	4640      	mov	r0, r8
 8009294:	f7fd fc84 	bl	8006ba0 <_malloc_r>
 8009298:	4605      	mov	r5, r0
 800929a:	2800      	cmp	r0, #0
 800929c:	d0ed      	beq.n	800927a <_realloc_r+0x1e>
 800929e:	42bc      	cmp	r4, r7
 80092a0:	4622      	mov	r2, r4
 80092a2:	4631      	mov	r1, r6
 80092a4:	bf28      	it	cs
 80092a6:	463a      	movcs	r2, r7
 80092a8:	f7fe fb3c 	bl	8007924 <memcpy>
 80092ac:	4631      	mov	r1, r6
 80092ae:	4640      	mov	r0, r8
 80092b0:	f7ff f9c0 	bl	8008634 <_free_r>
 80092b4:	e7e1      	b.n	800927a <_realloc_r+0x1e>
 80092b6:	4635      	mov	r5, r6
 80092b8:	e7df      	b.n	800927a <_realloc_r+0x1e>

080092ba <__ascii_wctomb>:
 80092ba:	b149      	cbz	r1, 80092d0 <__ascii_wctomb+0x16>
 80092bc:	2aff      	cmp	r2, #255	; 0xff
 80092be:	bf85      	ittet	hi
 80092c0:	238a      	movhi	r3, #138	; 0x8a
 80092c2:	6003      	strhi	r3, [r0, #0]
 80092c4:	700a      	strbls	r2, [r1, #0]
 80092c6:	f04f 30ff 	movhi.w	r0, #4294967295
 80092ca:	bf98      	it	ls
 80092cc:	2001      	movls	r0, #1
 80092ce:	4770      	bx	lr
 80092d0:	4608      	mov	r0, r1
 80092d2:	4770      	bx	lr

080092d4 <fiprintf>:
 80092d4:	b40e      	push	{r1, r2, r3}
 80092d6:	b503      	push	{r0, r1, lr}
 80092d8:	4601      	mov	r1, r0
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	4805      	ldr	r0, [pc, #20]	; (80092f4 <fiprintf+0x20>)
 80092de:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	f000 f83f 	bl	8009368 <_vfiprintf_r>
 80092ea:	b002      	add	sp, #8
 80092ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f0:	b003      	add	sp, #12
 80092f2:	4770      	bx	lr
 80092f4:	2000008c 	.word	0x2000008c

080092f8 <abort>:
 80092f8:	b508      	push	{r3, lr}
 80092fa:	2006      	movs	r0, #6
 80092fc:	f000 fa0c 	bl	8009718 <raise>
 8009300:	2001      	movs	r0, #1
 8009302:	f7f8 fbef 	bl	8001ae4 <_exit>

08009306 <_malloc_usable_size_r>:
 8009306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800930a:	1f18      	subs	r0, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	bfbc      	itt	lt
 8009310:	580b      	ldrlt	r3, [r1, r0]
 8009312:	18c0      	addlt	r0, r0, r3
 8009314:	4770      	bx	lr

08009316 <__sfputc_r>:
 8009316:	6893      	ldr	r3, [r2, #8]
 8009318:	3b01      	subs	r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	b410      	push	{r4}
 800931e:	6093      	str	r3, [r2, #8]
 8009320:	da08      	bge.n	8009334 <__sfputc_r+0x1e>
 8009322:	6994      	ldr	r4, [r2, #24]
 8009324:	42a3      	cmp	r3, r4
 8009326:	db01      	blt.n	800932c <__sfputc_r+0x16>
 8009328:	290a      	cmp	r1, #10
 800932a:	d103      	bne.n	8009334 <__sfputc_r+0x1e>
 800932c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009330:	f000 b934 	b.w	800959c <__swbuf_r>
 8009334:	6813      	ldr	r3, [r2, #0]
 8009336:	1c58      	adds	r0, r3, #1
 8009338:	6010      	str	r0, [r2, #0]
 800933a:	7019      	strb	r1, [r3, #0]
 800933c:	4608      	mov	r0, r1
 800933e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009342:	4770      	bx	lr

08009344 <__sfputs_r>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	4606      	mov	r6, r0
 8009348:	460f      	mov	r7, r1
 800934a:	4614      	mov	r4, r2
 800934c:	18d5      	adds	r5, r2, r3
 800934e:	42ac      	cmp	r4, r5
 8009350:	d101      	bne.n	8009356 <__sfputs_r+0x12>
 8009352:	2000      	movs	r0, #0
 8009354:	e007      	b.n	8009366 <__sfputs_r+0x22>
 8009356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935a:	463a      	mov	r2, r7
 800935c:	4630      	mov	r0, r6
 800935e:	f7ff ffda 	bl	8009316 <__sfputc_r>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d1f3      	bne.n	800934e <__sfputs_r+0xa>
 8009366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009368 <_vfiprintf_r>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	460d      	mov	r5, r1
 800936e:	b09d      	sub	sp, #116	; 0x74
 8009370:	4614      	mov	r4, r2
 8009372:	4698      	mov	r8, r3
 8009374:	4606      	mov	r6, r0
 8009376:	b118      	cbz	r0, 8009380 <_vfiprintf_r+0x18>
 8009378:	6a03      	ldr	r3, [r0, #32]
 800937a:	b90b      	cbnz	r3, 8009380 <_vfiprintf_r+0x18>
 800937c:	f7fe f97c 	bl	8007678 <__sinit>
 8009380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	d405      	bmi.n	8009392 <_vfiprintf_r+0x2a>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	059a      	lsls	r2, r3, #22
 800938a:	d402      	bmi.n	8009392 <_vfiprintf_r+0x2a>
 800938c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800938e:	f7fe fac7 	bl	8007920 <__retarget_lock_acquire_recursive>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	071b      	lsls	r3, r3, #28
 8009396:	d501      	bpl.n	800939c <_vfiprintf_r+0x34>
 8009398:	692b      	ldr	r3, [r5, #16]
 800939a:	b99b      	cbnz	r3, 80093c4 <_vfiprintf_r+0x5c>
 800939c:	4629      	mov	r1, r5
 800939e:	4630      	mov	r0, r6
 80093a0:	f000 f93a 	bl	8009618 <__swsetup_r>
 80093a4:	b170      	cbz	r0, 80093c4 <_vfiprintf_r+0x5c>
 80093a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a8:	07dc      	lsls	r4, r3, #31
 80093aa:	d504      	bpl.n	80093b6 <_vfiprintf_r+0x4e>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	b01d      	add	sp, #116	; 0x74
 80093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	0598      	lsls	r0, r3, #22
 80093ba:	d4f7      	bmi.n	80093ac <_vfiprintf_r+0x44>
 80093bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093be:	f7fe fab0 	bl	8007922 <__retarget_lock_release_recursive>
 80093c2:	e7f3      	b.n	80093ac <_vfiprintf_r+0x44>
 80093c4:	2300      	movs	r3, #0
 80093c6:	9309      	str	r3, [sp, #36]	; 0x24
 80093c8:	2320      	movs	r3, #32
 80093ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80093d2:	2330      	movs	r3, #48	; 0x30
 80093d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009588 <_vfiprintf_r+0x220>
 80093d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093dc:	f04f 0901 	mov.w	r9, #1
 80093e0:	4623      	mov	r3, r4
 80093e2:	469a      	mov	sl, r3
 80093e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e8:	b10a      	cbz	r2, 80093ee <_vfiprintf_r+0x86>
 80093ea:	2a25      	cmp	r2, #37	; 0x25
 80093ec:	d1f9      	bne.n	80093e2 <_vfiprintf_r+0x7a>
 80093ee:	ebba 0b04 	subs.w	fp, sl, r4
 80093f2:	d00b      	beq.n	800940c <_vfiprintf_r+0xa4>
 80093f4:	465b      	mov	r3, fp
 80093f6:	4622      	mov	r2, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ffa2 	bl	8009344 <__sfputs_r>
 8009400:	3001      	adds	r0, #1
 8009402:	f000 80a9 	beq.w	8009558 <_vfiprintf_r+0x1f0>
 8009406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009408:	445a      	add	r2, fp
 800940a:	9209      	str	r2, [sp, #36]	; 0x24
 800940c:	f89a 3000 	ldrb.w	r3, [sl]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 80a1 	beq.w	8009558 <_vfiprintf_r+0x1f0>
 8009416:	2300      	movs	r3, #0
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009420:	f10a 0a01 	add.w	sl, sl, #1
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800942c:	931a      	str	r3, [sp, #104]	; 0x68
 800942e:	4654      	mov	r4, sl
 8009430:	2205      	movs	r2, #5
 8009432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009436:	4854      	ldr	r0, [pc, #336]	; (8009588 <_vfiprintf_r+0x220>)
 8009438:	f7f6 feea 	bl	8000210 <memchr>
 800943c:	9a04      	ldr	r2, [sp, #16]
 800943e:	b9d8      	cbnz	r0, 8009478 <_vfiprintf_r+0x110>
 8009440:	06d1      	lsls	r1, r2, #27
 8009442:	bf44      	itt	mi
 8009444:	2320      	movmi	r3, #32
 8009446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800944a:	0713      	lsls	r3, r2, #28
 800944c:	bf44      	itt	mi
 800944e:	232b      	movmi	r3, #43	; 0x2b
 8009450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009454:	f89a 3000 	ldrb.w	r3, [sl]
 8009458:	2b2a      	cmp	r3, #42	; 0x2a
 800945a:	d015      	beq.n	8009488 <_vfiprintf_r+0x120>
 800945c:	9a07      	ldr	r2, [sp, #28]
 800945e:	4654      	mov	r4, sl
 8009460:	2000      	movs	r0, #0
 8009462:	f04f 0c0a 	mov.w	ip, #10
 8009466:	4621      	mov	r1, r4
 8009468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800946c:	3b30      	subs	r3, #48	; 0x30
 800946e:	2b09      	cmp	r3, #9
 8009470:	d94d      	bls.n	800950e <_vfiprintf_r+0x1a6>
 8009472:	b1b0      	cbz	r0, 80094a2 <_vfiprintf_r+0x13a>
 8009474:	9207      	str	r2, [sp, #28]
 8009476:	e014      	b.n	80094a2 <_vfiprintf_r+0x13a>
 8009478:	eba0 0308 	sub.w	r3, r0, r8
 800947c:	fa09 f303 	lsl.w	r3, r9, r3
 8009480:	4313      	orrs	r3, r2
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	46a2      	mov	sl, r4
 8009486:	e7d2      	b.n	800942e <_vfiprintf_r+0xc6>
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	1d19      	adds	r1, r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	9103      	str	r1, [sp, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bfbb      	ittet	lt
 8009494:	425b      	neglt	r3, r3
 8009496:	f042 0202 	orrlt.w	r2, r2, #2
 800949a:	9307      	strge	r3, [sp, #28]
 800949c:	9307      	strlt	r3, [sp, #28]
 800949e:	bfb8      	it	lt
 80094a0:	9204      	strlt	r2, [sp, #16]
 80094a2:	7823      	ldrb	r3, [r4, #0]
 80094a4:	2b2e      	cmp	r3, #46	; 0x2e
 80094a6:	d10c      	bne.n	80094c2 <_vfiprintf_r+0x15a>
 80094a8:	7863      	ldrb	r3, [r4, #1]
 80094aa:	2b2a      	cmp	r3, #42	; 0x2a
 80094ac:	d134      	bne.n	8009518 <_vfiprintf_r+0x1b0>
 80094ae:	9b03      	ldr	r3, [sp, #12]
 80094b0:	1d1a      	adds	r2, r3, #4
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	9203      	str	r2, [sp, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	bfb8      	it	lt
 80094ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80094be:	3402      	adds	r4, #2
 80094c0:	9305      	str	r3, [sp, #20]
 80094c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009598 <_vfiprintf_r+0x230>
 80094c6:	7821      	ldrb	r1, [r4, #0]
 80094c8:	2203      	movs	r2, #3
 80094ca:	4650      	mov	r0, sl
 80094cc:	f7f6 fea0 	bl	8000210 <memchr>
 80094d0:	b138      	cbz	r0, 80094e2 <_vfiprintf_r+0x17a>
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	eba0 000a 	sub.w	r0, r0, sl
 80094d8:	2240      	movs	r2, #64	; 0x40
 80094da:	4082      	lsls	r2, r0
 80094dc:	4313      	orrs	r3, r2
 80094de:	3401      	adds	r4, #1
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e6:	4829      	ldr	r0, [pc, #164]	; (800958c <_vfiprintf_r+0x224>)
 80094e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ec:	2206      	movs	r2, #6
 80094ee:	f7f6 fe8f 	bl	8000210 <memchr>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d03f      	beq.n	8009576 <_vfiprintf_r+0x20e>
 80094f6:	4b26      	ldr	r3, [pc, #152]	; (8009590 <_vfiprintf_r+0x228>)
 80094f8:	bb1b      	cbnz	r3, 8009542 <_vfiprintf_r+0x1da>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	3307      	adds	r3, #7
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	3308      	adds	r3, #8
 8009504:	9303      	str	r3, [sp, #12]
 8009506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009508:	443b      	add	r3, r7
 800950a:	9309      	str	r3, [sp, #36]	; 0x24
 800950c:	e768      	b.n	80093e0 <_vfiprintf_r+0x78>
 800950e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009512:	460c      	mov	r4, r1
 8009514:	2001      	movs	r0, #1
 8009516:	e7a6      	b.n	8009466 <_vfiprintf_r+0xfe>
 8009518:	2300      	movs	r3, #0
 800951a:	3401      	adds	r4, #1
 800951c:	9305      	str	r3, [sp, #20]
 800951e:	4619      	mov	r1, r3
 8009520:	f04f 0c0a 	mov.w	ip, #10
 8009524:	4620      	mov	r0, r4
 8009526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952a:	3a30      	subs	r2, #48	; 0x30
 800952c:	2a09      	cmp	r2, #9
 800952e:	d903      	bls.n	8009538 <_vfiprintf_r+0x1d0>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0c6      	beq.n	80094c2 <_vfiprintf_r+0x15a>
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	e7c4      	b.n	80094c2 <_vfiprintf_r+0x15a>
 8009538:	fb0c 2101 	mla	r1, ip, r1, r2
 800953c:	4604      	mov	r4, r0
 800953e:	2301      	movs	r3, #1
 8009540:	e7f0      	b.n	8009524 <_vfiprintf_r+0x1bc>
 8009542:	ab03      	add	r3, sp, #12
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	462a      	mov	r2, r5
 8009548:	4b12      	ldr	r3, [pc, #72]	; (8009594 <_vfiprintf_r+0x22c>)
 800954a:	a904      	add	r1, sp, #16
 800954c:	4630      	mov	r0, r6
 800954e:	f7fd fc53 	bl	8006df8 <_printf_float>
 8009552:	4607      	mov	r7, r0
 8009554:	1c78      	adds	r0, r7, #1
 8009556:	d1d6      	bne.n	8009506 <_vfiprintf_r+0x19e>
 8009558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	d405      	bmi.n	800956a <_vfiprintf_r+0x202>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	059a      	lsls	r2, r3, #22
 8009562:	d402      	bmi.n	800956a <_vfiprintf_r+0x202>
 8009564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009566:	f7fe f9dc 	bl	8007922 <__retarget_lock_release_recursive>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	065b      	lsls	r3, r3, #25
 800956e:	f53f af1d 	bmi.w	80093ac <_vfiprintf_r+0x44>
 8009572:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009574:	e71c      	b.n	80093b0 <_vfiprintf_r+0x48>
 8009576:	ab03      	add	r3, sp, #12
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	462a      	mov	r2, r5
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <_vfiprintf_r+0x22c>)
 800957e:	a904      	add	r1, sp, #16
 8009580:	4630      	mov	r0, r6
 8009582:	f7fd fedd 	bl	8007340 <_printf_i>
 8009586:	e7e4      	b.n	8009552 <_vfiprintf_r+0x1ea>
 8009588:	0800e33c 	.word	0x0800e33c
 800958c:	0800e346 	.word	0x0800e346
 8009590:	08006df9 	.word	0x08006df9
 8009594:	08009345 	.word	0x08009345
 8009598:	0800e342 	.word	0x0800e342

0800959c <__swbuf_r>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	460e      	mov	r6, r1
 80095a0:	4614      	mov	r4, r2
 80095a2:	4605      	mov	r5, r0
 80095a4:	b118      	cbz	r0, 80095ae <__swbuf_r+0x12>
 80095a6:	6a03      	ldr	r3, [r0, #32]
 80095a8:	b90b      	cbnz	r3, 80095ae <__swbuf_r+0x12>
 80095aa:	f7fe f865 	bl	8007678 <__sinit>
 80095ae:	69a3      	ldr	r3, [r4, #24]
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	071a      	lsls	r2, r3, #28
 80095b6:	d525      	bpl.n	8009604 <__swbuf_r+0x68>
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b31b      	cbz	r3, 8009604 <__swbuf_r+0x68>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	6922      	ldr	r2, [r4, #16]
 80095c0:	1a98      	subs	r0, r3, r2
 80095c2:	6963      	ldr	r3, [r4, #20]
 80095c4:	b2f6      	uxtb	r6, r6
 80095c6:	4283      	cmp	r3, r0
 80095c8:	4637      	mov	r7, r6
 80095ca:	dc04      	bgt.n	80095d6 <__swbuf_r+0x3a>
 80095cc:	4621      	mov	r1, r4
 80095ce:	4628      	mov	r0, r5
 80095d0:	f7ff fdd6 	bl	8009180 <_fflush_r>
 80095d4:	b9e0      	cbnz	r0, 8009610 <__swbuf_r+0x74>
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	3b01      	subs	r3, #1
 80095da:	60a3      	str	r3, [r4, #8]
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	701e      	strb	r6, [r3, #0]
 80095e4:	6962      	ldr	r2, [r4, #20]
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d004      	beq.n	80095f6 <__swbuf_r+0x5a>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	07db      	lsls	r3, r3, #31
 80095f0:	d506      	bpl.n	8009600 <__swbuf_r+0x64>
 80095f2:	2e0a      	cmp	r6, #10
 80095f4:	d104      	bne.n	8009600 <__swbuf_r+0x64>
 80095f6:	4621      	mov	r1, r4
 80095f8:	4628      	mov	r0, r5
 80095fa:	f7ff fdc1 	bl	8009180 <_fflush_r>
 80095fe:	b938      	cbnz	r0, 8009610 <__swbuf_r+0x74>
 8009600:	4638      	mov	r0, r7
 8009602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009604:	4621      	mov	r1, r4
 8009606:	4628      	mov	r0, r5
 8009608:	f000 f806 	bl	8009618 <__swsetup_r>
 800960c:	2800      	cmp	r0, #0
 800960e:	d0d5      	beq.n	80095bc <__swbuf_r+0x20>
 8009610:	f04f 37ff 	mov.w	r7, #4294967295
 8009614:	e7f4      	b.n	8009600 <__swbuf_r+0x64>
	...

08009618 <__swsetup_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4b2a      	ldr	r3, [pc, #168]	; (80096c4 <__swsetup_r+0xac>)
 800961c:	4605      	mov	r5, r0
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	460c      	mov	r4, r1
 8009622:	b118      	cbz	r0, 800962c <__swsetup_r+0x14>
 8009624:	6a03      	ldr	r3, [r0, #32]
 8009626:	b90b      	cbnz	r3, 800962c <__swsetup_r+0x14>
 8009628:	f7fe f826 	bl	8007678 <__sinit>
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009632:	0718      	lsls	r0, r3, #28
 8009634:	d422      	bmi.n	800967c <__swsetup_r+0x64>
 8009636:	06d9      	lsls	r1, r3, #27
 8009638:	d407      	bmi.n	800964a <__swsetup_r+0x32>
 800963a:	2309      	movs	r3, #9
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	e034      	b.n	80096b4 <__swsetup_r+0x9c>
 800964a:	0758      	lsls	r0, r3, #29
 800964c:	d512      	bpl.n	8009674 <__swsetup_r+0x5c>
 800964e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009650:	b141      	cbz	r1, 8009664 <__swsetup_r+0x4c>
 8009652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009656:	4299      	cmp	r1, r3
 8009658:	d002      	beq.n	8009660 <__swsetup_r+0x48>
 800965a:	4628      	mov	r0, r5
 800965c:	f7fe ffea 	bl	8008634 <_free_r>
 8009660:	2300      	movs	r3, #0
 8009662:	6363      	str	r3, [r4, #52]	; 0x34
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	2300      	movs	r3, #0
 800966e:	6063      	str	r3, [r4, #4]
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	6023      	str	r3, [r4, #0]
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f043 0308 	orr.w	r3, r3, #8
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	b94b      	cbnz	r3, 8009694 <__swsetup_r+0x7c>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800968a:	d003      	beq.n	8009694 <__swsetup_r+0x7c>
 800968c:	4621      	mov	r1, r4
 800968e:	4628      	mov	r0, r5
 8009690:	f000 f884 	bl	800979c <__smakebuf_r>
 8009694:	89a0      	ldrh	r0, [r4, #12]
 8009696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800969a:	f010 0301 	ands.w	r3, r0, #1
 800969e:	d00a      	beq.n	80096b6 <__swsetup_r+0x9e>
 80096a0:	2300      	movs	r3, #0
 80096a2:	60a3      	str	r3, [r4, #8]
 80096a4:	6963      	ldr	r3, [r4, #20]
 80096a6:	425b      	negs	r3, r3
 80096a8:	61a3      	str	r3, [r4, #24]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	b943      	cbnz	r3, 80096c0 <__swsetup_r+0xa8>
 80096ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096b2:	d1c4      	bne.n	800963e <__swsetup_r+0x26>
 80096b4:	bd38      	pop	{r3, r4, r5, pc}
 80096b6:	0781      	lsls	r1, r0, #30
 80096b8:	bf58      	it	pl
 80096ba:	6963      	ldrpl	r3, [r4, #20]
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	e7f4      	b.n	80096aa <__swsetup_r+0x92>
 80096c0:	2000      	movs	r0, #0
 80096c2:	e7f7      	b.n	80096b4 <__swsetup_r+0x9c>
 80096c4:	2000008c 	.word	0x2000008c

080096c8 <_raise_r>:
 80096c8:	291f      	cmp	r1, #31
 80096ca:	b538      	push	{r3, r4, r5, lr}
 80096cc:	4604      	mov	r4, r0
 80096ce:	460d      	mov	r5, r1
 80096d0:	d904      	bls.n	80096dc <_raise_r+0x14>
 80096d2:	2316      	movs	r3, #22
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	f04f 30ff 	mov.w	r0, #4294967295
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80096de:	b112      	cbz	r2, 80096e6 <_raise_r+0x1e>
 80096e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096e4:	b94b      	cbnz	r3, 80096fa <_raise_r+0x32>
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f830 	bl	800974c <_getpid_r>
 80096ec:	462a      	mov	r2, r5
 80096ee:	4601      	mov	r1, r0
 80096f0:	4620      	mov	r0, r4
 80096f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096f6:	f000 b817 	b.w	8009728 <_kill_r>
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d00a      	beq.n	8009714 <_raise_r+0x4c>
 80096fe:	1c59      	adds	r1, r3, #1
 8009700:	d103      	bne.n	800970a <_raise_r+0x42>
 8009702:	2316      	movs	r3, #22
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	2001      	movs	r0, #1
 8009708:	e7e7      	b.n	80096da <_raise_r+0x12>
 800970a:	2400      	movs	r4, #0
 800970c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009710:	4628      	mov	r0, r5
 8009712:	4798      	blx	r3
 8009714:	2000      	movs	r0, #0
 8009716:	e7e0      	b.n	80096da <_raise_r+0x12>

08009718 <raise>:
 8009718:	4b02      	ldr	r3, [pc, #8]	; (8009724 <raise+0xc>)
 800971a:	4601      	mov	r1, r0
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	f7ff bfd3 	b.w	80096c8 <_raise_r>
 8009722:	bf00      	nop
 8009724:	2000008c 	.word	0x2000008c

08009728 <_kill_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	; (8009748 <_kill_r+0x20>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	4611      	mov	r1, r2
 8009734:	602b      	str	r3, [r5, #0]
 8009736:	f7f8 f9c5 	bl	8001ac4 <_kill>
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	d102      	bne.n	8009744 <_kill_r+0x1c>
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	b103      	cbz	r3, 8009744 <_kill_r+0x1c>
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	bd38      	pop	{r3, r4, r5, pc}
 8009746:	bf00      	nop
 8009748:	20000930 	.word	0x20000930

0800974c <_getpid_r>:
 800974c:	f7f8 b9b2 	b.w	8001ab4 <_getpid>

08009750 <__swhatbuf_r>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	460c      	mov	r4, r1
 8009754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009758:	2900      	cmp	r1, #0
 800975a:	b096      	sub	sp, #88	; 0x58
 800975c:	4615      	mov	r5, r2
 800975e:	461e      	mov	r6, r3
 8009760:	da0d      	bge.n	800977e <__swhatbuf_r+0x2e>
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009768:	f04f 0100 	mov.w	r1, #0
 800976c:	bf0c      	ite	eq
 800976e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009772:	2340      	movne	r3, #64	; 0x40
 8009774:	2000      	movs	r0, #0
 8009776:	6031      	str	r1, [r6, #0]
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	b016      	add	sp, #88	; 0x58
 800977c:	bd70      	pop	{r4, r5, r6, pc}
 800977e:	466a      	mov	r2, sp
 8009780:	f000 f848 	bl	8009814 <_fstat_r>
 8009784:	2800      	cmp	r0, #0
 8009786:	dbec      	blt.n	8009762 <__swhatbuf_r+0x12>
 8009788:	9901      	ldr	r1, [sp, #4]
 800978a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800978e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009792:	4259      	negs	r1, r3
 8009794:	4159      	adcs	r1, r3
 8009796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979a:	e7eb      	b.n	8009774 <__swhatbuf_r+0x24>

0800979c <__smakebuf_r>:
 800979c:	898b      	ldrh	r3, [r1, #12]
 800979e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097a0:	079d      	lsls	r5, r3, #30
 80097a2:	4606      	mov	r6, r0
 80097a4:	460c      	mov	r4, r1
 80097a6:	d507      	bpl.n	80097b8 <__smakebuf_r+0x1c>
 80097a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	6123      	str	r3, [r4, #16]
 80097b0:	2301      	movs	r3, #1
 80097b2:	6163      	str	r3, [r4, #20]
 80097b4:	b002      	add	sp, #8
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	ab01      	add	r3, sp, #4
 80097ba:	466a      	mov	r2, sp
 80097bc:	f7ff ffc8 	bl	8009750 <__swhatbuf_r>
 80097c0:	9900      	ldr	r1, [sp, #0]
 80097c2:	4605      	mov	r5, r0
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7fd f9eb 	bl	8006ba0 <_malloc_r>
 80097ca:	b948      	cbnz	r0, 80097e0 <__smakebuf_r+0x44>
 80097cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d0:	059a      	lsls	r2, r3, #22
 80097d2:	d4ef      	bmi.n	80097b4 <__smakebuf_r+0x18>
 80097d4:	f023 0303 	bic.w	r3, r3, #3
 80097d8:	f043 0302 	orr.w	r3, r3, #2
 80097dc:	81a3      	strh	r3, [r4, #12]
 80097de:	e7e3      	b.n	80097a8 <__smakebuf_r+0xc>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	6020      	str	r0, [r4, #0]
 80097e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	9b00      	ldr	r3, [sp, #0]
 80097ec:	6163      	str	r3, [r4, #20]
 80097ee:	9b01      	ldr	r3, [sp, #4]
 80097f0:	6120      	str	r0, [r4, #16]
 80097f2:	b15b      	cbz	r3, 800980c <__smakebuf_r+0x70>
 80097f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097f8:	4630      	mov	r0, r6
 80097fa:	f000 f81d 	bl	8009838 <_isatty_r>
 80097fe:	b128      	cbz	r0, 800980c <__smakebuf_r+0x70>
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	f023 0303 	bic.w	r3, r3, #3
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	431d      	orrs	r5, r3
 8009810:	81a5      	strh	r5, [r4, #12]
 8009812:	e7cf      	b.n	80097b4 <__smakebuf_r+0x18>

08009814 <_fstat_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d07      	ldr	r5, [pc, #28]	; (8009834 <_fstat_r+0x20>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	4611      	mov	r1, r2
 8009820:	602b      	str	r3, [r5, #0]
 8009822:	f7f8 f9ae 	bl	8001b82 <_fstat>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	d102      	bne.n	8009830 <_fstat_r+0x1c>
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	b103      	cbz	r3, 8009830 <_fstat_r+0x1c>
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	bd38      	pop	{r3, r4, r5, pc}
 8009832:	bf00      	nop
 8009834:	20000930 	.word	0x20000930

08009838 <_isatty_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d06      	ldr	r5, [pc, #24]	; (8009854 <_isatty_r+0x1c>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f8 f9ad 	bl	8001ba2 <_isatty>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_isatty_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_isatty_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20000930 	.word	0x20000930

08009858 <_init>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr

08009864 <_fini>:
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009866:	bf00      	nop
 8009868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986a:	bc08      	pop	{r3}
 800986c:	469e      	mov	lr, r3
 800986e:	4770      	bx	lr
