
Kazan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022cc  0800be10  0800be10  0001be10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0dc  0800e0dc  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0dc  0800e0dc  0001e0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0e4  0800e0e4  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0800e0e4  0800e0e4  0001e0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0fc  0800e0fc  0001e0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  20000208  0800e308  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  0800e308  00020958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028a0c  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006bce  00000000  00000000  00048c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  0004f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a0  00000000  00000000  00050ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ad53  00000000  00000000  00052090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000215e1  00000000  00000000  0007cde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3de8  00000000  00000000  0009e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c34  00000000  00000000  001821ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00188de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bdf8 	.word	0x0800bdf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800bdf8 	.word	0x0800bdf8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0d8      	sub	sp, #352	; 0x160
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fdcf 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f827 	bl	8000f40 <_Z18SystemClock_Configv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */


  MX_GPIO_Init();
 8000ef2:	f000 fa03 	bl	80012fc <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000ef6:	f000 f8a5 	bl	8001044 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000efa:	f000 f8eb 	bl	80010d4 <_ZL12MX_ADC2_Initv>
  MX_I2C2_Init();
 8000efe:	f000 f931 	bl	8001164 <_ZL12MX_I2C2_Initv>
  MX_UART4_Init();
 8000f02:	f000 f99f 	bl	8001244 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8000f06:	f000 f961 	bl	80011cc <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000f0a:	f000 f9c9 	bl	80012a0 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Application application;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fbcf 	bl	80046b4 <_ZN11ApplicationC1Ev>
  application.run();
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fc27 	bl	800476c <_ZN11Application3runEv>
//	  ///Motor Test
//	  HAL_UART_Transmit(&huart1_motor, (uint8_t *)s, strlen(s), 1000);

//	  char s[] =
//	  HAL_UART_Transmit(&huart1_motor,motorData , 2, 1000);
	  uint8_t motorData[] = {2,27};
 8000f1e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000f22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000f26:	f641 3202 	movw	r2, #6914	; 0x1b02
 8000f2a:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1_motor,motorData , 2, 1000);
 8000f2c:	4639      	mov	r1, r7
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	2202      	movs	r2, #2
 8000f34:	4801      	ldr	r0, [pc, #4]	; (8000f3c <main+0x58>)
 8000f36:	f002 ffe7 	bl	8003f08 <HAL_UART_Transmit>
  }
 8000f3a:	e7f0      	b.n	8000f1e <main+0x3a>
 8000f3c:	200003a4 	.word	0x200003a4

08000f40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2234      	movs	r2, #52	; 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 fe73 	bl	8009c3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <_Z18SystemClock_Configv+0xfc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a33      	ldr	r2, [pc, #204]	; (800103c <_Z18SystemClock_Configv+0xfc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <_Z18SystemClock_Configv+0xfc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <_Z18SystemClock_Configv+0x100>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a2d      	ldr	r2, [pc, #180]	; (8001040 <_Z18SystemClock_Configv+0x100>)
 8000f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <_Z18SystemClock_Configv+0x100>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fb4:	23b4      	movs	r3, #180	; 0xb4
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fc21 	bl	8003810 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf14      	ite	ne
 8000fd4:	2301      	movne	r3, #1
 8000fd6:	2300      	moveq	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000fde:	f000 fa21 	bl	8001424 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe2:	f002 f901 	bl	80031e8 <HAL_PWREx_EnableOverDrive>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf14      	ite	ne
 8000fec:	2301      	movne	r3, #1
 8000fee:	2300      	moveq	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000ff6:	f000 fa15 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2302      	movs	r3, #2
 8001000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001006:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	2105      	movs	r1, #5
 8001018:	4618      	mov	r0, r3
 800101a:	f002 f935 	bl	8003288 <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800102e:	f000 f9f9 	bl	8001424 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3750      	adds	r7, #80	; 0x50
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <_ZL12MX_ADC1_Initv+0x88>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 8001066:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800106a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 800106e:	2201      	movs	r2, #1
 8001070:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 8001074:	2200      	movs	r2, #0
 8001076:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 8001088:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <_ZL12MX_ADC1_Initv+0x8c>)
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 8001094:	2201      	movs	r2, #1
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <_ZL12MX_ADC1_Initv+0x84>)
 80010a8:	f000 fd86 	bl	8001bb8 <HAL_ADC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	2300      	moveq	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <_ZL12MX_ADC1_Initv+0x7c>
  {
    Error_Handler();
 80010bc:	f000 f9b2 	bl	8001424 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000224 	.word	0x20000224
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <_ZL12MX_ADC2_Initv+0x88>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 80010ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001102:	2200      	movs	r2, #0
 8001104:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_ZL12MX_ADC2_Initv+0x8c>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001130:	2201      	movs	r2, #1
 8001132:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <_ZL12MX_ADC2_Initv+0x84>)
 8001136:	f000 fd3f 	bl	8001bb8 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 800114a:	f000 f96b 	bl	8001424 <Error_Handler>
  }

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000026c 	.word	0x2000026c
 800115c:	40012100 	.word	0x40012100
 8001160:	0f000001 	.word	0x0f000001

08001164 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <_ZL12MX_I2C2_Initv+0x60>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001170:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <_ZL12MX_I2C2_Initv+0x64>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001186:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <_ZL12MX_I2C2_Initv+0x5c>)
 80011a2:	f001 fbc5 	bl	8002930 <HAL_I2C_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80011b6:	f000 f935 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002b4 	.word	0x200002b4
 80011c4:	40005800 	.word	0x40005800
 80011c8:	000186a0 	.word	0x000186a0

080011cc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <_ZL12MX_SPI1_Initv+0x74>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 80011d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 8001218:	220a      	movs	r2, #10
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <_ZL12MX_SPI1_Initv+0x70>)
 800121e:	f002 fd95 	bl	8003d4c <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001232:	f000 f8f7 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000308 	.word	0x20000308
 8001240:	40013000 	.word	0x40013000

08001244 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4_data.Instance = UART4;
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <_ZL13MX_UART4_Initv+0x58>)
 800124c:	601a      	str	r2, [r3, #0]
  huart4_data.Init.BaudRate = 115200;
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart4_data.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart4_data.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart4_data.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart4_data.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart4_data.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart4_data.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4_data) != HAL_OK)
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <_ZL13MX_UART4_Initv+0x54>)
 800127c:	f002 fdef 	bl	8003e5e <HAL_HalfDuplex_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8001290:	f000 f8c8 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000360 	.word	0x20000360
 800129c:	40004c00 	.word	0x40004c00

080012a0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1_motor.Instance = USART1;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_ZL19MX_USART1_UART_Initv+0x58>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart1_motor.Init.BaudRate = 115200;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart1_motor.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart1_motor.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart1_motor.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart1_motor.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart1_motor.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart1_motor.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1_motor) != HAL_OK)
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012d8:	f002 fdc1 	bl	8003e5e <HAL_HalfDuplex_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80012ec:	f000 f89a 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200003a4 	.word	0x200003a4
 80012f8:	40011000 	.word	0x40011000

080012fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a37      	ldr	r2, [pc, #220]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <_ZL12MX_GPIO_Initv+0x118>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CEVA_LED_GPIO_Port, CEVA_LED_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2104      	movs	r1, #4
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <_ZL12MX_GPIO_Initv+0x11c>)
 8001388:	f001 fab8 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : START_MODULE_Pin */
  GPIO_InitStruct.Pin = START_MODULE_Pin;
 800138c:	2302      	movs	r3, #2
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_MODULE_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	481e      	ldr	r0, [pc, #120]	; (8001418 <_ZL12MX_GPIO_Initv+0x11c>)
 80013a0:	f001 f900 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEVA_LED_Pin */
  GPIO_InitStruct.Pin = CEVA_LED_Pin;
 80013a4:	2304      	movs	r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CEVA_LED_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <_ZL12MX_GPIO_Initv+0x11c>)
 80013bc:	f001 f8f2 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENEMY_SENSOR_0_Pin ENEMY_SENSOR_5_Pin ENEMY_SENSOR_6_Pin ENEMY_SENSOR_7_Pin
                           ENEMY_SENSOR_1_Pin ENEMY_SENSOR_2_Pin ENEMY_SENSOR_3_Pin ENEMY_SENSOR_4_Pin */
  GPIO_InitStruct.Pin = ENEMY_SENSOR_0_Pin|ENEMY_SENSOR_5_Pin|ENEMY_SENSOR_6_Pin|ENEMY_SENSOR_7_Pin
 80013c0:	f24e 33c4 	movw	r3, #58308	; 0xe3c4
 80013c4:	617b      	str	r3, [r7, #20]
                          |ENEMY_SENSOR_1_Pin|ENEMY_SENSOR_2_Pin|ENEMY_SENSOR_3_Pin|ENEMY_SENSOR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <_ZL12MX_GPIO_Initv+0x120>)
 80013d6:	f001 f8e5 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B0_UP_Pin */
  GPIO_InitStruct.Pin = B0_UP_Pin;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B0_UP_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	480a      	ldr	r0, [pc, #40]	; (8001418 <_ZL12MX_GPIO_Initv+0x11c>)
 80013ee:	f001 f8d9 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_DOWN_Pin B1_SELECT_Pin */
  GPIO_InitStruct.Pin = B2_DOWN_Pin|B1_SELECT_Pin;
 80013f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <_ZL12MX_GPIO_Initv+0x124>)
 8001408:	f001 f8cc 	bl	80025a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40020800 	.word	0x40020800
 800141c:	40020400 	.word	0x40020400
 8001420:	40020000 	.word	0x40020000

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_MspInit+0x4c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x4c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <HAL_ADC_MspInit+0x140>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d128      	bne.n	80014f4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a46      	ldr	r2, [pc, #280]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a3f      	ldr	r2, [pc, #252]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = LINE_SENSOR_2_1_Pin|LINE_SENSOR_2_2_Pin|LINE_SENSOR_2_3_Pin|LINE_SENSOR_3_1_Pin
 80014da:	23ee      	movs	r3, #238	; 0xee
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LINE_SENSOR_3_2_Pin|LINE_SENSOR_3_3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4836      	ldr	r0, [pc, #216]	; (80015c8 <HAL_ADC_MspInit+0x148>)
 80014ee:	f001 f859 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014f2:	e060      	b.n	80015b6 <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a34      	ldr	r2, [pc, #208]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d15b      	bne.n	80015b6 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_ADC_MspInit+0x144>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRIMPOT_0_Pin;
 800156e:	2301      	movs	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRIMPOT_0_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4813      	ldr	r0, [pc, #76]	; (80015d0 <HAL_ADC_MspInit+0x150>)
 8001582:	f001 f80f 	bl	80025a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TRIMPOT_1_Pin;
 8001586:	2310      	movs	r3, #16
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158a:	2303      	movs	r3, #3
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRIMPOT_1_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	480b      	ldr	r0, [pc, #44]	; (80015c8 <HAL_ADC_MspInit+0x148>)
 800159a:	f001 f803 	bl	80025a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LINE_SENSOR_0_Pin|LINE_SENSOR_1_Pin;
 800159e:	2303      	movs	r3, #3
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 80015b2:	f000 fff7 	bl	80025a4 <HAL_GPIO_Init>
}
 80015b6:	bf00      	nop
 80015b8:	3738      	adds	r7, #56	; 0x38
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40012000 	.word	0x40012000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40012100 	.word	0x40012100
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020400 	.word	0x40020400

080015d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_I2C_MspInit+0xc4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d14b      	bne.n	8001692 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001638:	2312      	movs	r3, #18
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001644:	2304      	movs	r3, #4
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4815      	ldr	r0, [pc, #84]	; (80016a4 <HAL_I2C_MspInit+0xcc>)
 8001650:	f000 ffa8 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001666:	2304      	movs	r3, #4
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_I2C_MspInit+0xd0>)
 8001672:	f000 ff97 	bl	80025a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005800 	.word	0x40005800
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800

080016ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_SPI_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001706:	2338      	movs	r3, #56	; 0x38
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001716:	2305      	movs	r3, #5
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 8001722:	f000 ff3f 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40013000 	.word	0x40013000
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400

0800173c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a32      	ldr	r2, [pc, #200]	; (8001824 <HAL_UART_MspInit+0xe8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12c      	bne.n	80017b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_UART_MspInit+0xec>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a30      	ldr	r2, [pc, #192]	; (8001828 <HAL_UART_MspInit+0xec>)
 8001768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_UART_MspInit+0xec>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_UART_MspInit+0xec>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_UART_MspInit+0xec>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_UART_MspInit+0xec>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART4_TX_DATA_Pin;
 8001796:	2301      	movs	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017a6:	2308      	movs	r3, #8
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART4_TX_DATA_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	481e      	ldr	r0, [pc, #120]	; (800182c <HAL_UART_MspInit+0xf0>)
 80017b2:	f000 fef7 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017b6:	e031      	b.n	800181c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <HAL_UART_MspInit+0xf4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12c      	bne.n	800181c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_UART_MspInit+0xec>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_UART_MspInit+0xec>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_UART_MspInit+0xec>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_UART_MspInit+0xec>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_UART_MspInit+0xec>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_UART_MspInit+0xec>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_SABERTOOTH_Pin;
 80017fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001800:	2312      	movs	r3, #18
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800180c:	2307      	movs	r3, #7
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_SABERTOOTH_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_UART_MspInit+0xf0>)
 8001818:	f000 fec4 	bl	80025a4 <HAL_GPIO_Init>
}
 800181c:	bf00      	nop
 800181e:	3730      	adds	r7, #48	; 0x30
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40004c00 	.word	0x40004c00
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000
 8001830:	40011000 	.word	0x40011000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f956 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a2:	f008 fa1d 	bl	8009ce0 <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ca:	e7fe      	b.n	80018ca <_exit+0x12>

080018cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
  }

  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e009      	b.n	800192c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf1      	blt.n	8001918 <_write+0x12>
  }
  return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_close>:

int _close(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001966:	605a      	str	r2, [r3, #4]
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f008 f982 	bl	8009ce0 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20020000 	.word	0x20020000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	200003e8 	.word	0x200003e8
 8001a10:	20000958 	.word	0x20000958

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a3e:	490e      	ldr	r1, [pc, #56]	; (8001a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a54:	4c0b      	ldr	r4, [pc, #44]	; (8001a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a62:	f7ff ffd7 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f008 f941 	bl	8009cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6a:	f7ff fa3b 	bl	8000ee4 <main>
  bx  lr    
 8001a6e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001a7c:	0800e100 	.word	0x0800e100
  ldr r2, =_sbss
 8001a80:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001a84:	20000958 	.word	0x20000958

08001a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <HAL_Init+0x40>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_Init+0x40>)
 8001aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_Init+0x40>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 fd41 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aba:	200f      	movs	r0, #15
 8001abc:	f000 f808 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac0:	f7ff fcb6 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x54>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x58>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fd4b 	bl	800258a <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 fd21 	bl	8002552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_InitTick+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008
 8001b54:	200003ec 	.word	0x200003ec

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200003ec 	.word	0x200003ec

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff ffee 	bl	8001b58 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffde 	bl	8001b58 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e033      	b.n	8001c36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fc52 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d118      	bne.n	8001c28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bfe:	f023 0302 	bic.w	r3, r3, #2
 8001c02:	f043 0202 	orr.w	r2, r3, #2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fae8 	bl	80021e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
 8001c26:	e001      	b.n	8001c2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Start+0x1a>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e0b2      	b.n	8001dc0 <HAL_ADC_Start+0x180>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d018      	beq.n	8001ca2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_ADC_Start+0x18c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_ADC_Start+0x190>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9a      	lsrs	r2, r3, #18
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d17a      	bne.n	8001da6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f023 0206 	bic.w	r2, r3, #6
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_ADC_Start+0x194>)
 8001d0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d18:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12a      	bne.n	8001d7c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <HAL_ADC_Start+0x198>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d015      	beq.n	8001d5c <HAL_ADC_Start+0x11c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_ADC_Start+0x19c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_Start+0x106>
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_ADC_Start+0x194>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_ADC_Start+0x1a0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d136      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_ADC_Start+0x194>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d130      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d129      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	e020      	b.n	8001dbe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_ADC_Start+0x198>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d11b      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d114      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e00b      	b.n	8001dbe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	40012300 	.word	0x40012300
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	40012100 	.word	0x40012100
 8001de0:	40012200 	.word	0x40012200

08001de4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Stop+0x16>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e021      	b.n	8001e3e <HAL_ADC_Stop+0x5a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d113      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d10b      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e063      	b.n	8001f58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e90:	f7ff fe62 	bl	8001b58 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e96:	e021      	b.n	8001edc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9e:	d01d      	beq.n	8001edc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_ADC_PollForConversion+0x6c>
 8001ea6:	f7ff fe57 	bl	8001b58 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d212      	bcs.n	8001edc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d00b      	beq.n	8001edc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03d      	b.n	8001f58 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d1d6      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f06f 0212 	mvn.w	r2, #18
 8001ef2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d123      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11f      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d111      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e113      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x244>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d925      	bls.n	8001ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1e      	subs	r3, #30
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4403      	add	r3, r0
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	e022      	b.n	800203a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	2207      	movs	r2, #7
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	4603      	mov	r3, r0
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4403      	add	r3, r0
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d824      	bhi.n	800208c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b05      	subs	r3, #5
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b05      	subs	r3, #5
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
 800208a:	e04c      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d824      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	3b23      	subs	r3, #35	; 0x23
 80020a6:	221f      	movs	r2, #31
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b23      	subs	r3, #35	; 0x23
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
 80020dc:	e023      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b41      	subs	r3, #65	; 0x41
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b41      	subs	r3, #65	; 0x41
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_ADC_ConfigChannel+0x250>)
 8002128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a28      	ldr	r2, [pc, #160]	; (80021d0 <HAL_ADC_ConfigChannel+0x254>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d10f      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d8>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d10b      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_ADC_ConfigChannel+0x254>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12b      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_ADC_ConfigChannel+0x258>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x1f4>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b11      	cmp	r3, #17
 800216e:	d122      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <HAL_ADC_ConfigChannel+0x258>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d111      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_ADC_ConfigChannel+0x260>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0c9a      	lsrs	r2, r3, #18
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40012300 	.word	0x40012300
 80021d0:	40012000 	.word	0x40012000
 80021d4:	10000012 	.word	0x10000012
 80021d8:	20000000 	.word	0x20000000
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e8:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <ADC_Init+0x1f0>)
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	021a      	lsls	r2, r3, #8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <ADC_Init+0x1f4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	e00f      	b.n	80022de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0202 	bic.w	r2, r2, #2
 80022ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e1b      	ldrb	r3, [r3, #24]
 80022f8:	005a      	lsls	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800232a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	3b01      	subs	r3, #1
 8002338:	035a      	lsls	r2, r3, #13
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e007      	b.n	8002354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	3b01      	subs	r3, #1
 8002370:	051a      	lsls	r2, r3, #20
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002396:	025a      	lsls	r2, r3, #9
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	029a      	lsls	r2, r3, #10
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40012300 	.word	0x40012300
 80023d4:	0f000001 	.word	0x0f000001

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	; (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff8e 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff47 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff5c 	bl	8002420 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff8e 	bl	8002490 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5d 	bl	800243c <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffb0 	bl	80024f8 <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e165      	b.n	800288c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8154 	bne.w	8002886 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d130      	bne.n	8002658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0201 	and.w	r2, r3, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b03      	cmp	r3, #3
 8002662:	d017      	beq.n	8002694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d123      	bne.n	80026e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80ae 	beq.w	8002886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_GPIO_Init+0x300>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_GPIO_Init+0x300>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_GPIO_Init+0x300>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_GPIO_Init+0x304>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4f      	ldr	r2, [pc, #316]	; (80028ac <HAL_GPIO_Init+0x308>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x21a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4e      	ldr	r2, [pc, #312]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x216>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <HAL_GPIO_Init+0x310>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x212>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_GPIO_Init+0x314>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_GPIO_Init+0x318>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x20a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_GPIO_Init+0x31c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x206>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a49      	ldr	r2, [pc, #292]	; (80028c4 <HAL_GPIO_Init+0x320>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x202>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027be:	2300      	movs	r3, #0
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	4935      	ldr	r1, [pc, #212]	; (80028a8 <HAL_GPIO_Init+0x304>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_GPIO_Init+0x324>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a26      	ldr	r2, [pc, #152]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	f67f ae96 	bls.w	80025c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40021400 	.word	0x40021400
 80028c4:	40021800 	.word	0x40021800
 80028c8:	40013c00 	.word	0x40013c00

080028cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e001      	b.n	80028ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e12b      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fe3e 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002994:	f000 fd6a 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d807      	bhi.n	80029b4 <HAL_I2C_Init+0x84>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_I2C_Init+0x278>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e006      	b.n	80029c2 <HAL_I2C_Init+0x92>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a7d      	ldr	r2, [pc, #500]	; (8002bac <HAL_I2C_Init+0x27c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e7      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_I2C_Init+0x280>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d802      	bhi.n	8002a04 <HAL_I2C_Init+0xd4>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	e009      	b.n	8002a18 <HAL_I2C_Init+0xe8>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_I2C_Init+0x284>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	495c      	ldr	r1, [pc, #368]	; (8002ba4 <HAL_I2C_Init+0x274>)
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d819      	bhi.n	8002a6c <HAL_I2C_Init+0x13c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e59      	subs	r1, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_I2C_Init+0x138>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e59      	subs	r1, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	e051      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e04f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_I2C_Init+0x168>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e012      	b.n	8002abe <HAL_I2C_Init+0x18e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x196>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e022      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_I2C_Init+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e58      	subs	r0, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aea:	e00f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6809      	ldr	r1, [r1, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6911      	ldr	r1, [r2, #16]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	000186a0 	.word	0x000186a0
 8002ba8:	001e847f 	.word	0x001e847f
 8002bac:	003d08ff 	.word	0x003d08ff
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	10624dd3 	.word	0x10624dd3

08002bb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	813b      	strh	r3, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd2:	f7fe ffc1 	bl	8001b58 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	f040 80d9 	bne.w	8002d98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2319      	movs	r3, #25
 8002bec:	2201      	movs	r2, #1
 8002bee:	496d      	ldr	r1, [pc, #436]	; (8002da4 <HAL_I2C_Mem_Write+0x1ec>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f971 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0cc      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Mem_Write+0x56>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0c5      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d007      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a4d      	ldr	r2, [pc, #308]	; (8002da8 <HAL_I2C_Mem_Write+0x1f0>)
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c76:	88f8      	ldrh	r0, [r7, #6]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4603      	mov	r3, r0
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f890 	bl	8002dac <I2C_RequestMemoryWrite>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d052      	beq.n	8002d38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e081      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f9f2 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d107      	bne.n	8002cbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11b      	bne.n	8002d38 <HAL_I2C_Mem_Write+0x180>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1aa      	bne.n	8002c96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f9de 	bl	8003106 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d107      	bne.n	8002d68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e016      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	00100002 	.word	0x00100002
 8002da8:	ffff0000 	.word	0xffff0000

08002dac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f878 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d103      	bne.n	8002e06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e05f      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	492d      	ldr	r1, [pc, #180]	; (8002ed4 <I2C_RequestMemoryWrite+0x128>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f8b0 	bl	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e04c      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f91a 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d107      	bne.n	8002e6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e02b      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	e021      	b.n	8002ec8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f8f4 	bl	8003084 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d107      	bne.n	8002eba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e005      	b.n	8002eca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ebe:	893b      	ldrh	r3, [r7, #8]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	00010002 	.word	0x00010002

08002ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee8:	e025      	b.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d021      	beq.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fe31 	bl	8001b58 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d116      	bne.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e023      	b.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d10d      	bne.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	e00c      	b.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d0b6      	beq.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f94:	e051      	b.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa4:	d123      	bne.n	8002fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f043 0204 	orr.w	r2, r3, #4
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e046      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d021      	beq.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe fdaf 	bl	8001b58 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e020      	b.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10c      	bne.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	e00b      	b.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	43da      	mvns	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d18d      	bne.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003090:	e02d      	b.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f878 	bl	8003188 <I2C_IsAcknowledgeFailed>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e02d      	b.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d021      	beq.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe fd55 	bl	8001b58 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e007      	b.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d1ca      	bne.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003112:	e02d      	b.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f837 	bl	8003188 <I2C_IsAcknowledgeFailed>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e02d      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d021      	beq.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fe fd14 	bl	8001b58 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e007      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b04      	cmp	r3, #4
 800317c:	d1ca      	bne.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d11b      	bne.n	80031d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_PWREx_EnableOverDrive+0x90>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_PWREx_EnableOverDrive+0x90>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_PWREx_EnableOverDrive+0x90>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800320e:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_PWREx_EnableOverDrive+0x94>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003214:	f7fe fca0 	bl	8001b58 <HAL_GetTick>
 8003218:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800321a:	e009      	b.n	8003230 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800321c:	f7fe fc9c 	bl	8001b58 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800322a:	d901      	bls.n	8003230 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e01f      	b.n	8003270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_PWREx_EnableOverDrive+0x98>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d1ee      	bne.n	800321c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003244:	f7fe fc88 	bl	8001b58 <HAL_GetTick>
 8003248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800324a:	e009      	b.n	8003260 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800324c:	f7fe fc84 	bl	8001b58 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800325a:	d901      	bls.n	8003260 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e007      	b.n	8003270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_PWREx_EnableOverDrive+0x98>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800326c:	d1ee      	bne.n	800324c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	420e0040 	.word	0x420e0040
 8003280:	40007000 	.word	0x40007000
 8003284:	420e0044 	.word	0x420e0044

08003288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0cc      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d90c      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	494d      	ldr	r1, [pc, #308]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d044      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d119      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e067      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4934      	ldr	r1, [pc, #208]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003378:	f7fe fbee 	bl	8001b58 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7fe fbea 	bl	8001b58 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 020c 	and.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1eb      	bne.n	8003380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20c      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f855 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fb4e 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023c00 	.word	0x40023c00
 8003444:	40023800 	.word	0x40023800
 8003448:	0800c298 	.word	0x0800c298
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_GetHCLKFreq+0x14>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000000 	.word	0x20000000

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003470:	f7ff fff0 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0a9b      	lsrs	r3, r3, #10
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	0800c2a8 	.word	0x0800c2a8

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003498:	f7ff ffdc 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0b5b      	lsrs	r3, r3, #13
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	0800c2a8 	.word	0x0800c2a8

080034bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b0a6      	sub	sp, #152	; 0x98
 80034c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e2:	4bc8      	ldr	r3, [pc, #800]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	f200 817e 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x330>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	080037ed 	.word	0x080037ed
 8003500:	080037ed 	.word	0x080037ed
 8003504:	080037ed 	.word	0x080037ed
 8003508:	08003535 	.word	0x08003535
 800350c:	080037ed 	.word	0x080037ed
 8003510:	080037ed 	.word	0x080037ed
 8003514:	080037ed 	.word	0x080037ed
 8003518:	0800353d 	.word	0x0800353d
 800351c:	080037ed 	.word	0x080037ed
 8003520:	080037ed 	.word	0x080037ed
 8003524:	080037ed 	.word	0x080037ed
 8003528:	080036a7 	.word	0x080036a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4bb6      	ldr	r3, [pc, #728]	; (8003808 <HAL_RCC_GetSysClockFreq+0x34c>)
 800352e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003532:	e15f      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003534:	4bb5      	ldr	r3, [pc, #724]	; (800380c <HAL_RCC_GetSysClockFreq+0x350>)
 8003536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800353a:	e15b      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353c:	4bb1      	ldr	r3, [pc, #708]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003548:	4bae      	ldr	r3, [pc, #696]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d031      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003554:	4bab      	ldr	r3, [pc, #684]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	2200      	movs	r2, #0
 800355c:	66bb      	str	r3, [r7, #104]	; 0x68
 800355e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003566:	663b      	str	r3, [r7, #96]	; 0x60
 8003568:	2300      	movs	r3, #0
 800356a:	667b      	str	r3, [r7, #100]	; 0x64
 800356c:	4ba7      	ldr	r3, [pc, #668]	; (800380c <HAL_RCC_GetSysClockFreq+0x350>)
 800356e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003572:	462a      	mov	r2, r5
 8003574:	fb03 f202 	mul.w	r2, r3, r2
 8003578:	2300      	movs	r3, #0
 800357a:	4621      	mov	r1, r4
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	4aa2      	ldr	r2, [pc, #648]	; (800380c <HAL_RCC_GetSysClockFreq+0x350>)
 8003584:	4621      	mov	r1, r4
 8003586:	fba1 1202 	umull	r1, r2, r1, r2
 800358a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800358c:	460a      	mov	r2, r1
 800358e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003590:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003592:	4413      	add	r3, r2
 8003594:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359a:	2200      	movs	r2, #0
 800359c:	65bb      	str	r3, [r7, #88]	; 0x58
 800359e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80035a8:	f7fd fb1e 	bl	8000be8 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035b6:	e064      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b8:	4b92      	ldr	r3, [pc, #584]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	2200      	movs	r2, #0
 80035c0:	653b      	str	r3, [r7, #80]	; 0x50
 80035c2:	657a      	str	r2, [r7, #84]	; 0x54
 80035c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80035cc:	2300      	movs	r3, #0
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80035d4:	4622      	mov	r2, r4
 80035d6:	462b      	mov	r3, r5
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	0159      	lsls	r1, r3, #5
 80035e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e6:	0150      	lsls	r0, r2, #5
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4621      	mov	r1, r4
 80035ee:	1a51      	subs	r1, r2, r1
 80035f0:	6139      	str	r1, [r7, #16]
 80035f2:	4629      	mov	r1, r5
 80035f4:	eb63 0301 	sbc.w	r3, r3, r1
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003606:	4659      	mov	r1, fp
 8003608:	018b      	lsls	r3, r1, #6
 800360a:	4651      	mov	r1, sl
 800360c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003610:	4651      	mov	r1, sl
 8003612:	018a      	lsls	r2, r1, #6
 8003614:	4651      	mov	r1, sl
 8003616:	ebb2 0801 	subs.w	r8, r2, r1
 800361a:	4659      	mov	r1, fp
 800361c:	eb63 0901 	sbc.w	r9, r3, r1
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800362c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003630:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003634:	4690      	mov	r8, r2
 8003636:	4699      	mov	r9, r3
 8003638:	4623      	mov	r3, r4
 800363a:	eb18 0303 	adds.w	r3, r8, r3
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	462b      	mov	r3, r5
 8003642:	eb49 0303 	adc.w	r3, r9, r3
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003654:	4629      	mov	r1, r5
 8003656:	028b      	lsls	r3, r1, #10
 8003658:	4621      	mov	r1, r4
 800365a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800365e:	4621      	mov	r1, r4
 8003660:	028a      	lsls	r2, r1, #10
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800366a:	2200      	movs	r2, #0
 800366c:	643b      	str	r3, [r7, #64]	; 0x40
 800366e:	647a      	str	r2, [r7, #68]	; 0x44
 8003670:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003674:	f7fd fab8 	bl	8000be8 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003682:	4b60      	ldr	r3, [pc, #384]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	3301      	adds	r3, #1
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003694:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036a4:	e0a6      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b2:	4b54      	ldr	r3, [pc, #336]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02a      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b51      	ldr	r3, [pc, #324]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d0:	2100      	movs	r1, #0
 80036d2:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCC_GetSysClockFreq+0x350>)
 80036d4:	fb03 f201 	mul.w	r2, r3, r1
 80036d8:	2300      	movs	r3, #0
 80036da:	fb00 f303 	mul.w	r3, r0, r3
 80036de:	4413      	add	r3, r2
 80036e0:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_RCC_GetSysClockFreq+0x350>)
 80036e2:	fba0 1202 	umull	r1, r2, r0, r2
 80036e6:	677a      	str	r2, [r7, #116]	; 0x74
 80036e8:	460a      	mov	r2, r1
 80036ea:	673a      	str	r2, [r7, #112]	; 0x70
 80036ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036ee:	4413      	add	r3, r2
 80036f0:	677b      	str	r3, [r7, #116]	; 0x74
 80036f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036f6:	2200      	movs	r2, #0
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
 80036fa:	637a      	str	r2, [r7, #52]	; 0x34
 80036fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003700:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003704:	f7fd fa70 	bl	8000be8 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003712:	e05b      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	2200      	movs	r2, #0
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
 800371e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
 800372c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	0159      	lsls	r1, r3, #5
 800373e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003742:	0150      	lsls	r0, r2, #5
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4641      	mov	r1, r8
 800374a:	ebb2 0a01 	subs.w	sl, r2, r1
 800374e:	4649      	mov	r1, r9
 8003750:	eb63 0b01 	sbc.w	fp, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003768:	ebb2 040a 	subs.w	r4, r2, sl
 800376c:	eb63 050b 	sbc.w	r5, r3, fp
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	00eb      	lsls	r3, r5, #3
 800377a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377e:	00e2      	lsls	r2, r4, #3
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4643      	mov	r3, r8
 8003786:	18e3      	adds	r3, r4, r3
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	464b      	mov	r3, r9
 800378c:	eb45 0303 	adc.w	r3, r5, r3
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b4:	2200      	movs	r2, #0
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	61fa      	str	r2, [r7, #28]
 80037ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037be:	f7fd fa13 	bl	8000be8 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4613      	mov	r3, r2
 80037c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037cc:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <HAL_RCC_GetSysClockFreq+0x348>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0f1b      	lsrs	r3, r3, #28
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80037da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80037ea:	e003      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetSysClockFreq+0x34c>)
 80037ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80037f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3798      	adds	r7, #152	; 0x98
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	017d7840 	.word	0x017d7840

08003810 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e28d      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8083 	beq.w	8003936 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003830:	4b94      	ldr	r3, [pc, #592]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b04      	cmp	r3, #4
 800383a:	d019      	beq.n	8003870 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800383c:	4b91      	ldr	r3, [pc, #580]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003844:	2b08      	cmp	r3, #8
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003848:	4b8e      	ldr	r3, [pc, #568]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003854:	d00c      	beq.n	8003870 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b8b      	ldr	r3, [pc, #556]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d112      	bne.n	8003888 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003862:	4b88      	ldr	r3, [pc, #544]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386e:	d10b      	bne.n	8003888 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	4b84      	ldr	r3, [pc, #528]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d05b      	beq.n	8003934 <HAL_RCC_OscConfig+0x124>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d157      	bne.n	8003934 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e25a      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003890:	d106      	bne.n	80038a0 <HAL_RCC_OscConfig+0x90>
 8003892:	4b7c      	ldr	r3, [pc, #496]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7b      	ldr	r2, [pc, #492]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xcc>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0xb4>
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a75      	ldr	r2, [pc, #468]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a72      	ldr	r2, [pc, #456]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xcc>
 80038c4:	4b6f      	ldr	r3, [pc, #444]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6e      	ldr	r2, [pc, #440]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6b      	ldr	r2, [pc, #428]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe f938 	bl	8001b58 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fe f934 	bl	8001b58 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e21f      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xdc>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe f924 	bl	8001b58 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe f920 	bl	8001b58 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e20b      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b57      	ldr	r3, [pc, #348]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x104>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d06f      	beq.n	8003a22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003942:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d017      	beq.n	800397e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800394e:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003956:	2b08      	cmp	r3, #8
 8003958:	d105      	bne.n	8003966 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800395a:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003972:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_RCC_OscConfig+0x186>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e1d3      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	e03a      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b4:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCC_OscConfig+0x278>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fe f8cd 	bl	8001b58 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fe f8c9 	bl	8001b58 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1b4      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4925      	ldr	r1, [pc, #148]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCC_OscConfig+0x278>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe f8ac 	bl	8001b58 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fe f8a8 	bl	8001b58 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e193      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d036      	beq.n	8003a9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <HAL_RCC_OscConfig+0x27c>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe f88c 	bl	8001b58 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fe f888 	bl	8001b58 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e173      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x234>
 8003a62:	e01b      	b.n	8003a9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_OscConfig+0x27c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fe f875 	bl	8001b58 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	e00e      	b.n	8003a90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fe f871 	bl	8001b58 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d907      	bls.n	8003a90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e15c      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	42470000 	.word	0x42470000
 8003a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ea      	bne.n	8003a72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8097 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b83      	ldr	r3, [pc, #524]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b7f      	ldr	r3, [pc, #508]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a7e      	ldr	r2, [pc, #504]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aca:	4b7c      	ldr	r3, [pc, #496]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <HAL_RCC_OscConfig+0x4b0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCC_OscConfig+0x4b0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a75      	ldr	r2, [pc, #468]	; (8003cc0 <HAL_RCC_OscConfig+0x4b0>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe f831 	bl	8001b58 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe f82d 	bl	8001b58 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e118      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	; (8003cc0 <HAL_RCC_OscConfig+0x4b0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x31e>
 8003b20:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	4a65      	ldr	r2, [pc, #404]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2c:	e01c      	b.n	8003b68 <HAL_RCC_OscConfig+0x358>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x340>
 8003b36:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a60      	ldr	r2, [pc, #384]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
 8003b42:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a5d      	ldr	r2, [pc, #372]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0x358>
 8003b50:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a59      	ldr	r2, [pc, #356]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5c:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	4a56      	ldr	r2, [pc, #344]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd fff2 	bl	8001b58 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd ffee 	bl	8001b58 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0d7      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	4b4b      	ldr	r3, [pc, #300]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <HAL_RCC_OscConfig+0x368>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fd ffdc 	bl	8001b58 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fd ffd8 	bl	8001b58 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0c1      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bba:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80ad 	beq.w	8003d3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d060      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d145      	bne.n	8003c82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <HAL_RCC_OscConfig+0x4b4>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd ffac 	bl	8001b58 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fd ffa8 	bl	8001b58 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e093      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	491b      	ldr	r1, [pc, #108]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCC_OscConfig+0x4b4>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd ff7d 	bl	8001b58 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fd ff79 	bl	8001b58 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e064      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x452>
 8003c80:	e05c      	b.n	8003d3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_RCC_OscConfig+0x4b4>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd ff66 	bl	8001b58 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd ff62 	bl	8001b58 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04d      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_OscConfig+0x4ac>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x480>
 8003cae:	e045      	b.n	8003d3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e040      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <HAL_RCC_OscConfig+0x538>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d030      	beq.n	8003d38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d129      	bne.n	8003d38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d122      	bne.n	8003d38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d119      	bne.n	8003d38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	3b01      	subs	r3, #1
 8003d12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d10f      	bne.n	8003d38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800

08003d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07b      	b.n	8003e56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d108      	bne.n	8003d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6e:	d009      	beq.n	8003d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	61da      	str	r2, [r3, #28]
 8003d76:	e005      	b.n	8003d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fc84 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	ea42 0103 	orr.w	r1, r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	f003 0104 	and.w	r1, r3, #4
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0210 	and.w	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e047      	b.n	8003f00 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fd fc59 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2224      	movs	r2, #36	; 0x24
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f930 	bl	8004108 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003ec6:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0208 	orr.w	r2, r2, #8
 8003ed6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d17c      	bne.n	8004022 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_UART_Transmit+0x2c>
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e075      	b.n	8004024 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Transmit+0x3e>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e06e      	b.n	8004024 <HAL_UART_Transmit+0x11c>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2221      	movs	r2, #33	; 0x21
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f5c:	f7fd fdfc 	bl	8001b58 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	d108      	bne.n	8003f8a <HAL_UART_Transmit+0x82>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	e003      	b.n	8003f92 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f9a:	e02a      	b.n	8003ff2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f840 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e036      	b.n	8004024 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	3302      	adds	r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e007      	b.n	8003fe4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1cf      	bne.n	8003f9c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2200      	movs	r2, #0
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f810 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e006      	b.n	8004024 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3720      	adds	r7, #32
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b090      	sub	sp, #64	; 0x40
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403c:	e050      	b.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d04c      	beq.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x30>
 800404c:	f7fd fd84 	bl	8001b58 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004058:	429a      	cmp	r2, r3
 800405a:	d241      	bcs.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800407c:	637a      	str	r2, [r7, #52]	; 0x34
 800407e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	613b      	str	r3, [r7, #16]
   return(result);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040b0:	623a      	str	r2, [r7, #32]
 80040b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	69f9      	ldr	r1, [r7, #28]
 80040b6:	6a3a      	ldr	r2, [r7, #32]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e5      	bne.n	8004090 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e00f      	b.n	8004100 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d09f      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3740      	adds	r7, #64	; 0x40
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b0c0      	sub	sp, #256	; 0x100
 800410e:	af00      	add	r7, sp, #0
 8004110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	68d9      	ldr	r1, [r3, #12]
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	ea40 0301 	orr.w	r3, r0, r1
 8004130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	431a      	orrs	r2, r3
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	431a      	orrs	r2, r3
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004160:	f021 010c 	bic.w	r1, r1, #12
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800416e:	430b      	orrs	r3, r1
 8004170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	6999      	ldr	r1, [r3, #24]
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	ea40 0301 	orr.w	r3, r0, r1
 800418e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b8f      	ldr	r3, [pc, #572]	; (80043d4 <UART_SetConfig+0x2cc>)
 8004198:	429a      	cmp	r2, r3
 800419a:	d005      	beq.n	80041a8 <UART_SetConfig+0xa0>
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <UART_SetConfig+0x2d0>)
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d104      	bne.n	80041b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041a8:	f7ff f974 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 80041ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041b0:	e003      	b.n	80041ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041b2:	f7ff f95b 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 80041b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c4:	f040 810c 	bne.w	80043e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041da:	4622      	mov	r2, r4
 80041dc:	462b      	mov	r3, r5
 80041de:	1891      	adds	r1, r2, r2
 80041e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041e2:	415b      	adcs	r3, r3
 80041e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041ea:	4621      	mov	r1, r4
 80041ec:	eb12 0801 	adds.w	r8, r2, r1
 80041f0:	4629      	mov	r1, r5
 80041f2:	eb43 0901 	adc.w	r9, r3, r1
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800420a:	4690      	mov	r8, r2
 800420c:	4699      	mov	r9, r3
 800420e:	4623      	mov	r3, r4
 8004210:	eb18 0303 	adds.w	r3, r8, r3
 8004214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004218:	462b      	mov	r3, r5
 800421a:	eb49 0303 	adc.w	r3, r9, r3
 800421e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800422e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004236:	460b      	mov	r3, r1
 8004238:	18db      	adds	r3, r3, r3
 800423a:	653b      	str	r3, [r7, #80]	; 0x50
 800423c:	4613      	mov	r3, r2
 800423e:	eb42 0303 	adc.w	r3, r2, r3
 8004242:	657b      	str	r3, [r7, #84]	; 0x54
 8004244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800424c:	f7fc fccc 	bl	8000be8 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4b61      	ldr	r3, [pc, #388]	; (80043dc <UART_SetConfig+0x2d4>)
 8004256:	fba3 2302 	umull	r2, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	011c      	lsls	r4, r3, #4
 800425e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800426c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004270:	4642      	mov	r2, r8
 8004272:	464b      	mov	r3, r9
 8004274:	1891      	adds	r1, r2, r2
 8004276:	64b9      	str	r1, [r7, #72]	; 0x48
 8004278:	415b      	adcs	r3, r3
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004280:	4641      	mov	r1, r8
 8004282:	eb12 0a01 	adds.w	sl, r2, r1
 8004286:	4649      	mov	r1, r9
 8004288:	eb43 0b01 	adc.w	fp, r3, r1
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800429c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a0:	4692      	mov	sl, r2
 80042a2:	469b      	mov	fp, r3
 80042a4:	4643      	mov	r3, r8
 80042a6:	eb1a 0303 	adds.w	r3, sl, r3
 80042aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ae:	464b      	mov	r3, r9
 80042b0:	eb4b 0303 	adc.w	r3, fp, r3
 80042b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042cc:	460b      	mov	r3, r1
 80042ce:	18db      	adds	r3, r3, r3
 80042d0:	643b      	str	r3, [r7, #64]	; 0x40
 80042d2:	4613      	mov	r3, r2
 80042d4:	eb42 0303 	adc.w	r3, r2, r3
 80042d8:	647b      	str	r3, [r7, #68]	; 0x44
 80042da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042e2:	f7fc fc81 	bl	8000be8 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4611      	mov	r1, r2
 80042ec:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <UART_SetConfig+0x2d4>)
 80042ee:	fba3 2301 	umull	r2, r3, r3, r1
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	2264      	movs	r2, #100	; 0x64
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	1acb      	subs	r3, r1, r3
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <UART_SetConfig+0x2d4>)
 8004304:	fba3 2302 	umull	r2, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004310:	441c      	add	r4, r3
 8004312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800431c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	63b9      	str	r1, [r7, #56]	; 0x38
 800432c:	415b      	adcs	r3, r3
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004334:	4641      	mov	r1, r8
 8004336:	1851      	adds	r1, r2, r1
 8004338:	6339      	str	r1, [r7, #48]	; 0x30
 800433a:	4649      	mov	r1, r9
 800433c:	414b      	adcs	r3, r1
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800434c:	4659      	mov	r1, fp
 800434e:	00cb      	lsls	r3, r1, #3
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004356:	4651      	mov	r1, sl
 8004358:	00ca      	lsls	r2, r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4603      	mov	r3, r0
 8004360:	4642      	mov	r2, r8
 8004362:	189b      	adds	r3, r3, r2
 8004364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004368:	464b      	mov	r3, r9
 800436a:	460a      	mov	r2, r1
 800436c:	eb42 0303 	adc.w	r3, r2, r3
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004388:	460b      	mov	r3, r1
 800438a:	18db      	adds	r3, r3, r3
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
 800438e:	4613      	mov	r3, r2
 8004390:	eb42 0303 	adc.w	r3, r2, r3
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800439a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800439e:	f7fc fc23 	bl	8000be8 <__aeabi_uldivmod>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <UART_SetConfig+0x2d4>)
 80043a8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	2164      	movs	r1, #100	; 0x64
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	3332      	adds	r3, #50	; 0x32
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <UART_SetConfig+0x2d4>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	f003 0207 	and.w	r2, r3, #7
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4422      	add	r2, r4
 80043ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043d0:	e106      	b.n	80045e0 <UART_SetConfig+0x4d8>
 80043d2:	bf00      	nop
 80043d4:	40011000 	.word	0x40011000
 80043d8:	40011400 	.word	0x40011400
 80043dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043f2:	4642      	mov	r2, r8
 80043f4:	464b      	mov	r3, r9
 80043f6:	1891      	adds	r1, r2, r2
 80043f8:	6239      	str	r1, [r7, #32]
 80043fa:	415b      	adcs	r3, r3
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004402:	4641      	mov	r1, r8
 8004404:	1854      	adds	r4, r2, r1
 8004406:	4649      	mov	r1, r9
 8004408:	eb43 0501 	adc.w	r5, r3, r1
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	00eb      	lsls	r3, r5, #3
 8004416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441a:	00e2      	lsls	r2, r4, #3
 800441c:	4614      	mov	r4, r2
 800441e:	461d      	mov	r5, r3
 8004420:	4643      	mov	r3, r8
 8004422:	18e3      	adds	r3, r4, r3
 8004424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004428:	464b      	mov	r3, r9
 800442a:	eb45 0303 	adc.w	r3, r5, r3
 800442e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800443e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800444e:	4629      	mov	r1, r5
 8004450:	008b      	lsls	r3, r1, #2
 8004452:	4621      	mov	r1, r4
 8004454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004458:	4621      	mov	r1, r4
 800445a:	008a      	lsls	r2, r1, #2
 800445c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004460:	f7fc fbc2 	bl	8000be8 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4b60      	ldr	r3, [pc, #384]	; (80045ec <UART_SetConfig+0x4e4>)
 800446a:	fba3 2302 	umull	r2, r3, r3, r2
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	011c      	lsls	r4, r3, #4
 8004472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800447c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	1891      	adds	r1, r2, r2
 800448a:	61b9      	str	r1, [r7, #24]
 800448c:	415b      	adcs	r3, r3
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004494:	4641      	mov	r1, r8
 8004496:	1851      	adds	r1, r2, r1
 8004498:	6139      	str	r1, [r7, #16]
 800449a:	4649      	mov	r1, r9
 800449c:	414b      	adcs	r3, r1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044ac:	4659      	mov	r1, fp
 80044ae:	00cb      	lsls	r3, r1, #3
 80044b0:	4651      	mov	r1, sl
 80044b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b6:	4651      	mov	r1, sl
 80044b8:	00ca      	lsls	r2, r1, #3
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	4642      	mov	r2, r8
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044c8:	464b      	mov	r3, r9
 80044ca:	460a      	mov	r2, r1
 80044cc:	eb42 0303 	adc.w	r3, r2, r3
 80044d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044ec:	4649      	mov	r1, r9
 80044ee:	008b      	lsls	r3, r1, #2
 80044f0:	4641      	mov	r1, r8
 80044f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f6:	4641      	mov	r1, r8
 80044f8:	008a      	lsls	r2, r1, #2
 80044fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044fe:	f7fc fb73 	bl	8000be8 <__aeabi_uldivmod>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4611      	mov	r1, r2
 8004508:	4b38      	ldr	r3, [pc, #224]	; (80045ec <UART_SetConfig+0x4e4>)
 800450a:	fba3 2301 	umull	r2, r3, r3, r1
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2264      	movs	r2, #100	; 0x64
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	1acb      	subs	r3, r1, r3
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	3332      	adds	r3, #50	; 0x32
 800451c:	4a33      	ldr	r2, [pc, #204]	; (80045ec <UART_SetConfig+0x4e4>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004528:	441c      	add	r4, r3
 800452a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800452e:	2200      	movs	r2, #0
 8004530:	673b      	str	r3, [r7, #112]	; 0x70
 8004532:	677a      	str	r2, [r7, #116]	; 0x74
 8004534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	1891      	adds	r1, r2, r2
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	415b      	adcs	r3, r3
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004548:	4641      	mov	r1, r8
 800454a:	1851      	adds	r1, r2, r1
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	4649      	mov	r1, r9
 8004550:	414b      	adcs	r3, r1
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004560:	4659      	mov	r1, fp
 8004562:	00cb      	lsls	r3, r1, #3
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456a:	4651      	mov	r1, sl
 800456c:	00ca      	lsls	r2, r1, #3
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	4603      	mov	r3, r0
 8004574:	4642      	mov	r2, r8
 8004576:	189b      	adds	r3, r3, r2
 8004578:	66bb      	str	r3, [r7, #104]	; 0x68
 800457a:	464b      	mov	r3, r9
 800457c:	460a      	mov	r2, r1
 800457e:	eb42 0303 	adc.w	r3, r2, r3
 8004582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	663b      	str	r3, [r7, #96]	; 0x60
 800458e:	667a      	str	r2, [r7, #100]	; 0x64
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800459c:	4649      	mov	r1, r9
 800459e:	008b      	lsls	r3, r1, #2
 80045a0:	4641      	mov	r1, r8
 80045a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a6:	4641      	mov	r1, r8
 80045a8:	008a      	lsls	r2, r1, #2
 80045aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045ae:	f7fc fb1b 	bl	8000be8 <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <UART_SetConfig+0x4e4>)
 80045b8:	fba3 1302 	umull	r1, r3, r3, r2
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	2164      	movs	r1, #100	; 0x64
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	3332      	adds	r3, #50	; 0x32
 80045ca:	4a08      	ldr	r2, [pc, #32]	; (80045ec <UART_SetConfig+0x4e4>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4422      	add	r2, r4
 80045de:	609a      	str	r2, [r3, #8]
}
 80045e0:	bf00      	nop
 80045e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045e6:	46bd      	mov	sp, r7
 80045e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ec:	51eb851f 	.word	0x51eb851f

080045f0 <_ZN15HardwareTestAppC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>:

Motor_Test_Screen_Type operator--(Motor_Test_Screen_Type& screen, int);

class HardwareTestApp {
	public:
	HardwareTestApp(UserInputs& userInputs,
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
					StateControl& sensorsHub,
					Motor& motor,
					Communication_Driver& comm)
	        : userInputs(userInputs),
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	601a      	str	r2, [r3, #0]
			  sensorsHub(sensorsHub),
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	605a      	str	r2, [r3, #4]
			  motor(motor),
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	609a      	str	r2, [r3, #8]
	          communication(comm),
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	60da      	str	r2, [r3, #12]
			  screen(TRIMPOTS_TEST){}
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	741a      	strb	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <_ZN20InitializeParametersC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>:

Time_Set_Screen_Type operator--(Time_Set_Screen_Type& screen, int);

class InitializeParameters {
public:
	InitializeParameters(UserInputs& userInputs,
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
					StateControl& sensorsHub,
					Motor& motor,
					Communication_Driver& comm)
	        : userInputs(userInputs),
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	601a      	str	r2, [r3, #0]
			  sensorsHub(sensorsHub),
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	605a      	str	r2, [r3, #4]
			  motor(motor),
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	609a      	str	r2, [r3, #8]
	          communication(comm),
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	60da      	str	r2, [r3, #12]
			  strategist(sensorsHub, motor, comm),
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f103 0010 	add.w	r0, r3, #16
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	f002 f8ac 	bl	80067b8 <_ZN10StrategistC1ER12StateControlR5MotorR20Communication_Driver>
			  screen(SET_POWER_SCREEN){}
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_ZN16StrategySelectorC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>:
Strategy_Selector_Screen_Type operator--(Strategy_Selector_Screen_Type& screen, int);


class StrategySelector {
public:
	StrategySelector(UserInputs& userInputs,
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	603b      	str	r3, [r7, #0]
					StateControl& sensorsHub,
					Motor& motor,
					Communication_Driver& comm)
	        : userInputs(userInputs),
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	601a      	str	r2, [r3, #0]
			  sensorsHub(sensorsHub),
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	605a      	str	r2, [r3, #4]
			  motor(motor),
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	609a      	str	r2, [r3, #8]
	          communication(comm),
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	60da      	str	r2, [r3, #12]
			  strategist(sensorsHub, motor, comm){}
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f103 0010 	add.w	r0, r3, #16
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	f002 f888 	bl	80067b8 <_ZN10StrategistC1ER12StateControlR5MotorR20Communication_Driver>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <_ZN11ApplicationC1Ev>:
#include "hardware_test.h"
#include "initialize_parameters.h"
#include "strategy_selector.h"


Application::Application()
 80046b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b6:	b0a9      	sub	sp, #164	; 0xa4
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    : userInputs(UserInputsConfig{
 80046bc:	687e      	ldr	r6, [r7, #4]
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <_ZN11ApplicationC1Ev+0xa8>)
 80046c0:	f107 0408 	add.w	r4, r7, #8
 80046c4:	461d      	mov	r5, r3
 80046c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80046d6:	f107 0308 	add.w	r3, r7, #8
 80046da:	4619      	mov	r1, r3
 80046dc:	4630      	mov	r0, r6
 80046de:	f002 ff2b 	bl	8007538 <_ZN10UserInputsC1ERK16UserInputsConfig>
          { B2_DOWN_GPIO_Port, B2_DOWN_Pin },  // backButton
          { B0_UP_GPIO_Port, B0_UP_Pin },  // nextButton
          { &hadc2, TRIMPOT_0_CHANNEL },  // trimpot0
          { &hadc2, TRIMPOT_1_CHANNEL }   // trimpot1
      }),
      stateControl(SensorsHubConfig{
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80046e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046ec:	2264      	movs	r2, #100	; 0x64
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f005 faa2 	bl	8009c3a <memset>
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <_ZN11ApplicationC1Ev+0xac>)
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30
 80046fa:	2301      	movs	r3, #1
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
 80046fe:	2302      	movs	r3, #2
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38
 8004702:	2303      	movs	r3, #3
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004706:	2305      	movs	r3, #5
 8004708:	643b      	str	r3, [r7, #64]	; 0x40
 800470a:	2306      	movs	r3, #6
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
 800470e:	2307      	movs	r3, #7
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
 8004712:	2308      	movs	r3, #8
 8004714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004716:	2309      	movs	r3, #9
 8004718:	653b      	str	r3, [r7, #80]	; 0x50
 800471a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800471e:	4619      	mov	r1, r3
 8004720:	4620      	mov	r0, r4
 8004722:	f001 ff18 	bl	8006556 <_ZN12StateControlC1ERK16SensorsHubConfig>
                  LINE_SENSOR_BR_CHANNEL
              },
          },
          /// Initialize other sensor configs here...
      }),
	  motor(SABERTOOTH_UART),
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	33c8      	adds	r3, #200	; 0xc8
 800472a:	490e      	ldr	r1, [pc, #56]	; (8004764 <_ZN11ApplicationC1Ev+0xb0>)
 800472c:	4618      	mov	r0, r3
 800472e:	f004 fb23 	bl	8008d78 <_ZN5MotorC1EP13USART_TypeDef>
      communication(CommunicationDriverConfig{
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f503 7488 	add.w	r4, r3, #272	; 0x110
 8004738:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <_ZN11ApplicationC1Ev+0xb4>)
 800473a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800473e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004744:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004748:	4619      	mov	r1, r3
 800474a:	4620      	mov	r0, r4
 800474c:	f003 fdb4 	bl	80082b8 <_ZN20Communication_DriverC1ERK25CommunicationDriverConfig>
		START_MODULE_Pin,
	  })  // communication driver

{

}
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4618      	mov	r0, r3
 8004754:	37a4      	adds	r7, #164	; 0xa4
 8004756:	46bd      	mov	sp, r7
 8004758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475a:	bf00      	nop
 800475c:	0800be10 	.word	0x0800be10
 8004760:	20000224 	.word	0x20000224
 8004764:	40011000 	.word	0x40011000
 8004768:	0800be38 	.word	0x0800be38

0800476c <_ZN11Application3runEv>:

void Application::run()
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b0c3      	sub	sp, #268	; 0x10c
 8004770:	af02      	add	r7, sp, #8
 8004772:	6078      	str	r0, [r7, #4]


	userInputs.configAll();
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4618      	mov	r0, r3
 8004778:	f002 ff18 	bl	80075ac <_ZN10UserInputs9configAllEv>
	stateControl.configAll();
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3360      	adds	r3, #96	; 0x60
 8004780:	4618      	mov	r0, r3
 8004782:	f001 ff06 	bl	8006592 <_ZN12StateControl9configAllEv>
	communication.config();
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800478c:	4618      	mov	r0, r3
 800478e:	f003 fdc1 	bl	8008314 <_ZN20Communication_Driver6configEv>
	motor.init();
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	33c8      	adds	r3, #200	; 0xc8
 8004796:	4618      	mov	r0, r3
 8004798:	f004 fb05 	bl	8008da6 <_ZN5Motor4initEv>
	Display_Init();
 800479c:	f001 f9bd 	bl	8005b1a <_Z12Display_Initv>
	Application_Screen screen = Hardware_Test;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	while(1)
	{
		userInputs.readAll();
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f002 ff1f 	bl	80075ec <_ZN10UserInputs7readAllEv>

		///user input management
		if(userInputs.isBackRequest()){
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f002 ff88 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <_ZN11Application3runEv+0x5c>
			screen--;
 80047bc:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f8b3 	bl	800492e <_ZmmR18Application_Screeni>
		}
		if(userInputs.isNextRequest()){
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f002 ff93 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <_ZN11Application3runEv+0x76>
			screen++;
 80047d6:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f889 	bl	80048f4 <_ZppR18Application_Screeni>
		}

		///Screen
		switch(screen){
 80047e2:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d872      	bhi.n	80048d0 <_ZN11Application3runEv+0x164>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <_ZN11Application3runEv+0x84>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004811 	.word	0x08004811
 80047f8:	08004851 	.word	0x08004851
 80047fc:	08004891 	.word	0x08004891
			case Information_Screen:
				Display_Title_Screen((char *)"Last Information");
 8004800:	4838      	ldr	r0, [pc, #224]	; (80048e4 <_ZN11Application3runEv+0x178>)
 8004802:	f001 fa9b 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
				if(userInputs.isSelectRequest()){
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4618      	mov	r0, r3
 800480a:	f002 ff8c 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>

				}
				break;
 800480e:	e067      	b.n	80048e0 <_ZN11Application3runEv+0x174>

			case Hardware_Test:
				Display_Title_Screen((char *)"Hardware Test");
 8004810:	4835      	ldr	r0, [pc, #212]	; (80048e8 <_ZN11Application3runEv+0x17c>)
 8004812:	f001 fa93 	bl	8005d3c <_Z20Display_Title_ScreenPKc>

				if(userInputs.isSelectRequest())
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4618      	mov	r0, r3
 800481a:	f002 ff84 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d058      	beq.n	80048d6 <_ZN11Application3runEv+0x16a>
				{
					HardwareTestApp hardwareTestApp = HardwareTestApp(userInputs,stateControl,motor, communication);
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004838:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4623      	mov	r3, r4
 8004840:	f7ff fed6 	bl	80045f0 <_ZN15HardwareTestAppC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>
					hardwareTestApp.run();
 8004844:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004848:	4618      	mov	r0, r3
 800484a:	f000 f8c7 	bl	80049dc <_ZN15HardwareTestApp3runEv>

				}
				break;
 800484e:	e042      	b.n	80048d6 <_ZN11Application3runEv+0x16a>
			case Initialize_Parameters_Screen:
				Display_Title_Screen((char *)"Initialize Parameters");
 8004850:	4826      	ldr	r0, [pc, #152]	; (80048ec <_ZN11Application3runEv+0x180>)
 8004852:	f001 fa73 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
				if(userInputs.isSelectRequest()){
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	f002 ff64 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d03a      	beq.n	80048da <_ZN11Application3runEv+0x16e>
					InitializeParameters initializeParameters = InitializeParameters(userInputs,stateControl,motor, communication);
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004878:	f107 0008 	add.w	r0, r7, #8
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	4623      	mov	r3, r4
 8004880:	f7ff fed3 	bl	800462a <_ZN20InitializeParametersC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>
					initializeParameters.run();
 8004884:	f107 0308 	add.w	r3, r7, #8
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fcb5 	bl	80051f8 <_ZN20InitializeParameters3runEv>
				}
				break;
 800488e:	e024      	b.n	80048da <_ZN11Application3runEv+0x16e>
			case Battle_Application:
				Display_Title_Screen((char *)"Battle");
 8004890:	4817      	ldr	r0, [pc, #92]	; (80048f0 <_ZN11Application3runEv+0x184>)
 8004892:	f001 fa53 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
				if(userInputs.isSelectRequest()){
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4618      	mov	r0, r3
 800489a:	f002 ff44 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01c      	beq.n	80048de <_ZN11Application3runEv+0x172>
					StrategySelector strategySelectorApp = StrategySelector(userInputs,stateControl,motor, communication);
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80048b8:	f107 0008 	add.w	r0, r7, #8
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4623      	mov	r3, r4
 80048c0:	f7ff fed7 	bl	8004672 <_ZN16StrategySelectorC1ER10UserInputsR12StateControlR5MotorR20Communication_Driver>
					strategySelectorApp.run();
 80048c4:	f107 0308 	add.w	r3, r7, #8
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 ffc3 	bl	8005854 <_ZN16StrategySelector3runEv>
				}
				break;
 80048ce:	e006      	b.n	80048de <_ZN11Application3runEv+0x172>
			default:
				Display_Error();
 80048d0:	f001 fd48 	bl	8006364 <_Z13Display_Errorv>
				break;
 80048d4:	e004      	b.n	80048e0 <_ZN11Application3runEv+0x174>
				break;
 80048d6:	bf00      	nop
 80048d8:	e765      	b.n	80047a6 <_ZN11Application3runEv+0x3a>
				break;
 80048da:	bf00      	nop
 80048dc:	e763      	b.n	80047a6 <_ZN11Application3runEv+0x3a>
				break;
 80048de:	bf00      	nop
		}

	}
 80048e0:	e761      	b.n	80047a6 <_ZN11Application3runEv+0x3a>
 80048e2:	bf00      	nop
 80048e4:	0800be44 	.word	0x0800be44
 80048e8:	0800be58 	.word	0x0800be58
 80048ec:	0800be68 	.word	0x0800be68
 80048f0:	0800be80 	.word	0x0800be80

080048f4 <_ZppR18Application_Screeni>:
}

inline Application_Screen operator++(Application_Screen& screen, int) {
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
    Application_Screen current = screen;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	73fb      	strb	r3, [r7, #15]

    if (screen == Battle_Application) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d103      	bne.n	8004914 <_ZppR18Application_Screeni+0x20>
        screen = Information_Screen;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e005      	b.n	8004920 <_ZppR18Application_Screeni+0x2c>
    } else {
        screen = static_cast<Application_Screen>(static_cast<int>(screen) + 1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <_ZmmR18Application_Screeni>:

inline Application_Screen operator--(Application_Screen& screen, int) {
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
    Application_Screen original = screen;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	73fb      	strb	r3, [r7, #15]
    if (screen == Information_Screen) {
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <_ZmmR18Application_Screeni+0x20>
        screen = Battle_Application;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2203      	movs	r2, #3
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e005      	b.n	800495a <_ZmmR18Application_Screeni+0x2c>
    } else {
        screen = static_cast<Application_Screen>(static_cast<int>(screen) - 1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	b2da      	uxtb	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	701a      	strb	r2, [r3, #0]
    }
    return original;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <_Z18Timer_Get_Now_Timev>:

inline void Timer_Reset_Time(){
	startTime = HAL_GetTick();
}

inline uint32_t Timer_Get_Now_Time(){
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
	return HAL_GetTick() - startTime;
 800496c:	f7fd f8f4 	bl	8001b58 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	4b02      	ldr	r3, [pc, #8]	; (800497c <_Z18Timer_Get_Now_Timev+0x14>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1ad3      	subs	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	200003f0 	.word	0x200003f0

08004980 <_Z15Timer_Set_Clockm>:

inline uint32_t Timer_Set_Clock(uint32_t time) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	return Timer_Get_Now_Time() + time;
 8004988:	f7ff ffee 	bl	8004968 <_Z18Timer_Get_Now_Timev>
 800498c:	4602      	mov	r2, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4413      	add	r3, r2
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_Z21Timer_Get_Remain_Timem>:

inline int64_t Timer_Get_Remain_Time(uint32_t clock) {
 800499a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	int64_t time = clock;
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	2000      	movs	r0, #0
 80049a8:	460a      	mov	r2, r1
 80049aa:	4603      	mov	r3, r0
 80049ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	time = time - Timer_Get_Now_Time();
 80049b0:	f7ff ffda 	bl	8004968 <_Z18Timer_Get_Now_Timev>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2200      	movs	r2, #0
 80049b8:	461c      	mov	r4, r3
 80049ba:	4615      	mov	r5, r2
 80049bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c0:	ebb2 0804 	subs.w	r8, r2, r4
 80049c4:	eb63 0905 	sbc.w	r9, r3, r5
 80049c8:	e9c7 8902 	strd	r8, r9, [r7, #8]
	return time;
 80049cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080049dc <_ZN15HardwareTestApp3runEv>:

#include "display.h"
#include "timer.h"

void HardwareTestApp::run()
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	ed2d 8b02 	vpush	{d8}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		userInputs.readAll();
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f002 fdfd 	bl	80075ec <_ZN10UserInputs7readAllEv>

		///user input management
		if(userInputs.isReturnBackRequest()){
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f002 fe50 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d176      	bne.n	8004af0 <_ZN15HardwareTestApp3runEv+0x114>
			return;
		}
		if(userInputs.isBackRequest()){
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f002 fe5d 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <_ZN15HardwareTestApp3runEv+0x42>
			screen--;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3310      	adds	r3, #16
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 faf0 	bl	8004ffe <_ZmmR25Hardware_Test_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 fe67 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <_ZN15HardwareTestApp3runEv+0x5e>
			screen++;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3310      	adds	r3, #16
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fac5 	bl	8004fc4 <_ZppR25Hardware_Test_Screen_Typei>
		}

		/// UI Displayinh
		switch(screen){
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	7c1b      	ldrb	r3, [r3, #16]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d84d      	bhi.n	8004ade <_ZN15HardwareTestApp3runEv+0x102>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <_ZN15HardwareTestApp3runEv+0x6c>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a85 	.word	0x08004a85
 8004a50:	08004aa3 	.word	0x08004aa3
 8004a54:	08004ac1 	.word	0x08004ac1
			case TRIMPOTS_TEST:
				Display_2_Numbers(
						(char *)"Trimpots values",
						userInputs.getData0() ,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
				Display_2_Numbers(
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f002 fe8d 	bl	800777c <_ZNK10UserInputs8getData0Ev>
 8004a62:	eeb0 8a40 	vmov.f32	s16, s0
						userInputs.getData1()
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
				Display_2_Numbers(
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 fe96 	bl	800779c <_ZNK10UserInputs8getData1Ev>
 8004a70:	eef0 7a40 	vmov.f32	s15, s0
 8004a74:	eef0 0a67 	vmov.f32	s1, s15
 8004a78:	eeb0 0a48 	vmov.f32	s0, s16
 8004a7c:	481f      	ldr	r0, [pc, #124]	; (8004afc <_ZN15HardwareTestApp3runEv+0x120>)
 8004a7e:	f001 f9c7 	bl	8005e10 <_Z17Display_2_NumbersPKcff>
						);
				break;
 8004a82:	e034      	b.n	8004aee <_ZN15HardwareTestApp3runEv+0x112>
			case LINE_SENSORS_TEST:
				Display_Small_Title_Screen((char *)"Line Detection Output Test");
 8004a84:	481e      	ldr	r0, [pc, #120]	; (8004b00 <_ZN15HardwareTestApp3runEv+0x124>)
 8004a86:	f001 f98f 	bl	8005da8 <_Z26Display_Small_Title_ScreenPKc>
				if(userInputs.isSelectRequest()){
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f002 fe49 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d024      	beq.n	8004ae4 <_ZN15HardwareTestApp3runEv+0x108>
					runLineDetectionTest();
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8be 	bl	8004c1c <_ZN15HardwareTestApp20runLineDetectionTestEv>
				}
				break;
 8004aa0:	e020      	b.n	8004ae4 <_ZN15HardwareTestApp3runEv+0x108>
			case ENEMY_SENSORS_TEST:
				Display_Title_Screen((char *)"Enemy Sensor Test");
 8004aa2:	4818      	ldr	r0, [pc, #96]	; (8004b04 <_ZN15HardwareTestApp3runEv+0x128>)
 8004aa4:	f001 f94a 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
				if(userInputs.isSelectRequest()){
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f002 fe3a 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <_ZN15HardwareTestApp3runEv+0x10c>
					runEnemySensorsTest();
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f827 	bl	8004b0c <_ZN15HardwareTestApp19runEnemySensorsTestEv>
				}
				break;
 8004abe:	e013      	b.n	8004ae8 <_ZN15HardwareTestApp3runEv+0x10c>
			case MOTOR_TEST:
				Display_Title_Screen((char *)"Motor Test");
 8004ac0:	4811      	ldr	r0, [pc, #68]	; (8004b08 <_ZN15HardwareTestApp3runEv+0x12c>)
 8004ac2:	f001 f93b 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
				if(userInputs.isSelectRequest()){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f002 fe2b 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <_ZN15HardwareTestApp3runEv+0x110>
					runMotorTest();
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f964 	bl	8004da4 <_ZN15HardwareTestApp12runMotorTestEv>
				}
				break;
 8004adc:	e006      	b.n	8004aec <_ZN15HardwareTestApp3runEv+0x110>
			default:
				Display_Error();
 8004ade:	f001 fc41 	bl	8006364 <_Z13Display_Errorv>
				break;
 8004ae2:	e004      	b.n	8004aee <_ZN15HardwareTestApp3runEv+0x112>
				break;
 8004ae4:	bf00      	nop
 8004ae6:	e77f      	b.n	80049e8 <_ZN15HardwareTestApp3runEv+0xc>
				break;
 8004ae8:	bf00      	nop
 8004aea:	e77d      	b.n	80049e8 <_ZN15HardwareTestApp3runEv+0xc>
				break;
 8004aec:	bf00      	nop
		userInputs.readAll();
 8004aee:	e77b      	b.n	80049e8 <_ZN15HardwareTestApp3runEv+0xc>
			return;
 8004af0:	bf00      	nop
		}


	}
}
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	ecbd 8b02 	vpop	{d8}
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	0800be88 	.word	0x0800be88
 8004b00:	0800be98 	.word	0x0800be98
 8004b04:	0800beb4 	.word	0x0800beb4
 8004b08:	0800bec8 	.word	0x0800bec8

08004b0c <_ZN15HardwareTestApp19runEnemySensorsTestEv>:
void HardwareTestApp::runEnemySensorsTest(){
 8004b0c:	b5b0      	push	{r4, r5, r7, lr}
 8004b0e:	b09c      	sub	sp, #112	; 0x70
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	///Extract components

	EnemyDetection enemyDetection = sensorsHub.enemyDetection;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004b1c:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8004b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	Enemy_Detection_Screen_Type  enemySensorsScren = ENEMY_SENSORS_OUTPUT_SCREEN;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while(true)
	{
		userInputs.readAll();
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 fd56 	bl	80075ec <_ZN10UserInputs7readAllEv>

		///user input management
		if(userInputs.isReturnBackRequest()){
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f002 fda9 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d161      	bne.n	8004c14 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x108>
			return;
		}
		if(userInputs.isBackRequest()){
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f002 fdb6 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x60>
			enemySensorsScren--;
 8004b60:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004b64:	2100      	movs	r1, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fabd 	bl	80050e6 <_ZmmR27Enemy_Detection_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f002 fdc0 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x7c>
			enemySensorsScren++;
 8004b7c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fa92 	bl	80050ac <_ZppR27Enemy_Detection_Screen_Typei>
		}


		 switch(enemySensorsScren) {
 8004b88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x8a>
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d02d      	beq.n	8004bf0 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0xe4>
 8004b94:	e03a      	b.n	8004c0c <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x100>
				case ENEMY_SENSORS_OUTPUT_SCREEN:
				{
					uint32_t sensorsValues = enemyDetection.readSensors();
 8004b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 fc31 	bl	8008402 <_ZN14EnemyDetection11readSensorsEv>
 8004ba0:	66b8      	str	r0, [r7, #104]	; 0x68
					uint8_t values[EnemyDetection::NUMBER_OF_SENSORS];
					for(uint8_t i = 0; i < EnemyDetection::NUMBER_OF_SENSORS; i ++){
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004ba8:	e017      	b.n	8004bda <_ZN15HardwareTestApp19runEnemySensorsTestEv+0xce>
						values[i] = (sensorsValues & (1 << i)) != 0;
 8004baa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bae:	2201      	movs	r2, #1
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bf14      	ite	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	2300      	moveq	r3, #0
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bc8:	3370      	adds	r3, #112	; 0x70
 8004bca:	443b      	add	r3, r7
 8004bcc:	f803 2c44 	strb.w	r2, [r3, #-68]
					for(uint8_t i = 0; i < EnemyDetection::NUMBER_OF_SENSORS; i ++){
 8004bd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004bda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bde:	2b07      	cmp	r3, #7
 8004be0:	d9e3      	bls.n	8004baa <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x9e>
					}
					Display_N_Values_Screen(values, EnemyDetection::NUMBER_OF_SENSORS);
 8004be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004be6:	2108      	movs	r1, #8
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fa1d 	bl	8006028 <_Z23Display_N_Values_ScreenPhh>
					break;
 8004bee:	e010      	b.n	8004c12 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x106>
				}

				case ENEMY_POSITION_VOTING_SCREEN:
				{
					int8_t votes[EnemyPosition::KNOWN_POSITIONS_NO];
					enemyDetection.readAndTakeSensorsVotes(votes);
 8004bf0:	f107 020c 	add.w	r2, r7, #12
 8004bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f003 fc31 	bl	8008462 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa>
					Display_Enemy_Sensors_Votes(votes);
 8004c00:	f107 030c 	add.w	r3, r7, #12
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 f985 	bl	8005f14 <_Z27Display_Enemy_Sensors_VotesPa>

					break;
 8004c0a:	e002      	b.n	8004c12 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x106>
				}


				default:
					Display_Error();
 8004c0c:	f001 fbaa 	bl	8006364 <_Z13Display_Errorv>
					break;
 8004c10:	bf00      	nop
			}
	}
 8004c12:	e790      	b.n	8004b36 <_ZN15HardwareTestApp19runEnemySensorsTestEv+0x2a>
			return;
 8004c14:	bf00      	nop
}
 8004c16:	3770      	adds	r7, #112	; 0x70
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bdb0      	pop	{r4, r5, r7, pc}

08004c1c <_ZN15HardwareTestApp20runLineDetectionTestEv>:

void HardwareTestApp::runLineDetectionTest()
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

	LineDetection& lineDetecion = sensorsHub.lineDetection;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
	Line_Detection_Screen_Type lineDetectionScreen = LINE_POSITION_SCREEN;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	76fb      	strb	r3, [r7, #27]

	///LOOP
	while(true)
	{
		userInputs.readAll();
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f002 fcda 	bl	80075ec <_ZN10UserInputs7readAllEv>

		///user input management
		if(userInputs.isReturnBackRequest()){
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f002 fd2d 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f040 80a1 	bne.w	8004d8c <_ZN15HardwareTestApp20runLineDetectionTestEv+0x170>
			return;
		}
		if(userInputs.isBackRequest()){
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f002 fd39 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x4a>
			lineDetectionScreen--;
 8004c5a:	f107 031b 	add.w	r3, r7, #27
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fa06 	bl	8005072 <_ZmmR26Line_Detection_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f002 fd43 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x66>
			lineDetectionScreen++;
 8004c76:	f107 031b 	add.w	r3, r7, #27
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f9db 	bl	8005038 <_ZppR26Line_Detection_Screen_Typei>
		}

		///UI
		switch(lineDetectionScreen){
 8004c82:	7efb      	ldrb	r3, [r7, #27]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d06d      	beq.n	8004d64 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x148>
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	dc78      	bgt.n	8004d7e <_ZN15HardwareTestApp20runLineDetectionTestEv+0x162>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x7a>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d019      	beq.n	8004cc8 <_ZN15HardwareTestApp20runLineDetectionTestEv+0xac>
 8004c94:	e073      	b.n	8004d7e <_ZN15HardwareTestApp20runLineDetectionTestEv+0x162>
			case LINE_POSITION_SCREEN:
			{
				/// Line Position Screen
				LinePosition linePosition = lineDetecion.readAndConvertToLinePosition();
 8004c96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c98:	f003 ff6e 	bl	8008b78 <_ZN13LineDetection28readAndConvertToLinePositionEv>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	617b      	str	r3, [r7, #20]
				Display_Line_Position_Screen(
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	7819      	ldrb	r1, [r3, #0]
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	785a      	ldrb	r2, [r3, #1]
 8004ca8:	4b3a      	ldr	r3, [pc, #232]	; (8004d94 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x178>)
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	f001 fa04 	bl	80060b8 <_Z28Display_Line_Position_Screen12LinePositionhhPKc>
							linePosition,
							lineDetecion.isWhiteFilter, //whiteFilter
							lineDetecion.isBlackFilter, //BlackFilter
							(char *)"Hstart to reset>"     //description
				);
				if(userInputs.isSetValueRequest()){
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f002 fd4d 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d061      	beq.n	8004d84 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x168>
					lineDetecion.resetFiltersToDefault();
 8004cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cc2:	f003 ff25 	bl	8008b10 <_ZN13LineDetection21resetFiltersToDefaultEv>
				}
				break;
 8004cc6:	e05d      	b.n	8004d84 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x168>


			case FILTER_CHANGE_SCREEN:
			{
				///Change Filter Screen;
				LinePosition linePosition = lineDetecion.readAndConvertToLinePosition();
 8004cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cca:	f003 ff55 	bl	8008b78 <_ZN13LineDetection28readAndConvertToLinePositionEv>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	613b      	str	r3, [r7, #16]
				float data0 = userInputs.getData0(0, 255);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	eddf 0a30 	vldr	s1, [pc, #192]	; 8004d98 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x17c>
 8004cda:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8004d9c <_ZN15HardwareTestApp20runLineDetectionTestEv+0x180>
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f002 fd6c 	bl	80077bc <_ZNK10UserInputs8getData0Eff>
 8004ce4:	ed87 0a08 	vstr	s0, [r7, #32]
				float data1 = userInputs.getData1(0, 255);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8004d98 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x17c>
 8004cf0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8004d9c <_ZN15HardwareTestApp20runLineDetectionTestEv+0x180>
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f002 fd79 	bl	80077ec <_ZNK10UserInputs8getData1Eff>
 8004cfa:	ed87 0a07 	vstr	s0, [r7, #28]

				Display_Line_Position_Screen(
 8004cfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d06:	edc7 7a00 	vstr	s15, [r7]
 8004d0a:	783b      	ldrb	r3, [r7, #0]
 8004d0c:	b2d9      	uxtb	r1, r3
 8004d0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d16:	edc7 7a00 	vstr	s15, [r7]
 8004d1a:	783b      	ldrb	r3, [r7, #0]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x184>)
 8004d20:	6938      	ldr	r0, [r7, #16]
 8004d22:	f001 f9c9 	bl	80060b8 <_Z28Display_Line_Position_Screen12LinePositionhhPKc>
						linePosition,
						data0, //whiteFilter
						data1, //BlackFilter
						(char *)"Hstart to change>"              //description
				);
				if(userInputs.isSetValueRequest()){
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f002 fd12 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d028      	beq.n	8004d88 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x16c>
					lineDetecion.isWhiteFilter = data0;
 8004d36:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3e:	edc7 7a00 	vstr	s15, [r7]
 8004d42:	783b      	ldrb	r3, [r7, #0]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	701a      	strb	r2, [r3, #0]
					lineDetecion.isBlackFilter = data1;
 8004d4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d52:	edc7 7a00 	vstr	s15, [r7]
 8004d56:	783b      	ldrb	r3, [r7, #0]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	705a      	strb	r2, [r3, #1]
					lineDetectionScreen = LINE_POSITION_SCREEN;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	76fb      	strb	r3, [r7, #27]
				}
				break;
 8004d62:	e011      	b.n	8004d88 <_ZN15HardwareTestApp20runLineDetectionTestEv+0x16c>

			case SENSORS_OUTPUT_SCREEN:
			{
				///Sensors Output View
				uint8_t sensorsValues[LineDetection::LINE_SENSORS_NUMBER];
				lineDetecion.readAll(sensorsValues);
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d6c:	f003 fee0 	bl	8008b30 <_ZN13LineDetection7readAllEPh>
				Display_N_Values_Screen(sensorsValues, LineDetection::LINE_SENSORS_NUMBER);
 8004d70:	f107 0308 	add.w	r3, r7, #8
 8004d74:	2108      	movs	r1, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f956 	bl	8006028 <_Z23Display_N_Values_ScreenPhh>

			}
				break;
 8004d7c:	e005      	b.n	8004d8a <_ZN15HardwareTestApp20runLineDetectionTestEv+0x16e>
			default:
				Display_Error();
 8004d7e:	f001 faf1 	bl	8006364 <_Z13Display_Errorv>
 8004d82:	e754      	b.n	8004c2e <_ZN15HardwareTestApp20runLineDetectionTestEv+0x12>
				break;
 8004d84:	bf00      	nop
 8004d86:	e752      	b.n	8004c2e <_ZN15HardwareTestApp20runLineDetectionTestEv+0x12>
				break;
 8004d88:	bf00      	nop
		}

	}
 8004d8a:	e750      	b.n	8004c2e <_ZN15HardwareTestApp20runLineDetectionTestEv+0x12>
			return;
 8004d8c:	bf00      	nop
}
 8004d8e:	3728      	adds	r7, #40	; 0x28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	0800bed4 	.word	0x0800bed4
 8004d98:	437f0000 	.word	0x437f0000
 8004d9c:	00000000 	.word	0x00000000
 8004da0:	0800bee8 	.word	0x0800bee8

08004da4 <_ZN15HardwareTestApp12runMotorTestEv>:

void HardwareTestApp::runMotorTest()
{
 8004da4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004da8:	b090      	sub	sp, #64	; 0x40
 8004daa:	af04      	add	r7, sp, #16
 8004dac:	6078      	str	r0, [r7, #4]
	const uint32_t MIN_TIMER = 500;
 8004dae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t MAX_TIMER = 10000;
 8004db4:	f242 7310 	movw	r3, #10000	; 0x2710
 8004db8:	623b      	str	r3, [r7, #32]
	uint32_t timer = MIN_TIMER * 2;           ///Set Default Timer
 8004dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t clock;
	Motor_Test_Screen_Type motorScreen = MOTOR_SET_POWER_SCREEN;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]
	///LOOP
	while(true)
	{
		userInputs.readAll();
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f002 fc0f 	bl	80075ec <_ZN10UserInputs7readAllEv>
		///user input management
		if(userInputs.isReturnBackRequest()){
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f002 fc62 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <_ZN15HardwareTestApp12runMotorTestEv+0x46>
			motor.stop();
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f004 f804 	bl	8008df0 <_ZN5Motor4stopEv>
			return;
 8004de8:	e0d3      	b.n	8004f92 <_ZN15HardwareTestApp12runMotorTestEv+0x1ee>
		}
		if(userInputs.isBackRequest()){
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f002 fc69 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <_ZN15HardwareTestApp12runMotorTestEv+0x62>
			motorScreen--;
 8004dfa:	f107 030f 	add.w	r3, r7, #15
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f9b3 	bl	800516c <_ZmmR22Motor_Test_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f002 fc73 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <_ZN15HardwareTestApp12runMotorTestEv+0x7e>
			motorScreen++;
 8004e16:	f107 030f 	add.w	r3, r7, #15
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f97f 	bl	8005120 <_ZppR22Motor_Test_Screen_Typei>
		}
		int8_t leftPower = userInputs.getData0(Motor::MAX_REVERSE_POWER, Motor::MAX_POWER);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8004f9c <_ZN15HardwareTestApp12runMotorTestEv+0x1f8>
 8004e2a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8004fa0 <_ZN15HardwareTestApp12runMotorTestEv+0x1fc>
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f002 fcc4 	bl	80077bc <_ZNK10UserInputs8getData0Eff>
 8004e34:	eef0 7a40 	vmov.f32	s15, s0
 8004e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e3c:	edc7 7a00 	vstr	s15, [r7]
 8004e40:	783b      	ldrb	r3, [r7, #0]
 8004e42:	77fb      	strb	r3, [r7, #31]
		int8_t rightPower = userInputs.getData1(Motor::MAX_REVERSE_POWER,Motor::MAX_POWER);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	eddf 0a54 	vldr	s1, [pc, #336]	; 8004f9c <_ZN15HardwareTestApp12runMotorTestEv+0x1f8>
 8004e4c:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8004fa0 <_ZN15HardwareTestApp12runMotorTestEv+0x1fc>
 8004e50:	4618      	mov	r0, r3
 8004e52:	f002 fccb 	bl	80077ec <_ZNK10UserInputs8getData1Eff>
 8004e56:	eef0 7a40 	vmov.f32	s15, s0
 8004e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e5e:	edc7 7a00 	vstr	s15, [r7]
 8004e62:	783b      	ldrb	r3, [r7, #0]
 8004e64:	77bb      	strb	r3, [r7, #30]

	    switch(motorScreen) {
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d05e      	beq.n	8004f2a <_ZN15HardwareTestApp12runMotorTestEv+0x186>
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f300 8089 	bgt.w	8004f84 <_ZN15HardwareTestApp12runMotorTestEv+0x1e0>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <_ZN15HardwareTestApp12runMotorTestEv+0xd8>
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d01f      	beq.n	8004eba <_ZN15HardwareTestApp12runMotorTestEv+0x116>
 8004e7a:	e083      	b.n	8004f84 <_ZN15HardwareTestApp12runMotorTestEv+0x1e0>
	        case MOTOR_SET_POWER_SCREEN:
	        	Display_2_Power_And_Time_Screen((char *)"Start Motor", leftPower, rightPower, timer, (char *)"Hstart to start");
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	2200      	movs	r2, #0
 8004e80:	461c      	mov	r4, r3
 8004e82:	4615      	mov	r5, r2
 8004e84:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004e88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e8c:	4945      	ldr	r1, [pc, #276]	; (8004fa4 <_ZN15HardwareTestApp12runMotorTestEv+0x200>)
 8004e8e:	9102      	str	r1, [sp, #8]
 8004e90:	e9cd 4500 	strd	r4, r5, [sp]
 8004e94:	4619      	mov	r1, r3
 8004e96:	4844      	ldr	r0, [pc, #272]	; (8004fa8 <_ZN15HardwareTestApp12runMotorTestEv+0x204>)
 8004e98:	f001 f9b4 	bl	8006204 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_>
	        	if(userInputs.isSetValueRequest()){
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f002 fc57 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d06e      	beq.n	8004f8a <_ZN15HardwareTestApp12runMotorTestEv+0x1e6>
	        		motorScreen = MOTOR_RUN_SCREEN;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
	        		clock = Timer_Set_Clock(timer);
 8004eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eb2:	f7ff fd65 	bl	8004980 <_Z15Timer_Set_Clockm>
 8004eb6:	62b8      	str	r0, [r7, #40]	; 0x28
	        	}
	            break;
 8004eb8:	e067      	b.n	8004f8a <_ZN15HardwareTestApp12runMotorTestEv+0x1e6>
	        case MOTOR_RUN_SCREEN:
	        {
	        	int64_t remainTime = Timer_Get_Remain_Time(clock);
 8004eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ebc:	f7ff fd6d 	bl	800499a <_Z21Timer_Get_Remain_Timem>
 8004ec0:	e9c7 0104 	strd	r0, r1, [r7, #16]
	        	if(userInputs.isAnyKey() || remainTime <= 0){
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f002 fbc5 	bl	8007658 <_ZN10UserInputs8isAnyKeyEv>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <_ZN15HardwareTestApp12runMotorTestEv+0x13c>
 8004ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed8:	2a01      	cmp	r2, #1
 8004eda:	f173 0300 	sbcs.w	r3, r3, #0
 8004ede:	da01      	bge.n	8004ee4 <_ZN15HardwareTestApp12runMotorTestEv+0x140>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <_ZN15HardwareTestApp12runMotorTestEv+0x142>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <_ZN15HardwareTestApp12runMotorTestEv+0x156>
	        		// STOP Conditiion
	        		motor.stop();
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f003 ff7e 	bl	8008df0 <_ZN5Motor4stopEv>
	        		motorScreen = MOTOR_SET_POWER_SCREEN;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
	        	}else{
					Display_2_Power_And_Time_Screen((char *)"Motor On", leftPower, rightPower, remainTime,(char *) "Any key to stop");
	        		motor.changePower(leftPower, rightPower);
	        	}
	        	break;
 8004ef8:	e04a      	b.n	8004f90 <_ZN15HardwareTestApp12runMotorTestEv+0x1ec>
					Display_2_Power_And_Time_Screen((char *)"Motor On", leftPower, rightPower, remainTime,(char *) "Any key to stop");
 8004efa:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8004efe:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8004f02:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <_ZN15HardwareTestApp12runMotorTestEv+0x208>)
 8004f04:	9302      	str	r3, [sp, #8]
 8004f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f0a:	e9cd 2300 	strd	r2, r3, [sp]
 8004f0e:	4602      	mov	r2, r0
 8004f10:	4827      	ldr	r0, [pc, #156]	; (8004fb0 <_ZN15HardwareTestApp12runMotorTestEv+0x20c>)
 8004f12:	f001 f977 	bl	8006204 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_>
	        		motor.changePower(leftPower, rightPower);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004f1e:	f997 101f 	ldrsb.w	r1, [r7, #31]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f003 ff71 	bl	8008e0a <_ZN5Motor11changePowerEaa>
	        	break;
 8004f28:	e032      	b.n	8004f90 <_ZN15HardwareTestApp12runMotorTestEv+0x1ec>
	        }
	        case MOTOR_SET_TIMER_SCREEN:
	        {
	        	uint32_t setTime = (uint32_t) userInputs.getData0(MIN_TIMER,MAX_TIMER);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004fb4 <_ZN15HardwareTestApp12runMotorTestEv+0x210>
 8004f32:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8004fb8 <_ZN15HardwareTestApp12runMotorTestEv+0x214>
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 fc40 	bl	80077bc <_ZNK10UserInputs8getData0Eff>
 8004f3c:	eef0 7a40 	vmov.f32	s15, s0
 8004f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f44:	ee17 3a90 	vmov	r3, s15
 8004f48:	61bb      	str	r3, [r7, #24]
	        	Display_2_Power_And_Time_Screen((char *)"Set Timer", leftPower, rightPower, setTime, (char *)"Hstart to set");
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4698      	mov	r8, r3
 8004f50:	4691      	mov	r9, r2
 8004f52:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f5a:	4918      	ldr	r1, [pc, #96]	; (8004fbc <_ZN15HardwareTestApp12runMotorTestEv+0x218>)
 8004f5c:	9102      	str	r1, [sp, #8]
 8004f5e:	e9cd 8900 	strd	r8, r9, [sp]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4816      	ldr	r0, [pc, #88]	; (8004fc0 <_ZN15HardwareTestApp12runMotorTestEv+0x21c>)
 8004f66:	f001 f94d 	bl	8006204 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_>
	        	if(userInputs.isSetValueRequest()){
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f002 fbf0 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <_ZN15HardwareTestApp12runMotorTestEv+0x1ea>
	        		timer = setTime;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	        		motorScreen = MOTOR_SET_POWER_SCREEN;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
	        	}
	        	break;
 8004f82:	e004      	b.n	8004f8e <_ZN15HardwareTestApp12runMotorTestEv+0x1ea>
	        }
			default:
				Display_Error();
 8004f84:	f001 f9ee 	bl	8006364 <_Z13Display_Errorv>
 8004f88:	e71c      	b.n	8004dc4 <_ZN15HardwareTestApp12runMotorTestEv+0x20>
	            break;
 8004f8a:	bf00      	nop
 8004f8c:	e71a      	b.n	8004dc4 <_ZN15HardwareTestApp12runMotorTestEv+0x20>
	        	break;
 8004f8e:	bf00      	nop
	    }
	}
 8004f90:	e718      	b.n	8004dc4 <_ZN15HardwareTestApp12runMotorTestEv+0x20>
}
 8004f92:	3730      	adds	r7, #48	; 0x30
 8004f94:	46bd      	mov	sp, r7
 8004f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f9a:	bf00      	nop
 8004f9c:	42c80000 	.word	0x42c80000
 8004fa0:	c2c80000 	.word	0xc2c80000
 8004fa4:	0800bf08 	.word	0x0800bf08
 8004fa8:	0800befc 	.word	0x0800befc
 8004fac:	0800bf24 	.word	0x0800bf24
 8004fb0:	0800bf18 	.word	0x0800bf18
 8004fb4:	461c4000 	.word	0x461c4000
 8004fb8:	43fa0000 	.word	0x43fa0000
 8004fbc:	0800bf40 	.word	0x0800bf40
 8004fc0:	0800bf34 	.word	0x0800bf34

08004fc4 <_ZppR25Hardware_Test_Screen_Typei>:

///                       Implementation of Types Operations
///
///
Hardware_Test_Screen_Type operator++(Hardware_Test_Screen_Type& screen, int) {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
    Hardware_Test_Screen_Type current = screen;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	73fb      	strb	r3, [r7, #15]

    if (screen == MOTOR_TEST) {
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d103      	bne.n	8004fe4 <_ZppR25Hardware_Test_Screen_Typei+0x20>
        screen = TRIMPOTS_TEST;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e005      	b.n	8004ff0 <_ZppR25Hardware_Test_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Hardware_Test_Screen_Type>(static_cast<int>(screen) + 1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <_ZmmR25Hardware_Test_Screen_Typei>:

// The actual implementation
Hardware_Test_Screen_Type operator--(Hardware_Test_Screen_Type& screen, int) {
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
    Hardware_Test_Screen_Type current = screen;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	73fb      	strb	r3, [r7, #15]

    if (screen == TRIMPOTS_TEST) {
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <_ZmmR25Hardware_Test_Screen_Typei+0x20>
        screen = MOTOR_TEST;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2203      	movs	r2, #3
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e005      	b.n	800502a <_ZmmR25Hardware_Test_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Hardware_Test_Screen_Type>(static_cast<int>(screen) - 1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	3b01      	subs	r3, #1
 8005024:	b2da      	uxtb	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <_ZppR26Line_Detection_Screen_Typei>:

// Increment (++) operator
Line_Detection_Screen_Type operator++(Line_Detection_Screen_Type& screen, int) {
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
    Line_Detection_Screen_Type current = screen;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	73fb      	strb	r3, [r7, #15]

    if (screen == SENSORS_OUTPUT_SCREEN) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d103      	bne.n	8005058 <_ZppR26Line_Detection_Screen_Typei+0x20>
        screen = LINE_POSITION_SCREEN;  // loop back to the start if at the end
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	e005      	b.n	8005064 <_ZppR26Line_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Line_Detection_Screen_Type>(static_cast<int>(screen) + 1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 8005064:	7bfb      	ldrb	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <_ZmmR26Line_Detection_Screen_Typei>:

// Decrement (--) operator
Line_Detection_Screen_Type operator--(Line_Detection_Screen_Type& screen, int) {
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
    Line_Detection_Screen_Type current = screen;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	73fb      	strb	r3, [r7, #15]

    if (screen == LINE_POSITION_SCREEN) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <_ZmmR26Line_Detection_Screen_Typei+0x20>
        screen = SENSORS_OUTPUT_SCREEN;  // loop back to the end if at the start
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e005      	b.n	800509e <_ZmmR26Line_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Line_Detection_Screen_Type>(static_cast<int>(screen) - 1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	3b01      	subs	r3, #1
 8005098:	b2da      	uxtb	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix decrement
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <_ZppR27Enemy_Detection_Screen_Typei>:

Enemy_Detection_Screen_Type operator++(Enemy_Detection_Screen_Type& screen, int) {
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
    Enemy_Detection_Screen_Type current = screen;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	73fb      	strb	r3, [r7, #15]

    if (screen == ENEMY_POSITION_VOTING_SCREEN) {
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d103      	bne.n	80050cc <_ZppR27Enemy_Detection_Screen_Typei+0x20>
        screen = ENEMY_SENSORS_OUTPUT_SCREEN;  // loop back to the start if at the end
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e005      	b.n	80050d8 <_ZppR27Enemy_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Enemy_Detection_Screen_Type>(static_cast<int>(screen) + 1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <_ZmmR27Enemy_Detection_Screen_Typei>:

Enemy_Detection_Screen_Type operator--(Enemy_Detection_Screen_Type& screen, int) {
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
    Enemy_Detection_Screen_Type current = screen;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	73fb      	strb	r3, [r7, #15]

    if (screen == ENEMY_SENSORS_OUTPUT_SCREEN) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <_ZmmR27Enemy_Detection_Screen_Typei+0x20>
        screen = ENEMY_POSITION_VOTING_SCREEN;  // loop back to the end if at the start
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e005      	b.n	8005112 <_ZmmR27Enemy_Detection_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Enemy_Detection_Screen_Type>(static_cast<int>(screen) - 1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	3b01      	subs	r3, #1
 800510c:	b2da      	uxtb	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix decrement
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <_ZppR22Motor_Test_Screen_Typei>:

// Increment (++) operator
Motor_Test_Screen_Type operator++(Motor_Test_Screen_Type& screen, int) {
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
    Motor_Test_Screen_Type current = screen;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	73fb      	strb	r3, [r7, #15]
    switch(screen) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d00e      	beq.n	8005156 <_ZppR22Motor_Test_Screen_Typei+0x36>
 8005138:	2b02      	cmp	r3, #2
 800513a:	dc10      	bgt.n	800515e <_ZppR22Motor_Test_Screen_Typei+0x3e>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <_ZppR22Motor_Test_Screen_Typei+0x26>
 8005140:	2b01      	cmp	r3, #1
 8005142:	d004      	beq.n	800514e <_ZppR22Motor_Test_Screen_Typei+0x2e>
 8005144:	e00b      	b.n	800515e <_ZppR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_POWER_SCREEN:
            screen = MOTOR_SET_TIMER_SCREEN;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	701a      	strb	r2, [r3, #0]
            break;
 800514c:	e007      	b.n	800515e <_ZppR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_RUN_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
            break;
 8005154:	e003      	b.n	800515e <_ZppR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_TIMER_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;  // loop back to the start
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
            break;
 800515c:	bf00      	nop
    }
    return current; // Return old value for postfix increment
 800515e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <_ZmmR22Motor_Test_Screen_Typei>:

// Decrement (--) operator
Motor_Test_Screen_Type operator--(Motor_Test_Screen_Type& screen, int) {
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
    Motor_Test_Screen_Type current = screen;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	73fb      	strb	r3, [r7, #15]
    switch(screen) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d00e      	beq.n	80051a2 <_ZmmR22Motor_Test_Screen_Typei+0x36>
 8005184:	2b02      	cmp	r3, #2
 8005186:	dc10      	bgt.n	80051aa <_ZmmR22Motor_Test_Screen_Typei+0x3e>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <_ZmmR22Motor_Test_Screen_Typei+0x26>
 800518c:	2b01      	cmp	r3, #1
 800518e:	d004      	beq.n	800519a <_ZmmR22Motor_Test_Screen_Typei+0x2e>
 8005190:	e00b      	b.n	80051aa <_ZmmR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_POWER_SCREEN:
            screen = MOTOR_SET_TIMER_SCREEN;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	701a      	strb	r2, [r3, #0]
            break;
 8005198:	e007      	b.n	80051aa <_ZmmR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_RUN_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
            break;
 80051a0:	e003      	b.n	80051aa <_ZmmR22Motor_Test_Screen_Typei+0x3e>
        case MOTOR_SET_TIMER_SCREEN:
            screen = MOTOR_SET_POWER_SCREEN;  // loop back to the start
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
            break;
 80051a8:	bf00      	nop
    }
    return current; //
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <_Z41__static_initialization_and_destruction_0ii>:
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d109      	bne.n	80051dc <_Z41__static_initialization_and_destruction_0ii+0x24>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d104      	bne.n	80051dc <_Z41__static_initialization_and_destruction_0ii+0x24>
static uint32_t startTime = HAL_GetTick();
 80051d2:	f7fc fcc1 	bl	8001b58 <HAL_GetTick>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a02      	ldr	r2, [pc, #8]	; (80051e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	200003f0 	.word	0x200003f0

080051e8 <_GLOBAL__sub_I__ZN15HardwareTestApp3runEv>:
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7ff ffe1 	bl	80051b8 <_Z41__static_initialization_and_destruction_0ii>
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <_ZN20InitializeParameters3runEv>:
#include "display.h"
#include "timer.h"
#include "motion.h"

void InitializeParameters::run()
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
    while(true)
    {
        userInputs.readAll();
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f002 f9f1 	bl	80075ec <_ZN10UserInputs7readAllEv>

        /// User input management
        if(userInputs.isReturnBackRequest()){
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f002 fa44 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d148      	bne.n	80052ac <_ZN20InitializeParameters3runEv+0xb4>
            return;
        }
        if(userInputs.isBackRequest()){
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f002 fa51 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <_ZN20InitializeParameters3runEv+0x3e>
            screen--;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	33dc      	adds	r3, #220	; 0xdc
 800522e:	2100      	movs	r1, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fa5e 	bl	80056f2 <_ZmmR33Initialize_Parameters_Screen_Typei>
        }
        if(userInputs.isNextRequest()){
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f002 fa5b 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <_ZN20InitializeParameters3runEv+0x5a>
            screen++;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	33dc      	adds	r3, #220	; 0xdc
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fa33 	bl	80056b8 <_ZppR33Initialize_Parameters_Screen_Typei>
        }

        /// UI Displaying
        switch(screen) {
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <_ZN20InitializeParameters3runEv+0x6a>
 800525c:	2b01      	cmp	r3, #1
 800525e:	d00f      	beq.n	8005280 <_ZN20InitializeParameters3runEv+0x88>
 8005260:	e01d      	b.n	800529e <_ZN20InitializeParameters3runEv+0xa6>
            case SET_POWER_SCREEN:
            	Display_Title_Screen((char *)"Set Power");
 8005262:	4814      	ldr	r0, [pc, #80]	; (80052b4 <_ZN20InitializeParameters3runEv+0xbc>)
 8005264:	f000 fd6a 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
            	if(userInputs.isSelectRequest()){
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f002 fa5a 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <_ZN20InitializeParameters3runEv+0xac>
            		runPowerSetApplication();
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f81f 	bl	80052bc <_ZN20InitializeParameters22runPowerSetApplicationEv>
            	}

                break;
 800527e:	e011      	b.n	80052a4 <_ZN20InitializeParameters3runEv+0xac>
            case SET_TIME_SCREEN:
            	Display_Title_Screen((char *)"Set Time");
 8005280:	480d      	ldr	r0, [pc, #52]	; (80052b8 <_ZN20InitializeParameters3runEv+0xc0>)
 8005282:	f000 fd5b 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
            	if(userInputs.isSelectRequest()){
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f002 fa4b 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <_ZN20InitializeParameters3runEv+0xb0>
            	   runTimeSetApplication();
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8f6 	bl	8005488 <_ZN20InitializeParameters21runTimeSetApplicationEv>
				}
                break;
 800529c:	e004      	b.n	80052a8 <_ZN20InitializeParameters3runEv+0xb0>
            default:
                Display_Error();
 800529e:	f001 f861 	bl	8006364 <_Z13Display_Errorv>
                break;
 80052a2:	e002      	b.n	80052aa <_ZN20InitializeParameters3runEv+0xb2>
                break;
 80052a4:	bf00      	nop
 80052a6:	e7ab      	b.n	8005200 <_ZN20InitializeParameters3runEv+0x8>
                break;
 80052a8:	bf00      	nop
        userInputs.readAll();
 80052aa:	e7a9      	b.n	8005200 <_ZN20InitializeParameters3runEv+0x8>
            return;
 80052ac:	bf00      	nop
        }
    }
}
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	0800bf50 	.word	0x0800bf50
 80052b8:	0800bf5c 	.word	0x0800bf5c

080052bc <_ZN20InitializeParameters22runPowerSetApplicationEv>:
		"<Show screen>",
		"HStart to Set",
		"!Start Screen!"
};
void InitializeParameters::runPowerSetApplication()
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	Power_Set_Screen_Type powerScreen = High_Power_Screen;
 80052c4:	2300      	movs	r3, #0
 80052c6:	76fb      	strb	r3, [r7, #27]
	Secondary_Screen_Type secondScreen = Show_Screen;
 80052c8:	2300      	movs	r3, #0
 80052ca:	77fb      	strb	r3, [r7, #31]
	while(true)
	{
        userInputs.readAll();
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f002 f98b 	bl	80075ec <_ZN10UserInputs7readAllEv>

        /// User input management
        if(userInputs.isReturnBackRequest()) return;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f002 f9de 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 80bd 	bne.w	8005462 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1a6>
        uint8_t screenId = static_cast<int>(powerScreen);
 80052e8:	7efb      	ldrb	r3, [r7, #27]
 80052ea:	77bb      	strb	r3, [r7, #30]
        const PowerSet powerSet = powerSets[screenId];
 80052ec:	7fbb      	ldrb	r3, [r7, #30]
 80052ee:	4a5f      	ldr	r2, [pc, #380]	; (800546c <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1b0>)
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	4413      	add	r3, r2
 80052f4:	f107 0408 	add.w	r4, r7, #8
 80052f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        switch (secondScreen) {
 80052fe:	7ffb      	ldrb	r3, [r7, #31]
 8005300:	2b02      	cmp	r3, #2
 8005302:	f000 808a 	beq.w	800541a <_ZN20InitializeParameters22runPowerSetApplicationEv+0x15e>
 8005306:	2b02      	cmp	r3, #2
 8005308:	f300 80a4 	bgt.w	8005454 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x198>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x5a>
 8005310:	2b01      	cmp	r3, #1
 8005312:	d03c      	beq.n	800538e <_ZN20InitializeParameters22runPowerSetApplicationEv+0xd2>
 8005314:	e09e      	b.n	8005454 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x198>
			case Show_Screen:
				if(userInputs.isBackRequest()) powerScreen--;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f002 f9d3 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x76>
 8005326:	f107 031b 	add.w	r3, r7, #27
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fa1a 	bl	8005766 <_ZmmR21Power_Set_Screen_Typei>
				if(userInputs.isNextRequest()) powerScreen++;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f002 f9dd 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <_ZN20InitializeParameters22runPowerSetApplicationEv+0x92>
 8005342:	f107 031b 	add.w	r3, r7, #27
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f9ef 	bl	800572c <_ZppR21Power_Set_Screen_Typei>
				Display_2_Power_Screen(
					 powerSet.title,
 800534e:	68b8      	ldr	r0, [r7, #8]
					 *powerSet.leftPower,
 8005350:	68fb      	ldr	r3, [r7, #12]
				Display_2_Power_Screen(
 8005352:	f993 1000 	ldrsb.w	r1, [r3]
					 *powerSet.rightPower, // Assuming there's no left value for this
 8005356:	693b      	ldr	r3, [r7, #16]
				Display_2_Power_Screen(
 8005358:	f993 2000 	ldrsb.w	r2, [r3]
					 descriptions[0]
 800535c:	4b44      	ldr	r3, [pc, #272]	; (8005470 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1b4>)
				Display_2_Power_Screen(
 800535e:	f000 ffb5 	bl	80062cc <_Z22Display_2_Power_ScreenPKcaaS0_>
				 );

				if(userInputs.isSelectRequest()){
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f002 f9dd 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <_ZN20InitializeParameters22runPowerSetApplicationEv+0xbc>
					secondScreen = Set_Screen;
 8005372:	2301      	movs	r3, #1
 8005374:	77fb      	strb	r3, [r7, #31]
				}else if(userInputs.isSetValueRequest()){
					secondScreen = Start_Screen;
				}
				break;
 8005376:	e070      	b.n	800545a <_ZN20InitializeParameters22runPowerSetApplicationEv+0x19e>
				}else if(userInputs.isSetValueRequest()){
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f002 f9e9 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d068      	beq.n	800545a <_ZN20InitializeParameters22runPowerSetApplicationEv+0x19e>
					secondScreen = Start_Screen;
 8005388:	2302      	movs	r3, #2
 800538a:	77fb      	strb	r3, [r7, #31]
				break;
 800538c:	e065      	b.n	800545a <_ZN20InitializeParameters22runPowerSetApplicationEv+0x19e>

			case Set_Screen:
			{
				int8_t leftPower = userInputs.getData0(-100, 100);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	eddf 0a38 	vldr	s1, [pc, #224]	; 8005474 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1b8>
 8005396:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8005478 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1bc>
 800539a:	4618      	mov	r0, r3
 800539c:	f002 fa0e 	bl	80077bc <_ZNK10UserInputs8getData0Eff>
 80053a0:	eef0 7a40 	vmov.f32	s15, s0
 80053a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a8:	edc7 7a00 	vstr	s15, [r7]
 80053ac:	783b      	ldrb	r3, [r7, #0]
 80053ae:	777b      	strb	r3, [r7, #29]
				int8_t rightPower = userInputs.getData1(-100, 100);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8005474 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1b8>
 80053b8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005478 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1bc>
 80053bc:	4618      	mov	r0, r3
 80053be:	f002 fa15 	bl	80077ec <_ZNK10UserInputs8getData1Eff>
 80053c2:	eef0 7a40 	vmov.f32	s15, s0
 80053c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ca:	edc7 7a00 	vstr	s15, [r7]
 80053ce:	783b      	ldrb	r3, [r7, #0]
 80053d0:	773b      	strb	r3, [r7, #28]
				Display_2_Power_Screen(
					powerSet.title,
 80053d2:	68b8      	ldr	r0, [r7, #8]
					 leftPower,
					 rightPower, // Assuming there's no left value for this
					 descriptions[1]
 80053d4:	4b29      	ldr	r3, [pc, #164]	; (800547c <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1c0>)
				Display_2_Power_Screen(
 80053d6:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80053da:	f997 101d 	ldrsb.w	r1, [r7, #29]
 80053de:	f000 ff75 	bl	80062cc <_Z22Display_2_Power_ScreenPKcaaS0_>
				 );
			       if(userInputs.isSelectRequest()){
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f002 f99d 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x13c>
			    	   secondScreen = Show_Screen;
 80053f2:	2300      	movs	r3, #0
 80053f4:	77fb      	strb	r3, [r7, #31]
					 }else if(userInputs.isSetValueRequest()){
						 *powerSet.leftPower = leftPower;
						 *powerSet.rightPower = rightPower;
						 secondScreen = Show_Screen;
					 }
			       break;
 80053f6:	e032      	b.n	800545e <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1a2>
					 }else if(userInputs.isSetValueRequest()){
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f002 f9a9 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d02a      	beq.n	800545e <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1a2>
						 *powerSet.leftPower = leftPower;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	7f7a      	ldrb	r2, [r7, #29]
 800540c:	701a      	strb	r2, [r3, #0]
						 *powerSet.rightPower = rightPower;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	7f3a      	ldrb	r2, [r7, #28]
 8005412:	701a      	strb	r2, [r3, #0]
						 secondScreen = Show_Screen;
 8005414:	2300      	movs	r3, #0
 8005416:	77fb      	strb	r3, [r7, #31]
			       break;
 8005418:	e021      	b.n	800545e <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1a2>
			}

			case Start_Screen:
				if(userInputs.isAnyKey()){
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f002 f91a 	bl	8007658 <_ZN10UserInputs8isAnyKeyEv>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <_ZN20InitializeParameters22runPowerSetApplicationEv+0x172>
					secondScreen = Show_Screen;
 800542a:	2300      	movs	r3, #0
 800542c:	77fb      	strb	r3, [r7, #31]
				 }
				Display_Clear();
 800542e:	f000 fb6b 	bl	8005b08 <_Z13Display_Clearv>
				strategist.runTestMotion(Motion_Forward_Medium);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3310      	adds	r3, #16
 8005436:	4912      	ldr	r1, [pc, #72]	; (8005480 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1c4>)
 8005438:	4618      	mov	r0, r3
 800543a:	f001 fa4d 	bl	80068d8 <_ZN10Strategist13runTestMotionEPFvR5MotorE>
				 Display_2_Power_Screen(
					 powerSet.title,
 800543e:	68b8      	ldr	r0, [r7, #8]
					 *powerSet.leftPower,
 8005440:	68fb      	ldr	r3, [r7, #12]
				 Display_2_Power_Screen(
 8005442:	f993 1000 	ldrsb.w	r1, [r3]
					 *powerSet.rightPower,
 8005446:	693b      	ldr	r3, [r7, #16]
				 Display_2_Power_Screen(
 8005448:	f993 2000 	ldrsb.w	r2, [r3]
					 descriptions[2]
 800544c:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1c8>)
				 Display_2_Power_Screen(
 800544e:	f000 ff3d 	bl	80062cc <_Z22Display_2_Power_ScreenPKcaaS0_>
				 );
				break;
 8005452:	e005      	b.n	8005460 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1a4>
			default:
				Display_Error();
 8005454:	f000 ff86 	bl	8006364 <_Z13Display_Errorv>
				break;
 8005458:	e002      	b.n	8005460 <_ZN20InitializeParameters22runPowerSetApplicationEv+0x1a4>
				break;
 800545a:	bf00      	nop
 800545c:	e736      	b.n	80052cc <_ZN20InitializeParameters22runPowerSetApplicationEv+0x10>
			       break;
 800545e:	bf00      	nop
		}
	}
 8005460:	e734      	b.n	80052cc <_ZN20InitializeParameters22runPowerSetApplicationEv+0x10>
        if(userInputs.isReturnBackRequest()) return;
 8005462:	bf00      	nop

}
 8005464:	3724      	adds	r7, #36	; 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd90      	pop	{r4, r7, pc}
 800546a:	bf00      	nop
 800546c:	0800bfd4 	.word	0x0800bfd4
 8005470:	0800c024 	.word	0x0800c024
 8005474:	42c80000 	.word	0x42c80000
 8005478:	c2c80000 	.word	0xc2c80000
 800547c:	0800c034 	.word	0x0800c034
 8005480:	080063dd 	.word	0x080063dd
 8005484:	0800c044 	.word	0x0800c044

08005488 <_ZN20InitializeParameters21runTimeSetApplicationEv>:
	{"Rotation 90* Time", &actionTimes.rotation90degree, &powerLevels.highLeftPower, &powerLevels.highRightPower, Motion_Rotate_Left_High},
	{"Rotation 120* Time", &actionTimes.rotation120degree, &powerLevels.highLeftPower, &powerLevels.highRightPower, Motion_Rotate_Left_High}
};

void InitializeParameters::runTimeSetApplication()
{
 8005488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800548c:	b092      	sub	sp, #72	; 0x48
 800548e:	af04      	add	r7, sp, #16
 8005490:	60f8      	str	r0, [r7, #12]
	Time_Set_Screen_Type timeSetScreen = Braking_Time_Screen;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	Secondary_Screen_Type secondScreen = Show_Screen;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(true)
	{
        userInputs.readAll();
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f002 f8a2 	bl	80075ec <_ZN10UserInputs7readAllEv>

        /// User input management
        if(userInputs.isReturnBackRequest()) return;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f002 f8f5 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f040 80ed 	bne.w	8005694 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x20c>
        uint8_t screenId = static_cast<int>(timeSetScreen);
 80054ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        const TimeSet timeSet = timeSets[screenId];
 80054c2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80054c6:	4976      	ldr	r1, [pc, #472]	; (80056a0 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x218>)
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	f107 0414 	add.w	r4, r7, #20
 80054d6:	461d      	mov	r5, r3
 80054d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	6023      	str	r3, [r4, #0]

        switch (secondScreen) {
 80054e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	f000 808d 	beq.w	8005604 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x17c>
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	f300 80cb 	bgt.w	8005686 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x1fe>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <_ZN20InitializeParameters21runTimeSetApplicationEv+0x72>
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d048      	beq.n	800558a <_ZN20InitializeParameters21runTimeSetApplicationEv+0x102>
 80054f8:	e0c5      	b.n	8005686 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x1fe>
			case Show_Screen:
				if(userInputs.isBackRequest()) timeSetScreen--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 f8e1 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x8e>
 800550a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f962 	bl	80057da <_ZmmR20Time_Set_Screen_Typei>
				if(userInputs.isNextRequest()) timeSetScreen++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f002 f8eb 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <_ZN20InitializeParameters21runTimeSetApplicationEv+0xaa>
 8005526:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f000 f937 	bl	80057a0 <_ZppR20Time_Set_Screen_Typei>
				Display_2_Power_And_Time_Screen(
					 timeSet.title,
 8005532:	6978      	ldr	r0, [r7, #20]
					 *timeSet.leftPower,
 8005534:	69fb      	ldr	r3, [r7, #28]
				Display_2_Power_And_Time_Screen(
 8005536:	f993 1000 	ldrsb.w	r1, [r3]
					 *timeSet.rightPower,
 800553a:	6a3b      	ldr	r3, [r7, #32]
				Display_2_Power_And_Time_Screen(
 800553c:	f993 2000 	ldrsb.w	r2, [r3]
					 *timeSet.time,
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	881b      	ldrh	r3, [r3, #0]
				Display_2_Power_And_Time_Screen(
 8005544:	b29b      	uxth	r3, r3
 8005546:	2400      	movs	r4, #0
 8005548:	4698      	mov	r8, r3
 800554a:	46a1      	mov	r9, r4
					 descriptions[0]
 800554c:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x21c>)
				Display_2_Power_And_Time_Screen(
 800554e:	9302      	str	r3, [sp, #8]
 8005550:	e9cd 8900 	strd	r8, r9, [sp]
 8005554:	f000 fe56 	bl	8006204 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_>
				 );

				if(userInputs.isSelectRequest()){
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f002 f8e2 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <_ZN20InitializeParameters21runTimeSetApplicationEv+0xe8>
					secondScreen = Set_Screen;
 8005568:	2301      	movs	r3, #1
 800556a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				}else if(userInputs.isSetValueRequest()){
					secondScreen = Start_Screen;
				}
				break;
 800556e:	e08d      	b.n	800568c <_ZN20InitializeParameters21runTimeSetApplicationEv+0x204>
				}else if(userInputs.isSetValueRequest()){
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f002 f8ed 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8085 	beq.w	800568c <_ZN20InitializeParameters21runTimeSetApplicationEv+0x204>
					secondScreen = Start_Screen;
 8005582:	2302      	movs	r3, #2
 8005584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8005588:	e080      	b.n	800568c <_ZN20InitializeParameters21runTimeSetApplicationEv+0x204>

			case Set_Screen:
			{
				uint16_t time = userInputs.getData0(0, 3000);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	eddf 0a46 	vldr	s1, [pc, #280]	; 80056a8 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x220>
 8005592:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80056ac <_ZN20InitializeParameters21runTimeSetApplicationEv+0x224>
 8005596:	4618      	mov	r0, r3
 8005598:	f002 f910 	bl	80077bc <_ZNK10UserInputs8getData0Eff>
 800559c:	eef0 7a40 	vmov.f32	s15, s0
 80055a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a4:	ee17 3a90 	vmov	r3, s15
 80055a8:	86bb      	strh	r3, [r7, #52]	; 0x34
				Display_2_Power_And_Time_Screen(
					 timeSet.title,
 80055aa:	6978      	ldr	r0, [r7, #20]
					 *timeSet.leftPower,
 80055ac:	69fb      	ldr	r3, [r7, #28]
				Display_2_Power_And_Time_Screen(
 80055ae:	f993 1000 	ldrsb.w	r1, [r3]
					 *timeSet.rightPower,
 80055b2:	6a3b      	ldr	r3, [r7, #32]
				Display_2_Power_And_Time_Screen(
 80055b4:	f993 3000 	ldrsb.w	r3, [r3]
 80055b8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055ba:	2400      	movs	r4, #0
 80055bc:	4692      	mov	sl, r2
 80055be:	46a3      	mov	fp, r4
					 time,
					 descriptions[1]
 80055c0:	4a3b      	ldr	r2, [pc, #236]	; (80056b0 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x228>)
				Display_2_Power_And_Time_Screen(
 80055c2:	9202      	str	r2, [sp, #8]
 80055c4:	e9cd ab00 	strd	sl, fp, [sp]
 80055c8:	461a      	mov	r2, r3
 80055ca:	f000 fe1b 	bl	8006204 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_>
				 );
			       if(userInputs.isSelectRequest()){
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f002 f8a7 	bl	8007726 <_ZN10UserInputs15isSelectRequestEv>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x15e>
			    	   secondScreen = Show_Screen;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					 }else if(userInputs.isSetValueRequest()){
						 *timeSet.time = time;
						 secondScreen = Show_Screen;
					 }
			       break;
 80055e4:	e054      	b.n	8005690 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x208>
					 }else if(userInputs.isSetValueRequest()){
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 f8b2 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d04c      	beq.n	8005690 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x208>
						 *timeSet.time = time;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055fa:	801a      	strh	r2, [r3, #0]
						 secondScreen = Show_Screen;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			       break;
 8005602:	e045      	b.n	8005690 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x208>
			}

			case Start_Screen:
				if(userInputs.isAnyKey()){
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f002 f825 	bl	8007658 <_ZN10UserInputs8isAnyKeyEv>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <_ZN20InitializeParameters21runTimeSetApplicationEv+0x192>
					secondScreen = Show_Screen;
 8005614:	2300      	movs	r3, #0
 8005616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				 }
				Display_Clear();
 800561a:	f000 fa75 	bl	8005b08 <_Z13Display_Clearv>
				if(timeSetScreen == Braking_Time_Screen){
 800561e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x1ae>
					strategist.runTestMotion(timeSet.motion);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3310      	adds	r3, #16
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f001 f952 	bl	80068d8 <_ZN10Strategist13runTestMotionEPFvR5MotorE>
 8005634:	e011      	b.n	800565a <_ZN20InitializeParameters21runTimeSetApplicationEv+0x1d2>
				}else{
					strategist.runTestTimedMotion(TimedMotion(timeSet.motion,(uint32_t) timeSet.time));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f103 0410 	add.w	r4, r3, #16
 800563c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	461a      	mov	r2, r3
 8005642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005646:	4618      	mov	r0, r3
 8005648:	f001 fe3d 	bl	80072c6 <_ZN11TimedMotionC1EPFvR5MotorEm>
 800564c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005650:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005654:	4620      	mov	r0, r4
 8005656:	f001 f9b3 	bl	80069c0 <_ZN10Strategist18runTestTimedMotionE11TimedMotion>
				}

				Display_2_Power_And_Time_Screen(
					 timeSet.title,
 800565a:	6978      	ldr	r0, [r7, #20]
					 *timeSet.leftPower,
 800565c:	69fb      	ldr	r3, [r7, #28]
				Display_2_Power_And_Time_Screen(
 800565e:	f993 1000 	ldrsb.w	r1, [r3]
					 *timeSet.rightPower,
 8005662:	6a3b      	ldr	r3, [r7, #32]
				Display_2_Power_And_Time_Screen(
 8005664:	f993 2000 	ldrsb.w	r2, [r3]
					 *timeSet.time,
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	881b      	ldrh	r3, [r3, #0]
				Display_2_Power_And_Time_Screen(
 800566c:	b29b      	uxth	r3, r3
 800566e:	2400      	movs	r4, #0
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	607c      	str	r4, [r7, #4]
					 descriptions[2]
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x22c>)
				Display_2_Power_And_Time_Screen(
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	e9d7 3400 	ldrd	r3, r4, [r7]
 800567c:	e9cd 3400 	strd	r3, r4, [sp]
 8005680:	f000 fdc0 	bl	8006204 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_>
				 );
				break;
 8005684:	e005      	b.n	8005692 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x20a>
			default:
				Display_Error();
 8005686:	f000 fe6d 	bl	8006364 <_Z13Display_Errorv>
				break;
 800568a:	e002      	b.n	8005692 <_ZN20InitializeParameters21runTimeSetApplicationEv+0x20a>
				break;
 800568c:	bf00      	nop
 800568e:	e706      	b.n	800549e <_ZN20InitializeParameters21runTimeSetApplicationEv+0x16>
			       break;
 8005690:	bf00      	nop
		}
	}
 8005692:	e704      	b.n	800549e <_ZN20InitializeParameters21runTimeSetApplicationEv+0x16>
        if(userInputs.isReturnBackRequest()) return;
 8005694:	bf00      	nop

}
 8005696:	3738      	adds	r7, #56	; 0x38
 8005698:	46bd      	mov	sp, r7
 800569a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569e:	bf00      	nop
 80056a0:	0800c100 	.word	0x0800c100
 80056a4:	0800c024 	.word	0x0800c024
 80056a8:	453b8000 	.word	0x453b8000
 80056ac:	00000000 	.word	0x00000000
 80056b0:	0800c034 	.word	0x0800c034
 80056b4:	0800c044 	.word	0x0800c044

080056b8 <_ZppR33Initialize_Parameters_Screen_Typei>:
Initialize_Parameters_Screen_Type operator++(Initialize_Parameters_Screen_Type& screen, int) {
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
    Initialize_Parameters_Screen_Type current = screen;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	73fb      	strb	r3, [r7, #15]

    if (screen == SET_TIME_SCREEN) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d103      	bne.n	80056d8 <_ZppR33Initialize_Parameters_Screen_Typei+0x20>
        screen = SET_POWER_SCREEN;  // loop back to the start if at the end
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e005      	b.n	80056e4 <_ZppR33Initialize_Parameters_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Initialize_Parameters_Screen_Type>(static_cast<int>(screen) + 1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <_ZmmR33Initialize_Parameters_Screen_Typei>:

Initialize_Parameters_Screen_Type operator--(Initialize_Parameters_Screen_Type& screen, int) {
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
    Initialize_Parameters_Screen_Type current = screen;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	73fb      	strb	r3, [r7, #15]

    if (screen == SET_POWER_SCREEN) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <_ZmmR33Initialize_Parameters_Screen_Typei+0x20>
        screen = SET_TIME_SCREEN;  // loop back to the end if at the start
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e005      	b.n	800571e <_ZmmR33Initialize_Parameters_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Initialize_Parameters_Screen_Type>(static_cast<int>(screen) - 1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	3b01      	subs	r3, #1
 8005718:	b2da      	uxtb	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix decrement
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <_ZppR21Power_Set_Screen_Typei>:

Power_Set_Screen_Type operator++(Power_Set_Screen_Type& screen, int) {
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
    Power_Set_Screen_Type current = screen;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	73fb      	strb	r3, [r7, #15]

    if (screen == Circle_50_Right_Power_Screen) {
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b04      	cmp	r3, #4
 8005742:	d103      	bne.n	800574c <_ZppR21Power_Set_Screen_Typei+0x20>
        screen = High_Power_Screen;  // loop back to the start if at the end
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e005      	b.n	8005758 <_ZppR21Power_Set_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Power_Set_Screen_Type>(static_cast<int>(screen) + 1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <_ZmmR21Power_Set_Screen_Typei>:

Power_Set_Screen_Type operator--(Power_Set_Screen_Type& screen, int) {
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
    Power_Set_Screen_Type current = screen;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	73fb      	strb	r3, [r7, #15]

    if (screen == High_Power_Screen) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <_ZmmR21Power_Set_Screen_Typei+0x20>
        screen = Circle_50_Left_Power_Screen;  // loop back to the end if at the start
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2203      	movs	r2, #3
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	e005      	b.n	8005792 <_ZmmR21Power_Set_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Power_Set_Screen_Type>(static_cast<int>(screen) - 1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	3b01      	subs	r3, #1
 800578c:	b2da      	uxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix decrement
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <_ZppR20Time_Set_Screen_Typei>:
    }

    return current; // Return old value for postfix decrement
}

Time_Set_Screen_Type operator++(Time_Set_Screen_Type& screen, int) {
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
    Time_Set_Screen_Type current = screen;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	73fb      	strb	r3, [r7, #15]

    if (screen == Rotation_120_Time_Screen) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d103      	bne.n	80057c0 <_ZppR20Time_Set_Screen_Typei+0x20>
        screen = Braking_Time_Screen;  // loop back to the start if at the end
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e005      	b.n	80057cc <_ZppR20Time_Set_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Time_Set_Screen_Type>(static_cast<int>(screen) + 1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix increment
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <_ZmmR20Time_Set_Screen_Typei>:

Time_Set_Screen_Type operator--(Time_Set_Screen_Type& screen, int) {
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
    Time_Set_Screen_Type current = screen;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	73fb      	strb	r3, [r7, #15]

    if (screen == Braking_Time_Screen) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <_ZmmR20Time_Set_Screen_Typei+0x20>
        screen = Power_100_Time_Screen;  // loop back to the end if at the start
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e005      	b.n	8005806 <_ZmmR20Time_Set_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Time_Set_Screen_Type>(static_cast<int>(screen) - 1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	3b01      	subs	r3, #1
 8005800:	b2da      	uxtb	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	701a      	strb	r2, [r3, #0]
    }

    return current; // Return old value for postfix decrement
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <_Z41__static_initialization_and_destruction_0ii>:
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d109      	bne.n	8005838 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582a:	4293      	cmp	r3, r2
 800582c:	d104      	bne.n	8005838 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800582e:	f7fc f993 	bl	8001b58 <HAL_GetTick>
 8005832:	4603      	mov	r3, r0
 8005834:	4a02      	ldr	r2, [pc, #8]	; (8005840 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200003f4 	.word	0x200003f4

08005844 <_GLOBAL__sub_I__ZN20InitializeParameters3runEv>:
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
 8005848:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800584c:	2001      	movs	r0, #1
 800584e:	f7ff ffe1 	bl	8005814 <_Z41__static_initialization_and_destruction_0ii>
 8005852:	bd80      	pop	{r7, pc}

08005854 <_ZN16StrategySelector3runEv>:
const StrategySelectoScreenrData selectorScreenData[] __attribute__((section(".rodata"))) = {
	{"Search And Attack", &Strategist::Strategy_Search_And_Attack},
};

void StrategySelector::run()
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	Strategy_Selector_Screen_Type screen = Search_And_Attack_Screen;
 800585c:	2300      	movs	r3, #0
 800585e:	757b      	strb	r3, [r7, #21]
	bool start = false;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
	while(true)
	{
		userInputs.readButtons();
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fecd 	bl	8007608 <_ZN10UserInputs11readButtonsEv>

		if(start)
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <_ZN16StrategySelector3runEv+0x42>
		{
			if(userInputs.isAnyKey()){
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f001 feed 	bl	8007658 <_ZN10UserInputs8isAnyKeyEv>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <_ZN16StrategySelector3runEv+0x36>
				start = false;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]
			}else{
				strategist.runCurrentSrategy();
			}
			continue;
 8005888:	e050      	b.n	800592c <_ZN16StrategySelector3runEv+0xd8>
				strategist.runCurrentSrategy();
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3310      	adds	r3, #16
 800588e:	4618      	mov	r0, r3
 8005890:	f000 ffd1 	bl	8006836 <_ZN10Strategist17runCurrentSrategyEv>
 8005894:	e7e6      	b.n	8005864 <_ZN16StrategySelector3runEv+0x10>
		}
		const uint8_t screenIndex = static_cast<int>(screen);
 8005896:	7d7b      	ldrb	r3, [r7, #21]
 8005898:	75bb      	strb	r3, [r7, #22]
		const StrategySelectoScreenrData screenData = selectorScreenData[screenIndex];
 800589a:	7dba      	ldrb	r2, [r7, #22]
 800589c:	4926      	ldr	r1, [pc, #152]	; (8005938 <_ZN16StrategySelector3runEv+0xe4>)
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	18ca      	adds	r2, r1, r3
 80058a8:	f107 0308 	add.w	r3, r7, #8
 80058ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80058ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		strategist.setStrategy(screenData.strategy);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f103 0010 	add.w	r0, r3, #16
 80058b8:	f107 030c 	add.w	r3, r7, #12
 80058bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80058c0:	f000 ffa5 	bl	800680e <_ZN10Strategist11setStrategyEMS_FvvE>
		Display_Title_Screen(screenData.title);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa38 	bl	8005d3c <_Z20Display_Title_ScreenPKc>

		if(userInputs.isReturnBackRequest()){
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fee3 	bl	800769c <_ZN10UserInputs19isReturnBackRequestEv>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d128      	bne.n	800592e <_ZN16StrategySelector3runEv+0xda>
			return;
		}
		if(userInputs.isBackRequest()){
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fef0 	bl	80076c6 <_ZN10UserInputs13isBackRequestEv>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <_ZN16StrategySelector3runEv+0xa4>
			screen--;
 80058ec:	f107 0315 	add.w	r3, r7, #21
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f83f 	bl	8005976 <_ZmmR29Strategy_Selector_Screen_Typei>
		}
		if(userInputs.isNextRequest()){
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 fefa 	bl	80076f6 <_ZN10UserInputs13isNextRequestEv>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <_ZN16StrategySelector3runEv+0xc0>
			screen++;
 8005908:	f107 0315 	add.w	r3, r7, #21
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f814 	bl	800593c <_ZppR29Strategy_Selector_Screen_Typei>
		}
		if(userInputs.isSetValueRequest()){
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f001 ff1b 	bl	8007754 <_ZN10UserInputs17isSetValueRequestEv>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d09f      	beq.n	8005864 <_ZN16StrategySelector3runEv+0x10>
			start = true;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
			Display_Clear();
 8005928:	f000 f8ee 	bl	8005b08 <_Z13Display_Clearv>
		}
	}
 800592c:	e79a      	b.n	8005864 <_ZN16StrategySelector3runEv+0x10>
			return;
 800592e:	bf00      	nop


}
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	0800c1c8 	.word	0x0800c1c8

0800593c <_ZppR29Strategy_Selector_Screen_Typei>:




inline Strategy_Selector_Screen_Type operator++(Strategy_Selector_Screen_Type& screen, int) {
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
	Strategy_Selector_Screen_Type original = screen;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	73fb      	strb	r3, [r7, #15]

    if (screen == Search_And_Attack_Screen) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d103      	bne.n	800595c <_ZppR29Strategy_Selector_Screen_Typei+0x20>
        screen = Search_And_Attack_Screen;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e005      	b.n	8005968 <_ZppR29Strategy_Selector_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Strategy_Selector_Screen_Type>(static_cast<int>(screen) + 1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	b2da      	uxtb	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	701a      	strb	r2, [r3, #0]
    }

    return original; // Return old value for postfix increment
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <_ZmmR29Strategy_Selector_Screen_Typei>:

inline Strategy_Selector_Screen_Type operator--(Strategy_Selector_Screen_Type& screen, int) {
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
	Strategy_Selector_Screen_Type original = screen;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	73fb      	strb	r3, [r7, #15]

    if (screen == Search_And_Attack_Screen) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d103      	bne.n	8005996 <_ZmmR29Strategy_Selector_Screen_Typei+0x20>
        screen = Search_And_Attack_Screen;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e005      	b.n	80059a2 <_ZmmR29Strategy_Selector_Screen_Typei+0x2c>
    } else {
        screen = static_cast<Strategy_Selector_Screen_Type>(static_cast<int>(screen) - 1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	b2da      	uxtb	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	701a      	strb	r2, [r3, #0]
    }
    return original;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <_ZN10MathHelper19linearInterpolationEfffff>:
 * @param x2 The x-coordinate of the second point.
 * @param y2 The y-coordinate of the second point.
 * @param x  The x value for which the y value is to be interpolated.
 * @return   The interpolated y value corresponding to the provided x.
 */
float MathHelper::linearInterpolation(float x1, float y1, float x2, float y2, float x){
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80059ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80059be:	ed87 1a03 	vstr	s2, [r7, #12]
 80059c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80059c6:	ed87 2a01 	vstr	s4, [r7, #4]
	   // Handling the case where x1 is equal to x2 to prevent division by zero
		if (x1 == x2) {
 80059ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80059ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80059d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80059d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059da:	d10a      	bne.n	80059f2 <_ZN10MathHelper19linearInterpolationEfffff+0x42>
			return (y1 + y2) / 2.0f; // Return average of y1 and y2
 80059dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80059e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80059e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80059ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059f0:	e019      	b.n	8005a26 <_ZN10MathHelper19linearInterpolationEfffff+0x76>
		}
		return y1 + (x - x1) * (y2 - y1) / (x2 - x1);
 80059f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80059f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80059fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059fe:	edd7 6a02 	vldr	s13, [r7, #8]
 8005a02:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005a0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a22:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005a26:	eeb0 0a67 	vmov.f32	s0, s15
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_ZN10MathHelper13normalizeDataEfff>:
 * @param data     The data value to be normalized.
 * @param minRange The minimum bound for normalization.
 * @param maxRange The maximum bound for normalization.
 * @return         The normalized data value between 0 and 1.
 */
float MathHelper::normalizeData(float data, float minRange, float maxRange){
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a42:	ed87 1a01 	vstr	s2, [r7, #4]
	if(maxRange == minRange)
 8005a46:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8005a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a56:	d102      	bne.n	8005a5e <_ZN10MathHelper13normalizeDataEfff+0x2a>
		return 0;
 8005a58:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005aa4 <_ZN10MathHelper13normalizeDataEfff+0x70>
 8005a5c:	e01b      	b.n	8005a96 <_ZN10MathHelper13normalizeDataEfff+0x62>
	data = constraintData(data, minRange, maxRange);
 8005a5e:	ed97 1a01 	vldr	s2, [r7, #4]
 8005a62:	edd7 0a02 	vldr	s1, [r7, #8]
 8005a66:	ed97 0a03 	vldr	s0, [r7, #12]
 8005a6a:	f000 f81d 	bl	8005aa8 <_ZN10MathHelper14constraintDataEfff>
 8005a6e:	ed87 0a03 	vstr	s0, [r7, #12]
	data -= minRange;
 8005a72:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a7e:	edc7 7a03 	vstr	s15, [r7, #12]
	return data / (maxRange - minRange);
 8005a82:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a86:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a92:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8005a96:	eef0 7a66 	vmov.f32	s15, s13
 8005a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	00000000 	.word	0x00000000

08005aa8 <_ZN10MathHelper14constraintDataEfff>:
 * @param data     The data value to be constrained.
 * @param minLimit The minimum allowable value for the data.
 * @param maxLimit The maximum allowable value for the data.
 * @return         The constrained data value.
 */
float MathHelper::constraintData(float data, float minLimit, float maxLimit){
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ab2:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ab6:	ed87 1a01 	vstr	s2, [r7, #4]
	if(data < minLimit)
 8005aba:	ed97 7a03 	vldr	s14, [r7, #12]
 8005abe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	d501      	bpl.n	8005ad0 <_ZN10MathHelper14constraintDataEfff+0x28>
		return  minLimit;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	e00b      	b.n	8005ae8 <_ZN10MathHelper14constraintDataEfff+0x40>
	if(data > maxLimit)
 8005ad0:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	dd01      	ble.n	8005ae6 <_ZN10MathHelper14constraintDataEfff+0x3e>
		return maxLimit;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	e000      	b.n	8005ae8 <_ZN10MathHelper14constraintDataEfff+0x40>
	return data;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
}
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eeb0 0a67 	vmov.f32	s0, s15
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <_Z15Draw_Full_Blackv>:
#include "stdio.h"
#include "string.h"
#include <cmath>
#include <inttypes.h>

void Draw_Full_Black(){
 8005afa:	b580      	push	{r7, lr}
 8005afc:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8005afe:	2000      	movs	r0, #0
 8005b00:	f002 f970 	bl	8007de4 <ssd1306_Fill>
}
 8005b04:	bf00      	nop
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <_Z13Display_Clearv>:
void Display_Clear(){
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f002 f969 	bl	8007de4 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8005b12:	f002 f98b 	bl	8007e2c <ssd1306_UpdateScreen>
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <_Z12Display_Initv>:

void Display_Init(){
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8005b1e:	f002 f8f7 	bl	8007d10 <ssd1306_Init>
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <_Z16Draw_Center_TextPKcP7FontDeft>:

void Draw_Center_Text(const char *text, FontDef* font, uint16_t height){
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b096      	sub	sp, #88	; 0x58
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
	uint16_t length = strlen(text);
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7fa fbba 	bl	80002b0 <strlen>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t textWidth = length * font->FontWidth;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005b4c:	fb12 f303 	smulbb	r3, r2, r3
 8005b50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if(textWidth <= SSD1306_WIDTH) {
 8005b54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d824      	bhi.n	8005ba6 <_Z16Draw_Center_TextPKcP7FontDeft+0x7e>
    	uint16_t startX = (SSD1306_WIDTH - textWidth) / 2;
 8005b5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005b64:	0fda      	lsrs	r2, r3, #31
 8005b66:	4413      	add	r3, r2
 8005b68:	105b      	asrs	r3, r3, #1
 8005b6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    	ssd1306_SetCursor (startX, height);
 8005b6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	88fa      	ldrh	r2, [r7, #6]
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f002 fa80 	bl	8008080 <ssd1306_SetCursor>
    	ssd1306_WriteString(text, *font, White);
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	2301      	movs	r3, #1
 8005b84:	ca06      	ldmia	r2, {r1, r2}
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f002 fa54 	bl	8008034 <ssd1306_WriteString>
    	ssd1306_SetCursor (0, height + font->FontHeight + 1);
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	4413      	add	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f002 fa6e 	bl	8008080 <ssd1306_SetCursor>

    	}else{
        	Draw_Left_Text(text, font, height);
    	}
    }
}
 8005ba4:	e060      	b.n	8005c68 <_Z16Draw_Center_TextPKcP7FontDeft+0x140>
    	const char* secondText = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	657b      	str	r3, [r7, #84]	; 0x54
    	const char *p = text + length/2;
 8005baa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
    	for(uint8_t i = 0; i < length /2 - length % 2 ;i++){
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8005bc0:	e020      	b.n	8005c04 <_Z16Draw_Center_TextPKcP7FontDeft+0xdc>
    		if(*(p + i) == ' '){
 8005bc2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc8:	4413      	add	r3, r2
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d105      	bne.n	8005bdc <_Z16Draw_Center_TextPKcP7FontDeft+0xb4>
    			secondText = p + i;
 8005bd0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd6:	4413      	add	r3, r2
 8005bd8:	657b      	str	r3, [r7, #84]	; 0x54
    			break;
 8005bda:	e021      	b.n	8005c20 <_Z16Draw_Center_TextPKcP7FontDeft+0xf8>
    		}else if(*(p - i) == ' '){
 8005bdc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005be0:	425b      	negs	r3, r3
 8005be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be4:	4413      	add	r3, r2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d106      	bne.n	8005bfa <_Z16Draw_Center_TextPKcP7FontDeft+0xd2>
    			secondText = p - i;
 8005bec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005bf0:	425b      	negs	r3, r3
 8005bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf4:	4413      	add	r3, r2
 8005bf6:	657b      	str	r3, [r7, #84]	; 0x54
    			break;
 8005bf8:	e012      	b.n	8005c20 <_Z16Draw_Center_TextPKcP7FontDeft+0xf8>
    	for(uint8_t i = 0; i < length /2 - length % 2 ;i++){
 8005bfa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8005c04:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8005c08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4619      	mov	r1, r3
 8005c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	1acb      	subs	r3, r1, r3
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	dbd0      	blt.n	8005bc2 <_Z16Draw_Center_TextPKcP7FontDeft+0x9a>
    	if(secondText != NULL){
 8005c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01a      	beq.n	8005c5c <_Z16Draw_Center_TextPKcP7FontDeft+0x134>
    		int k = secondText - text;
 8005c26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	647b      	str	r3, [r7, #68]	; 0x44
    		sprintf(firstText, "%.*s", k, text);
 8005c2e:	f107 0010 	add.w	r0, r7, #16
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c36:	490e      	ldr	r1, [pc, #56]	; (8005c70 <_Z16Draw_Center_TextPKcP7FontDeft+0x148>)
 8005c38:	f003 ff82 	bl	8009b40 <siprintf>
    		Draw_Center_Text(firstText, font, height);
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	f107 0310 	add.w	r3, r7, #16
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff ff6f 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
    		Draw_Center_Text(secondText + 1, font, SSD1306.CurrentY);
 8005c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <_Z16Draw_Center_TextPKcP7FontDeft+0x14c>)
 8005c50:	8852      	ldrh	r2, [r2, #2]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff67 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
}
 8005c5a:	e005      	b.n	8005c68 <_Z16Draw_Center_TextPKcP7FontDeft+0x140>
        	Draw_Left_Text(text, font, height);
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f808 	bl	8005c78 <_Z14Draw_Left_TextPKcP7FontDeft>
}
 8005c68:	bf00      	nop
 8005c6a:	3758      	adds	r7, #88	; 0x58
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	0800c1d4 	.word	0x0800c1d4
 8005c74:	20000804 	.word	0x20000804

08005c78 <_Z14Draw_Left_TextPKcP7FontDeft>:

void Draw_Left_Text(const char *text, FontDef* font, uint16_t height){
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
	ssd1306_SetCursor (0, height);
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f002 f9f7 	bl	8008080 <ssd1306_SetCursor>
	ssd1306_WriteString(text, *font, White);
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	2301      	movs	r3, #1
 8005c96:	ca06      	ldmia	r2, {r1, r2}
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f002 f9cb 	bl	8008034 <ssd1306_WriteString>
	ssd1306_SetCursor (0, height + font->FontHeight + 1);
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	3301      	adds	r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f002 f9e5 	bl	8008080 <ssd1306_SetCursor>
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <_Z15Draw_Right_TextPKcP7FontDeft>:

void Draw_Right_Text(const char *text, FontDef* font, uint16_t height){
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	80fb      	strh	r3, [r7, #6]
	uint16_t length = strlen(text);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7fa faef 	bl	80002b0 <strlen>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	82fb      	strh	r3, [r7, #22]
	uint16_t textWidth = length * font->FontWidth;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8afa      	ldrh	r2, [r7, #22]
 8005cde:	fb12 f303 	smulbb	r3, r2, r3
 8005ce2:	82bb      	strh	r3, [r7, #20]
	if(textWidth <= SSD1306_WIDTH){
 8005ce4:	8abb      	ldrh	r3, [r7, #20]
 8005ce6:	2b80      	cmp	r3, #128	; 0x80
 8005ce8:	d81e      	bhi.n	8005d28 <_Z15Draw_Right_TextPKcP7FontDeft+0x6a>
		uint16_t startX = (SSD1306_WIDTH - textWidth -1);
 8005cea:	8abb      	ldrh	r3, [r7, #20]
 8005cec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8005cf0:	827b      	strh	r3, [r7, #18]
		ssd1306_SetCursor (startX, height);
 8005cf2:	8a7b      	ldrh	r3, [r7, #18]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f002 f9bf 	bl	8008080 <ssd1306_SetCursor>
		ssd1306_WriteString(text, *font, White);
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	2301      	movs	r3, #1
 8005d06:	ca06      	ldmia	r2, {r1, r2}
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f002 f993 	bl	8008034 <ssd1306_WriteString>
		ssd1306_SetCursor (0, height + font->FontHeight + 1);
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	4413      	add	r3, r2
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	4619      	mov	r1, r3
 8005d20:	2000      	movs	r0, #0
 8005d22:	f002 f9ad 	bl	8008080 <ssd1306_SetCursor>

	}else{
		Draw_Left_Text(text, font, height);
	}
}
 8005d26:	e005      	b.n	8005d34 <_Z15Draw_Right_TextPKcP7FontDeft+0x76>
		Draw_Left_Text(text, font, height);
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff ffa2 	bl	8005c78 <_Z14Draw_Left_TextPKcP7FontDeft>
}
 8005d34:	bf00      	nop
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_Z20Display_Title_ScreenPKc>:

void Display_Title_Screen(const char * title){
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	Draw_Full_Black();
 8005d44:	f7ff fed9 	bl	8005afa <_Z15Draw_Full_Blackv>

	Draw_Center_Text((char *)"Start", &Font_7x10, 0);
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4911      	ldr	r1, [pc, #68]	; (8005d90 <_Z20Display_Title_ScreenPKc+0x54>)
 8005d4c:	4811      	ldr	r0, [pc, #68]	; (8005d94 <_Z20Display_Title_ScreenPKc+0x58>)
 8005d4e:	f7ff feeb 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	Draw_Center_Text(title, &Font_11x18, SSD1306.CurrentY);
 8005d52:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <_Z20Display_Title_ScreenPKc+0x5c>)
 8005d54:	885b      	ldrh	r3, [r3, #2]
 8005d56:	461a      	mov	r2, r3
 8005d58:	4910      	ldr	r1, [pc, #64]	; (8005d9c <_Z20Display_Title_ScreenPKc+0x60>)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fee4 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	uint16_t yPosition = Display_Get_Bottom_YPosition(&Font_7x10);
 8005d60:	480b      	ldr	r0, [pc, #44]	; (8005d90 <_Z20Display_Title_ScreenPKc+0x54>)
 8005d62:	f000 fb09 	bl	8006378 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 8005d66:	4603      	mov	r3, r0
 8005d68:	81fb      	strh	r3, [r7, #14]

	Draw_Left_Text ((char *)"<Back", &Font_7x10, yPosition);
 8005d6a:	89fb      	ldrh	r3, [r7, #14]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4908      	ldr	r1, [pc, #32]	; (8005d90 <_Z20Display_Title_ScreenPKc+0x54>)
 8005d70:	480b      	ldr	r0, [pc, #44]	; (8005da0 <_Z20Display_Title_ScreenPKc+0x64>)
 8005d72:	f7ff ff81 	bl	8005c78 <_Z14Draw_Left_TextPKcP7FontDeft>

	Draw_Right_Text ((char *)"Next>", &Font_7x10, yPosition);
 8005d76:	89fb      	ldrh	r3, [r7, #14]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4905      	ldr	r1, [pc, #20]	; (8005d90 <_Z20Display_Title_ScreenPKc+0x54>)
 8005d7c:	4809      	ldr	r0, [pc, #36]	; (8005da4 <_Z20Display_Title_ScreenPKc+0x68>)
 8005d7e:	f7ff ff9e 	bl	8005cbe <_Z15Draw_Right_TextPKcP7FontDeft>

	ssd1306_UpdateScreen();
 8005d82:	f002 f853 	bl	8007e2c <ssd1306_UpdateScreen>
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000030 	.word	0x20000030
 8005d94:	0800c1dc 	.word	0x0800c1dc
 8005d98:	20000804 	.word	0x20000804
 8005d9c:	20000038 	.word	0x20000038
 8005da0:	0800c1e4 	.word	0x0800c1e4
 8005da4:	0800c1ec 	.word	0x0800c1ec

08005da8 <_Z26Display_Small_Title_ScreenPKc>:

void Display_Small_Title_Screen(const char*  title){
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	Draw_Full_Black();
 8005db0:	f7ff fea3 	bl	8005afa <_Z15Draw_Full_Blackv>

	Draw_Center_Text((char *)"Start", &Font_7x10, 0);
 8005db4:	2200      	movs	r2, #0
 8005db6:	4911      	ldr	r1, [pc, #68]	; (8005dfc <_Z26Display_Small_Title_ScreenPKc+0x54>)
 8005db8:	4811      	ldr	r0, [pc, #68]	; (8005e00 <_Z26Display_Small_Title_ScreenPKc+0x58>)
 8005dba:	f7ff feb5 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	Draw_Center_Text(title, &Font_7x10, SSD1306.CurrentY);
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <_Z26Display_Small_Title_ScreenPKc+0x5c>)
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	490d      	ldr	r1, [pc, #52]	; (8005dfc <_Z26Display_Small_Title_ScreenPKc+0x54>)
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff feae 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	uint16_t yPosition = Display_Get_Bottom_YPosition(&Font_7x10);
 8005dcc:	480b      	ldr	r0, [pc, #44]	; (8005dfc <_Z26Display_Small_Title_ScreenPKc+0x54>)
 8005dce:	f000 fad3 	bl	8006378 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	81fb      	strh	r3, [r7, #14]

	Draw_Left_Text ((char *)"<Back", &Font_7x10, yPosition);
 8005dd6:	89fb      	ldrh	r3, [r7, #14]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4908      	ldr	r1, [pc, #32]	; (8005dfc <_Z26Display_Small_Title_ScreenPKc+0x54>)
 8005ddc:	480a      	ldr	r0, [pc, #40]	; (8005e08 <_Z26Display_Small_Title_ScreenPKc+0x60>)
 8005dde:	f7ff ff4b 	bl	8005c78 <_Z14Draw_Left_TextPKcP7FontDeft>

	Draw_Right_Text ((char *)"Next>", &Font_7x10, yPosition);
 8005de2:	89fb      	ldrh	r3, [r7, #14]
 8005de4:	461a      	mov	r2, r3
 8005de6:	4905      	ldr	r1, [pc, #20]	; (8005dfc <_Z26Display_Small_Title_ScreenPKc+0x54>)
 8005de8:	4808      	ldr	r0, [pc, #32]	; (8005e0c <_Z26Display_Small_Title_ScreenPKc+0x64>)
 8005dea:	f7ff ff68 	bl	8005cbe <_Z15Draw_Right_TextPKcP7FontDeft>

	ssd1306_UpdateScreen();
 8005dee:	f002 f81d 	bl	8007e2c <ssd1306_UpdateScreen>
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000030 	.word	0x20000030
 8005e00:	0800c1dc 	.word	0x0800c1dc
 8005e04:	20000804 	.word	0x20000804
 8005e08:	0800c1e4 	.word	0x0800c1e4
 8005e0c:	0800c1ec 	.word	0x0800c1ec

08005e10 <_Z17Display_2_NumbersPKcff>:

void Display_2_Numbers(const char * title, float number1, float number2){
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	; 0x38
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e1c:	edc7 0a01 	vstr	s1, [r7, #4]
	char s[40];

	Draw_Full_Black();
 8005e20:	f7ff fe6b 	bl	8005afa <_Z15Draw_Full_Blackv>

	Draw_Center_Text(title, &Font_7x10, 0);
 8005e24:	2200      	movs	r2, #0
 8005e26:	4917      	ldr	r1, [pc, #92]	; (8005e84 <_Z17Display_2_NumbersPKcff+0x74>)
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff fe7d 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	sprintf(s,"%f", number1);
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f7fa fbaa 	bl	8000588 <__aeabi_f2d>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	f107 0010 	add.w	r0, r7, #16
 8005e3c:	4912      	ldr	r1, [pc, #72]	; (8005e88 <_Z17Display_2_NumbersPKcff+0x78>)
 8005e3e:	f003 fe7f 	bl	8009b40 <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <_Z17Display_2_NumbersPKcff+0x7c>)
 8005e44:	885a      	ldrh	r2, [r3, #2]
 8005e46:	f107 0310 	add.w	r3, r7, #16
 8005e4a:	490e      	ldr	r1, [pc, #56]	; (8005e84 <_Z17Display_2_NumbersPKcff+0x74>)
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fe6b 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>


	sprintf(s,"%f", number2);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fa fb98 	bl	8000588 <__aeabi_f2d>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	f107 0010 	add.w	r0, r7, #16
 8005e60:	4909      	ldr	r1, [pc, #36]	; (8005e88 <_Z17Display_2_NumbersPKcff+0x78>)
 8005e62:	f003 fe6d 	bl	8009b40 <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 8005e66:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <_Z17Display_2_NumbersPKcff+0x7c>)
 8005e68:	885a      	ldrh	r2, [r3, #2]
 8005e6a:	f107 0310 	add.w	r3, r7, #16
 8005e6e:	4905      	ldr	r1, [pc, #20]	; (8005e84 <_Z17Display_2_NumbersPKcff+0x74>)
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fe59 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	ssd1306_UpdateScreen();
 8005e76:	f001 ffd9 	bl	8007e2c <ssd1306_UpdateScreen>
}
 8005e7a:	bf00      	nop
 8005e7c:	3738      	adds	r7, #56	; 0x38
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000030 	.word	0x20000030
 8005e88:	0800c1f4 	.word	0x0800c1f4
 8005e8c:	20000804 	.word	0x20000804

08005e90 <_Z18Draw_3_Points_LinePbPKcS1_t>:


void Draw_3_Points_Line(bool t[3],const char* trueString,const  char*falseString,uint16_t height){
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	807b      	strh	r3, [r7, #2]
	if(t[0]){
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d006      	beq.n	8005eb4 <_Z18Draw_3_Points_LinePbPKcS1_t+0x24>
		Draw_Left_Text(trueString,&Font_7x10, height);
 8005ea6:	887b      	ldrh	r3, [r7, #2]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4919      	ldr	r1, [pc, #100]	; (8005f10 <_Z18Draw_3_Points_LinePbPKcS1_t+0x80>)
 8005eac:	68b8      	ldr	r0, [r7, #8]
 8005eae:	f7ff fee3 	bl	8005c78 <_Z14Draw_Left_TextPKcP7FontDeft>
 8005eb2:	e005      	b.n	8005ec0 <_Z18Draw_3_Points_LinePbPKcS1_t+0x30>
	}else{
		Draw_Left_Text(falseString, &Font_7x10, height);
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4915      	ldr	r1, [pc, #84]	; (8005f10 <_Z18Draw_3_Points_LinePbPKcS1_t+0x80>)
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fedc 	bl	8005c78 <_Z14Draw_Left_TextPKcP7FontDeft>
	}
	if(t[1]){
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <_Z18Draw_3_Points_LinePbPKcS1_t+0x48>
		Draw_Center_Text(trueString,&Font_7x10, height);
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4910      	ldr	r1, [pc, #64]	; (8005f10 <_Z18Draw_3_Points_LinePbPKcS1_t+0x80>)
 8005ed0:	68b8      	ldr	r0, [r7, #8]
 8005ed2:	f7ff fe29 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
 8005ed6:	e005      	b.n	8005ee4 <_Z18Draw_3_Points_LinePbPKcS1_t+0x54>
	}else{
		Draw_Center_Text(falseString, &Font_7x10, height);
 8005ed8:	887b      	ldrh	r3, [r7, #2]
 8005eda:	461a      	mov	r2, r3
 8005edc:	490c      	ldr	r1, [pc, #48]	; (8005f10 <_Z18Draw_3_Points_LinePbPKcS1_t+0x80>)
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fe22 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
	}
	if(t[2]){
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <_Z18Draw_3_Points_LinePbPKcS1_t+0x6c>
		Draw_Right_Text(trueString,&Font_7x10, height);
 8005eee:	887b      	ldrh	r3, [r7, #2]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4907      	ldr	r1, [pc, #28]	; (8005f10 <_Z18Draw_3_Points_LinePbPKcS1_t+0x80>)
 8005ef4:	68b8      	ldr	r0, [r7, #8]
 8005ef6:	f7ff fee2 	bl	8005cbe <_Z15Draw_Right_TextPKcP7FontDeft>
	}else{
		Draw_Right_Text(falseString, &Font_7x10, height);
	}

}
 8005efa:	e005      	b.n	8005f08 <_Z18Draw_3_Points_LinePbPKcS1_t+0x78>
		Draw_Right_Text(falseString, &Font_7x10, height);
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	461a      	mov	r2, r3
 8005f00:	4903      	ldr	r1, [pc, #12]	; (8005f10 <_Z18Draw_3_Points_LinePbPKcS1_t+0x80>)
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fedb 	bl	8005cbe <_Z15Draw_Right_TextPKcP7FontDeft>
}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000030 	.word	0x20000030

08005f14 <_Z27Display_Enemy_Sensors_VotesPa>:
//		strcat(s, temp);
//	}
//	strcpy(s,"");
//}

void Display_Enemy_Sensors_Votes(int8_t votes[EnemyPosition::KNOWN_POSITIONS_NO]){
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	; 0x30
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	FontDef font = Font_6x8;
 8005f1c:	4a41      	ldr	r2, [pc, #260]	; (8006024 <_Z27Display_Enemy_Sensors_VotesPa+0x110>)
 8005f1e:	f107 030c 	add.w	r3, r7, #12
 8005f22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f26:	e883 0003 	stmia.w	r3, {r0, r1}
	Draw_Full_Black();
 8005f2a:	f7ff fde6 	bl	8005afa <_Z15Draw_Full_Blackv>
	float hDistance = SSD1306_HEIGHT;
 8005f2e:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
	hDistance/= EnemyPosition::PROXIMITY_NO;
 8005f34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005f38:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8005f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f40:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float wDistance = SSD1306_WIDTH;
 8005f44:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
	wDistance /= EnemyPosition::DIRECTIONS_NO;
 8005f4a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005f4e:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8005f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float rowHeight = 2;
 8005f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f5e:	623b      	str	r3, [r7, #32]



	for(uint8_t id = 0; id <EnemyPosition::KNOWN_POSITIONS_NO; id++)
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f66:	e052      	b.n	800600e <_Z27Display_Enemy_Sensors_VotesPa+0xfa>
	{
		EnemyPosition pos(id);
 8005f68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005f6c:	f107 0308 	add.w	r3, r7, #8
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fc64 	bl	8007840 <_ZN13EnemyPositionC1Eh>
		uint8_t x = pos.direction * wDistance;
 8005f78:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f90:	edc7 7a00 	vstr	s15, [r7]
 8005f94:	783b      	ldrb	r3, [r7, #0]
 8005f96:	77fb      	strb	r3, [r7, #31]
		float yBase = (EnemyPosition::PROXIMITY_NO - pos.proximity -1) * hDistance;
 8005f98:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005f9c:	f1c3 0302 	rsb	r3, r3, #2
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fa8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb0:	edc7 7a06 	vstr	s15, [r7, #24]
		uint8_t y = yBase + pos.getDistanceFromCenterDirection() * rowHeight;
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fcee 	bl	800799a <_ZN13EnemyPosition30getDistanceFromCenterDirectionEv>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fdc:	edc7 7a00 	vstr	s15, [r7]
 8005fe0:	783b      	ldrb	r3, [r7, #0]
 8005fe2:	75fb      	strb	r3, [r7, #23]

		ssd1306_SetCursor((uint8_t)x, (uint8_t) y);
 8005fe4:	7dfa      	ldrb	r2, [r7, #23]
 8005fe6:	7ffb      	ldrb	r3, [r7, #31]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f002 f848 	bl	8008080 <ssd1306_SetCursor>
		ssd1306_WriteChar('a' + id, font, White);
 8005ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ff4:	3361      	adds	r3, #97	; 0x61
 8005ff6:	b2d8      	uxtb	r0, r3
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f107 020c 	add.w	r2, r7, #12
 8005ffe:	ca06      	ldmia	r2, {r1, r2}
 8006000:	f001 ff90 	bl	8007f24 <ssd1306_WriteChar>
	for(uint8_t id = 0; id <EnemyPosition::KNOWN_POSITIONS_NO; id++)
 8006004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006008:	3301      	adds	r3, #1
 800600a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800600e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006012:	2b1f      	cmp	r3, #31
 8006014:	d9a8      	bls.n	8005f68 <_Z27Display_Enemy_Sensors_VotesPa+0x54>
	}
	ssd1306_UpdateScreen();
 8006016:	f001 ff09 	bl	8007e2c <ssd1306_UpdateScreen>

}
 800601a:	bf00      	nop
 800601c:	3730      	adds	r7, #48	; 0x30
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000028 	.word	0x20000028

08006028 <_Z23Display_N_Values_ScreenPhh>:



void Display_N_Values_Screen(uint8_t *values, uint8_t valuesNo){
 8006028:	b5b0      	push	{r4, r5, r7, lr}
 800602a:	b09a      	sub	sp, #104	; 0x68
 800602c:	af02      	add	r7, sp, #8
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
	Draw_Full_Black();
 8006034:	f7ff fd61 	bl	8005afa <_Z15Draw_Full_Blackv>
	ssd1306_SetCursor (0, 0);
 8006038:	2100      	movs	r1, #0
 800603a:	2000      	movs	r0, #0
 800603c:	f002 f820 	bl	8008080 <ssd1306_SetCursor>
	for(uint8_t i = 0; i < valuesNo; i+=2)
 8006040:	2300      	movs	r3, #0
 8006042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006046:	e026      	b.n	8006096 <_Z23Display_N_Values_ScreenPhh+0x6e>
	{
		char s[80];
		sprintf(s, "s%d = %d, s%d =%d", i, values[i],i+1,values[i+1]);
 8006048:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 800604c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	4413      	add	r3, r2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	461d      	mov	r5, r3
 8006058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800605c:	3301      	adds	r3, #1
 800605e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006062:	3201      	adds	r2, #1
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	440a      	add	r2, r1
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	f107 000c 	add.w	r0, r7, #12
 800606e:	9201      	str	r2, [sp, #4]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	462b      	mov	r3, r5
 8006074:	4622      	mov	r2, r4
 8006076:	490d      	ldr	r1, [pc, #52]	; (80060ac <_Z23Display_N_Values_ScreenPhh+0x84>)
 8006078:	f003 fd62 	bl	8009b40 <siprintf>
		Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <_Z23Display_N_Values_ScreenPhh+0x88>)
 800607e:	885a      	ldrh	r2, [r3, #2]
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	490b      	ldr	r1, [pc, #44]	; (80060b4 <_Z23Display_N_Values_ScreenPhh+0x8c>)
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fd4e 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
	for(uint8_t i = 0; i < valuesNo; i+=2)
 800608c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006090:	3302      	adds	r3, #2
 8006092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006096:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	429a      	cmp	r2, r3
 800609e:	d3d3      	bcc.n	8006048 <_Z23Display_N_Values_ScreenPhh+0x20>
	}

	ssd1306_UpdateScreen();
 80060a0:	f001 fec4 	bl	8007e2c <ssd1306_UpdateScreen>
}
 80060a4:	bf00      	nop
 80060a6:	3760      	adds	r7, #96	; 0x60
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bdb0      	pop	{r4, r5, r7, pc}
 80060ac:	0800c248 	.word	0x0800c248
 80060b0:	20000804 	.word	0x20000804
 80060b4:	20000030 	.word	0x20000030

080060b8 <_Z28Display_Line_Position_Screen12LinePositionhhPKc>:

void Display_Line_Position_Screen(LinePosition lineOutput,uint8_t whiteFilter, uint8_t darkFilter,const  char *descrition){
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b094      	sub	sp, #80	; 0x50
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	72fb      	strb	r3, [r7, #11]
 80060c6:	4613      	mov	r3, r2
 80060c8:	72bb      	strb	r3, [r7, #10]
	char X[] = "X";
 80060ca:	2358      	movs	r3, #88	; 0x58
 80060cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	char O[] = "O";
 80060d0:	234f      	movs	r3, #79	; 0x4f
 80060d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	char s[40];



	Draw_Full_Black();
 80060d6:	f7ff fd10 	bl	8005afa <_Z15Draw_Full_Blackv>

	bool values1[] = {lineOutput.isFrontLeft(),lineOutput.isFront(), lineOutput.isFrontRight()};
 80060da:	f107 030c 	add.w	r3, r7, #12
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fd1f 	bl	8007b22 <_ZNK12LinePosition11isFrontLeftEv>
 80060e4:	4603      	mov	r3, r0
 80060e6:	773b      	strb	r3, [r7, #28]
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 fd29 	bl	8007b44 <_ZNK12LinePosition7isFrontEv>
 80060f2:	4603      	mov	r3, r0
 80060f4:	777b      	strb	r3, [r7, #29]
 80060f6:	f107 030c 	add.w	r3, r7, #12
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fd33 	bl	8007b66 <_ZNK12LinePosition12isFrontRightEv>
 8006100:	4603      	mov	r3, r0
 8006102:	77bb      	strb	r3, [r7, #30]
	bool values2[] = {lineOutput.isLeft(),lineOutput.isNone(), lineOutput.isRight()};
 8006104:	f107 030c 	add.w	r3, r7, #12
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fd70 	bl	8007bee <_ZNK12LinePosition6isLeftEv>
 800610e:	4603      	mov	r3, r0
 8006110:	763b      	strb	r3, [r7, #24]
 8006112:	f107 030c 	add.w	r3, r7, #12
 8006116:	4618      	mov	r0, r3
 8006118:	f001 fd8b 	bl	8007c32 <_ZNK12LinePosition6isNoneEv>
 800611c:	4603      	mov	r3, r0
 800611e:	767b      	strb	r3, [r7, #25]
 8006120:	f107 030c 	add.w	r3, r7, #12
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fd73 	bl	8007c10 <_ZNK12LinePosition7isRightEv>
 800612a:	4603      	mov	r3, r0
 800612c:	76bb      	strb	r3, [r7, #26]
	bool values3[] = {lineOutput.isBackLeft(),lineOutput.isBack(), lineOutput.isBackRight()};
 800612e:	f107 030c 	add.w	r3, r7, #12
 8006132:	4618      	mov	r0, r3
 8006134:	f001 fd28 	bl	8007b88 <_ZNK12LinePosition10isBackLeftEv>
 8006138:	4603      	mov	r3, r0
 800613a:	753b      	strb	r3, [r7, #20]
 800613c:	f107 030c 	add.w	r3, r7, #12
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fd32 	bl	8007baa <_ZNK12LinePosition6isBackEv>
 8006146:	4603      	mov	r3, r0
 8006148:	757b      	strb	r3, [r7, #21]
 800614a:	f107 030c 	add.w	r3, r7, #12
 800614e:	4618      	mov	r0, r3
 8006150:	f001 fd3c 	bl	8007bcc <_ZNK12LinePosition11isBackRightEv>
 8006154:	4603      	mov	r3, r0
 8006156:	75bb      	strb	r3, [r7, #22]
	Draw_3_Points_Line(values1, X, O, 0);
 8006158:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800615c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006160:	f107 001c 	add.w	r0, r7, #28
 8006164:	2300      	movs	r3, #0
 8006166:	f7ff fe93 	bl	8005e90 <_Z18Draw_3_Points_LinePbPKcS1_t>

	sprintf(s,"white = %d", whiteFilter);
 800616a:	7afa      	ldrb	r2, [r7, #11]
 800616c:	f107 0320 	add.w	r3, r7, #32
 8006170:	4920      	ldr	r1, [pc, #128]	; (80061f4 <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x13c>)
 8006172:	4618      	mov	r0, r3
 8006174:	f003 fce4 	bl	8009b40 <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 8006178:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x140>)
 800617a:	885a      	ldrh	r2, [r3, #2]
 800617c:	f107 0320 	add.w	r3, r7, #32
 8006180:	491e      	ldr	r1, [pc, #120]	; (80061fc <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x144>)
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fcd0 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
	Draw_3_Points_Line(values2, X, O,  SSD1306.CurrentY);
 8006188:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x140>)
 800618a:	885b      	ldrh	r3, [r3, #2]
 800618c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006190:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006194:	f107 0018 	add.w	r0, r7, #24
 8006198:	f7ff fe7a 	bl	8005e90 <_Z18Draw_3_Points_LinePbPKcS1_t>

	sprintf(s,"black = %d", darkFilter);
 800619c:	7aba      	ldrb	r2, [r7, #10]
 800619e:	f107 0320 	add.w	r3, r7, #32
 80061a2:	4917      	ldr	r1, [pc, #92]	; (8006200 <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x148>)
 80061a4:	4618      	mov	r0, r3
 80061a6:	f003 fccb 	bl	8009b40 <siprintf>
	Draw_Center_Text(s, &Font_7x10, SSD1306.CurrentY);
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x140>)
 80061ac:	885a      	ldrh	r2, [r3, #2]
 80061ae:	f107 0320 	add.w	r3, r7, #32
 80061b2:	4912      	ldr	r1, [pc, #72]	; (80061fc <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x144>)
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fcb7 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	if(descrition != NULL){
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x116>
		Draw_Center_Text(descrition, &Font_7x10, SSD1306.CurrentY);
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x140>)
 80061c2:	885b      	ldrh	r3, [r3, #2]
 80061c4:	461a      	mov	r2, r3
 80061c6:	490d      	ldr	r1, [pc, #52]	; (80061fc <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x144>)
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fcad 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
	}


	Draw_3_Points_Line(values3, X, O, Display_Get_Bottom_YPosition(&Font_7x10));
 80061ce:	480b      	ldr	r0, [pc, #44]	; (80061fc <_Z28Display_Line_Position_Screen12LinePositionhhPKc+0x144>)
 80061d0:	f000 f8d2 	bl	8006378 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80061de:	f107 0014 	add.w	r0, r7, #20
 80061e2:	f7ff fe55 	bl	8005e90 <_Z18Draw_3_Points_LinePbPKcS1_t>


	ssd1306_UpdateScreen();
 80061e6:	f001 fe21 	bl	8007e2c <ssd1306_UpdateScreen>
}
 80061ea:	bf00      	nop
 80061ec:	3750      	adds	r7, #80	; 0x50
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	0800c25c 	.word	0x0800c25c
 80061f8:	20000804 	.word	0x20000804
 80061fc:	20000030 	.word	0x20000030
 8006200:	0800c268 	.word	0x0800c268

08006204 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_>:
void Display_2_Power_And_Time_Screen(const char * title, int8_t leftPower, int8_t rightPower,int64_t time,const char * description){
 8006204:	b580      	push	{r7, lr}
 8006206:	b092      	sub	sp, #72	; 0x48
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
 8006210:	4613      	mov	r3, r2
 8006212:	70bb      	strb	r3, [r7, #2]
	char s[50];
	FontDef font = Font_7x10;
 8006214:	4a29      	ldr	r2, [pc, #164]	; (80062bc <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_+0xb8>)
 8006216:	f107 030c 	add.w	r3, r7, #12
 800621a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800621e:	e883 0003 	stmia.w	r3, {r0, r1}
	Draw_Full_Black();
 8006222:	f7ff fc6a 	bl	8005afa <_Z15Draw_Full_Blackv>
	Draw_Center_Text(title, &font, 0);
 8006226:	f107 030c 	add.w	r3, r7, #12
 800622a:	2200      	movs	r2, #0
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff fc7a 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	sprintf(s,"%d  %d",leftPower,rightPower);
 8006234:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8006238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800623c:	f107 0014 	add.w	r0, r7, #20
 8006240:	491f      	ldr	r1, [pc, #124]	; (80062c0 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_+0xbc>)
 8006242:	f003 fc7d 	bl	8009b40 <siprintf>
	Draw_Center_Text(s, &font, SSD1306.CurrentY + Font_7x10.FontHeight /2);
 8006246:	4b1f      	ldr	r3, [pc, #124]	; (80062c4 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_+0xc0>)
 8006248:	885a      	ldrh	r2, [r3, #2]
 800624a:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_+0xb8>)
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	b2db      	uxtb	r3, r3
 8006252:	b29b      	uxth	r3, r3
 8006254:	4413      	add	r3, r2
 8006256:	b29a      	uxth	r2, r3
 8006258:	f107 010c 	add.w	r1, r7, #12
 800625c:	f107 0314 	add.w	r3, r7, #20
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fc61 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	sprintf(s, "Timer = %ld" , (long int)time);
 8006266:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006268:	f107 0314 	add.w	r3, r7, #20
 800626c:	4916      	ldr	r1, [pc, #88]	; (80062c8 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_+0xc4>)
 800626e:	4618      	mov	r0, r3
 8006270:	f003 fc66 	bl	8009b40 <siprintf>
	Draw_Center_Text(s, &font, SSD1306.CurrentY + Font_7x10.FontHeight / 2);
 8006274:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_+0xc0>)
 8006276:	885a      	ldrh	r2, [r3, #2]
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <_Z31Display_2_Power_And_Time_ScreenPKcaaxS0_+0xb8>)
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	b29b      	uxth	r3, r3
 8006282:	4413      	add	r3, r2
 8006284:	b29a      	uxth	r2, r3
 8006286:	f107 010c 	add.w	r1, r7, #12
 800628a:	f107 0314 	add.w	r3, r7, #20
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fc4a 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	Draw_Center_Text(description, &font, Display_Get_Bottom_YPosition(&font));
 8006294:	f107 030c 	add.w	r3, r7, #12
 8006298:	4618      	mov	r0, r3
 800629a:	f000 f86d 	bl	8006378 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	4619      	mov	r1, r3
 80062a8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80062aa:	f7ff fc3d 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
	ssd1306_UpdateScreen();
 80062ae:	f001 fdbd 	bl	8007e2c <ssd1306_UpdateScreen>
}
 80062b2:	bf00      	nop
 80062b4:	3748      	adds	r7, #72	; 0x48
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000030 	.word	0x20000030
 80062c0:	0800c274 	.word	0x0800c274
 80062c4:	20000804 	.word	0x20000804
 80062c8:	0800c27c 	.word	0x0800c27c

080062cc <_Z22Display_2_Power_ScreenPKcaaS0_>:

void Display_2_Power_Screen(const char *title, int8_t leftPower, int8_t rightPower,const char * description)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b094      	sub	sp, #80	; 0x50
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	72fb      	strb	r3, [r7, #11]
 80062da:	4613      	mov	r3, r2
 80062dc:	72bb      	strb	r3, [r7, #10]
	char s[50];
	FontDef font = Font_7x10;
 80062de:	4a1e      	ldr	r2, [pc, #120]	; (8006358 <_Z22Display_2_Power_ScreenPKcaaS0_+0x8c>)
 80062e0:	f107 0314 	add.w	r3, r7, #20
 80062e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062e8:	e883 0003 	stmia.w	r3, {r0, r1}
	Draw_Full_Black();
 80062ec:	f7ff fc05 	bl	8005afa <_Z15Draw_Full_Blackv>
	Draw_Center_Text(title, &font, 0);
 80062f0:	f107 0314 	add.w	r3, r7, #20
 80062f4:	2200      	movs	r2, #0
 80062f6:	4619      	mov	r1, r3
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fc15 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	sprintf(s,"%d  %d",leftPower,rightPower);
 80062fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8006302:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006306:	f107 001c 	add.w	r0, r7, #28
 800630a:	4914      	ldr	r1, [pc, #80]	; (800635c <_Z22Display_2_Power_ScreenPKcaaS0_+0x90>)
 800630c:	f003 fc18 	bl	8009b40 <siprintf>
	Draw_Center_Text(s, &font, SSD1306.CurrentY + Font_7x10.FontHeight /2);
 8006310:	4b13      	ldr	r3, [pc, #76]	; (8006360 <_Z22Display_2_Power_ScreenPKcaaS0_+0x94>)
 8006312:	885a      	ldrh	r2, [r3, #2]
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <_Z22Display_2_Power_ScreenPKcaaS0_+0x8c>)
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	b29b      	uxth	r3, r3
 800631e:	4413      	add	r3, r2
 8006320:	b29a      	uxth	r2, r3
 8006322:	f107 0114 	add.w	r1, r7, #20
 8006326:	f107 031c 	add.w	r3, r7, #28
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fbfc 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>

	Draw_Center_Text(description, &font, Display_Get_Bottom_YPosition(&font));
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	4618      	mov	r0, r3
 8006336:	f000 f81f 	bl	8006378 <_Z28Display_Get_Bottom_YPositionP7FontDef>
 800633a:	4603      	mov	r3, r0
 800633c:	461a      	mov	r2, r3
 800633e:	f107 0314 	add.w	r3, r7, #20
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fbef 	bl	8005b28 <_Z16Draw_Center_TextPKcP7FontDeft>
	ssd1306_UpdateScreen();
 800634a:	f001 fd6f 	bl	8007e2c <ssd1306_UpdateScreen>
}
 800634e:	bf00      	nop
 8006350:	3750      	adds	r7, #80	; 0x50
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000030 	.word	0x20000030
 800635c:	0800c274 	.word	0x0800c274
 8006360:	20000804 	.word	0x20000804

08006364 <_Z13Display_Errorv>:


void Display_Error(){
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
	Display_Title_Screen((char *)"Default Error");
 8006368:	4802      	ldr	r0, [pc, #8]	; (8006374 <_Z13Display_Errorv+0x10>)
 800636a:	f7ff fce7 	bl	8005d3c <_Z20Display_Title_ScreenPKc>
}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	0800c288 	.word	0x0800c288

08006378 <_Z28Display_Get_Bottom_YPositionP7FontDef>:


uint16_t Display_Get_Bottom_YPosition(FontDef* font){
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	return SSD1306_HEIGHT - font->FontHeight -1;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800638a:	b29b      	uxth	r3, r3
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <_Z11Motion_StopR5Motor>:
    .circleRight50RightPower = 30

};

void Motion_Stop(Motor& motor)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	motor.changePower(0, 0);
 80063a0:	2200      	movs	r2, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f002 fd30 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <_Z19Motion_Forward_HighR5Motor>:

void Motion_Forward_High(Motor& motor) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
    motor.changePower(powerLevels.highLeftPower, powerLevels.highRightPower);
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <_Z19Motion_Forward_HighR5Motor+0x24>)
 80063be:	f993 3000 	ldrsb.w	r3, [r3]
 80063c2:	4a05      	ldr	r2, [pc, #20]	; (80063d8 <_Z19Motion_Forward_HighR5Motor+0x24>)
 80063c4:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f002 fd1d 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	2000000c 	.word	0x2000000c

080063dc <_Z21Motion_Forward_MediumR5Motor>:

void Motion_Forward_Medium(Motor& motor) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    motor.changePower(powerLevels.mediumLeftPower, powerLevels.mediumRightPower);
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <_Z21Motion_Forward_MediumR5Motor+0x24>)
 80063e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80063ea:	4a05      	ldr	r2, [pc, #20]	; (8006400 <_Z21Motion_Forward_MediumR5Motor+0x24>)
 80063ec:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f002 fd09 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	2000000c 	.word	0x2000000c

08006404 <_Z18Motion_Forward_LowR5Motor>:

void Motion_Forward_Low(Motor& motor) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
    motor.changePower(powerLevels.lowLeftPower, powerLevels.lowRightPower);
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <_Z18Motion_Forward_LowR5Motor+0x24>)
 800640e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006412:	4a05      	ldr	r2, [pc, #20]	; (8006428 <_Z18Motion_Forward_LowR5Motor+0x24>)
 8006414:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f002 fcf5 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000000c 	.word	0x2000000c

0800642c <_Z20Motion_Backward_HighR5Motor>:

void Motion_Backward_Full(Motor& motor) {
    motor.changePower(-FULL_LEFT_POWER, -FULL_RIGHT_POWER);
}

void Motion_Backward_High(Motor& motor) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
    motor.changePower(-powerLevels.highLeftPower, -powerLevels.highRightPower);
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <_Z20Motion_Backward_HighR5Motor+0x34>)
 8006436:	f993 3000 	ldrsb.w	r3, [r3]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	425b      	negs	r3, r3
 800643e:	b2db      	uxtb	r3, r3
 8006440:	b25b      	sxtb	r3, r3
 8006442:	4a07      	ldr	r2, [pc, #28]	; (8006460 <_Z20Motion_Backward_HighR5Motor+0x34>)
 8006444:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	4252      	negs	r2, r2
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	b252      	sxtb	r2, r2
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f002 fcd9 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	2000000c 	.word	0x2000000c

08006464 <_Z24Motion_Rotate_Right_HighR5Motor>:

void Motion_Backward_Low(Motor& motor) {
    motor.changePower(-powerLevels.lowLeftPower, -powerLevels.lowRightPower);
}

void Motion_Rotate_Right_High(Motor& motor) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
    motor.changePower(powerLevels.highLeftPower, -powerLevels.highRightPower);
 800646c:	4b08      	ldr	r3, [pc, #32]	; (8006490 <_Z24Motion_Rotate_Right_HighR5Motor+0x2c>)
 800646e:	f993 3000 	ldrsb.w	r3, [r3]
 8006472:	4a07      	ldr	r2, [pc, #28]	; (8006490 <_Z24Motion_Rotate_Right_HighR5Motor+0x2c>)
 8006474:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	4252      	negs	r2, r2
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	b252      	sxtb	r2, r2
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f002 fcc1 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	2000000c 	.word	0x2000000c

08006494 <_Z23Motion_Rotate_Left_HighR5Motor>:

void Motion_Rotate_Left_High(Motor& motor) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
    motor.changePower(-powerLevels.highLeftPower, powerLevels.highRightPower);
 800649c:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <_Z23Motion_Rotate_Left_HighR5Motor+0x2c>)
 800649e:	f993 3000 	ldrsb.w	r3, [r3]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	425b      	negs	r3, r3
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	b25b      	sxtb	r3, r3
 80064aa:	4a05      	ldr	r2, [pc, #20]	; (80064c0 <_Z23Motion_Rotate_Left_HighR5Motor+0x2c>)
 80064ac:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 fca9 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	2000000c 	.word	0x2000000c

080064c4 <_Z22Motion_Circle_Right_50R5Motor>:

void Motion_Circle_Right_50(Motor& motor) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
    motor.changePower(powerLevels.highLeftPower, powerLevels.circleRight50RightPower);
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <_Z22Motion_Circle_Right_50R5Motor+0x24>)
 80064ce:	f993 3000 	ldrsb.w	r3, [r3]
 80064d2:	4a05      	ldr	r2, [pc, #20]	; (80064e8 <_Z22Motion_Circle_Right_50R5Motor+0x24>)
 80064d4:	f992 2007 	ldrsb.w	r2, [r2, #7]
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f002 fc95 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	2000000c 	.word	0x2000000c

080064ec <_Z21Motion_Circle_Left_50R5Motor>:

void Motion_Circle_Left_50(Motor& motor) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
    motor.changePower(powerLevels.circleLeft50LeftPower, powerLevels.highRightPower);
 80064f4:	4b06      	ldr	r3, [pc, #24]	; (8006510 <_Z21Motion_Circle_Left_50R5Motor+0x24>)
 80064f6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80064fa:	4a05      	ldr	r2, [pc, #20]	; (8006510 <_Z21Motion_Circle_Left_50R5Motor+0x24>)
 80064fc:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f002 fc81 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	2000000c 	.word	0x2000000c

08006514 <_Z26Timer_Get_Time_Passed_Fromm>:
inline int64_t Timer_Get_Time_Passed_From(uint32_t clock) {
 8006514:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
	int64_t time = clock;
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	2000      	movs	r0, #0
 8006522:	460a      	mov	r2, r1
 8006524:	4603      	mov	r3, r0
 8006526:	e9c7 2302 	strd	r2, r3, [r7, #8]
	time = Timer_Get_Now_Time() - time;
 800652a:	f7fe fa1d 	bl	8004968 <_Z18Timer_Get_Now_Timev>
 800652e:	4603      	mov	r3, r0
 8006530:	2200      	movs	r2, #0
 8006532:	461c      	mov	r4, r3
 8006534:	4615      	mov	r5, r2
 8006536:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653a:	ebb4 0802 	subs.w	r8, r4, r2
 800653e:	eb65 0903 	sbc.w	r9, r5, r3
 8006542:	e9c7 8902 	strd	r8, r9, [r7, #8]
	return time;
 8006546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006556 <_ZN12StateControlC1ERK16SensorsHubConfig>:

#include <state_control.h>
#include "timer.h"


StateControl:: StateControl(const SensorsHubConfig& config)
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
		: lineDetection(config.lineDetectionConfig),
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f002 faad 	bl	8008ac6 <_ZN13LineDetectionC1ERKNS_19LineDetectionConfigE>
		  enemyDetection(config.enemyDetectionConfig){
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	3324      	adds	r3, #36	; 0x24
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f001 ff06 	bl	800838a <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3358      	adds	r3, #88	; 0x58
 8006582:	4618      	mov	r0, r3
 8006584:	f001 fb77 	bl	8007c76 <_ZN5StateC1Ev>

}
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <_ZN12StateControl9configAllEv>:

void StateControl::configAll()
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
	lineDetection.config();
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4618      	mov	r0, r3
 800659e:	f002 faad 	bl	8008afc <_ZN13LineDetection6configEv>
	enemyDetection.config();
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3328      	adds	r3, #40	; 0x28
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 ff17 	bl	80083da <_ZN14EnemyDetection6configEv>
	setEnemyPosition(EnemyPosition::frontEnemyPosition());
 80065ac:	f001 fa57 	bl	8007a5e <_ZN13EnemyPosition18frontEnemyPositionEv>
 80065b0:	4603      	mov	r3, r0
 80065b2:	813b      	strh	r3, [r7, #8]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8a7 	bl	800670a <_ZN12StateControl16setEnemyPositionE13EnemyPosition>
	setLinePosition(LinePosition());
 80065bc:	f107 030c 	add.w	r3, r7, #12
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fa61 	bl	8007a88 <_ZN12LinePositionC1Ev>
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8ba 	bl	8006742 <_ZN12StateControl15setLinePositionE12LinePosition>
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <_ZN12StateControl17recalculateStatesEv>:

State StateControl::recalculateStates()
{
 80065d6:	b590      	push	{r4, r7, lr}
 80065d8:	b087      	sub	sp, #28
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
	///Manage Line Position
	LinePosition linePosition = lineDetection.readAndConvertToLinePosition();
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f002 fac8 	bl	8008b78 <_ZN13LineDetection28readAndConvertToLinePositionEv>
 80065e8:	4603      	mov	r3, r0
 80065ea:	60fb      	str	r3, [r7, #12]
	setLinePosition(linePosition);
 80065ec:	68f9      	ldr	r1, [r7, #12]
 80065ee:	6838      	ldr	r0, [r7, #0]
 80065f0:	f000 f8a7 	bl	8006742 <_ZN12StateControl15setLinePositionE12LinePosition>

	///Manage Enemy Position
	EnemyPosition enemyPosition = readAndGetMostVotedEnemyPosition();
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	f000 f82d 	bl	8006654 <_ZN12StateControl32readAndGetMostVotedEnemyPositionEv>
 80065fa:	4603      	mov	r3, r0
 80065fc:	813b      	strh	r3, [r7, #8]

	if(enemyPosition.isKnown()){
 80065fe:	f107 0308 	add.w	r3, r7, #8
 8006602:	4618      	mov	r0, r3
 8006604:	f001 f9f3 	bl	80079ee <_ZN13EnemyPosition7isKnownEv>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <_ZN12StateControl17recalculateStatesEv+0x42>
		setEnemyPosition(enemyPosition);
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	6838      	ldr	r0, [r7, #0]
 8006612:	f000 f87a 	bl	800670a <_ZN12StateControl16setEnemyPositionE13EnemyPosition>
 8006616:	e012      	b.n	800663e <_ZN12StateControl17recalculateStatesEv+0x68>
	}
	else{
		uint32_t lastModificationClock = state.enemyPositionClock;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661c:	617b      	str	r3, [r7, #20]
		uint32_t timePassed = Timer_Get_Time_Passed_From(lastModificationClock);
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7ff ff78 	bl	8006514 <_Z26Timer_Get_Time_Passed_Fromm>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4613      	mov	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
		if(timePassed > ENEMY_POSITION_EXPIRY_TIME){
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006632:	4293      	cmp	r3, r2
 8006634:	d903      	bls.n	800663e <_ZN12StateControl17recalculateStatesEv+0x68>
			setEnemyPosition(enemyPosition);
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	6838      	ldr	r0, [r7, #0]
 800663a:	f000 f866 	bl	800670a <_ZN12StateControl16setEnemyPositionE13EnemyPosition>
		}
	}
	return state;
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4614      	mov	r4, r2
 8006644:	3358      	adds	r3, #88	; 0x58
 8006646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	bd90      	pop	{r4, r7, pc}

08006654 <_ZN12StateControl32readAndGetMostVotedEnemyPositionEv>:

EnemyPosition StateControl::readAndGetMostVotedEnemyPosition(){
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	///Reading sensor Votes
	int8_t sensors_votes[EnemyPosition::KNOWN_POSITIONS_NO];
	uint8_t votingSensorsNo = enemyDetection.readAndTakeSensorsVotes(sensors_votes);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3328      	adds	r3, #40	; 0x28
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f001 fefb 	bl	8008462 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	///If no one vote return
	if(votingSensorsNo == 0){
 8006672:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <_ZN12StateControl32readAndGetMostVotedEnemyPositionEv+0x36>
		return EnemyPosition(); ///Unknown
 800667a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800667e:	4618      	mov	r0, r3
 8006680:	f001 f8cc 	bl	800781c <_ZN13EnemyPositionC1Ev>
 8006684:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006686:	853b      	strh	r3, [r7, #40]	; 0x28
 8006688:	e032      	b.n	80066f0 <_ZN12StateControl32readAndGetMostVotedEnemyPositionEv+0x9c>
	}

	int8_t maxVotes = sensors_votes[0]; // Start with the first position's votes
 800668a:	7a3b      	ldrb	r3, [r7, #8]
 800668c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t maxPositionID = 0;            // Assume the first position has the most votes
 8006690:	2300      	movs	r3, #0
 8006692:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	// Iterate through the array to find the position with the most votes
	for(uint8_t i = 1; i < EnemyPosition::KNOWN_POSITIONS_NO; i++) {
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800669c:	e01a      	b.n	80066d4 <_ZN12StateControl32readAndGetMostVotedEnemyPositionEv+0x80>
		if(sensors_votes[i] > maxVotes) {
 800669e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80066a2:	3338      	adds	r3, #56	; 0x38
 80066a4:	443b      	add	r3, r7
 80066a6:	f913 3c30 	ldrsb.w	r3, [r3, #-48]
 80066aa:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 80066ae:	429a      	cmp	r2, r3
 80066b0:	da0b      	bge.n	80066ca <_ZN12StateControl32readAndGetMostVotedEnemyPositionEv+0x76>
			maxVotes = sensors_votes[i];
 80066b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80066b6:	3338      	adds	r3, #56	; 0x38
 80066b8:	443b      	add	r3, r7
 80066ba:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80066be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			maxPositionID = i;
 80066c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80066c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for(uint8_t i = 1; i < EnemyPosition::KNOWN_POSITIONS_NO; i++) {
 80066ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80066ce:	3301      	adds	r3, #1
 80066d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80066d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80066d8:	2b1f      	cmp	r3, #31
 80066da:	d9e0      	bls.n	800669e <_ZN12StateControl32readAndGetMostVotedEnemyPositionEv+0x4a>
		}
	}
	return EnemyPosition(maxPositionID);
 80066dc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80066e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e4:	4611      	mov	r1, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 f8aa 	bl	8007840 <_ZN13EnemyPositionC1Eh>
 80066ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066ee:	853b      	strh	r3, [r7, #40]	; 0x28
}
 80066f0:	2300      	movs	r3, #0
 80066f2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80066f6:	f362 0307 	bfi	r3, r2, #0, #8
 80066fa:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80066fe:	f362 230f 	bfi	r3, r2, #8, #8
 8006702:	4618      	mov	r0, r3
 8006704:	3738      	adds	r7, #56	; 0x38
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <_ZN12StateControl16setEnemyPositionE13EnemyPosition>:

void StateControl::setEnemyPosition(EnemyPosition enemyPosition)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	8039      	strh	r1, [r7, #0]
	if(state.enemyPosition != enemyPosition){
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3364      	adds	r3, #100	; 0x64
 8006718:	463a      	mov	r2, r7
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f001 f8ee 	bl	80078fe <_ZNK13EnemyPositionneERKS_>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <_ZN12StateControl16setEnemyPositionE13EnemyPosition+0x30>
		state.enemyPosition = enemyPosition;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	883a      	ldrh	r2, [r7, #0]
 800672c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		state.enemyPositionClock = Timer_Get_Now_Time();
 8006730:	f7fe f91a 	bl	8004968 <_Z18Timer_Get_Now_Timev>
 8006734:	4602      	mov	r2, r0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <_ZN12StateControl15setLinePositionE12LinePosition>:
void StateControl::setLinePosition(LinePosition linePosition)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
	if(state.linePosition != linePosition){
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	335c      	adds	r3, #92	; 0x5c
 8006750:	463a      	mov	r2, r7
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f001 f9d3 	bl	8007b00 <_ZNK12LinePositionneERKS_>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <_ZN12StateControl15setLinePositionE12LinePosition+0x2e>
		state.linePosition = linePosition;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	65da      	str	r2, [r3, #92]	; 0x5c
		state.linePositionClock = Timer_Get_Now_Time();
 8006766:	f7fe f8ff 	bl	8004968 <_Z18Timer_Get_Now_Timev>
 800676a:	4602      	mov	r2, r0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	659a      	str	r2, [r3, #88]	; 0x58
	}
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <_Z41__static_initialization_and_destruction_0ii>:
State StateControl::getState()const{
	return state;
}
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d109      	bne.n	800679c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800678e:	4293      	cmp	r3, r2
 8006790:	d104      	bne.n	800679c <_Z41__static_initialization_and_destruction_0ii+0x24>
static uint32_t startTime = HAL_GetTick();
 8006792:	f7fb f9e1 	bl	8001b58 <HAL_GetTick>
 8006796:	4603      	mov	r3, r0
 8006798:	4a02      	ldr	r2, [pc, #8]	; (80067a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	200003f8 	.word	0x200003f8

080067a8 <_GLOBAL__sub_I__ZN12StateControlC2ERK16SensorsHubConfig>:
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067b0:	2001      	movs	r0, #1
 80067b2:	f7ff ffe1 	bl	8006778 <_Z41__static_initialization_and_destruction_0ii>
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <_ZN10StrategistC1ER12StateControlR5MotorR20Communication_Driver>:

#include "strategist.h"
#include "motion.h"


Strategist::Strategist(StateControl& stateCtrl, Motor& motor, Communication_Driver& communication)
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
	:motor(motor),
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]
	communication(communication),
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	605a      	str	r2, [r3, #4]
	stateControl(stateCtrl),
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	609a      	str	r2, [r3, #8]
	tactician(motor)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	330c      	adds	r3, #12
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f9f0 	bl	8006bc4 <_ZN9TacticianC1ER5Motor>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

{
   currentStrategy = nullptr;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <_ZN10Strategist11setStrategyEMS_FvvE>:

void Strategist::setStrategy(void (Strategist::*newStrategy)(void)) {
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	e883 0006 	stmia.w	r3, {r1, r2}
    currentStrategy = newStrategy;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	33c4      	adds	r3, #196	; 0xc4
 8006820:	1d3a      	adds	r2, r7, #4
 8006822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006826:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <_ZN10Strategist17runCurrentSrategyEv>:

void Strategist::runCurrentSrategy() {
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
	bool start = communication.readStartModule();
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4618      	mov	r0, r3
 8006844:	f001 fd8b 	bl	800835e <_ZN20Communication_Driver15readStartModuleEv>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]
	while(start && currentStrategy != nullptr)
 800684c:	e027      	b.n	800689e <_ZN10Strategist17runCurrentSrategyEv+0x68>
	{
		(this->*currentStrategy)();
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006854:	105b      	asrs	r3, r3, #1
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1899      	adds	r1, r3, r2
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00d      	beq.n	8006886 <_ZN10Strategist17runCurrentSrategyEv+0x50>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006870:	105b      	asrs	r3, r3, #1
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4413      	add	r3, r2
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 8006880:	4413      	add	r3, r2
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	e002      	b.n	800688c <_ZN10Strategist17runCurrentSrategyEv+0x56>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800688c:	4608      	mov	r0, r1
 800688e:	4798      	blx	r3
		start = communication.readStartModule();
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4618      	mov	r0, r3
 8006896:	f001 fd62 	bl	800835e <_ZN20Communication_Driver15readStartModuleEv>
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]
	while(start && currentStrategy != nullptr)
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d010      	beq.n	80068c6 <_ZN10Strategist17runCurrentSrategyEv+0x90>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d108      	bne.n	80068c0 <_ZN10Strategist17runCurrentSrategyEv+0x8a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <_ZN10Strategist17runCurrentSrategyEv+0x8a>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <_ZN10Strategist17runCurrentSrategyEv+0x8c>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d1c3      	bne.n	800684e <_ZN10Strategist17runCurrentSrategyEv+0x18>
	}
	Motion_Stop(motor);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fd64 	bl	8006398 <_Z11Motion_StopR5Motor>
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <_ZN10Strategist13runTestMotionEPFvR5MotorE>:

void Strategist::runTestMotion(void (*motionFunction)(Motor& motor))
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af02      	add	r7, sp, #8
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	bool start = communication.readStartModule();
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fd39 	bl	800835e <_ZN20Communication_Driver15readStartModuleEv>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool lineWasDetected = false;
 80068f2:	2300      	movs	r3, #0
 80068f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while(start)
 80068f8:	e052      	b.n	80069a0 <_ZN10Strategist13runTestMotionEPFvR5MotorE+0xc8>
	{
		State state = stateControl.recalculateStates();
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	f107 030c 	add.w	r3, r7, #12
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fe66 	bl	80065d6 <_ZN12StateControl17recalculateStatesEv>
		//Line was detected
		if(lineWasDetected)
 800690a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800690e:	2b00      	cmp	r3, #0
 8006910:	d015      	beq.n	800693e <_ZN10Strategist13runTestMotionEPFvR5MotorE+0x66>
		{
			if(tactician.hasTactic()){
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	330c      	adds	r3, #12
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f9de 	bl	8006cd8 <_ZN9Tactician9hasTacticEv>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <_ZN10Strategist13runTestMotionEPFvR5MotorE+0x60>
				tactician.runCurrentTactic(state);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f103 000c 	add.w	r0, r3, #12
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	f107 030c 	add.w	r3, r7, #12
 8006930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006932:	f000 f998 	bl	8006c66 <_ZN9Tactician16runCurrentTacticE5State>
 8006936:	e002      	b.n	800693e <_ZN10Strategist13runTestMotionEPFvR5MotorE+0x66>
			}else{
				lineWasDetected = false;
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}

		//Line Wasn't detected
		if(state.linePosition.isDetected())
 800693e:	f107 030c 	add.w	r3, r7, #12
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f985 	bl	8007c54 <_ZNK12LinePosition10isDetectedEv>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01a      	beq.n	8006986 <_ZN10Strategist13runTestMotionEPFvR5MotorE+0xae>
		{
			lineWasDetected = true;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			tactician.setTactic(&Tactician::Tactic_Escape_Line_Whatever_Enemy_Do);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f103 000c 	add.w	r0, r3, #12
 800695c:	4b17      	ldr	r3, [pc, #92]	; (80069bc <_ZN10Strategist13runTestMotionEPFvR5MotorE+0xe4>)
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	2300      	movs	r3, #0
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	f107 031c 	add.w	r3, r7, #28
 8006968:	e893 0006 	ldmia.w	r3, {r1, r2}
 800696c:	f000 f959 	bl	8006c22 <_ZN9Tactician9setTacticEMS_Fv5StateE>
			tactician.runCurrentTactic(state);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f103 000c 	add.w	r0, r3, #12
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	f107 030c 	add.w	r3, r7, #12
 800697e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006980:	f000 f971 	bl	8006c66 <_ZN9Tactician16runCurrentTacticE5State>
 8006984:	e004      	b.n	8006990 <_ZN10Strategist13runTestMotionEPFvR5MotorE+0xb8>
		}else{
			motionFunction(motor);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
		}

		start = communication.readStartModule();
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	f001 fce2 	bl	800835e <_ZN20Communication_Driver15readStartModuleEv>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(start)
 80069a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1a8      	bne.n	80068fa <_ZN10Strategist13runTestMotionEPFvR5MotorE+0x22>
	}
	Motion_Stop(motor);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fcf3 	bl	8006398 <_Z11Motion_StopR5Motor>
}
 80069b2:	bf00      	nop
 80069b4:	3728      	adds	r7, #40	; 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	08007021 	.word	0x08007021

080069c0 <_ZN10Strategist18runTestTimedMotionE11TimedMotion>:




void Strategist::runTestTimedMotion(TimedMotion timeMotion){
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08e      	sub	sp, #56	; 0x38
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	e883 0006 	stmia.w	r3, {r1, r2}
	bool start = communication.readStartModule();
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 fcc3 	bl	800835e <_ZN20Communication_Driver15readStartModuleEv>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool lineWasDetected = false;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if(start){
 80069e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d05d      	beq.n	8006aa8 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xe8>
		timeMotion.startMotion(motor);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	1d3b      	adds	r3, r7, #4
 80069f2:	4611      	mov	r1, r2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fd57 	bl	80074a8 <_ZN11TimedMotion11startMotionER5Motor>
	}

	while(start)
 80069fa:	e055      	b.n	8006aa8 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xe8>
	{
		State state = stateControl.recalculateStates();
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	f107 0314 	add.w	r3, r7, #20
 8006a04:	4611      	mov	r1, r2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fde5 	bl	80065d6 <_ZN12StateControl17recalculateStatesEv>
		//Line was detected
		if(lineWasDetected)
 8006a0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d016      	beq.n	8006a42 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0x82>
		{
			if(tactician.hasTactic()){
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	330c      	adds	r3, #12
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f95d 	bl	8006cd8 <_ZN9Tactician9hasTacticEv>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0x7a>
				tactician.runCurrentTactic(state);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f103 000c 	add.w	r0, r3, #12
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a34:	f000 f917 	bl	8006c66 <_ZN9Tactician16runCurrentTacticE5State>
 8006a38:	e036      	b.n	8006aa8 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xe8>
			}else{
				lineWasDetected = false;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006a40:	e032      	b.n	8006aa8 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xe8>
			}
			continue;
		}

		// Line was not detected
		if(state.linePosition.isDetected())
 8006a42:	f107 0314 	add.w	r3, r7, #20
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 f903 	bl	8007c54 <_ZNK12LinePosition10isDetectedEv>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01a      	beq.n	8006a8a <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xca>
		{
			lineWasDetected = true;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			tactician.setTactic(&Tactician::Tactic_Escape_Line_Whatever_Enemy_Do);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f103 000c 	add.w	r0, r3, #12
 8006a60:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0x108>)
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
 8006a64:	2300      	movs	r3, #0
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006a70:	f000 f8d7 	bl	8006c22 <_ZN9Tactician9setTacticEMS_Fv5StateE>
			tactician.runCurrentTactic(state);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f103 000c 	add.w	r0, r3, #12
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	f107 0314 	add.w	r3, r7, #20
 8006a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a84:	f000 f8ef 	bl	8006c66 <_ZN9Tactician16runCurrentTacticE5State>
 8006a88:	e006      	b.n	8006a98 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xd8>
		}else if(timeMotion.hasPassed()){
 8006a8a:	1d3b      	adds	r3, r7, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fd24 	bl	80074da <_ZNK11TimedMotion9hasPassedEv>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10c      	bne.n	8006ab2 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xf2>
				break;
		}
		start = communication.readStartModule();
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fc5e 	bl	800835e <_ZN20Communication_Driver15readStartModuleEv>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(start)
 8006aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1a5      	bne.n	80069fc <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0x3c>
 8006ab0:	e000      	b.n	8006ab4 <_ZN10Strategist18runTestTimedMotionE11TimedMotion+0xf4>
				break;
 8006ab2:	bf00      	nop
	}
	Motion_Stop(motor);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fc6d 	bl	8006398 <_Z11Motion_StopR5Motor>
}
 8006abe:	bf00      	nop
 8006ac0:	3730      	adds	r7, #48	; 0x30
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08007021 	.word	0x08007021

08006acc <_ZN10Strategist26Strategy_Search_And_AttackEv>:
 * 3. If the enemy's position is unknown, search for the enemy by rotation.
 * 4. If the enemy is approximately in front, attack.
 * 5. Otherwise, rotate to face the enemy.
 */
void Strategist::Strategy_Search_And_Attack()
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b092      	sub	sp, #72	; 0x48
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	6078      	str	r0, [r7, #4]
    // Obtain the latest state information
    State currentState = stateControl.recalculateStates();
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	f107 0310 	add.w	r3, r7, #16
 8006adc:	4611      	mov	r1, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fd79 	bl	80065d6 <_ZN12StateControl17recalculateStatesEv>

    // Continue executing a tactic if one is active
    if (tactician.hasTactic())
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 f8f5 	bl	8006cd8 <_ZN9Tactician9hasTacticEv>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <_ZN10Strategist26Strategy_Search_And_AttackEv+0x3e>
    {
        tactician.runCurrentTactic(currentState);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f103 000c 	add.w	r0, r3, #12
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	f107 0310 	add.w	r3, r7, #16
 8006b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b04:	f000 f8af 	bl	8006c66 <_ZN9Tactician16runCurrentTacticE5State>
        return;
 8006b08:	e051      	b.n	8006bae <_ZN10Strategist26Strategy_Search_And_AttackEv+0xe2>
    }

    // Escape tactic when a line is detected
    if (currentState.linePosition.isDetected())
 8006b0a:	f107 0310 	add.w	r3, r7, #16
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 f89f 	bl	8007c54 <_ZNK12LinePosition10isDetectedEv>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00d      	beq.n	8006b38 <_ZN10Strategist26Strategy_Search_And_AttackEv+0x6c>
    {
        tactician.setTactic(&Tactician::Tactic_Escape_Line_Whatever_Enemy_Do);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f103 000c 	add.w	r0, r3, #12
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <_ZN10Strategist26Strategy_Search_And_AttackEv+0xe8>)
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	2300      	movs	r3, #0
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2a:	f107 0320 	add.w	r3, r7, #32
 8006b2e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006b32:	f000 f876 	bl	8006c22 <_ZN9Tactician9setTacticEMS_Fv5StateE>
        return;
 8006b36:	e03a      	b.n	8006bae <_ZN10Strategist26Strategy_Search_And_AttackEv+0xe2>
    }

    EnemyPosition enemyPos = currentState.enemyPosition;
 8006b38:	8bbb      	ldrh	r3, [r7, #28]
 8006b3a:	81bb      	strh	r3, [r7, #12]

    // Search for the enemy by rotation if its position is unknown
    if (enemyPos.isNotKnown())
 8006b3c:	f107 030c 	add.w	r3, r7, #12
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 ff42 	bl	80079ca <_ZNK13EnemyPosition10isNotKnownEv>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00d      	beq.n	8006b68 <_ZN10Strategist26Strategy_Search_And_AttackEv+0x9c>
    {
        tactician.setTactic(&Tactician::Tactic_Search_Enemy_By_Rotation);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f103 000c 	add.w	r0, r3, #12
 8006b52:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <_ZN10Strategist26Strategy_Search_And_AttackEv+0xec>)
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b56:	2300      	movs	r3, #0
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006b62:	f000 f85e 	bl	8006c22 <_ZN9Tactician9setTacticEMS_Fv5StateE>
        return;  // Added to ensure subsequent checks aren't executed
 8006b66:	e022      	b.n	8006bae <_ZN10Strategist26Strategy_Search_And_AttackEv+0xe2>
    }

    // Attack if the enemy is approximately in front otherwise rotate to it
    if (enemyPos.isApproximatelyInFront())
 8006b68:	f107 030c 	add.w	r3, r7, #12
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 ff4d 	bl	8007a0c <_ZNK13EnemyPosition22isApproximatelyInFrontEv>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00d      	beq.n	8006b94 <_ZN10Strategist26Strategy_Search_And_AttackEv+0xc8>
    {
        tactician.setTactic(&Tactician::Tactic_Front_Attack);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f103 000c 	add.w	r0, r3, #12
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <_ZN10Strategist26Strategy_Search_And_AttackEv+0xf0>)
 8006b80:	633b      	str	r3, [r7, #48]	; 0x30
 8006b82:	2300      	movs	r3, #0
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
 8006b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b8a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006b8e:	f000 f848 	bl	8006c22 <_ZN9Tactician9setTacticEMS_Fv5StateE>
 8006b92:	e00c      	b.n	8006bae <_ZN10Strategist26Strategy_Search_And_AttackEv+0xe2>
    }else
    {
        tactician.setTactic(&Tactician::Tactic_Rotate_Towards_Enemy);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f103 000c 	add.w	r0, r3, #12
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <_ZN10Strategist26Strategy_Search_And_AttackEv+0xf4>)
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ba6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006baa:	f000 f83a 	bl	8006c22 <_ZN9Tactician9setTacticEMS_Fv5StateE>
    }
}
 8006bae:	3740      	adds	r7, #64	; 0x40
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08007021 	.word	0x08007021
 8006bb8:	08006f51 	.word	0x08006f51
 8006bbc:	08006e2b 	.word	0x08006e2b
 8006bc0:	08006ecb 	.word	0x08006ecb

08006bc4 <_ZN9TacticianC1ER5Motor>:

#include "Tactician.h"
#include "Timer.h"
#include "motion.h"

Tactician::Tactician(Motor& motor) : motor(motor) {}
 8006bc4:	b5b0      	push	{r4, r5, r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	605a      	str	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	330c      	adds	r3, #12
 8006be4:	2413      	movs	r4, #19
 8006be6:	461d      	mov	r5, r3
 8006be8:	e004      	b.n	8006bf4 <_ZN9TacticianC1ER5Motor+0x30>
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 fb5a 	bl	80072a4 <_ZN11TimedMotionC1Ev>
 8006bf0:	3508      	adds	r5, #8
 8006bf2:	3c01      	subs	r4, #1
 8006bf4:	2c00      	cmp	r4, #0
 8006bf6:	daf8      	bge.n	8006bea <_ZN9TacticianC1ER5Motor+0x26>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bdb0      	pop	{r4, r5, r7, pc}

08006c22 <_ZN9Tactician9setTacticEMS_Fv5StateE>:

void Tactician::config() {
   STOP_CURRENT_TACTIC();
}

void Tactician::setTactic(void (Tactician::*newTactic)(State state)) {
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	1d3b      	adds	r3, r7, #4
 8006c2c:	e883 0006 	stmia.w	r3, {r1, r2}
    if (!hasTactic()) {
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f851 	bl	8006cd8 <_ZN9Tactician9hasTacticEv>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f083 0301 	eor.w	r3, r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <_ZN9Tactician9setTacticEMS_Fv5StateE+0x26>
        STOP_CURRENT_TACTIC();
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f862 	bl	8006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>
    }
    currentTactic = newTactic;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	1d3a      	adds	r2, r7, #4
 8006c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c52:	e883 0003 	stmia.w	r3, {r0, r1}
    changeTacticStep(0);
 8006c56:	2100      	movs	r1, #0
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f8d2 	bl	8006e02 <_ZN9Tactician16changeTacticStepEh>
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <_ZN9Tactician16runCurrentTacticE5State>:

void Tactician::runCurrentTactic(State state) {
 8006c66:	b084      	sub	sp, #16
 8006c68:	b590      	push	{r4, r7, lr}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	f107 001c 	add.w	r0, r7, #28
 8006c74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!hasTactic()) {
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f82d 	bl	8006cd8 <_ZN9Tactician9hasTacticEv>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f083 0301 	eor.w	r3, r3, #1
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01f      	beq.n	8006cca <_ZN9Tactician16runCurrentTacticE5State+0x64>
        (this->*currentTactic)(state);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	105b      	asrs	r3, r3, #1
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	1898      	adds	r0, r3, r2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <_ZN9Tactician16runCurrentTacticE5State+0x54>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	105b      	asrs	r3, r3, #1
 8006ca8:	461a      	mov	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6852      	ldr	r2, [r2, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	681c      	ldr	r4, [r3, #0]
 8006cb8:	e001      	b.n	8006cbe <_ZN9Tactician16runCurrentTacticE5State+0x58>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685c      	ldr	r4, [r3, #4]
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	f107 031c 	add.w	r3, r7, #28
 8006cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cc8:	47a0      	blx	r4
    }
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006cd4:	b004      	add	sp, #16
 8006cd6:	4770      	bx	lr

08006cd8 <_ZN9Tactician9hasTacticEv>:

bool Tactician::hasTactic() {
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    return currentTactic != nullptr;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d107      	bne.n	8006cf8 <_ZN9Tactician9hasTacticEv+0x20>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <_ZN9Tactician9hasTacticEv+0x20>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <_ZN9Tactician9hasTacticEv+0x22>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f083 0301 	eor.w	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>:

void Tactician::STOP_CURRENT_TACTIC() {
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
    // Reset all states
    currentTactic = nullptr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	609a      	str	r2, [r3, #8]
    totalMotionsNumber = 0;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    currentMotionsNumber = 0;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
    stepStartClock = 0;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tacticStep = 0;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <_ZN9Tactician15executesMotionsEv>:

bool Tactician::executesMotions() {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
    if (currentMotionsNumber >= totalMotionsNumber){
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d301      	bcc.n	8006d68 <_ZN9Tactician15executesMotionsEv+0x1c>
    	///Empty Queue
    	return true;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e026      	b.n	8006db6 <_ZN9Tactician15executesMotionsEv+0x6a>
    }

    //If motion time has passed start the next motion
    if (motions[currentMotionsNumber].hasPassed()) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006d6e:	3301      	adds	r3, #1
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	4413      	add	r3, r2
 8006d76:	3304      	adds	r3, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fbae 	bl	80074da <_ZNK11TimedMotion9hasPassedEv>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d017      	beq.n	8006db4 <_ZN9Tactician15executesMotionsEv+0x68>
        currentMotionsNumber++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        motions[currentMotionsNumber].startMotion(motor);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4413      	add	r3, r2
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f000 fb7c 	bl	80074a8 <_ZN11TimedMotion11startMotionER5Motor>
        return false;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <_ZN9Tactician15executesMotionsEv+0x6a>
    }
    return true;
 8006db4:	2301      	movs	r3, #1
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <_ZN9Tactician9addMotionERK11TimedMotion>:

void Tactician::addMotion(const TimedMotion& motion) {
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
    if (totalMotionsNumber < MAX_MOTIONS_NO) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006dce:	2b13      	cmp	r3, #19
 8006dd0:	d811      	bhi.n	8006df6 <_ZN9Tactician9addMotionERK11TimedMotion+0x38>
        motions[totalMotionsNumber++] = motion;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	b2d1      	uxtb	r1, r2
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	3301      	adds	r3, #1
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4413      	add	r3, r2
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	3304      	adds	r3, #4
 8006dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006df2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <_ZN9Tactician16changeTacticStepEh>:

void Tactician::changeTacticStep(uint8_t step) {
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
    tacticStep = step;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	78fa      	ldrb	r2, [r7, #3]
 8006e12:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    stepStartClock = Timer_Get_Now_Time();
 8006e16:	f7fd fda7 	bl	8004968 <_Z18Timer_Get_Now_Timev>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <_ZN9Tactician19Tactic_Front_AttackE5State>:
 * - Direction 6: Move forward at high speed.
 * - Directions 7 and 8: Rotate right in a circle at 50% power.
 *
 * @param state Contains information about the current state including the enemy's position.
 */
void Tactician::Tactic_Front_Attack(State state) {
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	f107 001c 	add.w	r0, r7, #28
 8006e38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    EnemyPosition& enemyPosition = state.enemyPosition;
 8006e3c:	f107 031c 	add.w	r3, r7, #28
 8006e40:	330c      	adds	r3, #12
 8006e42:	60fb      	str	r3, [r7, #12]

    // Check the stop conditions. If any of these hold true, stop the tactic.
    if (state.linePosition.isNone() || enemyPosition.isNotKnown()) {
 8006e44:	f107 031c 	add.w	r3, r7, #28
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fef1 	bl	8007c32 <_ZNK12LinePosition6isNoneEv>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d105      	bne.n	8006e62 <_ZN9Tactician19Tactic_Front_AttackE5State+0x38>
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fdb7 	bl	80079ca <_ZNK13EnemyPosition10isNotKnownEv>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <_ZN9Tactician19Tactic_Front_AttackE5State+0x3c>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <_ZN9Tactician19Tactic_Front_AttackE5State+0x3e>
 8006e66:	2300      	movs	r3, #0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <_ZN9Tactician19Tactic_Front_AttackE5State+0x4a>
        STOP_CURRENT_TACTIC();
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff ff4d 	bl	8006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>
        return;
 8006e72:	e024      	b.n	8006ebe <_ZN9Tactician19Tactic_Front_AttackE5State+0x94>
    }

    switch (enemyPosition.direction) {
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f993 3000 	ldrsb.w	r3, [r3]
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	dc1b      	bgt.n	8006eb6 <_ZN9Tactician19Tactic_Front_AttackE5State+0x8c>
 8006e7e:	2b07      	cmp	r3, #7
 8006e80:	da13      	bge.n	8006eaa <_ZN9Tactician19Tactic_Front_AttackE5State+0x80>
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	dc02      	bgt.n	8006e8c <_ZN9Tactician19Tactic_Front_AttackE5State+0x62>
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	da03      	bge.n	8006e92 <_ZN9Tactician19Tactic_Front_AttackE5State+0x68>
 8006e8a:	e014      	b.n	8006eb6 <_ZN9Tactician19Tactic_Front_AttackE5State+0x8c>
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d006      	beq.n	8006e9e <_ZN9Tactician19Tactic_Front_AttackE5State+0x74>
 8006e90:	e011      	b.n	8006eb6 <_ZN9Tactician19Tactic_Front_AttackE5State+0x8c>
        case 4:
        case 5:
            Motion_Circle_Left_50(motor);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fb28 	bl	80064ec <_Z21Motion_Circle_Left_50R5Motor>
            break;
 8006e9c:	e00f      	b.n	8006ebe <_ZN9Tactician19Tactic_Front_AttackE5State+0x94>

        case 6:
            Motion_Forward_High(motor);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fa86 	bl	80063b4 <_Z19Motion_Forward_HighR5Motor>
            break;
 8006ea8:	e009      	b.n	8006ebe <_ZN9Tactician19Tactic_Front_AttackE5State+0x94>

        case 7:
        case 8:
            Motion_Circle_Right_50(motor);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff fb08 	bl	80064c4 <_Z22Motion_Circle_Right_50R5Motor>
            break;
 8006eb4:	e003      	b.n	8006ebe <_ZN9Tactician19Tactic_Front_AttackE5State+0x94>

        default:
            STOP_CURRENT_TACTIC();
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ff28 	bl	8006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>
            break;
 8006ebc:	bf00      	nop
    }
}
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec6:	b004      	add	sp, #16
 8006ec8:	4770      	bx	lr

08006eca <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State>:
 * 2. Enemy's position is unknown.
 * 3. Enemy is approximately in front.
 *
 * @param state Contains information about the current state including the enemy's position.
 */
void Tactician::Tactic_Rotate_Towards_Enemy(State state) {
 8006eca:	b084      	sub	sp, #16
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	f107 001c 	add.w	r0, r7, #28
 8006ed8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    EnemyPosition& enemyPos = state.enemyPosition;
 8006edc:	f107 031c 	add.w	r3, r7, #28
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	60fb      	str	r3, [r7, #12]

    // Check the stop conditions. If any of these hold true, stop the tactic.
    if (state.linePosition.isDetected() ||
 8006ee4:	f107 031c 	add.w	r3, r7, #28
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 feb2 	bl	8007c54 <_ZNK12LinePosition10isDetectedEv>
 8006ef0:	4603      	mov	r3, r0
        enemyPos.isNotKnown() ||
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10b      	bne.n	8006f0e <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x44>
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fd67 	bl	80079ca <_ZNK13EnemyPosition10isNotKnownEv>
 8006efc:	4603      	mov	r3, r0
    if (state.linePosition.isDetected() ||
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d105      	bne.n	8006f0e <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x44>
        enemyPos.isApproximatelyInFront()) {
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fd82 	bl	8007a0c <_ZNK13EnemyPosition22isApproximatelyInFrontEv>
 8006f08:	4603      	mov	r3, r0
        enemyPos.isNotKnown() ||
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x48>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x4a>
 8006f12:	2300      	movs	r3, #0
    if (state.linePosition.isDetected() ||
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x56>
    	STOP_CURRENT_TACTIC();
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fef7 	bl	8006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>
        return;
 8006f1e:	e010      	b.n	8006f42 <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x78>
    }

    // If the enemy is to the left, rotate left; otherwise, rotate right.
    if (enemyPos.isInLeft()) {
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fd8a 	bl	8007a3a <_ZNK13EnemyPosition8isInLeftEv>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x6e>
        Motion_Rotate_Left_High(motor);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff faaf 	bl	8006494 <_Z23Motion_Rotate_Left_HighR5Motor>
 8006f36:	e004      	b.n	8006f42 <_ZN9Tactician27Tactic_Rotate_Towards_EnemyE5State+0x78>
    } else {
        Motion_Rotate_Right_High(motor);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fa91 	bl	8006464 <_Z24Motion_Rotate_Right_HighR5Motor>
    }
}
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f4a:	b004      	add	sp, #16
 8006f4c:	4770      	bx	lr
	...

08006f50 <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State>:
 * - Step 1: Rotate right at high speed for 420 degrees
 * - Step 2: Repeat
 *
 * @param state Contains information about the current state
 */
void Tactician::Tactic_Search_Enemy_By_Rotation(State state) {
 8006f50:	b084      	sub	sp, #16
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b088      	sub	sp, #32
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8006f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    EnemyPosition& enemyPosition = state.enemyPosition;
 8006f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f66:	330c      	adds	r3, #12
 8006f68:	61fb      	str	r3, [r7, #28]

    // Check the stop conditions. If any of these hold true, stop the tactic.
    if (state.linePosition.isNone() || enemyPosition.isKnown()) {
 8006f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fe5e 	bl	8007c32 <_ZNK12LinePosition6isNoneEv>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d105      	bne.n	8006f88 <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0x38>
 8006f7c:	69f8      	ldr	r0, [r7, #28]
 8006f7e:	f000 fd36 	bl	80079ee <_ZN13EnemyPosition7isKnownEv>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0x3c>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0x3e>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0x4a>
        STOP_CURRENT_TACTIC();
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff feba 	bl	8006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>
        return;
 8006f98:	e037      	b.n	800700a <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0xba>
    }

    if (tacticStep == 0) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11e      	bne.n	8006fe2 <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0x92>
        addMotion(TimedMotion::fromDegree(Motion_Rotate_Left_High, 120));
 8006fa4:	f107 030c 	add.w	r3, r7, #12
 8006fa8:	2278      	movs	r2, #120	; 0x78
 8006faa:	491b      	ldr	r1, [pc, #108]	; (8007018 <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0xc8>)
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 f9c5 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 8006fb2:	f107 030c 	add.w	r3, r7, #12
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff ff00 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
        addMotion(TimedMotion::fromDegree(Motion_Rotate_Right_High, 420));
 8006fbe:	f107 0314 	add.w	r3, r7, #20
 8006fc2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006fc6:	4915      	ldr	r1, [pc, #84]	; (800701c <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0xcc>)
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f9b7 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fef2 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
        changeTacticStep(1);
 8006fda:	2101      	movs	r1, #1
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff ff10 	bl	8006e02 <_ZN9Tactician16changeTacticStepEh>
    }

    if (tacticStep == 1 && executesMotions()) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d107      	bne.n	8006ffc <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0xac>
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fead 	bl	8006d4c <_ZN9Tactician15executesMotionsEv>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0xac>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0xae>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <_ZN9Tactician31Tactic_Search_Enemy_By_RotationE5State+0xba>
        changeTacticStep(0);
 8007002:	2100      	movs	r1, #0
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fefc 	bl	8006e02 <_ZN9Tactician16changeTacticStepEh>
    }
}
 800700a:	3720      	adds	r7, #32
 800700c:	46bd      	mov	sp, r7
 800700e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007012:	b004      	add	sp, #16
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	08006495 	.word	0x08006495
 800701c:	08006465 	.word	0x08006465

08007020 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State>:

 *
 * @param state Contains information about the current state including the detected line's position.
 */
void Tactician::Tactic_Escape_Line_Whatever_Enemy_Do(State state)
{
 8007020:	b084      	sub	sp, #16
 8007022:	b580      	push	{r7, lr}
 8007024:	b0a0      	sub	sp, #128	; 0x80
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800702e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(tacticStep == 0)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8007038:	2b00      	cmp	r3, #0
 800703a:	f040 80e0 	bne.w	80071fe <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1de>
	{
		switch (state.linePosition.getLinePosition()) {
 800703e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fd3b 	bl	8007ac0 <_ZNK12LinePosition15getLinePositionEv>
 800704a:	4603      	mov	r3, r0
 800704c:	2b07      	cmp	r3, #7
 800704e:	f200 80ce 	bhi.w	80071ee <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1ce>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x38>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007079 	.word	0x08007079
 800705c:	080070ab 	.word	0x080070ab
 8007060:	080070dd 	.word	0x080070dd
 8007064:	0800710f 	.word	0x0800710f
 8007068:	08007141 	.word	0x08007141
 800706c:	08007159 	.word	0x08007159
 8007070:	0800718b 	.word	0x0800718b
 8007074:	080071bd 	.word	0x080071bd
		    case LinePositionType::FrontLeft:
		        addMotion(TimedMotion::BACKWARD_BRAKE());
 8007078:	f107 0308 	add.w	r3, r7, #8
 800707c:	4618      	mov	r0, r3
 800707e:	f000 f949 	bl	8007314 <_ZN11TimedMotion14BACKWARD_BRAKEEv>
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff fe98 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        addMotion(TimedMotion::fromDegree(Motion_Rotate_Right_High, 120));
 800708e:	f107 0310 	add.w	r3, r7, #16
 8007092:	2278      	movs	r2, #120	; 0x78
 8007094:	4967      	ldr	r1, [pc, #412]	; (8007234 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x214>)
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f950 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 800709c:	f107 0310 	add.w	r3, r7, #16
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff fe8b 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 80070a8:	e0a5      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    case LinePositionType::Front:
		        addMotion(TimedMotion::BACKWARD_BRAKE());
 80070aa:	f107 0318 	add.w	r3, r7, #24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f930 	bl	8007314 <_ZN11TimedMotion14BACKWARD_BRAKEEv>
 80070b4:	f107 0318 	add.w	r3, r7, #24
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fe7f 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        addMotion(TimedMotion::fromDegree(Motion_Rotate_Right_High, 160));
 80070c0:	f107 0320 	add.w	r3, r7, #32
 80070c4:	22a0      	movs	r2, #160	; 0xa0
 80070c6:	495b      	ldr	r1, [pc, #364]	; (8007234 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x214>)
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f937 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 80070ce:	f107 0320 	add.w	r3, r7, #32
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff fe72 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 80070da:	e08c      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    case LinePositionType::FrontRight:
		        addMotion(TimedMotion::BACKWARD_BRAKE());
 80070dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f917 	bl	8007314 <_ZN11TimedMotion14BACKWARD_BRAKEEv>
 80070e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff fe66 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        addMotion(TimedMotion::fromDegree(Motion_Rotate_Left_High, 120));
 80070f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070f6:	2278      	movs	r2, #120	; 0x78
 80070f8:	494f      	ldr	r1, [pc, #316]	; (8007238 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x218>)
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f91e 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 8007100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fe59 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 800710c:	e073      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    case LinePositionType::BackLeft:
		        addMotion(TimedMotion::FORWARD_BRAKE());
 800710e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007112:	4618      	mov	r0, r3
 8007114:	f000 f8ea 	bl	80072ec <_ZN11TimedMotion13FORWARD_BRAKEEv>
 8007118:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fe4d 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        addMotion(TimedMotion::fromDegree(Motion_Rotate_Right_High, 30));
 8007124:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007128:	221e      	movs	r2, #30
 800712a:	4942      	ldr	r1, [pc, #264]	; (8007234 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x214>)
 800712c:	4618      	mov	r0, r3
 800712e:	f000 f905 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 8007132:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fe40 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 800713e:	e05a      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    case LinePositionType::Back:
		        addMotion(TimedMotion::FORWARD_BRAKE());
 8007140:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f8d1 	bl	80072ec <_ZN11TimedMotion13FORWARD_BRAKEEv>
 800714a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fe34 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 8007156:	e04e      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    case LinePositionType::BackRight:
		        addMotion(TimedMotion::FORWARD_BRAKE());
 8007158:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800715c:	4618      	mov	r0, r3
 800715e:	f000 f8c5 	bl	80072ec <_ZN11TimedMotion13FORWARD_BRAKEEv>
 8007162:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fe28 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        addMotion(TimedMotion::fromDegree(Motion_Rotate_Left_High, 30));
 800716e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007172:	221e      	movs	r2, #30
 8007174:	4930      	ldr	r1, [pc, #192]	; (8007238 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x218>)
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f8e0 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 800717c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fe1b 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 8007188:	e035      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    case LinePositionType::Left:
		        addMotion(TimedMotion::BACKWARD_BRAKE());
 800718a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f8c0 	bl	8007314 <_ZN11TimedMotion14BACKWARD_BRAKEEv>
 8007194:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fe0f 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        addMotion(TimedMotion::fromDegree(Motion_Rotate_Right_High, 90));
 80071a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80071a4:	225a      	movs	r2, #90	; 0x5a
 80071a6:	4923      	ldr	r1, [pc, #140]	; (8007234 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x214>)
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f8c7 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 80071ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff fe02 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 80071ba:	e01c      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    case LinePositionType::Right:
		        addMotion(TimedMotion::BACKWARD_BRAKE());
 80071bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 f8a7 	bl	8007314 <_ZN11TimedMotion14BACKWARD_BRAKEEv>
 80071c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff fdf6 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        addMotion(TimedMotion::fromDegree(Motion_Rotate_Left_High, 90));
 80071d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80071d6:	225a      	movs	r2, #90	; 0x5a
 80071d8:	4917      	ldr	r1, [pc, #92]	; (8007238 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x218>)
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f8ae 	bl	800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>
 80071e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fde9 	bl	8006dbe <_ZN9Tactician9addMotionERK11TimedMotion>
		        break;
 80071ec:	e003      	b.n	80071f6 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1d6>

		    default:
		        STOP_CURRENT_TACTIC();
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff fd8c 	bl	8006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>
		        return;
 80071f4:	e017      	b.n	8007226 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x206>
		}
	    changeTacticStep(1);
 80071f6:	2101      	movs	r1, #1
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fe02 	bl	8006e02 <_ZN9Tactician16changeTacticStepEh>


	}
	// STEP 1
	// executes motions. If the motions has finished Stop current Tactic
	if(tacticStep == 1 && executesMotions()){
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8007204:	2b01      	cmp	r3, #1
 8007206:	d107      	bne.n	8007218 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1f8>
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff fd9f 	bl	8006d4c <_ZN9Tactician15executesMotionsEv>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1f8>
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x1fa>
 8007218:	2300      	movs	r3, #0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <_ZN9Tactician36Tactic_Escape_Line_Whatever_Enemy_DoE5State+0x206>
		STOP_CURRENT_TACTIC();
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fd74 	bl	8006d0c <_ZN9Tactician19STOP_CURRENT_TACTICEv>
		return;
 8007224:	bf00      	nop
	}

}
 8007226:	3780      	adds	r7, #128	; 0x80
 8007228:	46bd      	mov	sp, r7
 800722a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800722e:	b004      	add	sp, #16
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	08006465 	.word	0x08006465
 8007238:	08006495 	.word	0x08006495

0800723c <_Z41__static_initialization_and_destruction_0ii>:
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d109      	bne.n	8007260 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007252:	4293      	cmp	r3, r2
 8007254:	d104      	bne.n	8007260 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8007256:	f7fa fc7f 	bl	8001b58 <HAL_GetTick>
 800725a:	4603      	mov	r3, r0
 800725c:	4a02      	ldr	r2, [pc, #8]	; (8007268 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	200003fc 	.word	0x200003fc

0800726c <_GLOBAL__sub_I__ZN9TacticianC2ER5Motor>:
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
 8007270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007274:	2001      	movs	r0, #1
 8007276:	f7ff ffe1 	bl	800723c <_Z41__static_initialization_and_destruction_0ii>
 800727a:	bd80      	pop	{r7, pc}

0800727c <_Z16Timer_Has_Passedm>:

inline bool Timer_Has_Passed(uint32_t clock){
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	return Timer_Get_Remain_Time(clock) <= 0;
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fd fb88 	bl	800499a <_Z21Timer_Get_Remain_Timem>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	2a01      	cmp	r2, #1
 8007290:	f173 0300 	sbcs.w	r3, r3, #0
 8007294:	bfb4      	ite	lt
 8007296:	2301      	movlt	r3, #1
 8007298:	2300      	movge	r3, #0
 800729a:	b2db      	uxtb	r3, r3
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <_ZN11TimedMotionC1Ev>:
    .rotation120degree = 90
};

// Definitions for the TimedMotion class methods

TimedMotion::TimedMotion() : motionFunction(nullptr), duration(0) {}
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	605a      	str	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4618      	mov	r0, r3
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <_ZN11TimedMotionC1EPFvR5MotorEm>:

TimedMotion::TimedMotion(void (*motionFunc)(Motor& motor), uint32_t time)
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
    : motionFunction(motionFunc), duration(time) {}
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <_ZN11TimedMotion13FORWARD_BRAKEEv>:


TimedMotion TimedMotion::FORWARD_BRAKE() {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
    return TimedMotion(Motion_Backward_High, actionTimes.brakingTime);
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <_ZN11TimedMotion13FORWARD_BRAKEEv+0x20>)
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	4905      	ldr	r1, [pc, #20]	; (8007310 <_ZN11TimedMotion13FORWARD_BRAKEEv+0x24>)
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff ffe2 	bl	80072c6 <_ZN11TimedMotionC1EPFvR5MotorEm>
}
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000014 	.word	0x20000014
 8007310:	0800642d 	.word	0x0800642d

08007314 <_ZN11TimedMotion14BACKWARD_BRAKEEv>:

TimedMotion TimedMotion::BACKWARD_BRAKE() {
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
    return TimedMotion(Motion_Forward_High, actionTimes.brakingTime);
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <_ZN11TimedMotion14BACKWARD_BRAKEEv+0x20>)
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	4905      	ldr	r1, [pc, #20]	; (8007338 <_ZN11TimedMotion14BACKWARD_BRAKEEv+0x24>)
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff ffce 	bl	80072c6 <_ZN11TimedMotionC1EPFvR5MotorEm>
}
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000014 	.word	0x20000014
 8007338:	080063b5 	.word	0x080063b5

0800733c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt>:
        time = (int)(MathHelper::linearInterpolation(50, actionTimes.mediumPower50cm, 100, actionTimes.mediumPower100cm, cm));
    }
    return TimedMotion(motionFunc, time);
}

TimedMotion TimedMotion::fromDegree(void (*motionFunc)(Motor& motor), uint16_t degree) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
	uint32_t time = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
	if (degree <= 30) {
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	2b1e      	cmp	r3, #30
 8007352:	d81e      	bhi.n	8007392 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x56>
		time = (int)(MathHelper::linearInterpolation(0, 0, 30, actionTimes.rotation30degree, degree));
 8007354:	4b4f      	ldr	r3, [pc, #316]	; (8007494 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x158>)
 8007356:	895b      	ldrh	r3, [r3, #10]
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	ee07 3a10 	vmov	s14, r3
 8007366:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800736a:	eeb0 2a47 	vmov.f32	s4, s14
 800736e:	eef0 1a67 	vmov.f32	s3, s15
 8007372:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8007376:	eddf 0a48 	vldr	s1, [pc, #288]	; 8007498 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x15c>
 800737a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8007498 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x15c>
 800737e:	f7fe fb17 	bl	80059b0 <_ZN10MathHelper19linearInterpolationEfffff>
 8007382:	eef0 7a40 	vmov.f32	s15, s0
 8007386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800738a:	ee17 3a90 	vmov	r3, s15
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e076      	b.n	8007480 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x144>
	} else if (degree <= 60) {
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	2b3c      	cmp	r3, #60	; 0x3c
 8007396:	d824      	bhi.n	80073e2 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0xa6>
		time = (int)(MathHelper::linearInterpolation(30, actionTimes.rotation30degree, 60, actionTimes.rotation60degree, degree));
 8007398:	4b3e      	ldr	r3, [pc, #248]	; (8007494 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x158>)
 800739a:	895b      	ldrh	r3, [r3, #10]
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a4:	4b3b      	ldr	r3, [pc, #236]	; (8007494 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x158>)
 80073a6:	899b      	ldrh	r3, [r3, #12]
 80073a8:	ee07 3a10 	vmov	s14, r3
 80073ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	ee06 3a90 	vmov	s13, r3
 80073b6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80073ba:	eeb0 2a66 	vmov.f32	s4, s13
 80073be:	eef0 1a47 	vmov.f32	s3, s14
 80073c2:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800749c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x160>
 80073c6:	eef0 0a67 	vmov.f32	s1, s15
 80073ca:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80073ce:	f7fe faef 	bl	80059b0 <_ZN10MathHelper19linearInterpolationEfffff>
 80073d2:	eef0 7a40 	vmov.f32	s15, s0
 80073d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073da:	ee17 3a90 	vmov	r3, s15
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e04e      	b.n	8007480 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x144>
	} else if (degree <= 90) {
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	2b5a      	cmp	r3, #90	; 0x5a
 80073e6:	d824      	bhi.n	8007432 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0xf6>
		time = (int)(MathHelper::linearInterpolation(60, actionTimes.rotation60degree, 90, actionTimes.rotation90degree, degree));
 80073e8:	4b2a      	ldr	r3, [pc, #168]	; (8007494 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x158>)
 80073ea:	899b      	ldrh	r3, [r3, #12]
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f4:	4b27      	ldr	r3, [pc, #156]	; (8007494 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x158>)
 80073f6:	89db      	ldrh	r3, [r3, #14]
 80073f8:	ee07 3a10 	vmov	s14, r3
 80073fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	ee06 3a90 	vmov	s13, r3
 8007406:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800740a:	eeb0 2a66 	vmov.f32	s4, s13
 800740e:	eef0 1a47 	vmov.f32	s3, s14
 8007412:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80074a0 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x164>
 8007416:	eef0 0a67 	vmov.f32	s1, s15
 800741a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800749c <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x160>
 800741e:	f7fe fac7 	bl	80059b0 <_ZN10MathHelper19linearInterpolationEfffff>
 8007422:	eef0 7a40 	vmov.f32	s15, s0
 8007426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800742a:	ee17 3a90 	vmov	r3, s15
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	e026      	b.n	8007480 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x144>
	} else if (degree <= 120) {
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	2b78      	cmp	r3, #120	; 0x78
 8007436:	d823      	bhi.n	8007480 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x144>
		time = (int)(MathHelper::linearInterpolation(90, actionTimes.rotation90degree, 120, actionTimes.rotation120degree, degree));
 8007438:	4b16      	ldr	r3, [pc, #88]	; (8007494 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x158>)
 800743a:	89db      	ldrh	r3, [r3, #14]
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007444:	4b13      	ldr	r3, [pc, #76]	; (8007494 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x158>)
 8007446:	8a1b      	ldrh	r3, [r3, #16]
 8007448:	ee07 3a10 	vmov	s14, r3
 800744c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	ee06 3a90 	vmov	s13, r3
 8007456:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800745a:	eeb0 2a66 	vmov.f32	s4, s13
 800745e:	eef0 1a47 	vmov.f32	s3, s14
 8007462:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80074a4 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x168>
 8007466:	eef0 0a67 	vmov.f32	s1, s15
 800746a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80074a0 <_ZN11TimedMotion10fromDegreeEPFvR5MotorEt+0x164>
 800746e:	f7fe fa9f 	bl	80059b0 <_ZN10MathHelper19linearInterpolationEfffff>
 8007472:	eef0 7a40 	vmov.f32	s15, s0
 8007476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800747a:	ee17 3a90 	vmov	r3, s15
 800747e:	617b      	str	r3, [r7, #20]
	}

	return TimedMotion(motionFunc, time);
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff ff1e 	bl	80072c6 <_ZN11TimedMotionC1EPFvR5MotorEm>
}
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000014 	.word	0x20000014
 8007498:	00000000 	.word	0x00000000
 800749c:	42700000 	.word	0x42700000
 80074a0:	42b40000 	.word	0x42b40000
 80074a4:	42f00000 	.word	0x42f00000

080074a8 <_ZN11TimedMotion11startMotionER5Motor>:

void TimedMotion::startMotion(Motor& motor) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
    if(motionFunction != nullptr) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <_ZN11TimedMotion11startMotionER5Motor+0x1a>
        motionFunction(motor);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6838      	ldr	r0, [r7, #0]
 80074c0:	4798      	blx	r3
    }
    duration = Timer_Set_Clock(duration);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd fa5a 	bl	8004980 <_Z15Timer_Set_Clockm>
 80074cc:	4602      	mov	r2, r0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	605a      	str	r2, [r3, #4]
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <_ZNK11TimedMotion9hasPassedEv>:

bool TimedMotion::hasPassed() const {
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
    return Timer_Has_Passed(duration);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fec8 	bl	800727c <_Z16Timer_Has_Passedm>
 80074ec:	4603      	mov	r3, r0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <_Z41__static_initialization_and_destruction_0ii>:
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d109      	bne.n	800751c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800750e:	4293      	cmp	r3, r2
 8007510:	d104      	bne.n	800751c <_Z41__static_initialization_and_destruction_0ii+0x24>
static uint32_t startTime = HAL_GetTick();
 8007512:	f7fa fb21 	bl	8001b58 <HAL_GetTick>
 8007516:	4603      	mov	r3, r0
 8007518:	4a02      	ldr	r2, [pc, #8]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000400 	.word	0x20000400

08007528 <_GLOBAL__sub_I_actionTimes>:
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
 800752c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007530:	2001      	movs	r0, #1
 8007532:	f7ff ffe1 	bl	80074f8 <_Z41__static_initialization_and_destruction_0ii>
 8007536:	bd80      	pop	{r7, pc}

08007538 <_ZN10UserInputsC1ERK16UserInputsConfig>:
#include "user_inputs.h"

#include "main.h"


UserInputs::UserInputs(const UserInputsConfig& config)
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
: startButton(config.startButton.port, config.startButton.pin),
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	6819      	ldr	r1, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	889b      	ldrh	r3, [r3, #4]
 800754c:	461a      	mov	r2, r3
 800754e:	f000 fde1 	bl	8008114 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>
  backButton(config.backButton.port, config.backButton.pin),
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f103 0018 	add.w	r0, r3, #24
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6899      	ldr	r1, [r3, #8]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	899b      	ldrh	r3, [r3, #12]
 8007560:	461a      	mov	r2, r3
 8007562:	f000 fdd7 	bl	8008114 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>
  nextButton(config.nextButton.port, config.nextButton.pin),
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	6919      	ldr	r1, [r3, #16]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	8a9b      	ldrh	r3, [r3, #20]
 8007574:	461a      	mov	r2, r3
 8007576:	f000 fdcd 	bl	8008114 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>
  trimpot0(config.trimpotLeft.hadc, config.trimpotLeft.channel),
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6999      	ldr	r1, [r3, #24]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	461a      	mov	r2, r3
 800758a:	f001 fd1d 	bl	8008fc8 <_ZN7TrimpotC1EP17ADC_HandleTypeDefm>
  trimpot1(config.trimpotRight.hadc, config.trimpotRight.channel)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	6a19      	ldr	r1, [r3, #32]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	461a      	mov	r2, r3
 800759e:	f001 fd13 	bl	8008fc8 <_ZN7TrimpotC1EP17ADC_HandleTypeDefm>
{

}
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_ZN10UserInputs9configAllEv>:

void UserInputs::configAll(){
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	startButton.config();
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fdce 	bl	8008158 <_ZN13ComplexButton6configEv>
	backButton.config();
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3318      	adds	r3, #24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fdc9 	bl	8008158 <_ZN13ComplexButton6configEv>
	nextButton.config();
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3330      	adds	r3, #48	; 0x30
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fdc4 	bl	8008158 <_ZN13ComplexButton6configEv>
	trimpot0.config();
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3348      	adds	r3, #72	; 0x48
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 fd0e 	bl	8008ff6 <_ZN7Trimpot6configEv>
	trimpot1.config();
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3354      	adds	r3, #84	; 0x54
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fd09 	bl	8008ff6 <_ZN7Trimpot6configEv>
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_ZN10UserInputs7readAllEv>:
void UserInputs::readAll(){
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	readButtons();
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f807 	bl	8007608 <_ZN10UserInputs11readButtonsEv>
	readTrimpots();
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f81a 	bl	8007634 <_ZN10UserInputs12readTrimpotsEv>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <_ZN10UserInputs11readButtonsEv>:
void UserInputs::readButtons(){
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	startButton.read();
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fdcc 	bl	80081b0 <_ZN13ComplexButton4readEv>
	backButton.read();
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3318      	adds	r3, #24
 800761c:	4618      	mov	r0, r3
 800761e:	f000 fdc7 	bl	80081b0 <_ZN13ComplexButton4readEv>
	nextButton.read();
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3330      	adds	r3, #48	; 0x30
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fdc2 	bl	80081b0 <_ZN13ComplexButton4readEv>
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <_ZN10UserInputs12readTrimpotsEv>:
void UserInputs::readTrimpots(){
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	trimpot0.read();
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3348      	adds	r3, #72	; 0x48
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fce3 	bl	800900c <_ZN7Trimpot4readEv>
	trimpot1.read();
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3354      	adds	r3, #84	; 0x54
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fcde 	bl	800900c <_ZN7Trimpot4readEv>
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <_ZN10UserInputs8isAnyKeyEv>:

bool UserInputs::isAnyKey(){
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	return backButton.getLastValue() != NO_CLICK ||
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3318      	adds	r3, #24
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fd97 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 800766a:	4603      	mov	r3, r0
			nextButton.getLastValue() != NO_CLICK ||
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10e      	bne.n	800768e <_ZN10UserInputs8isAnyKeyEv+0x36>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3330      	adds	r3, #48	; 0x30
 8007674:	4618      	mov	r0, r3
 8007676:	f000 fd8f 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 800767a:	4603      	mov	r3, r0
	return backButton.getLastValue() != NO_CLICK ||
 800767c:	2b00      	cmp	r3, #0
 800767e:	d106      	bne.n	800768e <_ZN10UserInputs8isAnyKeyEv+0x36>
			startButton.getLastValue() != NO_CLICK;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fd88 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 8007688:	4603      	mov	r3, r0
			nextButton.getLastValue() != NO_CLICK ||
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <_ZN10UserInputs8isAnyKeyEv+0x3a>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <_ZN10UserInputs8isAnyKeyEv+0x3c>
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <_ZN10UserInputs19isReturnBackRequestEv>:
bool UserInputs::isReturnBackRequest(){
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	ButtonOutput backOutput = backButton.getLastValue();
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fd75 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]
	return backOutput == HOLD_CLICK;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	bf0c      	ite	eq
 80076b8:	2301      	moveq	r3, #1
 80076ba:	2300      	movne	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZN10UserInputs13isBackRequestEv>:
bool UserInputs::isBackRequest(){
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
	ButtonOutput backOutput = backButton.getLastValue();
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3318      	adds	r3, #24
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fd60 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
	return backOutput == CLICK ||
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d002      	beq.n	80076e8 <_ZN10UserInputs13isBackRequestEv+0x22>
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d101      	bne.n	80076ec <_ZN10UserInputs13isBackRequestEv+0x26>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <_ZN10UserInputs13isBackRequestEv+0x28>
 80076ec:	2300      	movs	r3, #0
			backOutput == DOUBLE_CLICK;
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <_ZN10UserInputs13isNextRequestEv>:
bool UserInputs::isNextRequest(){
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
	ButtonOutput nextOutput = nextButton.getLastValue();
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3330      	adds	r3, #48	; 0x30
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fd48 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]
	return nextOutput == CLICK ||
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d002      	beq.n	8007718 <_ZN10UserInputs13isNextRequestEv+0x22>
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2b03      	cmp	r3, #3
 8007716:	d101      	bne.n	800771c <_ZN10UserInputs13isNextRequestEv+0x26>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <_ZN10UserInputs13isNextRequestEv+0x28>
 800771c:	2300      	movs	r3, #0
			nextOutput == DOUBLE_CLICK;
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <_ZN10UserInputs15isSelectRequestEv>:
bool UserInputs::isSelectRequest(){
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
	ButtonOutput startOutput = startButton.getLastValue();
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fd31 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 8007736:	4603      	mov	r3, r0
 8007738:	73fb      	strb	r3, [r7, #15]
	return startOutput == CLICK ||
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d002      	beq.n	8007746 <_ZN10UserInputs15isSelectRequestEv+0x20>
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b03      	cmp	r3, #3
 8007744:	d101      	bne.n	800774a <_ZN10UserInputs15isSelectRequestEv+0x24>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <_ZN10UserInputs15isSelectRequestEv+0x26>
 800774a:	2300      	movs	r3, #0
			startOutput == DOUBLE_CLICK;
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <_ZN10UserInputs17isSetValueRequestEv>:
bool UserInputs::isSetValueRequest(){
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	ButtonOutput startOutput = startButton.getLastValue();
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fd1a 	bl	8008198 <_ZNK13ComplexButton12getLastValueEv>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
	return startOutput == HOLD_CLICK;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b02      	cmp	r3, #2
 800776c:	bf0c      	ite	eq
 800776e:	2301      	moveq	r3, #1
 8007770:	2300      	movne	r3, #0
 8007772:	b2db      	uxtb	r3, r3
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <_ZNK10UserInputs8getData0Ev>:



float UserInputs::getData0() const {
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
    return trimpot0.getData();
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3348      	adds	r3, #72	; 0x48
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fc95 	bl	80090b8 <_ZNK7Trimpot7getDataEv>
 800778e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007792:	eeb0 0a67 	vmov.f32	s0, s15
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <_ZNK10UserInputs8getData1Ev>:

float UserInputs::getData1() const {
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
    return trimpot1.getData();
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3354      	adds	r3, #84	; 0x54
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fc85 	bl	80090b8 <_ZNK7Trimpot7getDataEv>
 80077ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80077b2:	eeb0 0a67 	vmov.f32	s0, s15
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <_ZNK10UserInputs8getData0Eff>:

float UserInputs::getData0(float min, float max) const {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80077c8:	edc7 0a01 	vstr	s1, [r7, #4]
    return trimpot0.getData(min, max);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3348      	adds	r3, #72	; 0x48
 80077d0:	edd7 0a01 	vldr	s1, [r7, #4]
 80077d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fc7c 	bl	80090d6 <_ZNK7Trimpot7getDataEff>
 80077de:	eef0 7a40 	vmov.f32	s15, s0
}
 80077e2:	eeb0 0a67 	vmov.f32	s0, s15
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <_ZNK10UserInputs8getData1Eff>:

float UserInputs::getData1(float min, float max) const {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80077f8:	edc7 0a01 	vstr	s1, [r7, #4]
    return trimpot1.getData(min, max);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3354      	adds	r3, #84	; 0x54
 8007800:	edd7 0a01 	vldr	s1, [r7, #4]
 8007804:	ed97 0a02 	vldr	s0, [r7, #8]
 8007808:	4618      	mov	r0, r3
 800780a:	f001 fc64 	bl	80090d6 <_ZNK7Trimpot7getDataEff>
 800780e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007812:	eeb0 0a67 	vmov.f32	s0, s15
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <_ZN13EnemyPositionC1Ev>:
#include "enemy_position.h"

#include <cstdlib>
#include <cstdio>

EnemyPosition::EnemyPosition() : direction(0), proximity(PROXIMITY_NO) {}
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2203      	movs	r2, #3
 800782e:	705a      	strb	r2, [r3, #1]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
	...

08007840 <_ZN13EnemyPositionC1Eh>:

EnemyPosition::EnemyPosition(int8_t dir, int8_t prox) : direction(dir), proximity(prox) {}

EnemyPosition::EnemyPosition(uint8_t enemyPositionId) {
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
	if(enemyPositionId >= NOT_KNOWN_POSITION_ID) {
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	2b1f      	cmp	r3, #31
 8007850:	d903      	bls.n	800785a <_ZN13EnemyPositionC1Eh+0x1a>
	        proximity = PROXIMITY_NO;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2203      	movs	r2, #3
 8007856:	705a      	strb	r2, [r3, #1]
	        return;
 8007858:	e031      	b.n	80078be <_ZN13EnemyPositionC1Eh+0x7e>
	}
	proximity = enemyPositionId / DIRECTIONS_NO;
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <_ZN13EnemyPositionC1Eh+0x8c>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	089b      	lsrs	r3, r3, #2
 8007864:	b2db      	uxtb	r3, r3
 8007866:	b25a      	sxtb	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	705a      	strb	r2, [r3, #1]
	direction = enemyPositionId % DIRECTIONS_NO;
 800786c:	78f9      	ldrb	r1, [r7, #3]
 800786e:	4b17      	ldr	r3, [pc, #92]	; (80078cc <_ZN13EnemyPositionC1Eh+0x8c>)
 8007870:	fba3 2301 	umull	r2, r3, r3, r1
 8007874:	089a      	lsrs	r2, r3, #2
 8007876:	4613      	mov	r3, r2
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	1acb      	subs	r3, r1, r3
 8007882:	b2db      	uxtb	r3, r3
 8007884:	b25a      	sxtb	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	701a      	strb	r2, [r3, #0]
	if(proximity == 2) {
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d114      	bne.n	80078be <_ZN13EnemyPositionC1Eh+0x7e>
		if(direction > 2)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f993 3000 	ldrsb.w	r3, [r3]
 800789a:	2b02      	cmp	r3, #2
 800789c:	dd08      	ble.n	80078b0 <_ZN13EnemyPositionC1Eh+0x70>
			direction++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f993 3000 	ldrsb.w	r3, [r3]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	b25a      	sxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	701a      	strb	r2, [r3, #0]
		direction = direction << 1;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f993 3000 	ldrsb.w	r3, [r3]
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	b25a      	sxtb	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	701a      	strb	r2, [r3, #0]
	}
}
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	4ec4ec4f 	.word	0x4ec4ec4f

080078d0 <_ZNK13EnemyPositioneqERKS_>:

bool EnemyPosition::operator==(const EnemyPosition& other) const {
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
    return this->toID() == other.toID();
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f820 	bl	8007920 <_ZNK13EnemyPosition4toIDEv>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461c      	mov	r4, r3
 80078e4:	6838      	ldr	r0, [r7, #0]
 80078e6:	f000 f81b 	bl	8007920 <_ZNK13EnemyPosition4toIDEv>
 80078ea:	4603      	mov	r3, r0
 80078ec:	429c      	cmp	r4, r3
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd90      	pop	{r4, r7, pc}

080078fe <_ZNK13EnemyPositionneERKS_>:

bool EnemyPosition::operator!=(const EnemyPosition& other) const {
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
    return !(*this == other);  // Or alternatively, return this->toID() != other.toID();
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ffe0 	bl	80078d0 <_ZNK13EnemyPositioneqERKS_>
 8007910:	4603      	mov	r3, r0
 8007912:	f083 0301 	eor.w	r3, r3, #1
 8007916:	b2db      	uxtb	r3, r3
}
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <_ZNK13EnemyPosition4toIDEv>:

uint8_t EnemyPosition::toID() const {
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
    if(proximity == PROXIMITY_NO)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800792e:	2b03      	cmp	r3, #3
 8007930:	d101      	bne.n	8007936 <_ZNK13EnemyPosition4toIDEv+0x16>
        return NOT_KNOWN_POSITION_ID;
 8007932:	2320      	movs	r3, #32
 8007934:	e020      	b.n	8007978 <_ZNK13EnemyPosition4toIDEv+0x58>
    uint8_t newDirection = direction;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f993 3000 	ldrsb.w	r3, [r3]
 800793c:	73fb      	strb	r3, [r7, #15]
    if(proximity == 2){
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d10a      	bne.n	800795e <_ZNK13EnemyPosition4toIDEv+0x3e>
        if(direction > 6){
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f993 3000 	ldrsb.w	r3, [r3]
 800794e:	2b06      	cmp	r3, #6
 8007950:	dd02      	ble.n	8007958 <_ZNK13EnemyPosition4toIDEv+0x38>
        	newDirection -= 2;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	3b02      	subs	r3, #2
 8007956:	73fb      	strb	r3, [r7, #15]
        }

        newDirection = newDirection >> 1;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
    }
    return proximity * DIRECTIONS_NO + newDirection;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	0052      	lsls	r2, r2, #1
 800796a:	441a      	add	r2, r3
 800796c:	0092      	lsls	r2, r2, #2
 800796e:	4413      	add	r3, r2
 8007970:	b2da      	uxtb	r2, r3
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	4413      	add	r3, r2
 8007976:	b2db      	uxtb	r3, r3
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <_ZN13EnemyPosition18getCenterDirectionEv>:

uint8_t EnemyPosition::getCenterDirection() {
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
    // Assuming center direction is halfway through DIRECTIONS_NO
    return DIRECTIONS_NO / 2;
 800798c:	2306      	movs	r3, #6
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <_ZN13EnemyPosition30getDistanceFromCenterDirectionEv>:

uint8_t EnemyPosition::getDistanceFromCenterDirection() {
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
    int8_t center = getCenterDirection();
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff ffee 	bl	8007984 <_ZN13EnemyPosition18getCenterDirectionEv>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
    return std::abs(direction - center);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f993 3000 	ldrsb.w	r3, [r3]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfb8      	it	lt
 80079be:	425b      	neglt	r3, r3
 80079c0:	b2db      	uxtb	r3, r3
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <_ZNK13EnemyPosition10isNotKnownEv>:
bool EnemyPosition::isNotKnown() const{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
	return proximity >= PROXIMITY_NO;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	bfcc      	ite	gt
 80079dc:	2301      	movgt	r3, #1
 80079de:	2300      	movle	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <_ZN13EnemyPosition7isKnownEv>:
bool EnemyPosition::isKnown(){
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
	return !isNotKnown();
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ffe7 	bl	80079ca <_ZNK13EnemyPosition10isNotKnownEv>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f083 0301 	eor.w	r3, r3, #1
 8007a02:	b2db      	uxtb	r3, r3
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <_ZNK13EnemyPosition22isApproximatelyInFrontEv>:
bool EnemyPosition::isApproximatelyInFront() const{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	return direction >= FRONT_DIRECTION - 1 &&
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f993 3000 	ldrsb.w	r3, [r3]
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	dd06      	ble.n	8007a2c <_ZNK13EnemyPosition22isApproximatelyInFrontEv+0x20>
			direction <= FRONT_DIRECTION + 1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f993 3000 	ldrsb.w	r3, [r3]
	return direction >= FRONT_DIRECTION - 1 &&
 8007a24:	2b07      	cmp	r3, #7
 8007a26:	dc01      	bgt.n	8007a2c <_ZNK13EnemyPosition22isApproximatelyInFrontEv+0x20>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <_ZNK13EnemyPosition22isApproximatelyInFrontEv+0x22>
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <_ZNK13EnemyPosition8isInLeftEv>:
bool EnemyPosition::isInLeft( )const {
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
	return direction <= FRONT_DIRECTION;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f993 3000 	ldrsb.w	r3, [r3]
 8007a48:	2b06      	cmp	r3, #6
 8007a4a:	bfd4      	ite	le
 8007a4c:	2301      	movle	r3, #1
 8007a4e:	2300      	movgt	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <_ZN13EnemyPosition18frontEnemyPositionEv>:


EnemyPosition EnemyPosition::notKnownEnemyPosition(){
	return EnemyPosition();
}
EnemyPosition EnemyPosition::frontEnemyPosition(){
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
	return EnemyPosition(19);
 8007a64:	1d3b      	adds	r3, r7, #4
 8007a66:	2113      	movs	r1, #19
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fee9 	bl	8007840 <_ZN13EnemyPositionC1Eh>
 8007a6e:	88bb      	ldrh	r3, [r7, #4]
 8007a70:	803b      	strh	r3, [r7, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	783a      	ldrb	r2, [r7, #0]
 8007a76:	f362 0307 	bfi	r3, r2, #0, #8
 8007a7a:	787a      	ldrb	r2, [r7, #1]
 8007a7c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <_ZN12LinePositionC1Ev>:
 *      Author: BRG
 */

#include "line_position.h"

LinePosition::LinePosition() : linePosition(LinePositionType::None) {}
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2208      	movs	r2, #8
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>:

void LinePosition::setLinePosition(LinePositionType position) {
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
    linePosition = position;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <_ZNK12LinePosition15getLinePositionEv>:

LinePositionType LinePosition::getLinePosition() const {
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
    return linePosition;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <_ZNK12LinePositioneqERKS_>:

bool LinePosition::operator==(const LinePosition& other) const {
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
    return this->linePosition == other.linePosition;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	bf0c      	ite	eq
 8007aee:	2301      	moveq	r3, #1
 8007af0:	2300      	movne	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <_ZNK12LinePositionneERKS_>:

bool LinePosition::operator!=(const LinePosition& other) const {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
    return !(*this == other);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff ffe3 	bl	8007ad8 <_ZNK12LinePositioneqERKS_>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f083 0301 	eor.w	r3, r3, #1
 8007b18:	b2db      	uxtb	r3, r3
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <_ZNK12LinePosition11isFrontLeftEv>:

bool LinePosition::isFrontLeft() const {
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::FrontLeft;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf0c      	ite	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	2300      	movne	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <_ZNK12LinePosition7isFrontEv>:

bool LinePosition::isFront() const {
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Front;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <_ZNK12LinePosition12isFrontRightEv>:

bool LinePosition::isFrontRight() const {
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::FrontRight;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	bf0c      	ite	eq
 8007b76:	2301      	moveq	r3, #1
 8007b78:	2300      	movne	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <_ZNK12LinePosition10isBackLeftEv>:

bool LinePosition::isBackLeft() const {
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::BackLeft;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <_ZNK12LinePosition6isBackEv>:

bool LinePosition::isBack() const {
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Back;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	bf0c      	ite	eq
 8007bba:	2301      	moveq	r3, #1
 8007bbc:	2300      	movne	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <_ZNK12LinePosition11isBackRightEv>:

bool LinePosition::isBackRight() const {
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::BackRight;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <_ZNK12LinePosition6isLeftEv>:

bool LinePosition::isLeft() const {
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Left;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b06      	cmp	r3, #6
 8007bfc:	bf0c      	ite	eq
 8007bfe:	2301      	moveq	r3, #1
 8007c00:	2300      	movne	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <_ZNK12LinePosition7isRightEv>:

bool LinePosition::isRight() const {
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::Right;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b07      	cmp	r3, #7
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <_ZNK12LinePosition6isNoneEv>:

bool LinePosition::isNone() const {
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
    return linePosition == LinePositionType::None;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <_ZNK12LinePosition10isDetectedEv>:

bool LinePosition::isDetected() const {
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
    return linePosition != LinePositionType::None;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	bf14      	ite	ne
 8007c64:	2301      	movne	r3, #1
 8007c66:	2300      	moveq	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <_ZN5StateC1Ev>:
 *  Created on: Aug 17, 2023
 *      Author: BRG
 */
#include "state.h"

State::State(){
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff ff00 	bl	8007a88 <_ZN12LinePositionC1Ev>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fdc5 	bl	800781c <_ZN13EnemyPositionC1Ev>

}
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8007ca0:	bf00      	nop
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af04      	add	r7, sp, #16
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cba:	9302      	str	r3, [sp, #8]
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	1dfb      	adds	r3, r7, #7
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2178      	movs	r1, #120	; 0x78
 8007cca:	4803      	ldr	r0, [pc, #12]	; (8007cd8 <ssd1306_WriteCommand+0x2c>)
 8007ccc:	f7fa ff74 	bl	8002bb8 <HAL_I2C_Mem_Write>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	200002b4 	.word	0x200002b4

08007cdc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af04      	add	r7, sp, #16
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f04f 32ff 	mov.w	r2, #4294967295
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	2240      	movs	r2, #64	; 0x40
 8007cfa:	2178      	movs	r1, #120	; 0x78
 8007cfc:	4803      	ldr	r0, [pc, #12]	; (8007d0c <ssd1306_WriteData+0x30>)
 8007cfe:	f7fa ff5b 	bl	8002bb8 <HAL_I2C_Mem_Write>
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200002b4 	.word	0x200002b4

08007d10 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8007d14:	f7ff ffc2 	bl	8007c9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8007d18:	2064      	movs	r0, #100	; 0x64
 8007d1a:	f7f9 ff29 	bl	8001b70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f000 f9da 	bl	80080d8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8007d24:	2020      	movs	r0, #32
 8007d26:	f7ff ffc1 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	f7ff ffbe 	bl	8007cac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007d30:	20b0      	movs	r0, #176	; 0xb0
 8007d32:	f7ff ffbb 	bl	8007cac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8007d36:	20c8      	movs	r0, #200	; 0xc8
 8007d38:	f7ff ffb8 	bl	8007cac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f7ff ffb5 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8007d42:	2010      	movs	r0, #16
 8007d44:	f7ff ffb2 	bl	8007cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8007d48:	2040      	movs	r0, #64	; 0x40
 8007d4a:	f7ff ffaf 	bl	8007cac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8007d4e:	20ff      	movs	r0, #255	; 0xff
 8007d50:	f000 f9ae 	bl	80080b0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8007d54:	20a1      	movs	r0, #161	; 0xa1
 8007d56:	f7ff ffa9 	bl	8007cac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8007d5a:	20a6      	movs	r0, #166	; 0xa6
 8007d5c:	f7ff ffa6 	bl	8007cac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8007d60:	20a8      	movs	r0, #168	; 0xa8
 8007d62:	f7ff ffa3 	bl	8007cac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8007d66:	203f      	movs	r0, #63	; 0x3f
 8007d68:	f7ff ffa0 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007d6c:	20a4      	movs	r0, #164	; 0xa4
 8007d6e:	f7ff ff9d 	bl	8007cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8007d72:	20d3      	movs	r0, #211	; 0xd3
 8007d74:	f7ff ff9a 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f7ff ff97 	bl	8007cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8007d7e:	20d5      	movs	r0, #213	; 0xd5
 8007d80:	f7ff ff94 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8007d84:	20f0      	movs	r0, #240	; 0xf0
 8007d86:	f7ff ff91 	bl	8007cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007d8a:	20d9      	movs	r0, #217	; 0xd9
 8007d8c:	f7ff ff8e 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007d90:	2022      	movs	r0, #34	; 0x22
 8007d92:	f7ff ff8b 	bl	8007cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8007d96:	20da      	movs	r0, #218	; 0xda
 8007d98:	f7ff ff88 	bl	8007cac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8007d9c:	2012      	movs	r0, #18
 8007d9e:	f7ff ff85 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8007da2:	20db      	movs	r0, #219	; 0xdb
 8007da4:	f7ff ff82 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007da8:	2020      	movs	r0, #32
 8007daa:	f7ff ff7f 	bl	8007cac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8007dae:	208d      	movs	r0, #141	; 0x8d
 8007db0:	f7ff ff7c 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8007db4:	2014      	movs	r0, #20
 8007db6:	f7ff ff79 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8007dba:	2001      	movs	r0, #1
 8007dbc:	f000 f98c 	bl	80080d8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f000 f80f 	bl	8007de4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8007dc6:	f000 f831 	bl	8007e2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <ssd1306_Init+0xd0>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8007dd0:	4b03      	ldr	r3, [pc, #12]	; (8007de0 <ssd1306_Init+0xd0>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8007dd6:	4b02      	ldr	r3, [pc, #8]	; (8007de0 <ssd1306_Init+0xd0>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	711a      	strb	r2, [r3, #4]
}
 8007ddc:	bf00      	nop
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20000804 	.word	0x20000804

08007de4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	e00d      	b.n	8007e10 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <ssd1306_Fill+0x1a>
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	e000      	b.n	8007e00 <ssd1306_Fill+0x1c>
 8007dfe:	21ff      	movs	r1, #255	; 0xff
 8007e00:	4a09      	ldr	r2, [pc, #36]	; (8007e28 <ssd1306_Fill+0x44>)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4413      	add	r3, r2
 8007e06:	460a      	mov	r2, r1
 8007e08:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e16:	d3ed      	bcc.n	8007df4 <ssd1306_Fill+0x10>
    }
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000404 	.word	0x20000404

08007e2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007e32:	2300      	movs	r3, #0
 8007e34:	71fb      	strb	r3, [r7, #7]
 8007e36:	e016      	b.n	8007e66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	3b50      	subs	r3, #80	; 0x50
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff ff34 	bl	8007cac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7ff ff31 	bl	8007cac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8007e4a:	2010      	movs	r0, #16
 8007e4c:	f7ff ff2e 	bl	8007cac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	01db      	lsls	r3, r3, #7
 8007e54:	4a08      	ldr	r2, [pc, #32]	; (8007e78 <ssd1306_UpdateScreen+0x4c>)
 8007e56:	4413      	add	r3, r2
 8007e58:	2180      	movs	r1, #128	; 0x80
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff ff3e 	bl	8007cdc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	3301      	adds	r3, #1
 8007e64:	71fb      	strb	r3, [r7, #7]
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b07      	cmp	r3, #7
 8007e6a:	d9e5      	bls.n	8007e38 <ssd1306_UpdateScreen+0xc>
    }
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000404 	.word	0x20000404

08007e7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
 8007e86:	460b      	mov	r3, r1
 8007e88:	71bb      	strb	r3, [r7, #6]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8007e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	db3d      	blt.n	8007f12 <ssd1306_DrawPixel+0x96>
 8007e96:	79bb      	ldrb	r3, [r7, #6]
 8007e98:	2b3f      	cmp	r3, #63	; 0x3f
 8007e9a:	d83a      	bhi.n	8007f12 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8007e9c:	797b      	ldrb	r3, [r7, #5]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d11a      	bne.n	8007ed8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007ea2:	79fa      	ldrb	r2, [r7, #7]
 8007ea4:	79bb      	ldrb	r3, [r7, #6]
 8007ea6:	08db      	lsrs	r3, r3, #3
 8007ea8:	b2d8      	uxtb	r0, r3
 8007eaa:	4603      	mov	r3, r0
 8007eac:	01db      	lsls	r3, r3, #7
 8007eae:	4413      	add	r3, r2
 8007eb0:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <ssd1306_DrawPixel+0xa4>)
 8007eb2:	5cd3      	ldrb	r3, [r2, r3]
 8007eb4:	b25a      	sxtb	r2, r3
 8007eb6:	79bb      	ldrb	r3, [r7, #6]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	b259      	sxtb	r1, r3
 8007ec8:	79fa      	ldrb	r2, [r7, #7]
 8007eca:	4603      	mov	r3, r0
 8007ecc:	01db      	lsls	r3, r3, #7
 8007ece:	4413      	add	r3, r2
 8007ed0:	b2c9      	uxtb	r1, r1
 8007ed2:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <ssd1306_DrawPixel+0xa4>)
 8007ed4:	54d1      	strb	r1, [r2, r3]
 8007ed6:	e01d      	b.n	8007f14 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007ed8:	79fa      	ldrb	r2, [r7, #7]
 8007eda:	79bb      	ldrb	r3, [r7, #6]
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	b2d8      	uxtb	r0, r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	01db      	lsls	r3, r3, #7
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a0e      	ldr	r2, [pc, #56]	; (8007f20 <ssd1306_DrawPixel+0xa4>)
 8007ee8:	5cd3      	ldrb	r3, [r2, r3]
 8007eea:	b25a      	sxtb	r2, r3
 8007eec:	79bb      	ldrb	r3, [r7, #6]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef8:	b25b      	sxtb	r3, r3
 8007efa:	43db      	mvns	r3, r3
 8007efc:	b25b      	sxtb	r3, r3
 8007efe:	4013      	ands	r3, r2
 8007f00:	b259      	sxtb	r1, r3
 8007f02:	79fa      	ldrb	r2, [r7, #7]
 8007f04:	4603      	mov	r3, r0
 8007f06:	01db      	lsls	r3, r3, #7
 8007f08:	4413      	add	r3, r2
 8007f0a:	b2c9      	uxtb	r1, r1
 8007f0c:	4a04      	ldr	r2, [pc, #16]	; (8007f20 <ssd1306_DrawPixel+0xa4>)
 8007f0e:	54d1      	strb	r1, [r2, r3]
 8007f10:	e000      	b.n	8007f14 <ssd1306_DrawPixel+0x98>
        return;
 8007f12:	bf00      	nop
    }
}
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20000404 	.word	0x20000404

08007f24 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b089      	sub	sp, #36	; 0x24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	1d38      	adds	r0, r7, #4
 8007f2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007f32:	461a      	mov	r2, r3
 8007f34:	4623      	mov	r3, r4
 8007f36:	73fb      	strb	r3, [r7, #15]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b1f      	cmp	r3, #31
 8007f40:	d902      	bls.n	8007f48 <ssd1306_WriteChar+0x24>
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b7e      	cmp	r3, #126	; 0x7e
 8007f46:	d901      	bls.n	8007f4c <ssd1306_WriteChar+0x28>
        return 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e06d      	b.n	8008028 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007f4c:	4b38      	ldr	r3, [pc, #224]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	793b      	ldrb	r3, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	2b80      	cmp	r3, #128	; 0x80
 8007f58:	dc06      	bgt.n	8007f68 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8007f5a:	4b35      	ldr	r3, [pc, #212]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	797b      	ldrb	r3, [r7, #5]
 8007f62:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007f64:	2b40      	cmp	r3, #64	; 0x40
 8007f66:	dd01      	ble.n	8007f6c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e05d      	b.n	8008028 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e04c      	b.n	800800c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	3b20      	subs	r3, #32
 8007f78:	7979      	ldrb	r1, [r7, #5]
 8007f7a:	fb01 f303 	mul.w	r3, r1, r3
 8007f7e:	4619      	mov	r1, r3
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	440b      	add	r3, r1
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	4413      	add	r3, r2
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	61bb      	str	r3, [r7, #24]
 8007f90:	e034      	b.n	8007ffc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d012      	beq.n	8007fc8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007fa2:	4b23      	ldr	r3, [pc, #140]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	b2d8      	uxtb	r0, r3
 8007fb0:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8007fb2:	885b      	ldrh	r3, [r3, #2]
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	4413      	add	r3, r2
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	7bba      	ldrb	r2, [r7, #14]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f7ff ff5b 	bl	8007e7c <ssd1306_DrawPixel>
 8007fc6:	e016      	b.n	8007ff6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007fc8:	4b19      	ldr	r3, [pc, #100]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	b2d8      	uxtb	r0, r3
 8007fd6:	4b16      	ldr	r3, [pc, #88]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b2d9      	uxtb	r1, r3
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f7ff ff43 	bl	8007e7c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	793b      	ldrb	r3, [r7, #4]
 8007ffe:	461a      	mov	r2, r3
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	4293      	cmp	r3, r2
 8008004:	d3c5      	bcc.n	8007f92 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	3301      	adds	r3, #1
 800800a:	61fb      	str	r3, [r7, #28]
 800800c:	797b      	ldrb	r3, [r7, #5]
 800800e:	461a      	mov	r2, r3
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	4293      	cmp	r3, r2
 8008014:	d3ad      	bcc.n	8007f72 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8008018:	881a      	ldrh	r2, [r3, #0]
 800801a:	793b      	ldrb	r3, [r7, #4]
 800801c:	b29b      	uxth	r3, r3
 800801e:	4413      	add	r3, r2
 8008020:	b29a      	uxth	r2, r3
 8008022:	4b03      	ldr	r3, [pc, #12]	; (8008030 <ssd1306_WriteChar+0x10c>)
 8008024:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3724      	adds	r7, #36	; 0x24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd90      	pop	{r4, r7, pc}
 8008030:	20000804 	.word	0x20000804

08008034 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	1d38      	adds	r0, r7, #4
 800803e:	e880 0006 	stmia.w	r0, {r1, r2}
 8008042:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8008044:	e012      	b.n	800806c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	7818      	ldrb	r0, [r3, #0]
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	1d3a      	adds	r2, r7, #4
 800804e:	ca06      	ldmia	r2, {r1, r2}
 8008050:	f7ff ff68 	bl	8007f24 <ssd1306_WriteChar>
 8008054:	4603      	mov	r3, r0
 8008056:	461a      	mov	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	e008      	b.n	8008078 <ssd1306_WriteString+0x44>
        }
        str++;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e8      	bne.n	8008046 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	781b      	ldrb	r3, [r3, #0]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	4603      	mov	r3, r0
 8008088:	460a      	mov	r2, r1
 800808a:	71fb      	strb	r3, [r7, #7]
 800808c:	4613      	mov	r3, r2
 800808e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	b29a      	uxth	r2, r3
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <ssd1306_SetCursor+0x2c>)
 8008096:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008098:	79bb      	ldrb	r3, [r7, #6]
 800809a:	b29a      	uxth	r2, r3
 800809c:	4b03      	ldr	r3, [pc, #12]	; (80080ac <ssd1306_SetCursor+0x2c>)
 800809e:	805a      	strh	r2, [r3, #2]
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000804 	.word	0x20000804

080080b0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80080ba:	2381      	movs	r3, #129	; 0x81
 80080bc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff fdf3 	bl	8007cac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fdef 	bl	8007cac <ssd1306_WriteCommand>
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80080e8:	23af      	movs	r3, #175	; 0xaf
 80080ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80080ec:	4b08      	ldr	r3, [pc, #32]	; (8008110 <ssd1306_SetDisplayOn+0x38>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	715a      	strb	r2, [r3, #5]
 80080f2:	e004      	b.n	80080fe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80080f4:	23ae      	movs	r3, #174	; 0xae
 80080f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <ssd1306_SetDisplayOn+0x38>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff fdd3 	bl	8007cac <ssd1306_WriteCommand>
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000804 	.word	0x20000804

08008114 <_ZN13ComplexButtonC1EP12GPIO_TypeDeft>:
#include "button_driver.h"

#include "stm32f4xx_hal.h"


ComplexButton::ComplexButton(GPIO_TypeDef * GPIOX,uint16_t PIN):
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	80fb      	strh	r3, [r7, #6]
GPIOX(GPIOX),
PIN(PIN),
clock(HAL_GetTick()),
buttonState(WaitForPress)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008130:	805a      	strh	r2, [r3, #2]
GPIOX(GPIOX),
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	609a      	str	r2, [r3, #8]
PIN(PIN),
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	88fa      	ldrh	r2, [r7, #6]
 800813c:	819a      	strh	r2, [r3, #12]
clock(HAL_GetTick()),
 800813e:	f7f9 fd0b 	bl	8001b58 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	611a      	str	r2, [r3, #16]
buttonState(WaitForPress)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	751a      	strb	r2, [r3, #20]
{};
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZN13ComplexButton6configEv>:


void ComplexButton::config()
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008160:	f107 030c 	add.w	r3, r7, #12
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	605a      	str	r2, [r3, #4]
 800816a:	609a      	str	r2, [r3, #8]
 800816c:	60da      	str	r2, [r3, #12]
 800816e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = PIN;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	899b      	ldrh	r3, [r3, #12]
 8008174:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008176:	2300      	movs	r3, #0
 8008178:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800817a:	2301      	movs	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800817e:	f107 030c 	add.w	r3, r7, #12
 8008182:	4619      	mov	r1, r3
 8008184:	4803      	ldr	r0, [pc, #12]	; (8008194 <_ZN13ComplexButton6configEv+0x3c>)
 8008186:	f7fa fa0d 	bl	80025a4 <HAL_GPIO_Init>
}
 800818a:	bf00      	nop
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40020400 	.word	0x40020400

08008198 <_ZNK13ComplexButton12getLastValueEv>:

ButtonOutput ComplexButton::getLastValue() const {
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	return lastValue;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	791b      	ldrb	r3, [r3, #4]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <_ZN13ComplexButton4readEv>:


ButtonOutput ComplexButton::read()
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	GPIO_PinState pinState = (HAL_GPIO_ReadPin(GPIOX, PIN) == GPIO_PIN_RESET) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	899b      	ldrh	r3, [r3, #12]
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7fa fb82 	bl	80028cc <HAL_GPIO_ReadPin>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <_ZN13ComplexButton4readEv+0x22>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <_ZN13ComplexButton4readEv+0x24>
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]

	switch(buttonState) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7d1b      	ldrb	r3, [r3, #20]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d863      	bhi.n	80082a6 <_ZN13ComplexButton4readEv+0xf6>
 80081de:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <_ZN13ComplexButton4readEv+0x34>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	080081f5 	.word	0x080081f5
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008247 	.word	0x08008247
 80081f0:	0800828b 	.word	0x0800828b
		case ButtonState::WaitForPress:
			if(pinState == GPIO_PIN_SET) {
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d14e      	bne.n	8008298 <_ZN13ComplexButton4readEv+0xe8>
				clock = HAL_GetTick(); // Capture press time
 80081fa:	f7f9 fcad 	bl	8001b58 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	611a      	str	r2, [r3, #16]
				buttonState = ButtonState::WaitForRelease;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	751a      	strb	r2, [r3, #20]
			}
			break;
 800820a:	e045      	b.n	8008298 <_ZN13ComplexButton4readEv+0xe8>
		case ButtonState::WaitForRelease:
			if(pinState == GPIO_PIN_RESET) {
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <_ZN13ComplexButton4readEv+0x68>
				buttonState = ButtonState::CheckDoubleClick;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2202      	movs	r2, #2
 8008216:	751a      	strb	r2, [r3, #20]
			}
			// Check for hold duration
			if(HAL_GetTick() - clock >= HOLD_CLICK_PRESSING_TIME_MS) {
 8008218:	f7f9 fc9e 	bl	8001b58 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	8812      	ldrh	r2, [r2, #0]
 8008228:	4293      	cmp	r3, r2
 800822a:	bf2c      	ite	cs
 800822c:	2301      	movcs	r3, #1
 800822e:	2300      	movcc	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d032      	beq.n	800829c <_ZN13ComplexButton4readEv+0xec>
				buttonState = ButtonState::IdleAfterClick;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2203      	movs	r2, #3
 800823a:	751a      	strb	r2, [r3, #20]
				lastValue = HOLD_CLICK;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	711a      	strb	r2, [r3, #4]
				return HOLD_CLICK;
 8008242:	2302      	movs	r3, #2
 8008244:	e033      	b.n	80082ae <_ZN13ComplexButton4readEv+0xfe>
			}
			break;
		case ButtonState::CheckDoubleClick:
			if(pinState == GPIO_PIN_SET) {
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d107      	bne.n	800825c <_ZN13ComplexButton4readEv+0xac>
				buttonState = ButtonState::IdleAfterClick;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2203      	movs	r2, #3
 8008250:	751a      	strb	r2, [r3, #20]
				lastValue = DOUBLE_CLICK;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2203      	movs	r2, #3
 8008256:	711a      	strb	r2, [r3, #4]
				return DOUBLE_CLICK;
 8008258:	2303      	movs	r3, #3
 800825a:	e028      	b.n	80082ae <_ZN13ComplexButton4readEv+0xfe>
			}
			// If no second click for a certain duration
			if(HAL_GetTick() - clock >= DOUBLE_CLICK_TIME_MS) {
 800825c:	f7f9 fc7c 	bl	8001b58 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	8852      	ldrh	r2, [r2, #2]
 800826c:	4293      	cmp	r3, r2
 800826e:	bf2c      	ite	cs
 8008270:	2301      	movcs	r3, #1
 8008272:	2300      	movcc	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d012      	beq.n	80082a0 <_ZN13ComplexButton4readEv+0xf0>
				buttonState = ButtonState::WaitForPress;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	751a      	strb	r2, [r3, #20]
				lastValue = CLICK;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	711a      	strb	r2, [r3, #4]
				return CLICK;
 8008286:	2301      	movs	r3, #1
 8008288:	e011      	b.n	80082ae <_ZN13ComplexButton4readEv+0xfe>
			}
			break;
		case ButtonState::IdleAfterClick:
			if(pinState == GPIO_PIN_RESET) {
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <_ZN13ComplexButton4readEv+0xf4>
				buttonState = ButtonState::WaitForPress;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	751a      	strb	r2, [r3, #20]
			}
			break;
 8008296:	e005      	b.n	80082a4 <_ZN13ComplexButton4readEv+0xf4>
			break;
 8008298:	bf00      	nop
 800829a:	e004      	b.n	80082a6 <_ZN13ComplexButton4readEv+0xf6>
			break;
 800829c:	bf00      	nop
 800829e:	e002      	b.n	80082a6 <_ZN13ComplexButton4readEv+0xf6>
			break;
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <_ZN13ComplexButton4readEv+0xf6>
			break;
 80082a4:	bf00      	nop
		}

		lastValue = ButtonOutput::NO_CLICK;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	711a      	strb	r2, [r3, #4]
		return ButtonOutput::NO_CLICK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop

080082b8 <_ZN20Communication_DriverC1ERK25CommunicationDriverConfig>:
#include "stdio.h"
#include <stdarg.h>
#include "stm32f4xx_hal_uart.h"
#include "stm32f4xx_hal_def.h"

Communication_Driver::Communication_Driver(const CommunicationDriverConfig& config)
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
    : GPIOx_Start_Module(config.GPIOx_Start_Module),
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	601a      	str	r2, [r3, #0]
      PIN_Start_Module(config.PIIN_Start_Module)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	891a      	ldrh	r2, [r3, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	809a      	strh	r2, [r3, #4]
{
	huart.Instance = config.uartx;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	609a      	str	r2, [r3, #8]
	huart.Init.BaudRate = 115200;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80082e0:	60da      	str	r2, [r3, #12]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	611a      	str	r2, [r3, #16]
	huart.Init.StopBits = UART_STOPBITS_1;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	615a      	str	r2, [r3, #20]
	huart.Init.Parity = UART_PARITY_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE_TX_RX;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	220c      	movs	r2, #12
 80082f8:	61da      	str	r2, [r3, #28]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	621a      	str	r2, [r3, #32]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <_ZN20Communication_Driver6configEv>:

HAL_StatusTypeDef Communication_Driver::config(){
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800831c:	f107 030c 	add.w	r3, r7, #12
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	609a      	str	r2, [r3, #8]
 8008328:	60da      	str	r2, [r3, #12]
 800832a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = PIN_Start_Module;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	889b      	ldrh	r3, [r3, #4]
 8008330:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008332:	2300      	movs	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008336:	2302      	movs	r3, #2
 8008338:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx_Start_Module, &GPIO_InitStruct);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f107 020c 	add.w	r2, r7, #12
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f7fa f92d 	bl	80025a4 <HAL_GPIO_Init>
	return HAL_HalfDuplex_Init(&huart);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3308      	adds	r3, #8
 800834e:	4618      	mov	r0, r3
 8008350:	f7fb fd85 	bl	8003e5e <HAL_HalfDuplex_Init>
 8008354:	4603      	mov	r3, r0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <_ZN20Communication_Driver15readStartModuleEv>:
    return HAL_UART_Transmit(&huart, (uint8_t *)buffer, rc , 100);

}

bool Communication_Driver::readStartModule()
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(GPIOx_Start_Module, PIN_Start_Module) == GPIO_PIN_SET;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	889b      	ldrh	r3, [r3, #4]
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7fa faab 	bl	80028cc <HAL_GPIO_ReadPin>
 8008376:	4603      	mov	r3, r0
 8008378:	2b01      	cmp	r3, #1
 800837a:	bf0c      	ite	eq
 800837c:	2301      	moveq	r3, #1
 800837e:	2300      	movne	r3, #0
 8008380:	b2db      	uxtb	r3, r3
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig>:
 */

#include "enemy_detection.h"

// Constructor
EnemyDetection::EnemyDetection(const EnemyDetectionConfig config[NUMBER_OF_SENSORS]) {
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
    for(uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
 8008398:	e015      	b.n	80083c6 <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig+0x3c>
        SENSOR_GPIO[i] = config[i].gpio;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4413      	add	r3, r2
 80083a2:	7bfa      	ldrb	r2, [r7, #15]
 80083a4:	6819      	ldr	r1, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SENSOR_PIN[i] = config[i].pin;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	4413      	add	r3, r2
 80083b4:	7bfa      	ldrb	r2, [r7, #15]
 80083b6:	8899      	ldrh	r1, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3210      	adds	r2, #16
 80083bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	3301      	adds	r3, #1
 80083c4:	73fb      	strb	r3, [r7, #15]
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b07      	cmp	r3, #7
 80083ca:	d9e6      	bls.n	800839a <_ZN14EnemyDetectionC1EPK20EnemyDetectionConfig+0x10>
    }
}
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <_ZN14EnemyDetection6configEv>:

// Initialize the sensors
void EnemyDetection::config() {
 80083da:	b480      	push	{r7}
 80083dc:	b085      	sub	sp, #20
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
	// Here, you can initialize your GPIOs or any startup configuration for the sensors.
	for (uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
 80083e6:	e002      	b.n	80083ee <_ZN14EnemyDetection6configEv+0x14>
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	3301      	adds	r3, #1
 80083ec:	73fb      	strb	r3, [r7, #15]
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b07      	cmp	r3, #7
 80083f2:	d9f9      	bls.n	80083e8 <_ZN14EnemyDetection6configEv+0xe>
		// Example: Initialize each sensor using GPIO and pin information
	}
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <_ZN14EnemyDetection11readSensorsEv>:

// Read the sensors and return their combined readings
uint32_t EnemyDetection::readSensors() {
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 800840e:	2300      	movs	r3, #0
 8008410:	72fb      	strb	r3, [r7, #11]
 8008412:	e01e      	b.n	8008452 <_ZN14EnemyDetection11readSensorsEv+0x50>
		// Read each sensor and combine their readings into result
		// This is just an example. The exact implementation depends on your sensor's behavior.
		if (HAL_GPIO_ReadPin(SENSOR_GPIO[i], SENSOR_PIN[i]) == GPIO_PIN_SET) {
 8008414:	7afa      	ldrb	r2, [r7, #11]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800841c:	7afa      	ldrb	r2, [r7, #11]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3210      	adds	r2, #16
 8008422:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008426:	4619      	mov	r1, r3
 8008428:	f7fa fa50 	bl	80028cc <HAL_GPIO_ReadPin>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	bf0c      	ite	eq
 8008432:	2301      	moveq	r3, #1
 8008434:	2300      	movne	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <_ZN14EnemyDetection11readSensorsEv+0x4a>
			result |= (1 << i);
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	2201      	movs	r2, #1
 8008440:	fa02 f303 	lsl.w	r3, r2, r3
 8008444:	461a      	mov	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < NUMBER_OF_SENSORS; i++) {
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b07      	cmp	r3, #7
 8008456:	d9dd      	bls.n	8008414 <_ZN14EnemyDetection11readSensorsEv+0x12>
		}
	}
	return result;
 8008458:	68fb      	ldr	r3, [r7, #12]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa>:

// Evaluate the votes of each sensor
uint8_t EnemyDetection::readAndTakeSensorsVotes(int8_t sensors_votes[EnemyPosition::KNOWN_POSITIONS_NO]) {
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i <= EnemyPosition::KNOWN_POSITIONS_NO;i++){
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	e007      	b.n	8008482 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x20>
		sensors_votes[i] = 0;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	4413      	add	r3, r2
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= EnemyPosition::KNOWN_POSITIONS_NO;i++){
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	3301      	adds	r3, #1
 8008480:	73fb      	strb	r3, [r7, #15]
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	2b20      	cmp	r3, #32
 8008486:	d9f4      	bls.n	8008472 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x10>
	}
	uint32_t sensorsOutput = readSensors();
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff ffba 	bl	8008402 <_ZN14EnemyDetection11readSensorsEv>
 800848e:	60b8      	str	r0, [r7, #8]
	uint8_t number_of_active_sensors = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	73bb      	strb	r3, [r7, #14]

	///Sensor 0
	if(sensorsOutput & 0x01){
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d042      	beq.n	8008524 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0xc2>
		number_of_active_sensors++;
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	3301      	adds	r3, #1
 80084a2:	73bb      	strb	r3, [r7, #14]
		sensors_votes[0] += FIRST_VOTE;       ///
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	f993 3000 	ldrsb.w	r3, [r3]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	3307      	adds	r3, #7
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	b25a      	sxtb	r2, r3
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	701a      	strb	r2, [r3, #0]
		sensors_votes[13] += FIRST_VOTE;       /// center line
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	330d      	adds	r3, #13
 80084ba:	f993 3000 	ldrsb.w	r3, [r3]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	3307      	adds	r3, #7
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	330d      	adds	r3, #13
 80084c8:	b252      	sxtb	r2, r2
 80084ca:	701a      	strb	r2, [r3, #0]
		sensors_votes[26] += FIRST_VOTE;       ///
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	331a      	adds	r3, #26
 80084d0:	f993 3000 	ldrsb.w	r3, [r3]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	3307      	adds	r3, #7
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	331a      	adds	r3, #26
 80084de:	b252      	sxtb	r2, r2
 80084e0:	701a      	strb	r2, [r3, #0]

		sensors_votes[1] += SECOND_VOTE;       ///
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	f993 3000 	ldrsb.w	r3, [r3]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	3306      	adds	r3, #6
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	b252      	sxtb	r2, r2
 80084f6:	701a      	strb	r2, [r3, #0]
		sensors_votes[14] += SECOND_VOTE;       ///
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	330e      	adds	r3, #14
 80084fc:	f993 3000 	ldrsb.w	r3, [r3]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	3306      	adds	r3, #6
 8008504:	b2da      	uxtb	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	330e      	adds	r3, #14
 800850a:	b252      	sxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]

		sensors_votes[2] += THIRD_VOTE;       ///
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3302      	adds	r3, #2
 8008512:	f993 3000 	ldrsb.w	r3, [r3]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	3304      	adds	r3, #4
 800851a:	b2da      	uxtb	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	3302      	adds	r3, #2
 8008520:	b252      	sxtb	r2, r2
 8008522:	701a      	strb	r2, [r3, #0]

	}
	///Sensor 1
	if(sensorsOutput & 0x02){
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d05a      	beq.n	80085e4 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x182>
		number_of_active_sensors++;
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	3301      	adds	r3, #1
 8008532:	73bb      	strb	r3, [r7, #14]

		sensors_votes[1] += SECOND_VOTE;       ///
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	3301      	adds	r3, #1
 8008538:	f993 3000 	ldrsb.w	r3, [r3]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	3306      	adds	r3, #6
 8008540:	b2da      	uxtb	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	b252      	sxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]
		sensors_votes[14] += SECOND_VOTE;       ///
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	330e      	adds	r3, #14
 800854e:	f993 3000 	ldrsb.w	r3, [r3]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	3306      	adds	r3, #6
 8008556:	b2da      	uxtb	r2, r3
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	330e      	adds	r3, #14
 800855c:	b252      	sxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]

		sensors_votes[2] += FIRST_VOTE;       ///
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	3302      	adds	r3, #2
 8008564:	f993 3000 	ldrsb.w	r3, [r3]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	3307      	adds	r3, #7
 800856c:	b2da      	uxtb	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	3302      	adds	r3, #2
 8008572:	b252      	sxtb	r2, r2
 8008574:	701a      	strb	r2, [r3, #0]
		sensors_votes[15] += FIRST_VOTE;       /// center line
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	330f      	adds	r3, #15
 800857a:	f993 3000 	ldrsb.w	r3, [r3]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	3307      	adds	r3, #7
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	330f      	adds	r3, #15
 8008588:	b252      	sxtb	r2, r2
 800858a:	701a      	strb	r2, [r3, #0]
		sensors_votes[27] += FIRST_VOTE;       ///
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	331b      	adds	r3, #27
 8008590:	f993 3000 	ldrsb.w	r3, [r3]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	3307      	adds	r3, #7
 8008598:	b2da      	uxtb	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	331b      	adds	r3, #27
 800859e:	b252      	sxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]

		sensors_votes[3] += SECOND_VOTE;       ///
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	3303      	adds	r3, #3
 80085a6:	f993 3000 	ldrsb.w	r3, [r3]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	3306      	adds	r3, #6
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	3303      	adds	r3, #3
 80085b4:	b252      	sxtb	r2, r2
 80085b6:	701a      	strb	r2, [r3, #0]
		sensors_votes[16] += SECOND_VOTE;       ///
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	3310      	adds	r3, #16
 80085bc:	f993 3000 	ldrsb.w	r3, [r3]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	3306      	adds	r3, #6
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	3310      	adds	r3, #16
 80085ca:	b252      	sxtb	r2, r2
 80085cc:	701a      	strb	r2, [r3, #0]

		sensors_votes[4] += THIRD_VOTE;       ///
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	3304      	adds	r3, #4
 80085d2:	f993 3000 	ldrsb.w	r3, [r3]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	3304      	adds	r3, #4
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	3304      	adds	r3, #4
 80085e0:	b252      	sxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]

	}
	///Sensor 2
	if(sensorsOutput & 0x04){
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d065      	beq.n	80086ba <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x258>
		number_of_active_sensors++;
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	3301      	adds	r3, #1
 80085f2:	73bb      	strb	r3, [r7, #14]

		sensors_votes[2] += THIRD_VOTE;       ///
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	3302      	adds	r3, #2
 80085f8:	f993 3000 	ldrsb.w	r3, [r3]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	3304      	adds	r3, #4
 8008600:	b2da      	uxtb	r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	3302      	adds	r3, #2
 8008606:	b252      	sxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]

		sensors_votes[3] += SECOND_VOTE;       ///
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	3303      	adds	r3, #3
 800860e:	f993 3000 	ldrsb.w	r3, [r3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	3306      	adds	r3, #6
 8008616:	b2da      	uxtb	r2, r3
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	3303      	adds	r3, #3
 800861c:	b252      	sxtb	r2, r2
 800861e:	701a      	strb	r2, [r3, #0]
		sensors_votes[16] += SECOND_VOTE;       ///
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	3310      	adds	r3, #16
 8008624:	f993 3000 	ldrsb.w	r3, [r3]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	3306      	adds	r3, #6
 800862c:	b2da      	uxtb	r2, r3
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	3310      	adds	r3, #16
 8008632:	b252      	sxtb	r2, r2
 8008634:	701a      	strb	r2, [r3, #0]

		sensors_votes[4] += FIRST_VOTE;       ///
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	3304      	adds	r3, #4
 800863a:	f993 3000 	ldrsb.w	r3, [r3]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	3307      	adds	r3, #7
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	3304      	adds	r3, #4
 8008648:	b252      	sxtb	r2, r2
 800864a:	701a      	strb	r2, [r3, #0]
		sensors_votes[17] += FIRST_VOTE;       /// center line
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	3311      	adds	r3, #17
 8008650:	f993 3000 	ldrsb.w	r3, [r3]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	3307      	adds	r3, #7
 8008658:	b2da      	uxtb	r2, r3
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	3311      	adds	r3, #17
 800865e:	b252      	sxtb	r2, r2
 8008660:	701a      	strb	r2, [r3, #0]
		sensors_votes[28] += FIRST_VOTE;       ///
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	331c      	adds	r3, #28
 8008666:	f993 3000 	ldrsb.w	r3, [r3]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	3307      	adds	r3, #7
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	331c      	adds	r3, #28
 8008674:	b252      	sxtb	r2, r2
 8008676:	701a      	strb	r2, [r3, #0]

		sensors_votes[5] += SECOND_VOTE;       ///
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	3305      	adds	r3, #5
 800867c:	f993 3000 	ldrsb.w	r3, [r3]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	3306      	adds	r3, #6
 8008684:	b2da      	uxtb	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	3305      	adds	r3, #5
 800868a:	b252      	sxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
		sensors_votes[18] += SECOND_VOTE;       ///
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	3312      	adds	r3, #18
 8008692:	f993 3000 	ldrsb.w	r3, [r3]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	3306      	adds	r3, #6
 800869a:	b2da      	uxtb	r2, r3
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	3312      	adds	r3, #18
 80086a0:	b252      	sxtb	r2, r2
 80086a2:	701a      	strb	r2, [r3, #0]

		sensors_votes[6] += THIRD_VOTE;       ///
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	3306      	adds	r3, #6
 80086a8:	f993 3000 	ldrsb.w	r3, [r3]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	3304      	adds	r3, #4
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	3306      	adds	r3, #6
 80086b6:	b252      	sxtb	r2, r2
 80086b8:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 3
	if(sensorsOutput & 0x08){
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d070      	beq.n	80087a6 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x344>
		number_of_active_sensors++;
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	3301      	adds	r3, #1
 80086c8:	73bb      	strb	r3, [r7, #14]

		sensors_votes[3] += THIRD_VOTE;       ///
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	3303      	adds	r3, #3
 80086ce:	f993 3000 	ldrsb.w	r3, [r3]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	3304      	adds	r3, #4
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	3303      	adds	r3, #3
 80086dc:	b252      	sxtb	r2, r2
 80086de:	701a      	strb	r2, [r3, #0]
		sensors_votes[18] += THIRD_VOTE;       ///
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	3312      	adds	r3, #18
 80086e4:	f993 3000 	ldrsb.w	r3, [r3]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	3304      	adds	r3, #4
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	3312      	adds	r3, #18
 80086f2:	b252      	sxtb	r2, r2
 80086f4:	701a      	strb	r2, [r3, #0]

		sensors_votes[4] += SECOND_VOTE;       ///
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	3304      	adds	r3, #4
 80086fa:	f993 3000 	ldrsb.w	r3, [r3]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	3306      	adds	r3, #6
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	3304      	adds	r3, #4
 8008708:	b252      	sxtb	r2, r2
 800870a:	701a      	strb	r2, [r3, #0]
		sensors_votes[19] += SECOND_VOTE;       ///
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	3313      	adds	r3, #19
 8008710:	f993 3000 	ldrsb.w	r3, [r3]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	3306      	adds	r3, #6
 8008718:	b2da      	uxtb	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	3313      	adds	r3, #19
 800871e:	b252      	sxtb	r2, r2
 8008720:	701a      	strb	r2, [r3, #0]

		sensors_votes[5] += FIRST_VOTE;       ///
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	3305      	adds	r3, #5
 8008726:	f993 3000 	ldrsb.w	r3, [r3]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	3307      	adds	r3, #7
 800872e:	b2da      	uxtb	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	3305      	adds	r3, #5
 8008734:	b252      	sxtb	r2, r2
 8008736:	701a      	strb	r2, [r3, #0]
		sensors_votes[20] += FIRST_VOTE;       /// center line
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3314      	adds	r3, #20
 800873c:	f993 3000 	ldrsb.w	r3, [r3]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	3307      	adds	r3, #7
 8008744:	b2da      	uxtb	r2, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	3314      	adds	r3, #20
 800874a:	b252      	sxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]


		sensors_votes[6] +=  SECOND_VOTE;       ///
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	3306      	adds	r3, #6
 8008752:	f993 3000 	ldrsb.w	r3, [r3]
 8008756:	b2db      	uxtb	r3, r3
 8008758:	3306      	adds	r3, #6
 800875a:	b2da      	uxtb	r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	3306      	adds	r3, #6
 8008760:	b252      	sxtb	r2, r2
 8008762:	701a      	strb	r2, [r3, #0]
		sensors_votes[21] += SECOND_VOTE;       ///
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	3315      	adds	r3, #21
 8008768:	f993 3000 	ldrsb.w	r3, [r3]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	3306      	adds	r3, #6
 8008770:	b2da      	uxtb	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	3315      	adds	r3, #21
 8008776:	b252      	sxtb	r2, r2
 8008778:	701a      	strb	r2, [r3, #0]
		sensors_votes[29] += SECOND_VOTE;       ///
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	331d      	adds	r3, #29
 800877e:	f993 3000 	ldrsb.w	r3, [r3]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	3306      	adds	r3, #6
 8008786:	b2da      	uxtb	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	331d      	adds	r3, #29
 800878c:	b252      	sxtb	r2, r2
 800878e:	701a      	strb	r2, [r3, #0]

		sensors_votes[7] += THIRD_VOTE;       ///
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	3307      	adds	r3, #7
 8008794:	f993 3000 	ldrsb.w	r3, [r3]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	3304      	adds	r3, #4
 800879c:	b2da      	uxtb	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	3307      	adds	r3, #7
 80087a2:	b252      	sxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]

	}
	///Sensor 4
	if(sensorsOutput & 0x10){
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d070      	beq.n	8008892 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x430>
		number_of_active_sensors++;
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	3301      	adds	r3, #1
 80087b4:	73bb      	strb	r3, [r7, #14]
		sensors_votes[5] += THIRD_VOTE;        ///
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	3305      	adds	r3, #5
 80087ba:	f993 3000 	ldrsb.w	r3, [r3]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	3304      	adds	r3, #4
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	3305      	adds	r3, #5
 80087c8:	b252      	sxtb	r2, r2
 80087ca:	701a      	strb	r2, [r3, #0]

		sensors_votes[6] += SECOND_VOTE;       ///
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	3306      	adds	r3, #6
 80087d0:	f993 3000 	ldrsb.w	r3, [r3]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	3306      	adds	r3, #6
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	3306      	adds	r3, #6
 80087de:	b252      	sxtb	r2, r2
 80087e0:	701a      	strb	r2, [r3, #0]
		sensors_votes[17] += SECOND_VOTE;      ///
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	3311      	adds	r3, #17
 80087e6:	f993 3000 	ldrsb.w	r3, [r3]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	3306      	adds	r3, #6
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	3311      	adds	r3, #17
 80087f4:	b252      	sxtb	r2, r2
 80087f6:	701a      	strb	r2, [r3, #0]
		sensors_votes[28] += SECOND_VOTE;      ///
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	331c      	adds	r3, #28
 80087fc:	f993 3000 	ldrsb.w	r3, [r3]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	3306      	adds	r3, #6
 8008804:	b2da      	uxtb	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	331c      	adds	r3, #28
 800880a:	b252      	sxtb	r2, r2
 800880c:	701a      	strb	r2, [r3, #0]

		sensors_votes[7] += FIRST_VOTE;        ///
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	3307      	adds	r3, #7
 8008812:	f993 3000 	ldrsb.w	r3, [r3]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	3307      	adds	r3, #7
 800881a:	b2da      	uxtb	r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	3307      	adds	r3, #7
 8008820:	b252      	sxtb	r2, r2
 8008822:	701a      	strb	r2, [r3, #0]
		sensors_votes[18] += FIRST_VOTE;       /// center line
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	3312      	adds	r3, #18
 8008828:	f993 3000 	ldrsb.w	r3, [r3]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	3307      	adds	r3, #7
 8008830:	b2da      	uxtb	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	3312      	adds	r3, #18
 8008836:	b252      	sxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]


		sensors_votes[8] += SECOND_VOTE;       ///
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	3308      	adds	r3, #8
 800883e:	f993 3000 	ldrsb.w	r3, [r3]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	3306      	adds	r3, #6
 8008846:	b2da      	uxtb	r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	3308      	adds	r3, #8
 800884c:	b252      	sxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]
		sensors_votes[19] += SECOND_VOTE;      ///
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	3313      	adds	r3, #19
 8008854:	f993 3000 	ldrsb.w	r3, [r3]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	3306      	adds	r3, #6
 800885c:	b2da      	uxtb	r2, r3
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	3313      	adds	r3, #19
 8008862:	b252      	sxtb	r2, r2
 8008864:	701a      	strb	r2, [r3, #0]

		sensors_votes[9] += THIRD_VOTE;        ///
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	3309      	adds	r3, #9
 800886a:	f993 3000 	ldrsb.w	r3, [r3]
 800886e:	b2db      	uxtb	r3, r3
 8008870:	3304      	adds	r3, #4
 8008872:	b2da      	uxtb	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	3309      	adds	r3, #9
 8008878:	b252      	sxtb	r2, r2
 800887a:	701a      	strb	r2, [r3, #0]
		sensors_votes[20] += THIRD_VOTE;        ///
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	3314      	adds	r3, #20
 8008880:	f993 3000 	ldrsb.w	r3, [r3]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	3304      	adds	r3, #4
 8008888:	b2da      	uxtb	r2, r3
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	3314      	adds	r3, #20
 800888e:	b252      	sxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 5
	if(sensorsOutput & 0x20){
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d065      	beq.n	8008968 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x506>
		number_of_active_sensors++;
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	3301      	adds	r3, #1
 80088a0:	73bb      	strb	r3, [r7, #14]
		sensors_votes[6] += THIRD_VOTE;       ///
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	3306      	adds	r3, #6
 80088a6:	f993 3000 	ldrsb.w	r3, [r3]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	3304      	adds	r3, #4
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	3306      	adds	r3, #6
 80088b4:	b252      	sxtb	r2, r2
 80088b6:	701a      	strb	r2, [r3, #0]

		sensors_votes[7] += SECOND_VOTE;       ///
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	3307      	adds	r3, #7
 80088bc:	f993 3000 	ldrsb.w	r3, [r3]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	3306      	adds	r3, #6
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	3307      	adds	r3, #7
 80088ca:	b252      	sxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
		sensors_votes[20] += SECOND_VOTE;       ///
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	3314      	adds	r3, #20
 80088d2:	f993 3000 	ldrsb.w	r3, [r3]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	3306      	adds	r3, #6
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	3314      	adds	r3, #20
 80088e0:	b252      	sxtb	r2, r2
 80088e2:	701a      	strb	r2, [r3, #0]

		sensors_votes[8] += FIRST_VOTE;       ///
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	3308      	adds	r3, #8
 80088e8:	f993 3000 	ldrsb.w	r3, [r3]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	3307      	adds	r3, #7
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	3308      	adds	r3, #8
 80088f6:	b252      	sxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
		sensors_votes[21] += FIRST_VOTE;       /// center line
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3315      	adds	r3, #21
 80088fe:	f993 3000 	ldrsb.w	r3, [r3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	3307      	adds	r3, #7
 8008906:	b2da      	uxtb	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	3315      	adds	r3, #21
 800890c:	b252      	sxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]
		sensors_votes[29] += FIRST_VOTE;       ///
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	331d      	adds	r3, #29
 8008914:	f993 3000 	ldrsb.w	r3, [r3]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	3307      	adds	r3, #7
 800891c:	b2da      	uxtb	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	331d      	adds	r3, #29
 8008922:	b252      	sxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]

		sensors_votes[9] += SECOND_VOTE;       ///
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	3309      	adds	r3, #9
 800892a:	f993 3000 	ldrsb.w	r3, [r3]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	3306      	adds	r3, #6
 8008932:	b2da      	uxtb	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	3309      	adds	r3, #9
 8008938:	b252      	sxtb	r2, r2
 800893a:	701a      	strb	r2, [r3, #0]
		sensors_votes[22] += SECOND_VOTE;       ///
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	3316      	adds	r3, #22
 8008940:	f993 3000 	ldrsb.w	r3, [r3]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	3306      	adds	r3, #6
 8008948:	b2da      	uxtb	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	3316      	adds	r3, #22
 800894e:	b252      	sxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]

		sensors_votes[10] += THIRD_VOTE;       ///
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	330a      	adds	r3, #10
 8008956:	f993 3000 	ldrsb.w	r3, [r3]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	3304      	adds	r3, #4
 800895e:	b2da      	uxtb	r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	330a      	adds	r3, #10
 8008964:	b252      	sxtb	r2, r2
 8008966:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 6
	if(sensorsOutput & 0x40){
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896e:	2b00      	cmp	r3, #0
 8008970:	d05a      	beq.n	8008a28 <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x5c6>
		number_of_active_sensors++;
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	3301      	adds	r3, #1
 8008976:	73bb      	strb	r3, [r7, #14]

		sensors_votes[8] += THIRD_VOTE;       ///
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	f993 3000 	ldrsb.w	r3, [r3]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	3304      	adds	r3, #4
 8008984:	b2da      	uxtb	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	b252      	sxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]

		sensors_votes[9] += SECOND_VOTE;       ///
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	3309      	adds	r3, #9
 8008992:	f993 3000 	ldrsb.w	r3, [r3]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	3306      	adds	r3, #6
 800899a:	b2da      	uxtb	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	3309      	adds	r3, #9
 80089a0:	b252      	sxtb	r2, r2
 80089a2:	701a      	strb	r2, [r3, #0]
		sensors_votes[22] += SECOND_VOTE;       ///
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	3316      	adds	r3, #22
 80089a8:	f993 3000 	ldrsb.w	r3, [r3]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	3306      	adds	r3, #6
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	3316      	adds	r3, #22
 80089b6:	b252      	sxtb	r2, r2
 80089b8:	701a      	strb	r2, [r3, #0]

		sensors_votes[10] += FIRST_VOTE;       ///
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	330a      	adds	r3, #10
 80089be:	f993 3000 	ldrsb.w	r3, [r3]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	3307      	adds	r3, #7
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	330a      	adds	r3, #10
 80089cc:	b252      	sxtb	r2, r2
 80089ce:	701a      	strb	r2, [r3, #0]
		sensors_votes[23] += FIRST_VOTE;       /// center line
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	3317      	adds	r3, #23
 80089d4:	f993 3000 	ldrsb.w	r3, [r3]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	3307      	adds	r3, #7
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	3317      	adds	r3, #23
 80089e2:	b252      	sxtb	r2, r2
 80089e4:	701a      	strb	r2, [r3, #0]
		sensors_votes[30] += FIRST_VOTE;       ///
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	331e      	adds	r3, #30
 80089ea:	f993 3000 	ldrsb.w	r3, [r3]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	3307      	adds	r3, #7
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	331e      	adds	r3, #30
 80089f8:	b252      	sxtb	r2, r2
 80089fa:	701a      	strb	r2, [r3, #0]

		sensors_votes[11] += SECOND_VOTE;       ///
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	330b      	adds	r3, #11
 8008a00:	f993 3000 	ldrsb.w	r3, [r3]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	3306      	adds	r3, #6
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	330b      	adds	r3, #11
 8008a0e:	b252      	sxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]
		sensors_votes[24] += SECOND_VOTE;       ///
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	3318      	adds	r3, #24
 8008a16:	f993 3000 	ldrsb.w	r3, [r3]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	3306      	adds	r3, #6
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	3318      	adds	r3, #24
 8008a24:	b252      	sxtb	r2, r2
 8008a26:	701a      	strb	r2, [r3, #0]
	}
	///Sensor 7
	if(sensorsOutput & 0x80){
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d044      	beq.n	8008abc <_ZN14EnemyDetection23readAndTakeSensorsVotesEPa+0x65a>
		number_of_active_sensors++;
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	3301      	adds	r3, #1
 8008a36:	73bb      	strb	r3, [r7, #14]

		sensors_votes[10] += THIRD_VOTE;       ///
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	330a      	adds	r3, #10
 8008a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	3304      	adds	r3, #4
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	330a      	adds	r3, #10
 8008a4a:	b252      	sxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]

		sensors_votes[11] += SECOND_VOTE;      ///
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	330b      	adds	r3, #11
 8008a52:	f993 3000 	ldrsb.w	r3, [r3]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	3306      	adds	r3, #6
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	330b      	adds	r3, #11
 8008a60:	b252      	sxtb	r2, r2
 8008a62:	701a      	strb	r2, [r3, #0]
		sensors_votes[24] += SECOND_VOTE;      ///
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	3318      	adds	r3, #24
 8008a68:	f993 3000 	ldrsb.w	r3, [r3]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	3306      	adds	r3, #6
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	3318      	adds	r3, #24
 8008a76:	b252      	sxtb	r2, r2
 8008a78:	701a      	strb	r2, [r3, #0]

		sensors_votes[12] += FIRST_VOTE;       ///
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	3307      	adds	r3, #7
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	330c      	adds	r3, #12
 8008a8c:	b252      	sxtb	r2, r2
 8008a8e:	701a      	strb	r2, [r3, #0]
		sensors_votes[25] += FIRST_VOTE;       /// center line
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	3319      	adds	r3, #25
 8008a94:	f993 3000 	ldrsb.w	r3, [r3]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	3307      	adds	r3, #7
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	3319      	adds	r3, #25
 8008aa2:	b252      	sxtb	r2, r2
 8008aa4:	701a      	strb	r2, [r3, #0]
		sensors_votes[31] += FIRST_VOTE;       ///
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	331f      	adds	r3, #31
 8008aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	3307      	adds	r3, #7
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	331f      	adds	r3, #31
 8008ab8:	b252      	sxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]
	}

	return 0;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <_ZN13LineDetectionC1ERKNS_19LineDetectionConfigE>:
 */

#include "line_detection.h"


LineDetection::LineDetection(const LineDetectionConfig &config)
 8008ac6:	b4b0      	push	{r4, r5, r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
    : configData(config) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2219      	movs	r2, #25
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2246      	movs	r2, #70	; 0x46
 8008ada:	705a      	strb	r2, [r3, #1]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	1d1c      	adds	r4, r3, #4
 8008ae2:	4615      	mov	r5, r2
 8008ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	6023      	str	r3, [r4, #0]
}
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bcb0      	pop	{r4, r5, r7}
 8008afa:	4770      	bx	lr

08008afc <_ZN13LineDetection6configEv>:

void LineDetection::config() {
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
    // Initialization code as in Line_Sensors_Init(void)
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <_ZN13LineDetection21resetFiltersToDefaultEv>:
void LineDetection::resetFiltersToDefault(){
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
	isWhiteFilter = DEFAULT_IS_WHITE_FILTER;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2219      	movs	r2, #25
 8008b1c:	701a      	strb	r2, [r3, #0]
	isBlackFilter = DEFAULT_IS_BLACK_FILTER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2246      	movs	r2, #70	; 0x46
 8008b22:	705a      	strb	r2, [r3, #1]
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <_ZN13LineDetection7readAllEPh>:

void LineDetection::readAll(uint8_t values[LINE_SENSORS_NUMBER]) {
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]

	///Read Front Values
	for(uint8_t i = 0 ; i < LINE_SENSORS_NUMBER;i++){
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
 8008b3e:	e013      	b.n	8008b68 <_ZN13LineDetection7readAllEPh+0x38>
		uint32_t channel = configData.channels[i];
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	60bb      	str	r3, [r7, #8]
		values[i] = selectAndRead(configData.hadc,channel);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6859      	ldr	r1, [r3, #4]
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	18d4      	adds	r4, r2, r3
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f8c9 	bl	8008cf0 <_ZN13LineDetection13selectAndReadEP17ADC_HandleTypeDefm>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0 ; i < LINE_SENSORS_NUMBER;i++){
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	3301      	adds	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b07      	cmp	r3, #7
 8008b6c:	d9e8      	bls.n	8008b40 <_ZN13LineDetection7readAllEPh+0x10>
	}
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd90      	pop	{r4, r7, pc}

08008b78 <_ZN13LineDetection28readAndConvertToLinePositionEv>:

LinePosition LineDetection::readAndConvertToLinePosition() {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
    uint8_t sensorsOutput[LINE_SENSORS_NUMBER];

    // Read sensors' output
    readAll(sensorsOutput);
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff ffd2 	bl	8008b30 <_ZN13LineDetection7readAllEPh>

    // Check if the sensors see the white line
    // Grouped for FrontLeft, FrontRight, BackLeft, and BackRight respectively
    bool isWhite[4];
    isWhite[0] = sensorOutputToBool(sensorsOutput[0]) ||
 8008b8c:	7c3b      	ldrb	r3, [r7, #16]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f8dd 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008b96:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[1]) ||
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10f      	bne.n	8008bbc <_ZN13LineDetection28readAndConvertToLinePositionEv+0x44>
 8008b9c:	7c7b      	ldrb	r3, [r7, #17]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f8d5 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008ba6:	4603      	mov	r3, r0
    isWhite[0] = sensorOutputToBool(sensorsOutput[0]) ||
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d107      	bne.n	8008bbc <_ZN13LineDetection28readAndConvertToLinePositionEv+0x44>
                 sensorOutputToBool(sensorsOutput[2]);
 8008bac:	7cbb      	ldrb	r3, [r7, #18]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f8cd 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008bb6:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[1]) ||
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x48>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x4a>
 8008bc0:	2300      	movs	r3, #0
    isWhite[0] = sensorOutputToBool(sensorsOutput[0]) ||
 8008bc2:	733b      	strb	r3, [r7, #12]

    isWhite[1] = sensorOutputToBool(sensorsOutput[3]) ||
 8008bc4:	7cfb      	ldrb	r3, [r7, #19]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f8c1 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008bce:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[4]) ||
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10f      	bne.n	8008bf4 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x7c>
 8008bd4:	7d3b      	ldrb	r3, [r7, #20]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8b9 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008bde:	4603      	mov	r3, r0
    isWhite[1] = sensorOutputToBool(sensorsOutput[3]) ||
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d107      	bne.n	8008bf4 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x7c>
                 sensorOutputToBool(sensorsOutput[5]);
 8008be4:	7d7b      	ldrb	r3, [r7, #21]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f8b1 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008bee:	4603      	mov	r3, r0
                 sensorOutputToBool(sensorsOutput[4]) ||
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x80>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <_ZN13LineDetection28readAndConvertToLinePositionEv+0x82>
 8008bf8:	2300      	movs	r3, #0
    isWhite[1] = sensorOutputToBool(sensorsOutput[3]) ||
 8008bfa:	737b      	strb	r3, [r7, #13]

    isWhite[2] = sensorOutputToBool(sensorsOutput[6]);
 8008bfc:	7dbb      	ldrb	r3, [r7, #22]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f8a5 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73bb      	strb	r3, [r7, #14]
    isWhite[3] = sensorOutputToBool(sensorsOutput[7]);
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f89e 	bl	8008d50 <_ZN13LineDetection18sensorOutputToBoolEm>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]

    LinePosition output;
 8008c18:	f107 0308 	add.w	r3, r7, #8
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe ff33 	bl	8007a88 <_ZN12LinePositionC1Ev>

    // Determine robot's position based on the sensors' reading
    if (isWhite[0] && isWhite[1]) {
 8008c22:	7b3b      	ldrb	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d009      	beq.n	8008c3c <_ZN13LineDetection28readAndConvertToLinePositionEv+0xc4>
 8008c28:	7b7b      	ldrb	r3, [r7, #13]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d006      	beq.n	8008c3c <_ZN13LineDetection28readAndConvertToLinePositionEv+0xc4>
        output.setLinePosition(LinePositionType::Front);
 8008c2e:	f107 0308 	add.w	r3, r7, #8
 8008c32:	2101      	movs	r1, #1
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe ff35 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008c3a:	e054      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[2] && isWhite[3]) {
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xde>
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d006      	beq.n	8008c56 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xde>
        output.setLinePosition(LinePositionType::Back);
 8008c48:	f107 0308 	add.w	r3, r7, #8
 8008c4c:	2104      	movs	r1, #4
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe ff28 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008c54:	e047      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[1] && isWhite[2]) {
 8008c56:	7b7b      	ldrb	r3, [r7, #13]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d009      	beq.n	8008c70 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xf8>
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d006      	beq.n	8008c70 <_ZN13LineDetection28readAndConvertToLinePositionEv+0xf8>
        output.setLinePosition(LinePositionType::Left);
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	2106      	movs	r1, #6
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe ff1b 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008c6e:	e03a      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[0] && isWhite[3]) {
 8008c70:	7b3b      	ldrb	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <_ZN13LineDetection28readAndConvertToLinePositionEv+0x112>
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d006      	beq.n	8008c8a <_ZN13LineDetection28readAndConvertToLinePositionEv+0x112>
        output.setLinePosition(LinePositionType::Right);
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	2107      	movs	r1, #7
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe ff0e 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008c88:	e02d      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[0]) {
 8008c8a:	7b3b      	ldrb	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <_ZN13LineDetection28readAndConvertToLinePositionEv+0x126>
        output.setLinePosition(LinePositionType::FrontLeft);
 8008c90:	f107 0308 	add.w	r3, r7, #8
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe ff04 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008c9c:	e023      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[1]) {
 8008c9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d006      	beq.n	8008cb2 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x13a>
        output.setLinePosition(LinePositionType::FrontRight);
 8008ca4:	f107 0308 	add.w	r3, r7, #8
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe fefa 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008cb0:	e019      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[2]) {
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x14e>
        output.setLinePosition(LinePositionType::BackLeft);
 8008cb8:	f107 0308 	add.w	r3, r7, #8
 8008cbc:	2103      	movs	r1, #3
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fef0 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008cc4:	e00f      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else if (isWhite[3]) {
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <_ZN13LineDetection28readAndConvertToLinePositionEv+0x162>
        output.setLinePosition(LinePositionType::BackRight);
 8008ccc:	f107 0308 	add.w	r3, r7, #8
 8008cd0:	2105      	movs	r1, #5
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fee6 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
 8008cd8:	e005      	b.n	8008ce6 <_ZN13LineDetection28readAndConvertToLinePositionEv+0x16e>
    } else {
        output.setLinePosition(LinePositionType::None);
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	2108      	movs	r1, #8
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fedf 	bl	8007aa4 <_ZN12LinePosition15setLinePositionE16LinePositionType>
    }

    return output;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZN13LineDetection13selectAndReadEP17ADC_HandleTypeDefm>:


uint8_t LineDetection:: selectAndRead(ADC_HandleTypeDef *hadc, uint32_t ADC_CHANNEL) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	609a      	str	r2, [r3, #8]
 8008d08:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	617b      	str	r3, [r7, #20]
	  sConfig.Rank = 1;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	61bb      	str	r3, [r7, #24]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8008d12:	2302      	movs	r3, #2
 8008d14:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8008d16:	f107 0314 	add.w	r3, r7, #20
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	68b8      	ldr	r0, [r7, #8]
 8008d1e:	f7f9 f92d 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
	  {
//		Error_Handler();
	  }

	  HAL_ADC_Start(hadc);
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	f7f8 ff8a 	bl	8001c40 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(hadc, 1000);
 8008d2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d30:	68b8      	ldr	r0, [r7, #8]
 8008d32:	f7f9 f88a 	bl	8001e4a <HAL_ADC_PollForConversion>
	  uint32_t value = HAL_ADC_GetValue(hadc);
 8008d36:	68b8      	ldr	r0, [r7, #8]
 8008d38:	f7f9 f912 	bl	8001f60 <HAL_ADC_GetValue>
 8008d3c:	6278      	str	r0, [r7, #36]	; 0x24
	  HAL_ADC_Stop(hadc);
 8008d3e:	68b8      	ldr	r0, [r7, #8]
 8008d40:	f7f9 f850 	bl	8001de4 <HAL_ADC_Stop>
	  return value;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	b2db      	uxtb	r3, r3
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	; 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <_ZN13LineDetection18sensorOutputToBoolEm>:

bool LineDetection::sensorOutputToBool(uint32_t sensor_output) {
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	if(sensor_output <= isWhiteFilter)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d801      	bhi.n	8008d6a <_ZN13LineDetection18sensorOutputToBoolEm+0x1a>
		return true;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <_ZN13LineDetection18sensorOutputToBoolEm+0x1c>
	return false;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <_ZN5MotorC1EP13USART_TypeDef>:

#include "motor_driver.h"

#include "stm32f4xx_hal_uart.h"

Motor::Motor(USART_TypeDef * UARTX):
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
leftPower(0),
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
rightPower(0)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
{
	h_uart.Instance = UARTX;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	601a      	str	r2, [r3, #0]

}
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <_ZN5Motor4initEv>:
void Motor::init()
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
	h_uart.Init.BaudRate = 115200;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008db4:	605a      	str	r2, [r3, #4]
	h_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	609a      	str	r2, [r3, #8]
	h_uart.Init.StopBits = UART_STOPBITS_1;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	60da      	str	r2, [r3, #12]
	h_uart.Init.Parity = UART_PARITY_NONE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	611a      	str	r2, [r3, #16]
	h_uart.Init.Mode = UART_MODE_TX_RX;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	220c      	movs	r2, #12
 8008dcc:	615a      	str	r2, [r3, #20]
	h_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	619a      	str	r2, [r3, #24]
	h_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	61da      	str	r2, [r3, #28]
	HAL_HalfDuplex_Init(&h_uart);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fb f83e 	bl	8003e5e <HAL_HalfDuplex_Init>
	stop();
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f804 	bl	8008df0 <_ZN5Motor4stopEv>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_ZN5Motor4stopEv>:
void Motor::stop(){
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	changePower(0, 0);
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f804 	bl	8008e0a <_ZN5Motor11changePowerEaa>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <_ZN5Motor11changePowerEaa>:
void Motor::changePower(int8_t leftPower, int8_t rightPower)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
 8008e16:	4613      	mov	r3, r2
 8008e18:	70bb      	strb	r3, [r7, #2]
	leftPower = boundedPowerValue(leftPower);
 8008e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f8b7 	bl	8008f94 <_ZN5Motor17boundedPowerValueEa>
 8008e26:	4603      	mov	r3, r0
 8008e28:	70fb      	strb	r3, [r7, #3]
	rightPower = boundedPowerValue(rightPower);
 8008e2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f8af 	bl	8008f94 <_ZN5Motor17boundedPowerValueEa>
 8008e36:	4603      	mov	r3, r0
 8008e38:	70bb      	strb	r3, [r7, #2]


	if(this->leftPower != leftPower || this->rightPower != rightPower){
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8008e40:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d106      	bne.n	8008e56 <_ZN5Motor11changePowerEaa+0x4c>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8008e4e:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d021      	beq.n	8008e9a <_ZN5Motor11changePowerEaa+0x90>
		this->leftPower = leftPower;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		this->rightPower = rightPower;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	78ba      	ldrb	r2, [r7, #2]
 8008e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		uint8_t motor_input_left_right[2];
		motor_input_left_right[0] = power_to_motor_input(leftPower, false);
 8008e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f818 	bl	8008ea4 <_ZN5Motor20power_to_motor_inputEab>
 8008e74:	4603      	mov	r3, r0
 8008e76:	733b      	strb	r3, [r7, #12]
		motor_input_left_right[1] = power_to_motor_input(rightPower, true);
 8008e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f80f 	bl	8008ea4 <_ZN5Motor20power_to_motor_inputEab>
 8008e86:	4603      	mov	r3, r0
 8008e88:	737b      	strb	r3, [r7, #13]

		//Transmit Three Times
		HAL_UART_Transmit(&h_uart, motor_input_left_right, 2, 400) != HAL_OK;
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f107 010c 	add.w	r1, r7, #12
 8008e90:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008e94:	2202      	movs	r2, #2
 8008e96:	f7fb f837 	bl	8003f08 <HAL_UART_Transmit>
	}
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <_ZN5Motor20power_to_motor_inputEab>:


uint8_t Motor::power_to_motor_input(int8_t power, bool is_right_motor)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	460b      	mov	r3, r1
 8008eae:	72fb      	strb	r3, [r7, #11]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	72bb      	strb	r3, [r7, #10]
	float convert;
	if(is_right_motor){
 8008eb4:	7abb      	ldrb	r3, [r7, #10]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d036      	beq.n	8008f28 <_ZN5Motor20power_to_motor_inputEab+0x84>
		if(power <= 0){
 8008eba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dc19      	bgt.n	8008ef6 <_ZN5Motor20power_to_motor_inputEab+0x52>
			convert = 100 + power;
 8008ec2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008ec6:	3364      	adds	r3, #100	; 0x64
 8008ec8:	ee07 3a90 	vmov	s15, r3
 8008ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ed0:	edc7 7a05 	vstr	s15, [r7, #20]
			convert = convert * 64/MAX_POWER + 128;
 8008ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ed8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008f78 <_ZN5Motor20power_to_motor_inputEab+0xd4>
 8008edc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008ee0:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008f7c <_ZN5Motor20power_to_motor_inputEab+0xd8>
 8008ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ee8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008f80 <_ZN5Motor20power_to_motor_inputEab+0xdc>
 8008eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ef0:	edc7 7a05 	vstr	s15, [r7, #20]
 8008ef4:	e031      	b.n	8008f5a <_ZN5Motor20power_to_motor_inputEab+0xb6>
		}else{
			convert = power;
 8008ef6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f02:	edc7 7a05 	vstr	s15, [r7, #20]
			convert = convert * 63/MAX_POWER + 192;
 8008f06:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f0a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008f84 <_ZN5Motor20power_to_motor_inputEab+0xe0>
 8008f0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f12:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8008f7c <_ZN5Motor20power_to_motor_inputEab+0xd8>
 8008f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f1a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8008f88 <_ZN5Motor20power_to_motor_inputEab+0xe4>
 8008f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f22:	edc7 7a05 	vstr	s15, [r7, #20]
 8008f26:	e018      	b.n	8008f5a <_ZN5Motor20power_to_motor_inputEab+0xb6>
		}
	}else{
		convert = MAX_POWER + power;
 8008f28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008f2c:	3364      	adds	r3, #100	; 0x64
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f36:	edc7 7a05 	vstr	s15, [r7, #20]
		convert = convert * 126/200 + 1;
 8008f3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f3e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8008f8c <_ZN5Motor20power_to_motor_inputEab+0xe8>
 8008f42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f46:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008f90 <_ZN5Motor20power_to_motor_inputEab+0xec>
 8008f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f56:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return (uint8_t) convert;
 8008f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f62:	edc7 7a01 	vstr	s15, [r7, #4]
 8008f66:	793b      	ldrb	r3, [r7, #4]
 8008f68:	b2db      	uxtb	r3, r3
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	42800000 	.word	0x42800000
 8008f7c:	42c80000 	.word	0x42c80000
 8008f80:	43000000 	.word	0x43000000
 8008f84:	427c0000 	.word	0x427c0000
 8008f88:	43400000 	.word	0x43400000
 8008f8c:	42fc0000 	.word	0x42fc0000
 8008f90:	43480000 	.word	0x43480000

08008f94 <_ZN5Motor17boundedPowerValueEa>:
uint8_t Motor::boundedPowerValue(int8_t power){
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
	if(power > MAX_POWER)
 8008fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa4:	2b64      	cmp	r3, #100	; 0x64
 8008fa6:	dd01      	ble.n	8008fac <_ZN5Motor17boundedPowerValueEa+0x18>
		return MAX_POWER;
 8008fa8:	2364      	movs	r3, #100	; 0x64
 8008faa:	e007      	b.n	8008fbc <_ZN5Motor17boundedPowerValueEa+0x28>
	if(power < MAX_REVERSE_POWER){
 8008fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fb0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8008fb4:	da01      	bge.n	8008fba <_ZN5Motor17boundedPowerValueEa+0x26>
		return MAX_REVERSE_POWER;
 8008fb6:	239c      	movs	r3, #156	; 0x9c
 8008fb8:	e000      	b.n	8008fbc <_ZN5Motor17boundedPowerValueEa+0x28>
	}
	return power;
 8008fba:	78fb      	ldrb	r3, [r7, #3]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <_ZN7TrimpotC1EP17ADC_HandleTypeDefm>:
 */

#include "trimpot_driver.h"
#include "math_helper.hpp"

Trimpot::Trimpot(ADC_HandleTypeDef *hadc,uint32_t ADC_CHANNEL):
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
hadc(hadc),
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	601a      	str	r2, [r3, #0]
ADC_CHANNEL(ADC_CHANNEL),
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
data(0)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	609a      	str	r2, [r3, #8]
{

}
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <_ZN7Trimpot6configEv>:

void Trimpot::config(){
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]

}
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
	...

0800900c <_ZN7Trimpot4readEv>:
float Trimpot::read()
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	//read data
	ADC_ChannelConfTypeDef sConfig = {0};
 8009014:	f107 0308 	add.w	r3, r7, #8
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	605a      	str	r2, [r3, #4]
 800901e:	609a      	str	r2, [r3, #8]
 8009020:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8009028:	2301      	movs	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f107 0208 	add.w	r2, r7, #8
 8009038:	4611      	mov	r1, r2
 800903a:	4618      	mov	r0, r3
 800903c:	f7f8 ff9e 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
	{

	}
	HAL_ADC_Start(hadc);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f7f8 fdf9 	bl	8001c40 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009056:	4618      	mov	r0, r3
 8009058:	f7f8 fef7 	bl	8001e4a <HAL_ADC_PollForConversion>
	this->data = HAL_ADC_GetValue(hadc);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f7f8 ff7d 	bl	8001f60 <HAL_ADC_GetValue>
 8009066:	ee07 0a90 	vmov	s15, r0
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_ADC_Stop(hadc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f7f8 feb3 	bl	8001de4 <HAL_ADC_Stop>
	data = MathHelper::normalizeData(data, MIN_DATA_VALUE, MAX_DATA_VALUE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	edd3 7a02 	vldr	s15, [r3, #8]
 8009084:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80090b0 <_ZN7Trimpot4readEv+0xa4>
 8009088:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80090b4 <_ZN7Trimpot4readEv+0xa8>
 800908c:	eeb0 0a67 	vmov.f32	s0, s15
 8009090:	f7fc fcd0 	bl	8005a34 <_ZN10MathHelper13normalizeDataEfff>
 8009094:	eef0 7a40 	vmov.f32	s15, s0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	edc3 7a02 	vstr	s15, [r3, #8]

	return data;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	ee07 3a90 	vmov	s15, r3
}
 80090a6:	eeb0 0a67 	vmov.f32	s0, s15
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	457a0000 	.word	0x457a0000
 80090b4:	42200000 	.word	0x42200000

080090b8 <_ZNK7Trimpot7getDataEv>:
float Trimpot::getData()const{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	return data;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	ee07 3a90 	vmov	s15, r3
}
 80090c8:	eeb0 0a67 	vmov.f32	s0, s15
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <_ZNK7Trimpot7getDataEff>:

float Trimpot::getData(float min, float max) const
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	ed87 0a02 	vstr	s0, [r7, #8]
 80090e2:	edc7 0a01 	vstr	s1, [r7, #4]
	return (max - min) * data + min;
 80090e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80090ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80090ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80090f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80090fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8009100:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009104:	eeb0 0a67 	vmov.f32	s0, s15
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <__cvt>:
 8009112:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009116:	ec55 4b10 	vmov	r4, r5, d0
 800911a:	2d00      	cmp	r5, #0
 800911c:	460e      	mov	r6, r1
 800911e:	4619      	mov	r1, r3
 8009120:	462b      	mov	r3, r5
 8009122:	bfbb      	ittet	lt
 8009124:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009128:	461d      	movlt	r5, r3
 800912a:	2300      	movge	r3, #0
 800912c:	232d      	movlt	r3, #45	; 0x2d
 800912e:	700b      	strb	r3, [r1, #0]
 8009130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009132:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009136:	4691      	mov	r9, r2
 8009138:	f023 0820 	bic.w	r8, r3, #32
 800913c:	bfbc      	itt	lt
 800913e:	4622      	movlt	r2, r4
 8009140:	4614      	movlt	r4, r2
 8009142:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009146:	d005      	beq.n	8009154 <__cvt+0x42>
 8009148:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800914c:	d100      	bne.n	8009150 <__cvt+0x3e>
 800914e:	3601      	adds	r6, #1
 8009150:	2102      	movs	r1, #2
 8009152:	e000      	b.n	8009156 <__cvt+0x44>
 8009154:	2103      	movs	r1, #3
 8009156:	ab03      	add	r3, sp, #12
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	ab02      	add	r3, sp, #8
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	ec45 4b10 	vmov	d0, r4, r5
 8009162:	4653      	mov	r3, sl
 8009164:	4632      	mov	r2, r6
 8009166:	f000 fe7f 	bl	8009e68 <_dtoa_r>
 800916a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800916e:	4607      	mov	r7, r0
 8009170:	d102      	bne.n	8009178 <__cvt+0x66>
 8009172:	f019 0f01 	tst.w	r9, #1
 8009176:	d022      	beq.n	80091be <__cvt+0xac>
 8009178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800917c:	eb07 0906 	add.w	r9, r7, r6
 8009180:	d110      	bne.n	80091a4 <__cvt+0x92>
 8009182:	783b      	ldrb	r3, [r7, #0]
 8009184:	2b30      	cmp	r3, #48	; 0x30
 8009186:	d10a      	bne.n	800919e <__cvt+0x8c>
 8009188:	2200      	movs	r2, #0
 800918a:	2300      	movs	r3, #0
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	f7f7 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 8009194:	b918      	cbnz	r0, 800919e <__cvt+0x8c>
 8009196:	f1c6 0601 	rsb	r6, r6, #1
 800919a:	f8ca 6000 	str.w	r6, [sl]
 800919e:	f8da 3000 	ldr.w	r3, [sl]
 80091a2:	4499      	add	r9, r3
 80091a4:	2200      	movs	r2, #0
 80091a6:	2300      	movs	r3, #0
 80091a8:	4620      	mov	r0, r4
 80091aa:	4629      	mov	r1, r5
 80091ac:	f7f7 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 80091b0:	b108      	cbz	r0, 80091b6 <__cvt+0xa4>
 80091b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80091b6:	2230      	movs	r2, #48	; 0x30
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	454b      	cmp	r3, r9
 80091bc:	d307      	bcc.n	80091ce <__cvt+0xbc>
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091c2:	1bdb      	subs	r3, r3, r7
 80091c4:	4638      	mov	r0, r7
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	b004      	add	sp, #16
 80091ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ce:	1c59      	adds	r1, r3, #1
 80091d0:	9103      	str	r1, [sp, #12]
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	e7f0      	b.n	80091b8 <__cvt+0xa6>

080091d6 <__exponent>:
 80091d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091d8:	4603      	mov	r3, r0
 80091da:	2900      	cmp	r1, #0
 80091dc:	bfb8      	it	lt
 80091de:	4249      	neglt	r1, r1
 80091e0:	f803 2b02 	strb.w	r2, [r3], #2
 80091e4:	bfb4      	ite	lt
 80091e6:	222d      	movlt	r2, #45	; 0x2d
 80091e8:	222b      	movge	r2, #43	; 0x2b
 80091ea:	2909      	cmp	r1, #9
 80091ec:	7042      	strb	r2, [r0, #1]
 80091ee:	dd2a      	ble.n	8009246 <__exponent+0x70>
 80091f0:	f10d 0207 	add.w	r2, sp, #7
 80091f4:	4617      	mov	r7, r2
 80091f6:	260a      	movs	r6, #10
 80091f8:	4694      	mov	ip, r2
 80091fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80091fe:	fb06 1415 	mls	r4, r6, r5, r1
 8009202:	3430      	adds	r4, #48	; 0x30
 8009204:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009208:	460c      	mov	r4, r1
 800920a:	2c63      	cmp	r4, #99	; 0x63
 800920c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009210:	4629      	mov	r1, r5
 8009212:	dcf1      	bgt.n	80091f8 <__exponent+0x22>
 8009214:	3130      	adds	r1, #48	; 0x30
 8009216:	f1ac 0402 	sub.w	r4, ip, #2
 800921a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800921e:	1c41      	adds	r1, r0, #1
 8009220:	4622      	mov	r2, r4
 8009222:	42ba      	cmp	r2, r7
 8009224:	d30a      	bcc.n	800923c <__exponent+0x66>
 8009226:	f10d 0209 	add.w	r2, sp, #9
 800922a:	eba2 020c 	sub.w	r2, r2, ip
 800922e:	42bc      	cmp	r4, r7
 8009230:	bf88      	it	hi
 8009232:	2200      	movhi	r2, #0
 8009234:	4413      	add	r3, r2
 8009236:	1a18      	subs	r0, r3, r0
 8009238:	b003      	add	sp, #12
 800923a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009240:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009244:	e7ed      	b.n	8009222 <__exponent+0x4c>
 8009246:	2330      	movs	r3, #48	; 0x30
 8009248:	3130      	adds	r1, #48	; 0x30
 800924a:	7083      	strb	r3, [r0, #2]
 800924c:	70c1      	strb	r1, [r0, #3]
 800924e:	1d03      	adds	r3, r0, #4
 8009250:	e7f1      	b.n	8009236 <__exponent+0x60>
	...

08009254 <_printf_float>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	ed2d 8b02 	vpush	{d8}
 800925c:	b08d      	sub	sp, #52	; 0x34
 800925e:	460c      	mov	r4, r1
 8009260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009264:	4616      	mov	r6, r2
 8009266:	461f      	mov	r7, r3
 8009268:	4605      	mov	r5, r0
 800926a:	f000 fcef 	bl	8009c4c <_localeconv_r>
 800926e:	f8d0 a000 	ldr.w	sl, [r0]
 8009272:	4650      	mov	r0, sl
 8009274:	f7f7 f81c 	bl	80002b0 <strlen>
 8009278:	2300      	movs	r3, #0
 800927a:	930a      	str	r3, [sp, #40]	; 0x28
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	9305      	str	r3, [sp, #20]
 8009280:	f8d8 3000 	ldr.w	r3, [r8]
 8009284:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009288:	3307      	adds	r3, #7
 800928a:	f023 0307 	bic.w	r3, r3, #7
 800928e:	f103 0208 	add.w	r2, r3, #8
 8009292:	f8c8 2000 	str.w	r2, [r8]
 8009296:	e9d3 8900 	ldrd	r8, r9, [r3]
 800929a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80092a4:	ee08 0a10 	vmov	s16, r0
 80092a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80092ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092b0:	4b9e      	ldr	r3, [pc, #632]	; (800952c <_printf_float+0x2d8>)
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295
 80092b6:	f7f7 fc59 	bl	8000b6c <__aeabi_dcmpun>
 80092ba:	bb88      	cbnz	r0, 8009320 <_printf_float+0xcc>
 80092bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092c0:	4b9a      	ldr	r3, [pc, #616]	; (800952c <_printf_float+0x2d8>)
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	f7f7 fc33 	bl	8000b30 <__aeabi_dcmple>
 80092ca:	bb48      	cbnz	r0, 8009320 <_printf_float+0xcc>
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f7 fc22 	bl	8000b1c <__aeabi_dcmplt>
 80092d8:	b110      	cbz	r0, 80092e0 <_printf_float+0x8c>
 80092da:	232d      	movs	r3, #45	; 0x2d
 80092dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e0:	4a93      	ldr	r2, [pc, #588]	; (8009530 <_printf_float+0x2dc>)
 80092e2:	4b94      	ldr	r3, [pc, #592]	; (8009534 <_printf_float+0x2e0>)
 80092e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092e8:	bf94      	ite	ls
 80092ea:	4690      	movls	r8, r2
 80092ec:	4698      	movhi	r8, r3
 80092ee:	2303      	movs	r3, #3
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	f023 0304 	bic.w	r3, r3, #4
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	f04f 0900 	mov.w	r9, #0
 80092fe:	9700      	str	r7, [sp, #0]
 8009300:	4633      	mov	r3, r6
 8009302:	aa0b      	add	r2, sp, #44	; 0x2c
 8009304:	4621      	mov	r1, r4
 8009306:	4628      	mov	r0, r5
 8009308:	f000 f9da 	bl	80096c0 <_printf_common>
 800930c:	3001      	adds	r0, #1
 800930e:	f040 8090 	bne.w	8009432 <_printf_float+0x1de>
 8009312:	f04f 30ff 	mov.w	r0, #4294967295
 8009316:	b00d      	add	sp, #52	; 0x34
 8009318:	ecbd 8b02 	vpop	{d8}
 800931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009320:	4642      	mov	r2, r8
 8009322:	464b      	mov	r3, r9
 8009324:	4640      	mov	r0, r8
 8009326:	4649      	mov	r1, r9
 8009328:	f7f7 fc20 	bl	8000b6c <__aeabi_dcmpun>
 800932c:	b140      	cbz	r0, 8009340 <_printf_float+0xec>
 800932e:	464b      	mov	r3, r9
 8009330:	2b00      	cmp	r3, #0
 8009332:	bfbc      	itt	lt
 8009334:	232d      	movlt	r3, #45	; 0x2d
 8009336:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800933a:	4a7f      	ldr	r2, [pc, #508]	; (8009538 <_printf_float+0x2e4>)
 800933c:	4b7f      	ldr	r3, [pc, #508]	; (800953c <_printf_float+0x2e8>)
 800933e:	e7d1      	b.n	80092e4 <_printf_float+0x90>
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009346:	9206      	str	r2, [sp, #24]
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	d13f      	bne.n	80093cc <_printf_float+0x178>
 800934c:	2306      	movs	r3, #6
 800934e:	6063      	str	r3, [r4, #4]
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	6861      	ldr	r1, [r4, #4]
 8009354:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009358:	2300      	movs	r3, #0
 800935a:	9303      	str	r3, [sp, #12]
 800935c:	ab0a      	add	r3, sp, #40	; 0x28
 800935e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009362:	ab09      	add	r3, sp, #36	; 0x24
 8009364:	ec49 8b10 	vmov	d0, r8, r9
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	6022      	str	r2, [r4, #0]
 800936c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009370:	4628      	mov	r0, r5
 8009372:	f7ff fece 	bl	8009112 <__cvt>
 8009376:	9b06      	ldr	r3, [sp, #24]
 8009378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800937a:	2b47      	cmp	r3, #71	; 0x47
 800937c:	4680      	mov	r8, r0
 800937e:	d108      	bne.n	8009392 <_printf_float+0x13e>
 8009380:	1cc8      	adds	r0, r1, #3
 8009382:	db02      	blt.n	800938a <_printf_float+0x136>
 8009384:	6863      	ldr	r3, [r4, #4]
 8009386:	4299      	cmp	r1, r3
 8009388:	dd41      	ble.n	800940e <_printf_float+0x1ba>
 800938a:	f1ab 0302 	sub.w	r3, fp, #2
 800938e:	fa5f fb83 	uxtb.w	fp, r3
 8009392:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009396:	d820      	bhi.n	80093da <_printf_float+0x186>
 8009398:	3901      	subs	r1, #1
 800939a:	465a      	mov	r2, fp
 800939c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093a0:	9109      	str	r1, [sp, #36]	; 0x24
 80093a2:	f7ff ff18 	bl	80091d6 <__exponent>
 80093a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093a8:	1813      	adds	r3, r2, r0
 80093aa:	2a01      	cmp	r2, #1
 80093ac:	4681      	mov	r9, r0
 80093ae:	6123      	str	r3, [r4, #16]
 80093b0:	dc02      	bgt.n	80093b8 <_printf_float+0x164>
 80093b2:	6822      	ldr	r2, [r4, #0]
 80093b4:	07d2      	lsls	r2, r2, #31
 80093b6:	d501      	bpl.n	80093bc <_printf_float+0x168>
 80093b8:	3301      	adds	r3, #1
 80093ba:	6123      	str	r3, [r4, #16]
 80093bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d09c      	beq.n	80092fe <_printf_float+0xaa>
 80093c4:	232d      	movs	r3, #45	; 0x2d
 80093c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ca:	e798      	b.n	80092fe <_printf_float+0xaa>
 80093cc:	9a06      	ldr	r2, [sp, #24]
 80093ce:	2a47      	cmp	r2, #71	; 0x47
 80093d0:	d1be      	bne.n	8009350 <_printf_float+0xfc>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1bc      	bne.n	8009350 <_printf_float+0xfc>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e7b9      	b.n	800934e <_printf_float+0xfa>
 80093da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80093de:	d118      	bne.n	8009412 <_printf_float+0x1be>
 80093e0:	2900      	cmp	r1, #0
 80093e2:	6863      	ldr	r3, [r4, #4]
 80093e4:	dd0b      	ble.n	80093fe <_printf_float+0x1aa>
 80093e6:	6121      	str	r1, [r4, #16]
 80093e8:	b913      	cbnz	r3, 80093f0 <_printf_float+0x19c>
 80093ea:	6822      	ldr	r2, [r4, #0]
 80093ec:	07d0      	lsls	r0, r2, #31
 80093ee:	d502      	bpl.n	80093f6 <_printf_float+0x1a2>
 80093f0:	3301      	adds	r3, #1
 80093f2:	440b      	add	r3, r1
 80093f4:	6123      	str	r3, [r4, #16]
 80093f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80093f8:	f04f 0900 	mov.w	r9, #0
 80093fc:	e7de      	b.n	80093bc <_printf_float+0x168>
 80093fe:	b913      	cbnz	r3, 8009406 <_printf_float+0x1b2>
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	07d2      	lsls	r2, r2, #31
 8009404:	d501      	bpl.n	800940a <_printf_float+0x1b6>
 8009406:	3302      	adds	r3, #2
 8009408:	e7f4      	b.n	80093f4 <_printf_float+0x1a0>
 800940a:	2301      	movs	r3, #1
 800940c:	e7f2      	b.n	80093f4 <_printf_float+0x1a0>
 800940e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	4299      	cmp	r1, r3
 8009416:	db05      	blt.n	8009424 <_printf_float+0x1d0>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	6121      	str	r1, [r4, #16]
 800941c:	07d8      	lsls	r0, r3, #31
 800941e:	d5ea      	bpl.n	80093f6 <_printf_float+0x1a2>
 8009420:	1c4b      	adds	r3, r1, #1
 8009422:	e7e7      	b.n	80093f4 <_printf_float+0x1a0>
 8009424:	2900      	cmp	r1, #0
 8009426:	bfd4      	ite	le
 8009428:	f1c1 0202 	rsble	r2, r1, #2
 800942c:	2201      	movgt	r2, #1
 800942e:	4413      	add	r3, r2
 8009430:	e7e0      	b.n	80093f4 <_printf_float+0x1a0>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	055a      	lsls	r2, r3, #21
 8009436:	d407      	bmi.n	8009448 <_printf_float+0x1f4>
 8009438:	6923      	ldr	r3, [r4, #16]
 800943a:	4642      	mov	r2, r8
 800943c:	4631      	mov	r1, r6
 800943e:	4628      	mov	r0, r5
 8009440:	47b8      	blx	r7
 8009442:	3001      	adds	r0, #1
 8009444:	d12c      	bne.n	80094a0 <_printf_float+0x24c>
 8009446:	e764      	b.n	8009312 <_printf_float+0xbe>
 8009448:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800944c:	f240 80e0 	bls.w	8009610 <_printf_float+0x3bc>
 8009450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	f7f7 fb56 	bl	8000b08 <__aeabi_dcmpeq>
 800945c:	2800      	cmp	r0, #0
 800945e:	d034      	beq.n	80094ca <_printf_float+0x276>
 8009460:	4a37      	ldr	r2, [pc, #220]	; (8009540 <_printf_float+0x2ec>)
 8009462:	2301      	movs	r3, #1
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	f43f af51 	beq.w	8009312 <_printf_float+0xbe>
 8009470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009474:	429a      	cmp	r2, r3
 8009476:	db02      	blt.n	800947e <_printf_float+0x22a>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	07d8      	lsls	r0, r3, #31
 800947c:	d510      	bpl.n	80094a0 <_printf_float+0x24c>
 800947e:	ee18 3a10 	vmov	r3, s16
 8009482:	4652      	mov	r2, sl
 8009484:	4631      	mov	r1, r6
 8009486:	4628      	mov	r0, r5
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	f43f af41 	beq.w	8009312 <_printf_float+0xbe>
 8009490:	f04f 0800 	mov.w	r8, #0
 8009494:	f104 091a 	add.w	r9, r4, #26
 8009498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800949a:	3b01      	subs	r3, #1
 800949c:	4543      	cmp	r3, r8
 800949e:	dc09      	bgt.n	80094b4 <_printf_float+0x260>
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	079b      	lsls	r3, r3, #30
 80094a4:	f100 8107 	bmi.w	80096b6 <_printf_float+0x462>
 80094a8:	68e0      	ldr	r0, [r4, #12]
 80094aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ac:	4298      	cmp	r0, r3
 80094ae:	bfb8      	it	lt
 80094b0:	4618      	movlt	r0, r3
 80094b2:	e730      	b.n	8009316 <_printf_float+0xc2>
 80094b4:	2301      	movs	r3, #1
 80094b6:	464a      	mov	r2, r9
 80094b8:	4631      	mov	r1, r6
 80094ba:	4628      	mov	r0, r5
 80094bc:	47b8      	blx	r7
 80094be:	3001      	adds	r0, #1
 80094c0:	f43f af27 	beq.w	8009312 <_printf_float+0xbe>
 80094c4:	f108 0801 	add.w	r8, r8, #1
 80094c8:	e7e6      	b.n	8009498 <_printf_float+0x244>
 80094ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dc39      	bgt.n	8009544 <_printf_float+0x2f0>
 80094d0:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <_printf_float+0x2ec>)
 80094d2:	2301      	movs	r3, #1
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f af19 	beq.w	8009312 <_printf_float+0xbe>
 80094e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094e4:	4313      	orrs	r3, r2
 80094e6:	d102      	bne.n	80094ee <_printf_float+0x29a>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	07d9      	lsls	r1, r3, #31
 80094ec:	d5d8      	bpl.n	80094a0 <_printf_float+0x24c>
 80094ee:	ee18 3a10 	vmov	r3, s16
 80094f2:	4652      	mov	r2, sl
 80094f4:	4631      	mov	r1, r6
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	f43f af09 	beq.w	8009312 <_printf_float+0xbe>
 8009500:	f04f 0900 	mov.w	r9, #0
 8009504:	f104 0a1a 	add.w	sl, r4, #26
 8009508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950a:	425b      	negs	r3, r3
 800950c:	454b      	cmp	r3, r9
 800950e:	dc01      	bgt.n	8009514 <_printf_float+0x2c0>
 8009510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009512:	e792      	b.n	800943a <_printf_float+0x1e6>
 8009514:	2301      	movs	r3, #1
 8009516:	4652      	mov	r2, sl
 8009518:	4631      	mov	r1, r6
 800951a:	4628      	mov	r0, r5
 800951c:	47b8      	blx	r7
 800951e:	3001      	adds	r0, #1
 8009520:	f43f aef7 	beq.w	8009312 <_printf_float+0xbe>
 8009524:	f109 0901 	add.w	r9, r9, #1
 8009528:	e7ee      	b.n	8009508 <_printf_float+0x2b4>
 800952a:	bf00      	nop
 800952c:	7fefffff 	.word	0x7fefffff
 8009530:	0800dd68 	.word	0x0800dd68
 8009534:	0800dd6c 	.word	0x0800dd6c
 8009538:	0800dd70 	.word	0x0800dd70
 800953c:	0800dd74 	.word	0x0800dd74
 8009540:	0800dd78 	.word	0x0800dd78
 8009544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009548:	429a      	cmp	r2, r3
 800954a:	bfa8      	it	ge
 800954c:	461a      	movge	r2, r3
 800954e:	2a00      	cmp	r2, #0
 8009550:	4691      	mov	r9, r2
 8009552:	dc37      	bgt.n	80095c4 <_printf_float+0x370>
 8009554:	f04f 0b00 	mov.w	fp, #0
 8009558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800955c:	f104 021a 	add.w	r2, r4, #26
 8009560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009562:	9305      	str	r3, [sp, #20]
 8009564:	eba3 0309 	sub.w	r3, r3, r9
 8009568:	455b      	cmp	r3, fp
 800956a:	dc33      	bgt.n	80095d4 <_printf_float+0x380>
 800956c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009570:	429a      	cmp	r2, r3
 8009572:	db3b      	blt.n	80095ec <_printf_float+0x398>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07da      	lsls	r2, r3, #31
 8009578:	d438      	bmi.n	80095ec <_printf_float+0x398>
 800957a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800957e:	eba2 0903 	sub.w	r9, r2, r3
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	1ad2      	subs	r2, r2, r3
 8009586:	4591      	cmp	r9, r2
 8009588:	bfa8      	it	ge
 800958a:	4691      	movge	r9, r2
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	dc35      	bgt.n	80095fe <_printf_float+0x3aa>
 8009592:	f04f 0800 	mov.w	r8, #0
 8009596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800959a:	f104 0a1a 	add.w	sl, r4, #26
 800959e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	eba3 0309 	sub.w	r3, r3, r9
 80095a8:	4543      	cmp	r3, r8
 80095aa:	f77f af79 	ble.w	80094a0 <_printf_float+0x24c>
 80095ae:	2301      	movs	r3, #1
 80095b0:	4652      	mov	r2, sl
 80095b2:	4631      	mov	r1, r6
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b8      	blx	r7
 80095b8:	3001      	adds	r0, #1
 80095ba:	f43f aeaa 	beq.w	8009312 <_printf_float+0xbe>
 80095be:	f108 0801 	add.w	r8, r8, #1
 80095c2:	e7ec      	b.n	800959e <_printf_float+0x34a>
 80095c4:	4613      	mov	r3, r2
 80095c6:	4631      	mov	r1, r6
 80095c8:	4642      	mov	r2, r8
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b8      	blx	r7
 80095ce:	3001      	adds	r0, #1
 80095d0:	d1c0      	bne.n	8009554 <_printf_float+0x300>
 80095d2:	e69e      	b.n	8009312 <_printf_float+0xbe>
 80095d4:	2301      	movs	r3, #1
 80095d6:	4631      	mov	r1, r6
 80095d8:	4628      	mov	r0, r5
 80095da:	9205      	str	r2, [sp, #20]
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	f43f ae97 	beq.w	8009312 <_printf_float+0xbe>
 80095e4:	9a05      	ldr	r2, [sp, #20]
 80095e6:	f10b 0b01 	add.w	fp, fp, #1
 80095ea:	e7b9      	b.n	8009560 <_printf_float+0x30c>
 80095ec:	ee18 3a10 	vmov	r3, s16
 80095f0:	4652      	mov	r2, sl
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	d1be      	bne.n	800957a <_printf_float+0x326>
 80095fc:	e689      	b.n	8009312 <_printf_float+0xbe>
 80095fe:	9a05      	ldr	r2, [sp, #20]
 8009600:	464b      	mov	r3, r9
 8009602:	4442      	add	r2, r8
 8009604:	4631      	mov	r1, r6
 8009606:	4628      	mov	r0, r5
 8009608:	47b8      	blx	r7
 800960a:	3001      	adds	r0, #1
 800960c:	d1c1      	bne.n	8009592 <_printf_float+0x33e>
 800960e:	e680      	b.n	8009312 <_printf_float+0xbe>
 8009610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009612:	2a01      	cmp	r2, #1
 8009614:	dc01      	bgt.n	800961a <_printf_float+0x3c6>
 8009616:	07db      	lsls	r3, r3, #31
 8009618:	d53a      	bpl.n	8009690 <_printf_float+0x43c>
 800961a:	2301      	movs	r3, #1
 800961c:	4642      	mov	r2, r8
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f ae74 	beq.w	8009312 <_printf_float+0xbe>
 800962a:	ee18 3a10 	vmov	r3, s16
 800962e:	4652      	mov	r2, sl
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f ae6b 	beq.w	8009312 <_printf_float+0xbe>
 800963c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009640:	2200      	movs	r2, #0
 8009642:	2300      	movs	r3, #0
 8009644:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009648:	f7f7 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800964c:	b9d8      	cbnz	r0, 8009686 <_printf_float+0x432>
 800964e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009652:	f108 0201 	add.w	r2, r8, #1
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	d10e      	bne.n	800967e <_printf_float+0x42a>
 8009660:	e657      	b.n	8009312 <_printf_float+0xbe>
 8009662:	2301      	movs	r3, #1
 8009664:	4652      	mov	r2, sl
 8009666:	4631      	mov	r1, r6
 8009668:	4628      	mov	r0, r5
 800966a:	47b8      	blx	r7
 800966c:	3001      	adds	r0, #1
 800966e:	f43f ae50 	beq.w	8009312 <_printf_float+0xbe>
 8009672:	f108 0801 	add.w	r8, r8, #1
 8009676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009678:	3b01      	subs	r3, #1
 800967a:	4543      	cmp	r3, r8
 800967c:	dcf1      	bgt.n	8009662 <_printf_float+0x40e>
 800967e:	464b      	mov	r3, r9
 8009680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009684:	e6da      	b.n	800943c <_printf_float+0x1e8>
 8009686:	f04f 0800 	mov.w	r8, #0
 800968a:	f104 0a1a 	add.w	sl, r4, #26
 800968e:	e7f2      	b.n	8009676 <_printf_float+0x422>
 8009690:	2301      	movs	r3, #1
 8009692:	4642      	mov	r2, r8
 8009694:	e7df      	b.n	8009656 <_printf_float+0x402>
 8009696:	2301      	movs	r3, #1
 8009698:	464a      	mov	r2, r9
 800969a:	4631      	mov	r1, r6
 800969c:	4628      	mov	r0, r5
 800969e:	47b8      	blx	r7
 80096a0:	3001      	adds	r0, #1
 80096a2:	f43f ae36 	beq.w	8009312 <_printf_float+0xbe>
 80096a6:	f108 0801 	add.w	r8, r8, #1
 80096aa:	68e3      	ldr	r3, [r4, #12]
 80096ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096ae:	1a5b      	subs	r3, r3, r1
 80096b0:	4543      	cmp	r3, r8
 80096b2:	dcf0      	bgt.n	8009696 <_printf_float+0x442>
 80096b4:	e6f8      	b.n	80094a8 <_printf_float+0x254>
 80096b6:	f04f 0800 	mov.w	r8, #0
 80096ba:	f104 0919 	add.w	r9, r4, #25
 80096be:	e7f4      	b.n	80096aa <_printf_float+0x456>

080096c0 <_printf_common>:
 80096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	4616      	mov	r6, r2
 80096c6:	4699      	mov	r9, r3
 80096c8:	688a      	ldr	r2, [r1, #8]
 80096ca:	690b      	ldr	r3, [r1, #16]
 80096cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096d0:	4293      	cmp	r3, r2
 80096d2:	bfb8      	it	lt
 80096d4:	4613      	movlt	r3, r2
 80096d6:	6033      	str	r3, [r6, #0]
 80096d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096dc:	4607      	mov	r7, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	b10a      	cbz	r2, 80096e6 <_printf_common+0x26>
 80096e2:	3301      	adds	r3, #1
 80096e4:	6033      	str	r3, [r6, #0]
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	0699      	lsls	r1, r3, #26
 80096ea:	bf42      	ittt	mi
 80096ec:	6833      	ldrmi	r3, [r6, #0]
 80096ee:	3302      	addmi	r3, #2
 80096f0:	6033      	strmi	r3, [r6, #0]
 80096f2:	6825      	ldr	r5, [r4, #0]
 80096f4:	f015 0506 	ands.w	r5, r5, #6
 80096f8:	d106      	bne.n	8009708 <_printf_common+0x48>
 80096fa:	f104 0a19 	add.w	sl, r4, #25
 80096fe:	68e3      	ldr	r3, [r4, #12]
 8009700:	6832      	ldr	r2, [r6, #0]
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	42ab      	cmp	r3, r5
 8009706:	dc26      	bgt.n	8009756 <_printf_common+0x96>
 8009708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800970c:	1e13      	subs	r3, r2, #0
 800970e:	6822      	ldr	r2, [r4, #0]
 8009710:	bf18      	it	ne
 8009712:	2301      	movne	r3, #1
 8009714:	0692      	lsls	r2, r2, #26
 8009716:	d42b      	bmi.n	8009770 <_printf_common+0xb0>
 8009718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800971c:	4649      	mov	r1, r9
 800971e:	4638      	mov	r0, r7
 8009720:	47c0      	blx	r8
 8009722:	3001      	adds	r0, #1
 8009724:	d01e      	beq.n	8009764 <_printf_common+0xa4>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	6922      	ldr	r2, [r4, #16]
 800972a:	f003 0306 	and.w	r3, r3, #6
 800972e:	2b04      	cmp	r3, #4
 8009730:	bf02      	ittt	eq
 8009732:	68e5      	ldreq	r5, [r4, #12]
 8009734:	6833      	ldreq	r3, [r6, #0]
 8009736:	1aed      	subeq	r5, r5, r3
 8009738:	68a3      	ldr	r3, [r4, #8]
 800973a:	bf0c      	ite	eq
 800973c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009740:	2500      	movne	r5, #0
 8009742:	4293      	cmp	r3, r2
 8009744:	bfc4      	itt	gt
 8009746:	1a9b      	subgt	r3, r3, r2
 8009748:	18ed      	addgt	r5, r5, r3
 800974a:	2600      	movs	r6, #0
 800974c:	341a      	adds	r4, #26
 800974e:	42b5      	cmp	r5, r6
 8009750:	d11a      	bne.n	8009788 <_printf_common+0xc8>
 8009752:	2000      	movs	r0, #0
 8009754:	e008      	b.n	8009768 <_printf_common+0xa8>
 8009756:	2301      	movs	r3, #1
 8009758:	4652      	mov	r2, sl
 800975a:	4649      	mov	r1, r9
 800975c:	4638      	mov	r0, r7
 800975e:	47c0      	blx	r8
 8009760:	3001      	adds	r0, #1
 8009762:	d103      	bne.n	800976c <_printf_common+0xac>
 8009764:	f04f 30ff 	mov.w	r0, #4294967295
 8009768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976c:	3501      	adds	r5, #1
 800976e:	e7c6      	b.n	80096fe <_printf_common+0x3e>
 8009770:	18e1      	adds	r1, r4, r3
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	2030      	movs	r0, #48	; 0x30
 8009776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800977a:	4422      	add	r2, r4
 800977c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009784:	3302      	adds	r3, #2
 8009786:	e7c7      	b.n	8009718 <_printf_common+0x58>
 8009788:	2301      	movs	r3, #1
 800978a:	4622      	mov	r2, r4
 800978c:	4649      	mov	r1, r9
 800978e:	4638      	mov	r0, r7
 8009790:	47c0      	blx	r8
 8009792:	3001      	adds	r0, #1
 8009794:	d0e6      	beq.n	8009764 <_printf_common+0xa4>
 8009796:	3601      	adds	r6, #1
 8009798:	e7d9      	b.n	800974e <_printf_common+0x8e>
	...

0800979c <_printf_i>:
 800979c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	7e0f      	ldrb	r7, [r1, #24]
 80097a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097a4:	2f78      	cmp	r7, #120	; 0x78
 80097a6:	4691      	mov	r9, r2
 80097a8:	4680      	mov	r8, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	469a      	mov	sl, r3
 80097ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097b2:	d807      	bhi.n	80097c4 <_printf_i+0x28>
 80097b4:	2f62      	cmp	r7, #98	; 0x62
 80097b6:	d80a      	bhi.n	80097ce <_printf_i+0x32>
 80097b8:	2f00      	cmp	r7, #0
 80097ba:	f000 80d4 	beq.w	8009966 <_printf_i+0x1ca>
 80097be:	2f58      	cmp	r7, #88	; 0x58
 80097c0:	f000 80c0 	beq.w	8009944 <_printf_i+0x1a8>
 80097c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097cc:	e03a      	b.n	8009844 <_printf_i+0xa8>
 80097ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097d2:	2b15      	cmp	r3, #21
 80097d4:	d8f6      	bhi.n	80097c4 <_printf_i+0x28>
 80097d6:	a101      	add	r1, pc, #4	; (adr r1, 80097dc <_printf_i+0x40>)
 80097d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097dc:	08009835 	.word	0x08009835
 80097e0:	08009849 	.word	0x08009849
 80097e4:	080097c5 	.word	0x080097c5
 80097e8:	080097c5 	.word	0x080097c5
 80097ec:	080097c5 	.word	0x080097c5
 80097f0:	080097c5 	.word	0x080097c5
 80097f4:	08009849 	.word	0x08009849
 80097f8:	080097c5 	.word	0x080097c5
 80097fc:	080097c5 	.word	0x080097c5
 8009800:	080097c5 	.word	0x080097c5
 8009804:	080097c5 	.word	0x080097c5
 8009808:	0800994d 	.word	0x0800994d
 800980c:	08009875 	.word	0x08009875
 8009810:	08009907 	.word	0x08009907
 8009814:	080097c5 	.word	0x080097c5
 8009818:	080097c5 	.word	0x080097c5
 800981c:	0800996f 	.word	0x0800996f
 8009820:	080097c5 	.word	0x080097c5
 8009824:	08009875 	.word	0x08009875
 8009828:	080097c5 	.word	0x080097c5
 800982c:	080097c5 	.word	0x080097c5
 8009830:	0800990f 	.word	0x0800990f
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	1d1a      	adds	r2, r3, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	602a      	str	r2, [r5, #0]
 800983c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009844:	2301      	movs	r3, #1
 8009846:	e09f      	b.n	8009988 <_printf_i+0x1ec>
 8009848:	6820      	ldr	r0, [r4, #0]
 800984a:	682b      	ldr	r3, [r5, #0]
 800984c:	0607      	lsls	r7, r0, #24
 800984e:	f103 0104 	add.w	r1, r3, #4
 8009852:	6029      	str	r1, [r5, #0]
 8009854:	d501      	bpl.n	800985a <_printf_i+0xbe>
 8009856:	681e      	ldr	r6, [r3, #0]
 8009858:	e003      	b.n	8009862 <_printf_i+0xc6>
 800985a:	0646      	lsls	r6, r0, #25
 800985c:	d5fb      	bpl.n	8009856 <_printf_i+0xba>
 800985e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009862:	2e00      	cmp	r6, #0
 8009864:	da03      	bge.n	800986e <_printf_i+0xd2>
 8009866:	232d      	movs	r3, #45	; 0x2d
 8009868:	4276      	negs	r6, r6
 800986a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800986e:	485a      	ldr	r0, [pc, #360]	; (80099d8 <_printf_i+0x23c>)
 8009870:	230a      	movs	r3, #10
 8009872:	e012      	b.n	800989a <_printf_i+0xfe>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	6820      	ldr	r0, [r4, #0]
 8009878:	1d19      	adds	r1, r3, #4
 800987a:	6029      	str	r1, [r5, #0]
 800987c:	0605      	lsls	r5, r0, #24
 800987e:	d501      	bpl.n	8009884 <_printf_i+0xe8>
 8009880:	681e      	ldr	r6, [r3, #0]
 8009882:	e002      	b.n	800988a <_printf_i+0xee>
 8009884:	0641      	lsls	r1, r0, #25
 8009886:	d5fb      	bpl.n	8009880 <_printf_i+0xe4>
 8009888:	881e      	ldrh	r6, [r3, #0]
 800988a:	4853      	ldr	r0, [pc, #332]	; (80099d8 <_printf_i+0x23c>)
 800988c:	2f6f      	cmp	r7, #111	; 0x6f
 800988e:	bf0c      	ite	eq
 8009890:	2308      	moveq	r3, #8
 8009892:	230a      	movne	r3, #10
 8009894:	2100      	movs	r1, #0
 8009896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800989a:	6865      	ldr	r5, [r4, #4]
 800989c:	60a5      	str	r5, [r4, #8]
 800989e:	2d00      	cmp	r5, #0
 80098a0:	bfa2      	ittt	ge
 80098a2:	6821      	ldrge	r1, [r4, #0]
 80098a4:	f021 0104 	bicge.w	r1, r1, #4
 80098a8:	6021      	strge	r1, [r4, #0]
 80098aa:	b90e      	cbnz	r6, 80098b0 <_printf_i+0x114>
 80098ac:	2d00      	cmp	r5, #0
 80098ae:	d04b      	beq.n	8009948 <_printf_i+0x1ac>
 80098b0:	4615      	mov	r5, r2
 80098b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80098b6:	fb03 6711 	mls	r7, r3, r1, r6
 80098ba:	5dc7      	ldrb	r7, [r0, r7]
 80098bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098c0:	4637      	mov	r7, r6
 80098c2:	42bb      	cmp	r3, r7
 80098c4:	460e      	mov	r6, r1
 80098c6:	d9f4      	bls.n	80098b2 <_printf_i+0x116>
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d10b      	bne.n	80098e4 <_printf_i+0x148>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	07de      	lsls	r6, r3, #31
 80098d0:	d508      	bpl.n	80098e4 <_printf_i+0x148>
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	6861      	ldr	r1, [r4, #4]
 80098d6:	4299      	cmp	r1, r3
 80098d8:	bfde      	ittt	le
 80098da:	2330      	movle	r3, #48	; 0x30
 80098dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098e4:	1b52      	subs	r2, r2, r5
 80098e6:	6122      	str	r2, [r4, #16]
 80098e8:	f8cd a000 	str.w	sl, [sp]
 80098ec:	464b      	mov	r3, r9
 80098ee:	aa03      	add	r2, sp, #12
 80098f0:	4621      	mov	r1, r4
 80098f2:	4640      	mov	r0, r8
 80098f4:	f7ff fee4 	bl	80096c0 <_printf_common>
 80098f8:	3001      	adds	r0, #1
 80098fa:	d14a      	bne.n	8009992 <_printf_i+0x1f6>
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009900:	b004      	add	sp, #16
 8009902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	f043 0320 	orr.w	r3, r3, #32
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	4833      	ldr	r0, [pc, #204]	; (80099dc <_printf_i+0x240>)
 8009910:	2778      	movs	r7, #120	; 0x78
 8009912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	6829      	ldr	r1, [r5, #0]
 800991a:	061f      	lsls	r7, r3, #24
 800991c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009920:	d402      	bmi.n	8009928 <_printf_i+0x18c>
 8009922:	065f      	lsls	r7, r3, #25
 8009924:	bf48      	it	mi
 8009926:	b2b6      	uxthmi	r6, r6
 8009928:	07df      	lsls	r7, r3, #31
 800992a:	bf48      	it	mi
 800992c:	f043 0320 	orrmi.w	r3, r3, #32
 8009930:	6029      	str	r1, [r5, #0]
 8009932:	bf48      	it	mi
 8009934:	6023      	strmi	r3, [r4, #0]
 8009936:	b91e      	cbnz	r6, 8009940 <_printf_i+0x1a4>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	f023 0320 	bic.w	r3, r3, #32
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	2310      	movs	r3, #16
 8009942:	e7a7      	b.n	8009894 <_printf_i+0xf8>
 8009944:	4824      	ldr	r0, [pc, #144]	; (80099d8 <_printf_i+0x23c>)
 8009946:	e7e4      	b.n	8009912 <_printf_i+0x176>
 8009948:	4615      	mov	r5, r2
 800994a:	e7bd      	b.n	80098c8 <_printf_i+0x12c>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	6826      	ldr	r6, [r4, #0]
 8009950:	6961      	ldr	r1, [r4, #20]
 8009952:	1d18      	adds	r0, r3, #4
 8009954:	6028      	str	r0, [r5, #0]
 8009956:	0635      	lsls	r5, r6, #24
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	d501      	bpl.n	8009960 <_printf_i+0x1c4>
 800995c:	6019      	str	r1, [r3, #0]
 800995e:	e002      	b.n	8009966 <_printf_i+0x1ca>
 8009960:	0670      	lsls	r0, r6, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0x1c0>
 8009964:	8019      	strh	r1, [r3, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	4615      	mov	r5, r2
 800996c:	e7bc      	b.n	80098e8 <_printf_i+0x14c>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	1d1a      	adds	r2, r3, #4
 8009972:	602a      	str	r2, [r5, #0]
 8009974:	681d      	ldr	r5, [r3, #0]
 8009976:	6862      	ldr	r2, [r4, #4]
 8009978:	2100      	movs	r1, #0
 800997a:	4628      	mov	r0, r5
 800997c:	f7f6 fc48 	bl	8000210 <memchr>
 8009980:	b108      	cbz	r0, 8009986 <_printf_i+0x1ea>
 8009982:	1b40      	subs	r0, r0, r5
 8009984:	6060      	str	r0, [r4, #4]
 8009986:	6863      	ldr	r3, [r4, #4]
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	2300      	movs	r3, #0
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009990:	e7aa      	b.n	80098e8 <_printf_i+0x14c>
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	462a      	mov	r2, r5
 8009996:	4649      	mov	r1, r9
 8009998:	4640      	mov	r0, r8
 800999a:	47d0      	blx	sl
 800999c:	3001      	adds	r0, #1
 800999e:	d0ad      	beq.n	80098fc <_printf_i+0x160>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	079b      	lsls	r3, r3, #30
 80099a4:	d413      	bmi.n	80099ce <_printf_i+0x232>
 80099a6:	68e0      	ldr	r0, [r4, #12]
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	4298      	cmp	r0, r3
 80099ac:	bfb8      	it	lt
 80099ae:	4618      	movlt	r0, r3
 80099b0:	e7a6      	b.n	8009900 <_printf_i+0x164>
 80099b2:	2301      	movs	r3, #1
 80099b4:	4632      	mov	r2, r6
 80099b6:	4649      	mov	r1, r9
 80099b8:	4640      	mov	r0, r8
 80099ba:	47d0      	blx	sl
 80099bc:	3001      	adds	r0, #1
 80099be:	d09d      	beq.n	80098fc <_printf_i+0x160>
 80099c0:	3501      	adds	r5, #1
 80099c2:	68e3      	ldr	r3, [r4, #12]
 80099c4:	9903      	ldr	r1, [sp, #12]
 80099c6:	1a5b      	subs	r3, r3, r1
 80099c8:	42ab      	cmp	r3, r5
 80099ca:	dcf2      	bgt.n	80099b2 <_printf_i+0x216>
 80099cc:	e7eb      	b.n	80099a6 <_printf_i+0x20a>
 80099ce:	2500      	movs	r5, #0
 80099d0:	f104 0619 	add.w	r6, r4, #25
 80099d4:	e7f5      	b.n	80099c2 <_printf_i+0x226>
 80099d6:	bf00      	nop
 80099d8:	0800dd7a 	.word	0x0800dd7a
 80099dc:	0800dd8b 	.word	0x0800dd8b

080099e0 <std>:
 80099e0:	2300      	movs	r3, #0
 80099e2:	b510      	push	{r4, lr}
 80099e4:	4604      	mov	r4, r0
 80099e6:	e9c0 3300 	strd	r3, r3, [r0]
 80099ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099ee:	6083      	str	r3, [r0, #8]
 80099f0:	8181      	strh	r1, [r0, #12]
 80099f2:	6643      	str	r3, [r0, #100]	; 0x64
 80099f4:	81c2      	strh	r2, [r0, #14]
 80099f6:	6183      	str	r3, [r0, #24]
 80099f8:	4619      	mov	r1, r3
 80099fa:	2208      	movs	r2, #8
 80099fc:	305c      	adds	r0, #92	; 0x5c
 80099fe:	f000 f91c 	bl	8009c3a <memset>
 8009a02:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <std+0x38>)
 8009a04:	6263      	str	r3, [r4, #36]	; 0x24
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <std+0x3c>)
 8009a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a0a:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <std+0x40>)
 8009a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a0e:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <std+0x44>)
 8009a10:	6224      	str	r4, [r4, #32]
 8009a12:	6323      	str	r3, [r4, #48]	; 0x30
 8009a14:	bd10      	pop	{r4, pc}
 8009a16:	bf00      	nop
 8009a18:	08009b81 	.word	0x08009b81
 8009a1c:	08009ba3 	.word	0x08009ba3
 8009a20:	08009bdb 	.word	0x08009bdb
 8009a24:	08009bff 	.word	0x08009bff

08009a28 <stdio_exit_handler>:
 8009a28:	4a02      	ldr	r2, [pc, #8]	; (8009a34 <stdio_exit_handler+0xc>)
 8009a2a:	4903      	ldr	r1, [pc, #12]	; (8009a38 <stdio_exit_handler+0x10>)
 8009a2c:	4803      	ldr	r0, [pc, #12]	; (8009a3c <stdio_exit_handler+0x14>)
 8009a2e:	f000 b869 	b.w	8009b04 <_fwalk_sglue>
 8009a32:	bf00      	nop
 8009a34:	20000040 	.word	0x20000040
 8009a38:	0800b701 	.word	0x0800b701
 8009a3c:	2000004c 	.word	0x2000004c

08009a40 <cleanup_stdio>:
 8009a40:	6841      	ldr	r1, [r0, #4]
 8009a42:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <cleanup_stdio+0x34>)
 8009a44:	4299      	cmp	r1, r3
 8009a46:	b510      	push	{r4, lr}
 8009a48:	4604      	mov	r4, r0
 8009a4a:	d001      	beq.n	8009a50 <cleanup_stdio+0x10>
 8009a4c:	f001 fe58 	bl	800b700 <_fflush_r>
 8009a50:	68a1      	ldr	r1, [r4, #8]
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <cleanup_stdio+0x38>)
 8009a54:	4299      	cmp	r1, r3
 8009a56:	d002      	beq.n	8009a5e <cleanup_stdio+0x1e>
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f001 fe51 	bl	800b700 <_fflush_r>
 8009a5e:	68e1      	ldr	r1, [r4, #12]
 8009a60:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <cleanup_stdio+0x3c>)
 8009a62:	4299      	cmp	r1, r3
 8009a64:	d004      	beq.n	8009a70 <cleanup_stdio+0x30>
 8009a66:	4620      	mov	r0, r4
 8009a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a6c:	f001 be48 	b.w	800b700 <_fflush_r>
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	bf00      	nop
 8009a74:	2000080c 	.word	0x2000080c
 8009a78:	20000874 	.word	0x20000874
 8009a7c:	200008dc 	.word	0x200008dc

08009a80 <global_stdio_init.part.0>:
 8009a80:	b510      	push	{r4, lr}
 8009a82:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <global_stdio_init.part.0+0x30>)
 8009a84:	4c0b      	ldr	r4, [pc, #44]	; (8009ab4 <global_stdio_init.part.0+0x34>)
 8009a86:	4a0c      	ldr	r2, [pc, #48]	; (8009ab8 <global_stdio_init.part.0+0x38>)
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2104      	movs	r1, #4
 8009a90:	f7ff ffa6 	bl	80099e0 <std>
 8009a94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a98:	2201      	movs	r2, #1
 8009a9a:	2109      	movs	r1, #9
 8009a9c:	f7ff ffa0 	bl	80099e0 <std>
 8009aa0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aaa:	2112      	movs	r1, #18
 8009aac:	f7ff bf98 	b.w	80099e0 <std>
 8009ab0:	20000944 	.word	0x20000944
 8009ab4:	2000080c 	.word	0x2000080c
 8009ab8:	08009a29 	.word	0x08009a29

08009abc <__sfp_lock_acquire>:
 8009abc:	4801      	ldr	r0, [pc, #4]	; (8009ac4 <__sfp_lock_acquire+0x8>)
 8009abe:	f000 b939 	b.w	8009d34 <__retarget_lock_acquire_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	2000094d 	.word	0x2000094d

08009ac8 <__sfp_lock_release>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	; (8009ad0 <__sfp_lock_release+0x8>)
 8009aca:	f000 b934 	b.w	8009d36 <__retarget_lock_release_recursive>
 8009ace:	bf00      	nop
 8009ad0:	2000094d 	.word	0x2000094d

08009ad4 <__sinit>:
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	f7ff fff0 	bl	8009abc <__sfp_lock_acquire>
 8009adc:	6a23      	ldr	r3, [r4, #32]
 8009ade:	b11b      	cbz	r3, 8009ae8 <__sinit+0x14>
 8009ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae4:	f7ff bff0 	b.w	8009ac8 <__sfp_lock_release>
 8009ae8:	4b04      	ldr	r3, [pc, #16]	; (8009afc <__sinit+0x28>)
 8009aea:	6223      	str	r3, [r4, #32]
 8009aec:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <__sinit+0x2c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f5      	bne.n	8009ae0 <__sinit+0xc>
 8009af4:	f7ff ffc4 	bl	8009a80 <global_stdio_init.part.0>
 8009af8:	e7f2      	b.n	8009ae0 <__sinit+0xc>
 8009afa:	bf00      	nop
 8009afc:	08009a41 	.word	0x08009a41
 8009b00:	20000944 	.word	0x20000944

08009b04 <_fwalk_sglue>:
 8009b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b08:	4607      	mov	r7, r0
 8009b0a:	4688      	mov	r8, r1
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	2600      	movs	r6, #0
 8009b10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b14:	f1b9 0901 	subs.w	r9, r9, #1
 8009b18:	d505      	bpl.n	8009b26 <_fwalk_sglue+0x22>
 8009b1a:	6824      	ldr	r4, [r4, #0]
 8009b1c:	2c00      	cmp	r4, #0
 8009b1e:	d1f7      	bne.n	8009b10 <_fwalk_sglue+0xc>
 8009b20:	4630      	mov	r0, r6
 8009b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d907      	bls.n	8009b3c <_fwalk_sglue+0x38>
 8009b2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b30:	3301      	adds	r3, #1
 8009b32:	d003      	beq.n	8009b3c <_fwalk_sglue+0x38>
 8009b34:	4629      	mov	r1, r5
 8009b36:	4638      	mov	r0, r7
 8009b38:	47c0      	blx	r8
 8009b3a:	4306      	orrs	r6, r0
 8009b3c:	3568      	adds	r5, #104	; 0x68
 8009b3e:	e7e9      	b.n	8009b14 <_fwalk_sglue+0x10>

08009b40 <siprintf>:
 8009b40:	b40e      	push	{r1, r2, r3}
 8009b42:	b500      	push	{lr}
 8009b44:	b09c      	sub	sp, #112	; 0x70
 8009b46:	ab1d      	add	r3, sp, #116	; 0x74
 8009b48:	9002      	str	r0, [sp, #8]
 8009b4a:	9006      	str	r0, [sp, #24]
 8009b4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b50:	4809      	ldr	r0, [pc, #36]	; (8009b78 <siprintf+0x38>)
 8009b52:	9107      	str	r1, [sp, #28]
 8009b54:	9104      	str	r1, [sp, #16]
 8009b56:	4909      	ldr	r1, [pc, #36]	; (8009b7c <siprintf+0x3c>)
 8009b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5c:	9105      	str	r1, [sp, #20]
 8009b5e:	6800      	ldr	r0, [r0, #0]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	a902      	add	r1, sp, #8
 8009b64:	f001 fc48 	bl	800b3f8 <_svfiprintf_r>
 8009b68:	9b02      	ldr	r3, [sp, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	b01c      	add	sp, #112	; 0x70
 8009b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b74:	b003      	add	sp, #12
 8009b76:	4770      	bx	lr
 8009b78:	20000098 	.word	0x20000098
 8009b7c:	ffff0208 	.word	0xffff0208

08009b80 <__sread>:
 8009b80:	b510      	push	{r4, lr}
 8009b82:	460c      	mov	r4, r1
 8009b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b88:	f000 f886 	bl	8009c98 <_read_r>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	bfab      	itete	ge
 8009b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b92:	89a3      	ldrhlt	r3, [r4, #12]
 8009b94:	181b      	addge	r3, r3, r0
 8009b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b9a:	bfac      	ite	ge
 8009b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b9e:	81a3      	strhlt	r3, [r4, #12]
 8009ba0:	bd10      	pop	{r4, pc}

08009ba2 <__swrite>:
 8009ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	05db      	lsls	r3, r3, #23
 8009bac:	4605      	mov	r5, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	d505      	bpl.n	8009bc0 <__swrite+0x1e>
 8009bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb8:	2302      	movs	r3, #2
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f000 f85a 	bl	8009c74 <_lseek_r>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	4632      	mov	r2, r6
 8009bce:	463b      	mov	r3, r7
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd6:	f000 b871 	b.w	8009cbc <_write_r>

08009bda <__sseek>:
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	460c      	mov	r4, r1
 8009bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be2:	f000 f847 	bl	8009c74 <_lseek_r>
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	bf15      	itete	ne
 8009bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bf6:	81a3      	strheq	r3, [r4, #12]
 8009bf8:	bf18      	it	ne
 8009bfa:	81a3      	strhne	r3, [r4, #12]
 8009bfc:	bd10      	pop	{r4, pc}

08009bfe <__sclose>:
 8009bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c02:	f000 b827 	b.w	8009c54 <_close_r>

08009c06 <memmove>:
 8009c06:	4288      	cmp	r0, r1
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	eb01 0402 	add.w	r4, r1, r2
 8009c0e:	d902      	bls.n	8009c16 <memmove+0x10>
 8009c10:	4284      	cmp	r4, r0
 8009c12:	4623      	mov	r3, r4
 8009c14:	d807      	bhi.n	8009c26 <memmove+0x20>
 8009c16:	1e43      	subs	r3, r0, #1
 8009c18:	42a1      	cmp	r1, r4
 8009c1a:	d008      	beq.n	8009c2e <memmove+0x28>
 8009c1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c24:	e7f8      	b.n	8009c18 <memmove+0x12>
 8009c26:	4402      	add	r2, r0
 8009c28:	4601      	mov	r1, r0
 8009c2a:	428a      	cmp	r2, r1
 8009c2c:	d100      	bne.n	8009c30 <memmove+0x2a>
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c38:	e7f7      	b.n	8009c2a <memmove+0x24>

08009c3a <memset>:
 8009c3a:	4402      	add	r2, r0
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d100      	bne.n	8009c44 <memset+0xa>
 8009c42:	4770      	bx	lr
 8009c44:	f803 1b01 	strb.w	r1, [r3], #1
 8009c48:	e7f9      	b.n	8009c3e <memset+0x4>
	...

08009c4c <_localeconv_r>:
 8009c4c:	4800      	ldr	r0, [pc, #0]	; (8009c50 <_localeconv_r+0x4>)
 8009c4e:	4770      	bx	lr
 8009c50:	2000018c 	.word	0x2000018c

08009c54 <_close_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4d06      	ldr	r5, [pc, #24]	; (8009c70 <_close_r+0x1c>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	602b      	str	r3, [r5, #0]
 8009c60:	f7f7 fe6d 	bl	800193e <_close>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_close_r+0x1a>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_close_r+0x1a>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20000948 	.word	0x20000948

08009c74 <_lseek_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d07      	ldr	r5, [pc, #28]	; (8009c94 <_lseek_r+0x20>)
 8009c78:	4604      	mov	r4, r0
 8009c7a:	4608      	mov	r0, r1
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	602a      	str	r2, [r5, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	f7f7 fe82 	bl	800198c <_lseek>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_lseek_r+0x1e>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_lseek_r+0x1e>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	20000948 	.word	0x20000948

08009c98 <_read_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_read_r+0x20>)
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	602a      	str	r2, [r5, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f7f7 fe10 	bl	80018cc <_read>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_read_r+0x1e>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_read_r+0x1e>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	20000948 	.word	0x20000948

08009cbc <_write_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	; (8009cdc <_write_r+0x20>)
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	602a      	str	r2, [r5, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f7f7 fe1b 	bl	8001906 <_write>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_write_r+0x1e>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_write_r+0x1e>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20000948 	.word	0x20000948

08009ce0 <__errno>:
 8009ce0:	4b01      	ldr	r3, [pc, #4]	; (8009ce8 <__errno+0x8>)
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	20000098 	.word	0x20000098

08009cec <__libc_init_array>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4d0d      	ldr	r5, [pc, #52]	; (8009d24 <__libc_init_array+0x38>)
 8009cf0:	4c0d      	ldr	r4, [pc, #52]	; (8009d28 <__libc_init_array+0x3c>)
 8009cf2:	1b64      	subs	r4, r4, r5
 8009cf4:	10a4      	asrs	r4, r4, #2
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	42a6      	cmp	r6, r4
 8009cfa:	d109      	bne.n	8009d10 <__libc_init_array+0x24>
 8009cfc:	4d0b      	ldr	r5, [pc, #44]	; (8009d2c <__libc_init_array+0x40>)
 8009cfe:	4c0c      	ldr	r4, [pc, #48]	; (8009d30 <__libc_init_array+0x44>)
 8009d00:	f002 f87a 	bl	800bdf8 <_init>
 8009d04:	1b64      	subs	r4, r4, r5
 8009d06:	10a4      	asrs	r4, r4, #2
 8009d08:	2600      	movs	r6, #0
 8009d0a:	42a6      	cmp	r6, r4
 8009d0c:	d105      	bne.n	8009d1a <__libc_init_array+0x2e>
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d14:	4798      	blx	r3
 8009d16:	3601      	adds	r6, #1
 8009d18:	e7ee      	b.n	8009cf8 <__libc_init_array+0xc>
 8009d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1e:	4798      	blx	r3
 8009d20:	3601      	adds	r6, #1
 8009d22:	e7f2      	b.n	8009d0a <__libc_init_array+0x1e>
 8009d24:	0800e0e4 	.word	0x0800e0e4
 8009d28:	0800e0e4 	.word	0x0800e0e4
 8009d2c:	0800e0e4 	.word	0x0800e0e4
 8009d30:	0800e0fc 	.word	0x0800e0fc

08009d34 <__retarget_lock_acquire_recursive>:
 8009d34:	4770      	bx	lr

08009d36 <__retarget_lock_release_recursive>:
 8009d36:	4770      	bx	lr

08009d38 <memcpy>:
 8009d38:	440a      	add	r2, r1
 8009d3a:	4291      	cmp	r1, r2
 8009d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d40:	d100      	bne.n	8009d44 <memcpy+0xc>
 8009d42:	4770      	bx	lr
 8009d44:	b510      	push	{r4, lr}
 8009d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d4e:	4291      	cmp	r1, r2
 8009d50:	d1f9      	bne.n	8009d46 <memcpy+0xe>
 8009d52:	bd10      	pop	{r4, pc}

08009d54 <quorem>:
 8009d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	6903      	ldr	r3, [r0, #16]
 8009d5a:	690c      	ldr	r4, [r1, #16]
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	4607      	mov	r7, r0
 8009d60:	db7e      	blt.n	8009e60 <quorem+0x10c>
 8009d62:	3c01      	subs	r4, #1
 8009d64:	f101 0814 	add.w	r8, r1, #20
 8009d68:	f100 0514 	add.w	r5, r0, #20
 8009d6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d86:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d8a:	d331      	bcc.n	8009df0 <quorem+0x9c>
 8009d8c:	f04f 0e00 	mov.w	lr, #0
 8009d90:	4640      	mov	r0, r8
 8009d92:	46ac      	mov	ip, r5
 8009d94:	46f2      	mov	sl, lr
 8009d96:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d9a:	b293      	uxth	r3, r2
 8009d9c:	fb06 e303 	mla	r3, r6, r3, lr
 8009da0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009da4:	0c1a      	lsrs	r2, r3, #16
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	ebaa 0303 	sub.w	r3, sl, r3
 8009dac:	f8dc a000 	ldr.w	sl, [ip]
 8009db0:	fa13 f38a 	uxtah	r3, r3, sl
 8009db4:	fb06 220e 	mla	r2, r6, lr, r2
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dc0:	b292      	uxth	r2, r2
 8009dc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009dc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dca:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dce:	4581      	cmp	r9, r0
 8009dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dd4:	f84c 3b04 	str.w	r3, [ip], #4
 8009dd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ddc:	d2db      	bcs.n	8009d96 <quorem+0x42>
 8009dde:	f855 300b 	ldr.w	r3, [r5, fp]
 8009de2:	b92b      	cbnz	r3, 8009df0 <quorem+0x9c>
 8009de4:	9b01      	ldr	r3, [sp, #4]
 8009de6:	3b04      	subs	r3, #4
 8009de8:	429d      	cmp	r5, r3
 8009dea:	461a      	mov	r2, r3
 8009dec:	d32c      	bcc.n	8009e48 <quorem+0xf4>
 8009dee:	613c      	str	r4, [r7, #16]
 8009df0:	4638      	mov	r0, r7
 8009df2:	f001 f9a7 	bl	800b144 <__mcmp>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	db22      	blt.n	8009e40 <quorem+0xec>
 8009dfa:	3601      	adds	r6, #1
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	2000      	movs	r0, #0
 8009e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e04:	f8d1 c000 	ldr.w	ip, [r1]
 8009e08:	b293      	uxth	r3, r2
 8009e0a:	1ac3      	subs	r3, r0, r3
 8009e0c:	0c12      	lsrs	r2, r2, #16
 8009e0e:	fa13 f38c 	uxtah	r3, r3, ip
 8009e12:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e20:	45c1      	cmp	r9, r8
 8009e22:	f841 3b04 	str.w	r3, [r1], #4
 8009e26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e2a:	d2e9      	bcs.n	8009e00 <quorem+0xac>
 8009e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e34:	b922      	cbnz	r2, 8009e40 <quorem+0xec>
 8009e36:	3b04      	subs	r3, #4
 8009e38:	429d      	cmp	r5, r3
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	d30a      	bcc.n	8009e54 <quorem+0x100>
 8009e3e:	613c      	str	r4, [r7, #16]
 8009e40:	4630      	mov	r0, r6
 8009e42:	b003      	add	sp, #12
 8009e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d1ce      	bne.n	8009dee <quorem+0x9a>
 8009e50:	3c01      	subs	r4, #1
 8009e52:	e7c9      	b.n	8009de8 <quorem+0x94>
 8009e54:	6812      	ldr	r2, [r2, #0]
 8009e56:	3b04      	subs	r3, #4
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	d1f0      	bne.n	8009e3e <quorem+0xea>
 8009e5c:	3c01      	subs	r4, #1
 8009e5e:	e7eb      	b.n	8009e38 <quorem+0xe4>
 8009e60:	2000      	movs	r0, #0
 8009e62:	e7ee      	b.n	8009e42 <quorem+0xee>
 8009e64:	0000      	movs	r0, r0
	...

08009e68 <_dtoa_r>:
 8009e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	ed2d 8b04 	vpush	{d8-d9}
 8009e70:	69c5      	ldr	r5, [r0, #28]
 8009e72:	b093      	sub	sp, #76	; 0x4c
 8009e74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e78:	ec57 6b10 	vmov	r6, r7, d0
 8009e7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e80:	9107      	str	r1, [sp, #28]
 8009e82:	4604      	mov	r4, r0
 8009e84:	920a      	str	r2, [sp, #40]	; 0x28
 8009e86:	930d      	str	r3, [sp, #52]	; 0x34
 8009e88:	b975      	cbnz	r5, 8009ea8 <_dtoa_r+0x40>
 8009e8a:	2010      	movs	r0, #16
 8009e8c:	f000 fe2a 	bl	800aae4 <malloc>
 8009e90:	4602      	mov	r2, r0
 8009e92:	61e0      	str	r0, [r4, #28]
 8009e94:	b920      	cbnz	r0, 8009ea0 <_dtoa_r+0x38>
 8009e96:	4bae      	ldr	r3, [pc, #696]	; (800a150 <_dtoa_r+0x2e8>)
 8009e98:	21ef      	movs	r1, #239	; 0xef
 8009e9a:	48ae      	ldr	r0, [pc, #696]	; (800a154 <_dtoa_r+0x2ec>)
 8009e9c:	f001 fc68 	bl	800b770 <__assert_func>
 8009ea0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ea4:	6005      	str	r5, [r0, #0]
 8009ea6:	60c5      	str	r5, [r0, #12]
 8009ea8:	69e3      	ldr	r3, [r4, #28]
 8009eaa:	6819      	ldr	r1, [r3, #0]
 8009eac:	b151      	cbz	r1, 8009ec4 <_dtoa_r+0x5c>
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	604a      	str	r2, [r1, #4]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4093      	lsls	r3, r2
 8009eb6:	608b      	str	r3, [r1, #8]
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 ff07 	bl	800accc <_Bfree>
 8009ebe:	69e3      	ldr	r3, [r4, #28]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	1e3b      	subs	r3, r7, #0
 8009ec6:	bfbb      	ittet	lt
 8009ec8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ecc:	9303      	strlt	r3, [sp, #12]
 8009ece:	2300      	movge	r3, #0
 8009ed0:	2201      	movlt	r2, #1
 8009ed2:	bfac      	ite	ge
 8009ed4:	f8c8 3000 	strge.w	r3, [r8]
 8009ed8:	f8c8 2000 	strlt.w	r2, [r8]
 8009edc:	4b9e      	ldr	r3, [pc, #632]	; (800a158 <_dtoa_r+0x2f0>)
 8009ede:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ee2:	ea33 0308 	bics.w	r3, r3, r8
 8009ee6:	d11b      	bne.n	8009f20 <_dtoa_r+0xb8>
 8009ee8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eea:	f242 730f 	movw	r3, #9999	; 0x270f
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009ef4:	4333      	orrs	r3, r6
 8009ef6:	f000 8593 	beq.w	800aa20 <_dtoa_r+0xbb8>
 8009efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009efc:	b963      	cbnz	r3, 8009f18 <_dtoa_r+0xb0>
 8009efe:	4b97      	ldr	r3, [pc, #604]	; (800a15c <_dtoa_r+0x2f4>)
 8009f00:	e027      	b.n	8009f52 <_dtoa_r+0xea>
 8009f02:	4b97      	ldr	r3, [pc, #604]	; (800a160 <_dtoa_r+0x2f8>)
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	3308      	adds	r3, #8
 8009f08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	9800      	ldr	r0, [sp, #0]
 8009f0e:	b013      	add	sp, #76	; 0x4c
 8009f10:	ecbd 8b04 	vpop	{d8-d9}
 8009f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f18:	4b90      	ldr	r3, [pc, #576]	; (800a15c <_dtoa_r+0x2f4>)
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	3303      	adds	r3, #3
 8009f1e:	e7f3      	b.n	8009f08 <_dtoa_r+0xa0>
 8009f20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f24:	2200      	movs	r2, #0
 8009f26:	ec51 0b17 	vmov	r0, r1, d7
 8009f2a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f2e:	eef0 8a67 	vmov.f32	s17, s15
 8009f32:	2300      	movs	r3, #0
 8009f34:	f7f6 fde8 	bl	8000b08 <__aeabi_dcmpeq>
 8009f38:	4681      	mov	r9, r0
 8009f3a:	b160      	cbz	r0, 8009f56 <_dtoa_r+0xee>
 8009f3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f3e:	2301      	movs	r3, #1
 8009f40:	6013      	str	r3, [r2, #0]
 8009f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8568 	beq.w	800aa1a <_dtoa_r+0xbb2>
 8009f4a:	4b86      	ldr	r3, [pc, #536]	; (800a164 <_dtoa_r+0x2fc>)
 8009f4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	e7da      	b.n	8009f0c <_dtoa_r+0xa4>
 8009f56:	aa10      	add	r2, sp, #64	; 0x40
 8009f58:	a911      	add	r1, sp, #68	; 0x44
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f60:	eef0 0a68 	vmov.f32	s1, s17
 8009f64:	f001 f994 	bl	800b290 <__d2b>
 8009f68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	2d00      	cmp	r5, #0
 8009f70:	d07f      	beq.n	800a072 <_dtoa_r+0x20a>
 8009f72:	ee18 3a90 	vmov	r3, s17
 8009f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f7e:	ec51 0b18 	vmov	r0, r1, d8
 8009f82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009f8e:	4619      	mov	r1, r3
 8009f90:	2200      	movs	r2, #0
 8009f92:	4b75      	ldr	r3, [pc, #468]	; (800a168 <_dtoa_r+0x300>)
 8009f94:	f7f6 f998 	bl	80002c8 <__aeabi_dsub>
 8009f98:	a367      	add	r3, pc, #412	; (adr r3, 800a138 <_dtoa_r+0x2d0>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 fb4b 	bl	8000638 <__aeabi_dmul>
 8009fa2:	a367      	add	r3, pc, #412	; (adr r3, 800a140 <_dtoa_r+0x2d8>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7f6 f990 	bl	80002cc <__adddf3>
 8009fac:	4606      	mov	r6, r0
 8009fae:	4628      	mov	r0, r5
 8009fb0:	460f      	mov	r7, r1
 8009fb2:	f7f6 fad7 	bl	8000564 <__aeabi_i2d>
 8009fb6:	a364      	add	r3, pc, #400	; (adr r3, 800a148 <_dtoa_r+0x2e0>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 fb3c 	bl	8000638 <__aeabi_dmul>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 f980 	bl	80002cc <__adddf3>
 8009fcc:	4606      	mov	r6, r0
 8009fce:	460f      	mov	r7, r1
 8009fd0:	f7f6 fde2 	bl	8000b98 <__aeabi_d2iz>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4683      	mov	fp, r0
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4630      	mov	r0, r6
 8009fdc:	4639      	mov	r1, r7
 8009fde:	f7f6 fd9d 	bl	8000b1c <__aeabi_dcmplt>
 8009fe2:	b148      	cbz	r0, 8009ff8 <_dtoa_r+0x190>
 8009fe4:	4658      	mov	r0, fp
 8009fe6:	f7f6 fabd 	bl	8000564 <__aeabi_i2d>
 8009fea:	4632      	mov	r2, r6
 8009fec:	463b      	mov	r3, r7
 8009fee:	f7f6 fd8b 	bl	8000b08 <__aeabi_dcmpeq>
 8009ff2:	b908      	cbnz	r0, 8009ff8 <_dtoa_r+0x190>
 8009ff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ff8:	f1bb 0f16 	cmp.w	fp, #22
 8009ffc:	d857      	bhi.n	800a0ae <_dtoa_r+0x246>
 8009ffe:	4b5b      	ldr	r3, [pc, #364]	; (800a16c <_dtoa_r+0x304>)
 800a000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	ec51 0b18 	vmov	r0, r1, d8
 800a00c:	f7f6 fd86 	bl	8000b1c <__aeabi_dcmplt>
 800a010:	2800      	cmp	r0, #0
 800a012:	d04e      	beq.n	800a0b2 <_dtoa_r+0x24a>
 800a014:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a018:	2300      	movs	r3, #0
 800a01a:	930c      	str	r3, [sp, #48]	; 0x30
 800a01c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a01e:	1b5b      	subs	r3, r3, r5
 800a020:	1e5a      	subs	r2, r3, #1
 800a022:	bf45      	ittet	mi
 800a024:	f1c3 0301 	rsbmi	r3, r3, #1
 800a028:	9305      	strmi	r3, [sp, #20]
 800a02a:	2300      	movpl	r3, #0
 800a02c:	2300      	movmi	r3, #0
 800a02e:	9206      	str	r2, [sp, #24]
 800a030:	bf54      	ite	pl
 800a032:	9305      	strpl	r3, [sp, #20]
 800a034:	9306      	strmi	r3, [sp, #24]
 800a036:	f1bb 0f00 	cmp.w	fp, #0
 800a03a:	db3c      	blt.n	800a0b6 <_dtoa_r+0x24e>
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a042:	445b      	add	r3, fp
 800a044:	9306      	str	r3, [sp, #24]
 800a046:	2300      	movs	r3, #0
 800a048:	9308      	str	r3, [sp, #32]
 800a04a:	9b07      	ldr	r3, [sp, #28]
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	d868      	bhi.n	800a122 <_dtoa_r+0x2ba>
 800a050:	2b05      	cmp	r3, #5
 800a052:	bfc4      	itt	gt
 800a054:	3b04      	subgt	r3, #4
 800a056:	9307      	strgt	r3, [sp, #28]
 800a058:	9b07      	ldr	r3, [sp, #28]
 800a05a:	f1a3 0302 	sub.w	r3, r3, #2
 800a05e:	bfcc      	ite	gt
 800a060:	2500      	movgt	r5, #0
 800a062:	2501      	movle	r5, #1
 800a064:	2b03      	cmp	r3, #3
 800a066:	f200 8085 	bhi.w	800a174 <_dtoa_r+0x30c>
 800a06a:	e8df f003 	tbb	[pc, r3]
 800a06e:	3b2e      	.short	0x3b2e
 800a070:	5839      	.short	0x5839
 800a072:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a076:	441d      	add	r5, r3
 800a078:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	bfc1      	itttt	gt
 800a080:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a084:	fa08 f803 	lslgt.w	r8, r8, r3
 800a088:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a08c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a090:	bfd6      	itet	le
 800a092:	f1c3 0320 	rsble	r3, r3, #32
 800a096:	ea48 0003 	orrgt.w	r0, r8, r3
 800a09a:	fa06 f003 	lslle.w	r0, r6, r3
 800a09e:	f7f6 fa51 	bl	8000544 <__aeabi_ui2d>
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0a8:	3d01      	subs	r5, #1
 800a0aa:	920e      	str	r2, [sp, #56]	; 0x38
 800a0ac:	e76f      	b.n	8009f8e <_dtoa_r+0x126>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e7b3      	b.n	800a01a <_dtoa_r+0x1b2>
 800a0b2:	900c      	str	r0, [sp, #48]	; 0x30
 800a0b4:	e7b2      	b.n	800a01c <_dtoa_r+0x1b4>
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	eba3 030b 	sub.w	r3, r3, fp
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	f1cb 0300 	rsb	r3, fp, #0
 800a0c2:	9308      	str	r3, [sp, #32]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0c8:	e7bf      	b.n	800a04a <_dtoa_r+0x1e2>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dc52      	bgt.n	800a17a <_dtoa_r+0x312>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	920a      	str	r2, [sp, #40]	; 0x28
 800a0de:	e00b      	b.n	800a0f8 <_dtoa_r+0x290>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e7f3      	b.n	800a0cc <_dtoa_r+0x264>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ea:	445b      	add	r3, fp
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	bfb8      	it	lt
 800a0f6:	2301      	movlt	r3, #1
 800a0f8:	69e0      	ldr	r0, [r4, #28]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	f102 0614 	add.w	r6, r2, #20
 800a102:	429e      	cmp	r6, r3
 800a104:	d93d      	bls.n	800a182 <_dtoa_r+0x31a>
 800a106:	6041      	str	r1, [r0, #4]
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 fd9f 	bl	800ac4c <_Balloc>
 800a10e:	9000      	str	r0, [sp, #0]
 800a110:	2800      	cmp	r0, #0
 800a112:	d139      	bne.n	800a188 <_dtoa_r+0x320>
 800a114:	4b16      	ldr	r3, [pc, #88]	; (800a170 <_dtoa_r+0x308>)
 800a116:	4602      	mov	r2, r0
 800a118:	f240 11af 	movw	r1, #431	; 0x1af
 800a11c:	e6bd      	b.n	8009e9a <_dtoa_r+0x32>
 800a11e:	2301      	movs	r3, #1
 800a120:	e7e1      	b.n	800a0e6 <_dtoa_r+0x27e>
 800a122:	2501      	movs	r5, #1
 800a124:	2300      	movs	r3, #0
 800a126:	9307      	str	r3, [sp, #28]
 800a128:	9509      	str	r5, [sp, #36]	; 0x24
 800a12a:	f04f 33ff 	mov.w	r3, #4294967295
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	9304      	str	r3, [sp, #16]
 800a132:	2200      	movs	r2, #0
 800a134:	2312      	movs	r3, #18
 800a136:	e7d1      	b.n	800a0dc <_dtoa_r+0x274>
 800a138:	636f4361 	.word	0x636f4361
 800a13c:	3fd287a7 	.word	0x3fd287a7
 800a140:	8b60c8b3 	.word	0x8b60c8b3
 800a144:	3fc68a28 	.word	0x3fc68a28
 800a148:	509f79fb 	.word	0x509f79fb
 800a14c:	3fd34413 	.word	0x3fd34413
 800a150:	0800dda9 	.word	0x0800dda9
 800a154:	0800ddc0 	.word	0x0800ddc0
 800a158:	7ff00000 	.word	0x7ff00000
 800a15c:	0800dda5 	.word	0x0800dda5
 800a160:	0800dd9c 	.word	0x0800dd9c
 800a164:	0800dd79 	.word	0x0800dd79
 800a168:	3ff80000 	.word	0x3ff80000
 800a16c:	0800deb0 	.word	0x0800deb0
 800a170:	0800de18 	.word	0x0800de18
 800a174:	2301      	movs	r3, #1
 800a176:	9309      	str	r3, [sp, #36]	; 0x24
 800a178:	e7d7      	b.n	800a12a <_dtoa_r+0x2c2>
 800a17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	e7ba      	b.n	800a0f8 <_dtoa_r+0x290>
 800a182:	3101      	adds	r1, #1
 800a184:	0052      	lsls	r2, r2, #1
 800a186:	e7ba      	b.n	800a0fe <_dtoa_r+0x296>
 800a188:	69e3      	ldr	r3, [r4, #28]
 800a18a:	9a00      	ldr	r2, [sp, #0]
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	2b0e      	cmp	r3, #14
 800a192:	f200 80a8 	bhi.w	800a2e6 <_dtoa_r+0x47e>
 800a196:	2d00      	cmp	r5, #0
 800a198:	f000 80a5 	beq.w	800a2e6 <_dtoa_r+0x47e>
 800a19c:	f1bb 0f00 	cmp.w	fp, #0
 800a1a0:	dd38      	ble.n	800a214 <_dtoa_r+0x3ac>
 800a1a2:	4bc0      	ldr	r3, [pc, #768]	; (800a4a4 <_dtoa_r+0x63c>)
 800a1a4:	f00b 020f 	and.w	r2, fp, #15
 800a1a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a1b8:	d019      	beq.n	800a1ee <_dtoa_r+0x386>
 800a1ba:	4bbb      	ldr	r3, [pc, #748]	; (800a4a8 <_dtoa_r+0x640>)
 800a1bc:	ec51 0b18 	vmov	r0, r1, d8
 800a1c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1c4:	f7f6 fb62 	bl	800088c <__aeabi_ddiv>
 800a1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1cc:	f008 080f 	and.w	r8, r8, #15
 800a1d0:	2503      	movs	r5, #3
 800a1d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4a8 <_dtoa_r+0x640>
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	d10a      	bne.n	800a1f2 <_dtoa_r+0x38a>
 800a1dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	463b      	mov	r3, r7
 800a1e4:	f7f6 fb52 	bl	800088c <__aeabi_ddiv>
 800a1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ec:	e02b      	b.n	800a246 <_dtoa_r+0x3de>
 800a1ee:	2502      	movs	r5, #2
 800a1f0:	e7ef      	b.n	800a1d2 <_dtoa_r+0x36a>
 800a1f2:	f018 0f01 	tst.w	r8, #1
 800a1f6:	d008      	beq.n	800a20a <_dtoa_r+0x3a2>
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a200:	f7f6 fa1a 	bl	8000638 <__aeabi_dmul>
 800a204:	3501      	adds	r5, #1
 800a206:	4606      	mov	r6, r0
 800a208:	460f      	mov	r7, r1
 800a20a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a20e:	f109 0908 	add.w	r9, r9, #8
 800a212:	e7e0      	b.n	800a1d6 <_dtoa_r+0x36e>
 800a214:	f000 809f 	beq.w	800a356 <_dtoa_r+0x4ee>
 800a218:	f1cb 0600 	rsb	r6, fp, #0
 800a21c:	4ba1      	ldr	r3, [pc, #644]	; (800a4a4 <_dtoa_r+0x63c>)
 800a21e:	4fa2      	ldr	r7, [pc, #648]	; (800a4a8 <_dtoa_r+0x640>)
 800a220:	f006 020f 	and.w	r2, r6, #15
 800a224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	ec51 0b18 	vmov	r0, r1, d8
 800a230:	f7f6 fa02 	bl	8000638 <__aeabi_dmul>
 800a234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a238:	1136      	asrs	r6, r6, #4
 800a23a:	2300      	movs	r3, #0
 800a23c:	2502      	movs	r5, #2
 800a23e:	2e00      	cmp	r6, #0
 800a240:	d17e      	bne.n	800a340 <_dtoa_r+0x4d8>
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1d0      	bne.n	800a1e8 <_dtoa_r+0x380>
 800a246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a248:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 8084 	beq.w	800a35a <_dtoa_r+0x4f2>
 800a252:	4b96      	ldr	r3, [pc, #600]	; (800a4ac <_dtoa_r+0x644>)
 800a254:	2200      	movs	r2, #0
 800a256:	4640      	mov	r0, r8
 800a258:	4649      	mov	r1, r9
 800a25a:	f7f6 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d07b      	beq.n	800a35a <_dtoa_r+0x4f2>
 800a262:	9b04      	ldr	r3, [sp, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d078      	beq.n	800a35a <_dtoa_r+0x4f2>
 800a268:	9b01      	ldr	r3, [sp, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	dd39      	ble.n	800a2e2 <_dtoa_r+0x47a>
 800a26e:	4b90      	ldr	r3, [pc, #576]	; (800a4b0 <_dtoa_r+0x648>)
 800a270:	2200      	movs	r2, #0
 800a272:	4640      	mov	r0, r8
 800a274:	4649      	mov	r1, r9
 800a276:	f7f6 f9df 	bl	8000638 <__aeabi_dmul>
 800a27a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a27e:	9e01      	ldr	r6, [sp, #4]
 800a280:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a284:	3501      	adds	r5, #1
 800a286:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7f6 f96a 	bl	8000564 <__aeabi_i2d>
 800a290:	4642      	mov	r2, r8
 800a292:	464b      	mov	r3, r9
 800a294:	f7f6 f9d0 	bl	8000638 <__aeabi_dmul>
 800a298:	4b86      	ldr	r3, [pc, #536]	; (800a4b4 <_dtoa_r+0x64c>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	f7f6 f816 	bl	80002cc <__adddf3>
 800a2a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2a8:	9303      	str	r3, [sp, #12]
 800a2aa:	2e00      	cmp	r6, #0
 800a2ac:	d158      	bne.n	800a360 <_dtoa_r+0x4f8>
 800a2ae:	4b82      	ldr	r3, [pc, #520]	; (800a4b8 <_dtoa_r+0x650>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	f7f6 f807 	bl	80002c8 <__aeabi_dsub>
 800a2ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	f7f6 fc49 	bl	8000b58 <__aeabi_dcmpgt>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f040 8296 	bne.w	800a7f8 <_dtoa_r+0x990>
 800a2cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2d0:	4640      	mov	r0, r8
 800a2d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f6 fc20 	bl	8000b1c <__aeabi_dcmplt>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f040 8289 	bne.w	800a7f4 <_dtoa_r+0x98c>
 800a2e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f2c0 814e 	blt.w	800a58a <_dtoa_r+0x722>
 800a2ee:	f1bb 0f0e 	cmp.w	fp, #14
 800a2f2:	f300 814a 	bgt.w	800a58a <_dtoa_r+0x722>
 800a2f6:	4b6b      	ldr	r3, [pc, #428]	; (800a4a4 <_dtoa_r+0x63c>)
 800a2f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a302:	2b00      	cmp	r3, #0
 800a304:	f280 80dc 	bge.w	800a4c0 <_dtoa_r+0x658>
 800a308:	9b04      	ldr	r3, [sp, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f300 80d8 	bgt.w	800a4c0 <_dtoa_r+0x658>
 800a310:	f040 826f 	bne.w	800a7f2 <_dtoa_r+0x98a>
 800a314:	4b68      	ldr	r3, [pc, #416]	; (800a4b8 <_dtoa_r+0x650>)
 800a316:	2200      	movs	r2, #0
 800a318:	4640      	mov	r0, r8
 800a31a:	4649      	mov	r1, r9
 800a31c:	f7f6 f98c 	bl	8000638 <__aeabi_dmul>
 800a320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a324:	f7f6 fc0e 	bl	8000b44 <__aeabi_dcmpge>
 800a328:	9e04      	ldr	r6, [sp, #16]
 800a32a:	4637      	mov	r7, r6
 800a32c:	2800      	cmp	r0, #0
 800a32e:	f040 8245 	bne.w	800a7bc <_dtoa_r+0x954>
 800a332:	9d00      	ldr	r5, [sp, #0]
 800a334:	2331      	movs	r3, #49	; 0x31
 800a336:	f805 3b01 	strb.w	r3, [r5], #1
 800a33a:	f10b 0b01 	add.w	fp, fp, #1
 800a33e:	e241      	b.n	800a7c4 <_dtoa_r+0x95c>
 800a340:	07f2      	lsls	r2, r6, #31
 800a342:	d505      	bpl.n	800a350 <_dtoa_r+0x4e8>
 800a344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a348:	f7f6 f976 	bl	8000638 <__aeabi_dmul>
 800a34c:	3501      	adds	r5, #1
 800a34e:	2301      	movs	r3, #1
 800a350:	1076      	asrs	r6, r6, #1
 800a352:	3708      	adds	r7, #8
 800a354:	e773      	b.n	800a23e <_dtoa_r+0x3d6>
 800a356:	2502      	movs	r5, #2
 800a358:	e775      	b.n	800a246 <_dtoa_r+0x3de>
 800a35a:	9e04      	ldr	r6, [sp, #16]
 800a35c:	465f      	mov	r7, fp
 800a35e:	e792      	b.n	800a286 <_dtoa_r+0x41e>
 800a360:	9900      	ldr	r1, [sp, #0]
 800a362:	4b50      	ldr	r3, [pc, #320]	; (800a4a4 <_dtoa_r+0x63c>)
 800a364:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a368:	4431      	add	r1, r6
 800a36a:	9102      	str	r1, [sp, #8]
 800a36c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a36e:	eeb0 9a47 	vmov.f32	s18, s14
 800a372:	eef0 9a67 	vmov.f32	s19, s15
 800a376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a37a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a37e:	2900      	cmp	r1, #0
 800a380:	d044      	beq.n	800a40c <_dtoa_r+0x5a4>
 800a382:	494e      	ldr	r1, [pc, #312]	; (800a4bc <_dtoa_r+0x654>)
 800a384:	2000      	movs	r0, #0
 800a386:	f7f6 fa81 	bl	800088c <__aeabi_ddiv>
 800a38a:	ec53 2b19 	vmov	r2, r3, d9
 800a38e:	f7f5 ff9b 	bl	80002c8 <__aeabi_dsub>
 800a392:	9d00      	ldr	r5, [sp, #0]
 800a394:	ec41 0b19 	vmov	d9, r0, r1
 800a398:	4649      	mov	r1, r9
 800a39a:	4640      	mov	r0, r8
 800a39c:	f7f6 fbfc 	bl	8000b98 <__aeabi_d2iz>
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	f7f6 f8df 	bl	8000564 <__aeabi_i2d>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	f7f5 ff8b 	bl	80002c8 <__aeabi_dsub>
 800a3b2:	3630      	adds	r6, #48	; 0x30
 800a3b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a3b8:	ec53 2b19 	vmov	r2, r3, d9
 800a3bc:	4680      	mov	r8, r0
 800a3be:	4689      	mov	r9, r1
 800a3c0:	f7f6 fbac 	bl	8000b1c <__aeabi_dcmplt>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d164      	bne.n	800a492 <_dtoa_r+0x62a>
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	4937      	ldr	r1, [pc, #220]	; (800a4ac <_dtoa_r+0x644>)
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f7f5 ff7a 	bl	80002c8 <__aeabi_dsub>
 800a3d4:	ec53 2b19 	vmov	r2, r3, d9
 800a3d8:	f7f6 fba0 	bl	8000b1c <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	f040 80b6 	bne.w	800a54e <_dtoa_r+0x6e6>
 800a3e2:	9b02      	ldr	r3, [sp, #8]
 800a3e4:	429d      	cmp	r5, r3
 800a3e6:	f43f af7c 	beq.w	800a2e2 <_dtoa_r+0x47a>
 800a3ea:	4b31      	ldr	r3, [pc, #196]	; (800a4b0 <_dtoa_r+0x648>)
 800a3ec:	ec51 0b19 	vmov	r0, r1, d9
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f7f6 f921 	bl	8000638 <__aeabi_dmul>
 800a3f6:	4b2e      	ldr	r3, [pc, #184]	; (800a4b0 <_dtoa_r+0x648>)
 800a3f8:	ec41 0b19 	vmov	d9, r0, r1
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4640      	mov	r0, r8
 800a400:	4649      	mov	r1, r9
 800a402:	f7f6 f919 	bl	8000638 <__aeabi_dmul>
 800a406:	4680      	mov	r8, r0
 800a408:	4689      	mov	r9, r1
 800a40a:	e7c5      	b.n	800a398 <_dtoa_r+0x530>
 800a40c:	ec51 0b17 	vmov	r0, r1, d7
 800a410:	f7f6 f912 	bl	8000638 <__aeabi_dmul>
 800a414:	9b02      	ldr	r3, [sp, #8]
 800a416:	9d00      	ldr	r5, [sp, #0]
 800a418:	930f      	str	r3, [sp, #60]	; 0x3c
 800a41a:	ec41 0b19 	vmov	d9, r0, r1
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	f7f6 fbb9 	bl	8000b98 <__aeabi_d2iz>
 800a426:	4606      	mov	r6, r0
 800a428:	f7f6 f89c 	bl	8000564 <__aeabi_i2d>
 800a42c:	3630      	adds	r6, #48	; 0x30
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	f7f5 ff47 	bl	80002c8 <__aeabi_dsub>
 800a43a:	f805 6b01 	strb.w	r6, [r5], #1
 800a43e:	9b02      	ldr	r3, [sp, #8]
 800a440:	429d      	cmp	r5, r3
 800a442:	4680      	mov	r8, r0
 800a444:	4689      	mov	r9, r1
 800a446:	f04f 0200 	mov.w	r2, #0
 800a44a:	d124      	bne.n	800a496 <_dtoa_r+0x62e>
 800a44c:	4b1b      	ldr	r3, [pc, #108]	; (800a4bc <_dtoa_r+0x654>)
 800a44e:	ec51 0b19 	vmov	r0, r1, d9
 800a452:	f7f5 ff3b 	bl	80002cc <__adddf3>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f6 fb7b 	bl	8000b58 <__aeabi_dcmpgt>
 800a462:	2800      	cmp	r0, #0
 800a464:	d173      	bne.n	800a54e <_dtoa_r+0x6e6>
 800a466:	ec53 2b19 	vmov	r2, r3, d9
 800a46a:	4914      	ldr	r1, [pc, #80]	; (800a4bc <_dtoa_r+0x654>)
 800a46c:	2000      	movs	r0, #0
 800a46e:	f7f5 ff2b 	bl	80002c8 <__aeabi_dsub>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4640      	mov	r0, r8
 800a478:	4649      	mov	r1, r9
 800a47a:	f7f6 fb4f 	bl	8000b1c <__aeabi_dcmplt>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f43f af2f 	beq.w	800a2e2 <_dtoa_r+0x47a>
 800a484:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a486:	1e6b      	subs	r3, r5, #1
 800a488:	930f      	str	r3, [sp, #60]	; 0x3c
 800a48a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a48e:	2b30      	cmp	r3, #48	; 0x30
 800a490:	d0f8      	beq.n	800a484 <_dtoa_r+0x61c>
 800a492:	46bb      	mov	fp, r7
 800a494:	e04a      	b.n	800a52c <_dtoa_r+0x6c4>
 800a496:	4b06      	ldr	r3, [pc, #24]	; (800a4b0 <_dtoa_r+0x648>)
 800a498:	f7f6 f8ce 	bl	8000638 <__aeabi_dmul>
 800a49c:	4680      	mov	r8, r0
 800a49e:	4689      	mov	r9, r1
 800a4a0:	e7bd      	b.n	800a41e <_dtoa_r+0x5b6>
 800a4a2:	bf00      	nop
 800a4a4:	0800deb0 	.word	0x0800deb0
 800a4a8:	0800de88 	.word	0x0800de88
 800a4ac:	3ff00000 	.word	0x3ff00000
 800a4b0:	40240000 	.word	0x40240000
 800a4b4:	401c0000 	.word	0x401c0000
 800a4b8:	40140000 	.word	0x40140000
 800a4bc:	3fe00000 	.word	0x3fe00000
 800a4c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4c4:	9d00      	ldr	r5, [sp, #0]
 800a4c6:	4642      	mov	r2, r8
 800a4c8:	464b      	mov	r3, r9
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	f7f6 f9dd 	bl	800088c <__aeabi_ddiv>
 800a4d2:	f7f6 fb61 	bl	8000b98 <__aeabi_d2iz>
 800a4d6:	9001      	str	r0, [sp, #4]
 800a4d8:	f7f6 f844 	bl	8000564 <__aeabi_i2d>
 800a4dc:	4642      	mov	r2, r8
 800a4de:	464b      	mov	r3, r9
 800a4e0:	f7f6 f8aa 	bl	8000638 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f5 feec 	bl	80002c8 <__aeabi_dsub>
 800a4f0:	9e01      	ldr	r6, [sp, #4]
 800a4f2:	9f04      	ldr	r7, [sp, #16]
 800a4f4:	3630      	adds	r6, #48	; 0x30
 800a4f6:	f805 6b01 	strb.w	r6, [r5], #1
 800a4fa:	9e00      	ldr	r6, [sp, #0]
 800a4fc:	1bae      	subs	r6, r5, r6
 800a4fe:	42b7      	cmp	r7, r6
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	d134      	bne.n	800a570 <_dtoa_r+0x708>
 800a506:	f7f5 fee1 	bl	80002cc <__adddf3>
 800a50a:	4642      	mov	r2, r8
 800a50c:	464b      	mov	r3, r9
 800a50e:	4606      	mov	r6, r0
 800a510:	460f      	mov	r7, r1
 800a512:	f7f6 fb21 	bl	8000b58 <__aeabi_dcmpgt>
 800a516:	b9c8      	cbnz	r0, 800a54c <_dtoa_r+0x6e4>
 800a518:	4642      	mov	r2, r8
 800a51a:	464b      	mov	r3, r9
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f6 faf2 	bl	8000b08 <__aeabi_dcmpeq>
 800a524:	b110      	cbz	r0, 800a52c <_dtoa_r+0x6c4>
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	07db      	lsls	r3, r3, #31
 800a52a:	d40f      	bmi.n	800a54c <_dtoa_r+0x6e4>
 800a52c:	4651      	mov	r1, sl
 800a52e:	4620      	mov	r0, r4
 800a530:	f000 fbcc 	bl	800accc <_Bfree>
 800a534:	2300      	movs	r3, #0
 800a536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a538:	702b      	strb	r3, [r5, #0]
 800a53a:	f10b 0301 	add.w	r3, fp, #1
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a542:	2b00      	cmp	r3, #0
 800a544:	f43f ace2 	beq.w	8009f0c <_dtoa_r+0xa4>
 800a548:	601d      	str	r5, [r3, #0]
 800a54a:	e4df      	b.n	8009f0c <_dtoa_r+0xa4>
 800a54c:	465f      	mov	r7, fp
 800a54e:	462b      	mov	r3, r5
 800a550:	461d      	mov	r5, r3
 800a552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a556:	2a39      	cmp	r2, #57	; 0x39
 800a558:	d106      	bne.n	800a568 <_dtoa_r+0x700>
 800a55a:	9a00      	ldr	r2, [sp, #0]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d1f7      	bne.n	800a550 <_dtoa_r+0x6e8>
 800a560:	9900      	ldr	r1, [sp, #0]
 800a562:	2230      	movs	r2, #48	; 0x30
 800a564:	3701      	adds	r7, #1
 800a566:	700a      	strb	r2, [r1, #0]
 800a568:	781a      	ldrb	r2, [r3, #0]
 800a56a:	3201      	adds	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	e790      	b.n	800a492 <_dtoa_r+0x62a>
 800a570:	4ba3      	ldr	r3, [pc, #652]	; (800a800 <_dtoa_r+0x998>)
 800a572:	2200      	movs	r2, #0
 800a574:	f7f6 f860 	bl	8000638 <__aeabi_dmul>
 800a578:	2200      	movs	r2, #0
 800a57a:	2300      	movs	r3, #0
 800a57c:	4606      	mov	r6, r0
 800a57e:	460f      	mov	r7, r1
 800a580:	f7f6 fac2 	bl	8000b08 <__aeabi_dcmpeq>
 800a584:	2800      	cmp	r0, #0
 800a586:	d09e      	beq.n	800a4c6 <_dtoa_r+0x65e>
 800a588:	e7d0      	b.n	800a52c <_dtoa_r+0x6c4>
 800a58a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a58c:	2a00      	cmp	r2, #0
 800a58e:	f000 80ca 	beq.w	800a726 <_dtoa_r+0x8be>
 800a592:	9a07      	ldr	r2, [sp, #28]
 800a594:	2a01      	cmp	r2, #1
 800a596:	f300 80ad 	bgt.w	800a6f4 <_dtoa_r+0x88c>
 800a59a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a59c:	2a00      	cmp	r2, #0
 800a59e:	f000 80a5 	beq.w	800a6ec <_dtoa_r+0x884>
 800a5a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5a6:	9e08      	ldr	r6, [sp, #32]
 800a5a8:	9d05      	ldr	r5, [sp, #20]
 800a5aa:	9a05      	ldr	r2, [sp, #20]
 800a5ac:	441a      	add	r2, r3
 800a5ae:	9205      	str	r2, [sp, #20]
 800a5b0:	9a06      	ldr	r2, [sp, #24]
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	441a      	add	r2, r3
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	9206      	str	r2, [sp, #24]
 800a5ba:	f000 fc3d 	bl	800ae38 <__i2b>
 800a5be:	4607      	mov	r7, r0
 800a5c0:	b165      	cbz	r5, 800a5dc <_dtoa_r+0x774>
 800a5c2:	9b06      	ldr	r3, [sp, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dd09      	ble.n	800a5dc <_dtoa_r+0x774>
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	9a05      	ldr	r2, [sp, #20]
 800a5cc:	bfa8      	it	ge
 800a5ce:	462b      	movge	r3, r5
 800a5d0:	1ad2      	subs	r2, r2, r3
 800a5d2:	9205      	str	r2, [sp, #20]
 800a5d4:	9a06      	ldr	r2, [sp, #24]
 800a5d6:	1aed      	subs	r5, r5, r3
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	9306      	str	r3, [sp, #24]
 800a5dc:	9b08      	ldr	r3, [sp, #32]
 800a5de:	b1f3      	cbz	r3, 800a61e <_dtoa_r+0x7b6>
 800a5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80a3 	beq.w	800a72e <_dtoa_r+0x8c6>
 800a5e8:	2e00      	cmp	r6, #0
 800a5ea:	dd10      	ble.n	800a60e <_dtoa_r+0x7a6>
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f000 fce1 	bl	800afb8 <__pow5mult>
 800a5f6:	4652      	mov	r2, sl
 800a5f8:	4601      	mov	r1, r0
 800a5fa:	4607      	mov	r7, r0
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 fc31 	bl	800ae64 <__multiply>
 800a602:	4651      	mov	r1, sl
 800a604:	4680      	mov	r8, r0
 800a606:	4620      	mov	r0, r4
 800a608:	f000 fb60 	bl	800accc <_Bfree>
 800a60c:	46c2      	mov	sl, r8
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	1b9a      	subs	r2, r3, r6
 800a612:	d004      	beq.n	800a61e <_dtoa_r+0x7b6>
 800a614:	4651      	mov	r1, sl
 800a616:	4620      	mov	r0, r4
 800a618:	f000 fcce 	bl	800afb8 <__pow5mult>
 800a61c:	4682      	mov	sl, r0
 800a61e:	2101      	movs	r1, #1
 800a620:	4620      	mov	r0, r4
 800a622:	f000 fc09 	bl	800ae38 <__i2b>
 800a626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	4606      	mov	r6, r0
 800a62c:	f340 8081 	ble.w	800a732 <_dtoa_r+0x8ca>
 800a630:	461a      	mov	r2, r3
 800a632:	4601      	mov	r1, r0
 800a634:	4620      	mov	r0, r4
 800a636:	f000 fcbf 	bl	800afb8 <__pow5mult>
 800a63a:	9b07      	ldr	r3, [sp, #28]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	4606      	mov	r6, r0
 800a640:	dd7a      	ble.n	800a738 <_dtoa_r+0x8d0>
 800a642:	f04f 0800 	mov.w	r8, #0
 800a646:	6933      	ldr	r3, [r6, #16]
 800a648:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a64c:	6918      	ldr	r0, [r3, #16]
 800a64e:	f000 fba5 	bl	800ad9c <__hi0bits>
 800a652:	f1c0 0020 	rsb	r0, r0, #32
 800a656:	9b06      	ldr	r3, [sp, #24]
 800a658:	4418      	add	r0, r3
 800a65a:	f010 001f 	ands.w	r0, r0, #31
 800a65e:	f000 8094 	beq.w	800a78a <_dtoa_r+0x922>
 800a662:	f1c0 0320 	rsb	r3, r0, #32
 800a666:	2b04      	cmp	r3, #4
 800a668:	f340 8085 	ble.w	800a776 <_dtoa_r+0x90e>
 800a66c:	9b05      	ldr	r3, [sp, #20]
 800a66e:	f1c0 001c 	rsb	r0, r0, #28
 800a672:	4403      	add	r3, r0
 800a674:	9305      	str	r3, [sp, #20]
 800a676:	9b06      	ldr	r3, [sp, #24]
 800a678:	4403      	add	r3, r0
 800a67a:	4405      	add	r5, r0
 800a67c:	9306      	str	r3, [sp, #24]
 800a67e:	9b05      	ldr	r3, [sp, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	dd05      	ble.n	800a690 <_dtoa_r+0x828>
 800a684:	4651      	mov	r1, sl
 800a686:	461a      	mov	r2, r3
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 fcef 	bl	800b06c <__lshift>
 800a68e:	4682      	mov	sl, r0
 800a690:	9b06      	ldr	r3, [sp, #24]
 800a692:	2b00      	cmp	r3, #0
 800a694:	dd05      	ble.n	800a6a2 <_dtoa_r+0x83a>
 800a696:	4631      	mov	r1, r6
 800a698:	461a      	mov	r2, r3
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fce6 	bl	800b06c <__lshift>
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d072      	beq.n	800a78e <_dtoa_r+0x926>
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	f000 fd4a 	bl	800b144 <__mcmp>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	da6c      	bge.n	800a78e <_dtoa_r+0x926>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4651      	mov	r1, sl
 800a6b8:	220a      	movs	r2, #10
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 fb28 	bl	800ad10 <__multadd>
 800a6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6c6:	4682      	mov	sl, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 81b0 	beq.w	800aa2e <_dtoa_r+0xbc6>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	220a      	movs	r2, #10
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f000 fb1b 	bl	800ad10 <__multadd>
 800a6da:	9b01      	ldr	r3, [sp, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	4607      	mov	r7, r0
 800a6e0:	f300 8096 	bgt.w	800a810 <_dtoa_r+0x9a8>
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	dc59      	bgt.n	800a79e <_dtoa_r+0x936>
 800a6ea:	e091      	b.n	800a810 <_dtoa_r+0x9a8>
 800a6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6f2:	e758      	b.n	800a5a6 <_dtoa_r+0x73e>
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	1e5e      	subs	r6, r3, #1
 800a6f8:	9b08      	ldr	r3, [sp, #32]
 800a6fa:	42b3      	cmp	r3, r6
 800a6fc:	bfbf      	itttt	lt
 800a6fe:	9b08      	ldrlt	r3, [sp, #32]
 800a700:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a702:	9608      	strlt	r6, [sp, #32]
 800a704:	1af3      	sublt	r3, r6, r3
 800a706:	bfb4      	ite	lt
 800a708:	18d2      	addlt	r2, r2, r3
 800a70a:	1b9e      	subge	r6, r3, r6
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	bfbc      	itt	lt
 800a710:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a712:	2600      	movlt	r6, #0
 800a714:	2b00      	cmp	r3, #0
 800a716:	bfb7      	itett	lt
 800a718:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a71c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a720:	1a9d      	sublt	r5, r3, r2
 800a722:	2300      	movlt	r3, #0
 800a724:	e741      	b.n	800a5aa <_dtoa_r+0x742>
 800a726:	9e08      	ldr	r6, [sp, #32]
 800a728:	9d05      	ldr	r5, [sp, #20]
 800a72a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a72c:	e748      	b.n	800a5c0 <_dtoa_r+0x758>
 800a72e:	9a08      	ldr	r2, [sp, #32]
 800a730:	e770      	b.n	800a614 <_dtoa_r+0x7ac>
 800a732:	9b07      	ldr	r3, [sp, #28]
 800a734:	2b01      	cmp	r3, #1
 800a736:	dc19      	bgt.n	800a76c <_dtoa_r+0x904>
 800a738:	9b02      	ldr	r3, [sp, #8]
 800a73a:	b9bb      	cbnz	r3, 800a76c <_dtoa_r+0x904>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a742:	b99b      	cbnz	r3, 800a76c <_dtoa_r+0x904>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a74a:	0d1b      	lsrs	r3, r3, #20
 800a74c:	051b      	lsls	r3, r3, #20
 800a74e:	b183      	cbz	r3, 800a772 <_dtoa_r+0x90a>
 800a750:	9b05      	ldr	r3, [sp, #20]
 800a752:	3301      	adds	r3, #1
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	3301      	adds	r3, #1
 800a75a:	9306      	str	r3, [sp, #24]
 800a75c:	f04f 0801 	mov.w	r8, #1
 800a760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a762:	2b00      	cmp	r3, #0
 800a764:	f47f af6f 	bne.w	800a646 <_dtoa_r+0x7de>
 800a768:	2001      	movs	r0, #1
 800a76a:	e774      	b.n	800a656 <_dtoa_r+0x7ee>
 800a76c:	f04f 0800 	mov.w	r8, #0
 800a770:	e7f6      	b.n	800a760 <_dtoa_r+0x8f8>
 800a772:	4698      	mov	r8, r3
 800a774:	e7f4      	b.n	800a760 <_dtoa_r+0x8f8>
 800a776:	d082      	beq.n	800a67e <_dtoa_r+0x816>
 800a778:	9a05      	ldr	r2, [sp, #20]
 800a77a:	331c      	adds	r3, #28
 800a77c:	441a      	add	r2, r3
 800a77e:	9205      	str	r2, [sp, #20]
 800a780:	9a06      	ldr	r2, [sp, #24]
 800a782:	441a      	add	r2, r3
 800a784:	441d      	add	r5, r3
 800a786:	9206      	str	r2, [sp, #24]
 800a788:	e779      	b.n	800a67e <_dtoa_r+0x816>
 800a78a:	4603      	mov	r3, r0
 800a78c:	e7f4      	b.n	800a778 <_dtoa_r+0x910>
 800a78e:	9b04      	ldr	r3, [sp, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	dc37      	bgt.n	800a804 <_dtoa_r+0x99c>
 800a794:	9b07      	ldr	r3, [sp, #28]
 800a796:	2b02      	cmp	r3, #2
 800a798:	dd34      	ble.n	800a804 <_dtoa_r+0x99c>
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	9b01      	ldr	r3, [sp, #4]
 800a7a0:	b963      	cbnz	r3, 800a7bc <_dtoa_r+0x954>
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fab2 	bl	800ad10 <__multadd>
 800a7ac:	4601      	mov	r1, r0
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	4650      	mov	r0, sl
 800a7b2:	f000 fcc7 	bl	800b144 <__mcmp>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f73f adbb 	bgt.w	800a332 <_dtoa_r+0x4ca>
 800a7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7be:	9d00      	ldr	r5, [sp, #0]
 800a7c0:	ea6f 0b03 	mvn.w	fp, r3
 800a7c4:	f04f 0800 	mov.w	r8, #0
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fa7e 	bl	800accc <_Bfree>
 800a7d0:	2f00      	cmp	r7, #0
 800a7d2:	f43f aeab 	beq.w	800a52c <_dtoa_r+0x6c4>
 800a7d6:	f1b8 0f00 	cmp.w	r8, #0
 800a7da:	d005      	beq.n	800a7e8 <_dtoa_r+0x980>
 800a7dc:	45b8      	cmp	r8, r7
 800a7de:	d003      	beq.n	800a7e8 <_dtoa_r+0x980>
 800a7e0:	4641      	mov	r1, r8
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fa72 	bl	800accc <_Bfree>
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 fa6e 	bl	800accc <_Bfree>
 800a7f0:	e69c      	b.n	800a52c <_dtoa_r+0x6c4>
 800a7f2:	2600      	movs	r6, #0
 800a7f4:	4637      	mov	r7, r6
 800a7f6:	e7e1      	b.n	800a7bc <_dtoa_r+0x954>
 800a7f8:	46bb      	mov	fp, r7
 800a7fa:	4637      	mov	r7, r6
 800a7fc:	e599      	b.n	800a332 <_dtoa_r+0x4ca>
 800a7fe:	bf00      	nop
 800a800:	40240000 	.word	0x40240000
 800a804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 80c8 	beq.w	800a99c <_dtoa_r+0xb34>
 800a80c:	9b04      	ldr	r3, [sp, #16]
 800a80e:	9301      	str	r3, [sp, #4]
 800a810:	2d00      	cmp	r5, #0
 800a812:	dd05      	ble.n	800a820 <_dtoa_r+0x9b8>
 800a814:	4639      	mov	r1, r7
 800a816:	462a      	mov	r2, r5
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fc27 	bl	800b06c <__lshift>
 800a81e:	4607      	mov	r7, r0
 800a820:	f1b8 0f00 	cmp.w	r8, #0
 800a824:	d05b      	beq.n	800a8de <_dtoa_r+0xa76>
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 fa0f 	bl	800ac4c <_Balloc>
 800a82e:	4605      	mov	r5, r0
 800a830:	b928      	cbnz	r0, 800a83e <_dtoa_r+0x9d6>
 800a832:	4b83      	ldr	r3, [pc, #524]	; (800aa40 <_dtoa_r+0xbd8>)
 800a834:	4602      	mov	r2, r0
 800a836:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a83a:	f7ff bb2e 	b.w	8009e9a <_dtoa_r+0x32>
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	3202      	adds	r2, #2
 800a842:	0092      	lsls	r2, r2, #2
 800a844:	f107 010c 	add.w	r1, r7, #12
 800a848:	300c      	adds	r0, #12
 800a84a:	f7ff fa75 	bl	8009d38 <memcpy>
 800a84e:	2201      	movs	r2, #1
 800a850:	4629      	mov	r1, r5
 800a852:	4620      	mov	r0, r4
 800a854:	f000 fc0a 	bl	800b06c <__lshift>
 800a858:	9b00      	ldr	r3, [sp, #0]
 800a85a:	3301      	adds	r3, #1
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a862:	4413      	add	r3, r2
 800a864:	9308      	str	r3, [sp, #32]
 800a866:	9b02      	ldr	r3, [sp, #8]
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	46b8      	mov	r8, r7
 800a86e:	9306      	str	r3, [sp, #24]
 800a870:	4607      	mov	r7, r0
 800a872:	9b04      	ldr	r3, [sp, #16]
 800a874:	4631      	mov	r1, r6
 800a876:	3b01      	subs	r3, #1
 800a878:	4650      	mov	r0, sl
 800a87a:	9301      	str	r3, [sp, #4]
 800a87c:	f7ff fa6a 	bl	8009d54 <quorem>
 800a880:	4641      	mov	r1, r8
 800a882:	9002      	str	r0, [sp, #8]
 800a884:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a888:	4650      	mov	r0, sl
 800a88a:	f000 fc5b 	bl	800b144 <__mcmp>
 800a88e:	463a      	mov	r2, r7
 800a890:	9005      	str	r0, [sp, #20]
 800a892:	4631      	mov	r1, r6
 800a894:	4620      	mov	r0, r4
 800a896:	f000 fc71 	bl	800b17c <__mdiff>
 800a89a:	68c2      	ldr	r2, [r0, #12]
 800a89c:	4605      	mov	r5, r0
 800a89e:	bb02      	cbnz	r2, 800a8e2 <_dtoa_r+0xa7a>
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	f000 fc4e 	bl	800b144 <__mcmp>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b0:	f000 fa0c 	bl	800accc <_Bfree>
 800a8b4:	9b07      	ldr	r3, [sp, #28]
 800a8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b8:	9d04      	ldr	r5, [sp, #16]
 800a8ba:	ea43 0102 	orr.w	r1, r3, r2
 800a8be:	9b06      	ldr	r3, [sp, #24]
 800a8c0:	4319      	orrs	r1, r3
 800a8c2:	d110      	bne.n	800a8e6 <_dtoa_r+0xa7e>
 800a8c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8c8:	d029      	beq.n	800a91e <_dtoa_r+0xab6>
 800a8ca:	9b05      	ldr	r3, [sp, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dd02      	ble.n	800a8d6 <_dtoa_r+0xa6e>
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8d6:	9b01      	ldr	r3, [sp, #4]
 800a8d8:	f883 9000 	strb.w	r9, [r3]
 800a8dc:	e774      	b.n	800a7c8 <_dtoa_r+0x960>
 800a8de:	4638      	mov	r0, r7
 800a8e0:	e7ba      	b.n	800a858 <_dtoa_r+0x9f0>
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	e7e1      	b.n	800a8aa <_dtoa_r+0xa42>
 800a8e6:	9b05      	ldr	r3, [sp, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	db04      	blt.n	800a8f6 <_dtoa_r+0xa8e>
 800a8ec:	9907      	ldr	r1, [sp, #28]
 800a8ee:	430b      	orrs	r3, r1
 800a8f0:	9906      	ldr	r1, [sp, #24]
 800a8f2:	430b      	orrs	r3, r1
 800a8f4:	d120      	bne.n	800a938 <_dtoa_r+0xad0>
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	dded      	ble.n	800a8d6 <_dtoa_r+0xa6e>
 800a8fa:	4651      	mov	r1, sl
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 fbb4 	bl	800b06c <__lshift>
 800a904:	4631      	mov	r1, r6
 800a906:	4682      	mov	sl, r0
 800a908:	f000 fc1c 	bl	800b144 <__mcmp>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	dc03      	bgt.n	800a918 <_dtoa_r+0xab0>
 800a910:	d1e1      	bne.n	800a8d6 <_dtoa_r+0xa6e>
 800a912:	f019 0f01 	tst.w	r9, #1
 800a916:	d0de      	beq.n	800a8d6 <_dtoa_r+0xa6e>
 800a918:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a91c:	d1d8      	bne.n	800a8d0 <_dtoa_r+0xa68>
 800a91e:	9a01      	ldr	r2, [sp, #4]
 800a920:	2339      	movs	r3, #57	; 0x39
 800a922:	7013      	strb	r3, [r2, #0]
 800a924:	462b      	mov	r3, r5
 800a926:	461d      	mov	r5, r3
 800a928:	3b01      	subs	r3, #1
 800a92a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a92e:	2a39      	cmp	r2, #57	; 0x39
 800a930:	d06c      	beq.n	800aa0c <_dtoa_r+0xba4>
 800a932:	3201      	adds	r2, #1
 800a934:	701a      	strb	r2, [r3, #0]
 800a936:	e747      	b.n	800a7c8 <_dtoa_r+0x960>
 800a938:	2a00      	cmp	r2, #0
 800a93a:	dd07      	ble.n	800a94c <_dtoa_r+0xae4>
 800a93c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a940:	d0ed      	beq.n	800a91e <_dtoa_r+0xab6>
 800a942:	9a01      	ldr	r2, [sp, #4]
 800a944:	f109 0301 	add.w	r3, r9, #1
 800a948:	7013      	strb	r3, [r2, #0]
 800a94a:	e73d      	b.n	800a7c8 <_dtoa_r+0x960>
 800a94c:	9b04      	ldr	r3, [sp, #16]
 800a94e:	9a08      	ldr	r2, [sp, #32]
 800a950:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a954:	4293      	cmp	r3, r2
 800a956:	d043      	beq.n	800a9e0 <_dtoa_r+0xb78>
 800a958:	4651      	mov	r1, sl
 800a95a:	2300      	movs	r3, #0
 800a95c:	220a      	movs	r2, #10
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 f9d6 	bl	800ad10 <__multadd>
 800a964:	45b8      	cmp	r8, r7
 800a966:	4682      	mov	sl, r0
 800a968:	f04f 0300 	mov.w	r3, #0
 800a96c:	f04f 020a 	mov.w	r2, #10
 800a970:	4641      	mov	r1, r8
 800a972:	4620      	mov	r0, r4
 800a974:	d107      	bne.n	800a986 <_dtoa_r+0xb1e>
 800a976:	f000 f9cb 	bl	800ad10 <__multadd>
 800a97a:	4680      	mov	r8, r0
 800a97c:	4607      	mov	r7, r0
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	3301      	adds	r3, #1
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	e775      	b.n	800a872 <_dtoa_r+0xa0a>
 800a986:	f000 f9c3 	bl	800ad10 <__multadd>
 800a98a:	4639      	mov	r1, r7
 800a98c:	4680      	mov	r8, r0
 800a98e:	2300      	movs	r3, #0
 800a990:	220a      	movs	r2, #10
 800a992:	4620      	mov	r0, r4
 800a994:	f000 f9bc 	bl	800ad10 <__multadd>
 800a998:	4607      	mov	r7, r0
 800a99a:	e7f0      	b.n	800a97e <_dtoa_r+0xb16>
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	9d00      	ldr	r5, [sp, #0]
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	f7ff f9d5 	bl	8009d54 <quorem>
 800a9aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9ae:	9b00      	ldr	r3, [sp, #0]
 800a9b0:	f805 9b01 	strb.w	r9, [r5], #1
 800a9b4:	1aea      	subs	r2, r5, r3
 800a9b6:	9b01      	ldr	r3, [sp, #4]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	dd07      	ble.n	800a9cc <_dtoa_r+0xb64>
 800a9bc:	4651      	mov	r1, sl
 800a9be:	2300      	movs	r3, #0
 800a9c0:	220a      	movs	r2, #10
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 f9a4 	bl	800ad10 <__multadd>
 800a9c8:	4682      	mov	sl, r0
 800a9ca:	e7ea      	b.n	800a9a2 <_dtoa_r+0xb3a>
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bfc8      	it	gt
 800a9d2:	461d      	movgt	r5, r3
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	bfd8      	it	le
 800a9d8:	2501      	movle	r5, #1
 800a9da:	441d      	add	r5, r3
 800a9dc:	f04f 0800 	mov.w	r8, #0
 800a9e0:	4651      	mov	r1, sl
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 fb41 	bl	800b06c <__lshift>
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	f000 fba9 	bl	800b144 <__mcmp>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	dc96      	bgt.n	800a924 <_dtoa_r+0xabc>
 800a9f6:	d102      	bne.n	800a9fe <_dtoa_r+0xb96>
 800a9f8:	f019 0f01 	tst.w	r9, #1
 800a9fc:	d192      	bne.n	800a924 <_dtoa_r+0xabc>
 800a9fe:	462b      	mov	r3, r5
 800aa00:	461d      	mov	r5, r3
 800aa02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa06:	2a30      	cmp	r2, #48	; 0x30
 800aa08:	d0fa      	beq.n	800aa00 <_dtoa_r+0xb98>
 800aa0a:	e6dd      	b.n	800a7c8 <_dtoa_r+0x960>
 800aa0c:	9a00      	ldr	r2, [sp, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d189      	bne.n	800a926 <_dtoa_r+0xabe>
 800aa12:	f10b 0b01 	add.w	fp, fp, #1
 800aa16:	2331      	movs	r3, #49	; 0x31
 800aa18:	e796      	b.n	800a948 <_dtoa_r+0xae0>
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <_dtoa_r+0xbdc>)
 800aa1c:	f7ff ba99 	b.w	8009f52 <_dtoa_r+0xea>
 800aa20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f47f aa6d 	bne.w	8009f02 <_dtoa_r+0x9a>
 800aa28:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <_dtoa_r+0xbe0>)
 800aa2a:	f7ff ba92 	b.w	8009f52 <_dtoa_r+0xea>
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dcb5      	bgt.n	800a9a0 <_dtoa_r+0xb38>
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	f73f aeb1 	bgt.w	800a79e <_dtoa_r+0x936>
 800aa3c:	e7b0      	b.n	800a9a0 <_dtoa_r+0xb38>
 800aa3e:	bf00      	nop
 800aa40:	0800de18 	.word	0x0800de18
 800aa44:	0800dd78 	.word	0x0800dd78
 800aa48:	0800dd9c 	.word	0x0800dd9c

0800aa4c <_free_r>:
 800aa4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	d044      	beq.n	800aadc <_free_r+0x90>
 800aa52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa56:	9001      	str	r0, [sp, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa5e:	bfb8      	it	lt
 800aa60:	18e4      	addlt	r4, r4, r3
 800aa62:	f000 f8e7 	bl	800ac34 <__malloc_lock>
 800aa66:	4a1e      	ldr	r2, [pc, #120]	; (800aae0 <_free_r+0x94>)
 800aa68:	9801      	ldr	r0, [sp, #4]
 800aa6a:	6813      	ldr	r3, [r2, #0]
 800aa6c:	b933      	cbnz	r3, 800aa7c <_free_r+0x30>
 800aa6e:	6063      	str	r3, [r4, #4]
 800aa70:	6014      	str	r4, [r2, #0]
 800aa72:	b003      	add	sp, #12
 800aa74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa78:	f000 b8e2 	b.w	800ac40 <__malloc_unlock>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d908      	bls.n	800aa92 <_free_r+0x46>
 800aa80:	6825      	ldr	r5, [r4, #0]
 800aa82:	1961      	adds	r1, r4, r5
 800aa84:	428b      	cmp	r3, r1
 800aa86:	bf01      	itttt	eq
 800aa88:	6819      	ldreq	r1, [r3, #0]
 800aa8a:	685b      	ldreq	r3, [r3, #4]
 800aa8c:	1949      	addeq	r1, r1, r5
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	e7ed      	b.n	800aa6e <_free_r+0x22>
 800aa92:	461a      	mov	r2, r3
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	b10b      	cbz	r3, 800aa9c <_free_r+0x50>
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d9fa      	bls.n	800aa92 <_free_r+0x46>
 800aa9c:	6811      	ldr	r1, [r2, #0]
 800aa9e:	1855      	adds	r5, r2, r1
 800aaa0:	42a5      	cmp	r5, r4
 800aaa2:	d10b      	bne.n	800aabc <_free_r+0x70>
 800aaa4:	6824      	ldr	r4, [r4, #0]
 800aaa6:	4421      	add	r1, r4
 800aaa8:	1854      	adds	r4, r2, r1
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	d1e0      	bne.n	800aa72 <_free_r+0x26>
 800aab0:	681c      	ldr	r4, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	6053      	str	r3, [r2, #4]
 800aab6:	440c      	add	r4, r1
 800aab8:	6014      	str	r4, [r2, #0]
 800aaba:	e7da      	b.n	800aa72 <_free_r+0x26>
 800aabc:	d902      	bls.n	800aac4 <_free_r+0x78>
 800aabe:	230c      	movs	r3, #12
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	e7d6      	b.n	800aa72 <_free_r+0x26>
 800aac4:	6825      	ldr	r5, [r4, #0]
 800aac6:	1961      	adds	r1, r4, r5
 800aac8:	428b      	cmp	r3, r1
 800aaca:	bf04      	itt	eq
 800aacc:	6819      	ldreq	r1, [r3, #0]
 800aace:	685b      	ldreq	r3, [r3, #4]
 800aad0:	6063      	str	r3, [r4, #4]
 800aad2:	bf04      	itt	eq
 800aad4:	1949      	addeq	r1, r1, r5
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	6054      	str	r4, [r2, #4]
 800aada:	e7ca      	b.n	800aa72 <_free_r+0x26>
 800aadc:	b003      	add	sp, #12
 800aade:	bd30      	pop	{r4, r5, pc}
 800aae0:	20000950 	.word	0x20000950

0800aae4 <malloc>:
 800aae4:	4b02      	ldr	r3, [pc, #8]	; (800aaf0 <malloc+0xc>)
 800aae6:	4601      	mov	r1, r0
 800aae8:	6818      	ldr	r0, [r3, #0]
 800aaea:	f000 b823 	b.w	800ab34 <_malloc_r>
 800aaee:	bf00      	nop
 800aaf0:	20000098 	.word	0x20000098

0800aaf4 <sbrk_aligned>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	4e0e      	ldr	r6, [pc, #56]	; (800ab30 <sbrk_aligned+0x3c>)
 800aaf8:	460c      	mov	r4, r1
 800aafa:	6831      	ldr	r1, [r6, #0]
 800aafc:	4605      	mov	r5, r0
 800aafe:	b911      	cbnz	r1, 800ab06 <sbrk_aligned+0x12>
 800ab00:	f000 fe26 	bl	800b750 <_sbrk_r>
 800ab04:	6030      	str	r0, [r6, #0]
 800ab06:	4621      	mov	r1, r4
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f000 fe21 	bl	800b750 <_sbrk_r>
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	d00a      	beq.n	800ab28 <sbrk_aligned+0x34>
 800ab12:	1cc4      	adds	r4, r0, #3
 800ab14:	f024 0403 	bic.w	r4, r4, #3
 800ab18:	42a0      	cmp	r0, r4
 800ab1a:	d007      	beq.n	800ab2c <sbrk_aligned+0x38>
 800ab1c:	1a21      	subs	r1, r4, r0
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 fe16 	bl	800b750 <_sbrk_r>
 800ab24:	3001      	adds	r0, #1
 800ab26:	d101      	bne.n	800ab2c <sbrk_aligned+0x38>
 800ab28:	f04f 34ff 	mov.w	r4, #4294967295
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
 800ab30:	20000954 	.word	0x20000954

0800ab34 <_malloc_r>:
 800ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab38:	1ccd      	adds	r5, r1, #3
 800ab3a:	f025 0503 	bic.w	r5, r5, #3
 800ab3e:	3508      	adds	r5, #8
 800ab40:	2d0c      	cmp	r5, #12
 800ab42:	bf38      	it	cc
 800ab44:	250c      	movcc	r5, #12
 800ab46:	2d00      	cmp	r5, #0
 800ab48:	4607      	mov	r7, r0
 800ab4a:	db01      	blt.n	800ab50 <_malloc_r+0x1c>
 800ab4c:	42a9      	cmp	r1, r5
 800ab4e:	d905      	bls.n	800ab5c <_malloc_r+0x28>
 800ab50:	230c      	movs	r3, #12
 800ab52:	603b      	str	r3, [r7, #0]
 800ab54:	2600      	movs	r6, #0
 800ab56:	4630      	mov	r0, r6
 800ab58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac30 <_malloc_r+0xfc>
 800ab60:	f000 f868 	bl	800ac34 <__malloc_lock>
 800ab64:	f8d8 3000 	ldr.w	r3, [r8]
 800ab68:	461c      	mov	r4, r3
 800ab6a:	bb5c      	cbnz	r4, 800abc4 <_malloc_r+0x90>
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4638      	mov	r0, r7
 800ab70:	f7ff ffc0 	bl	800aaf4 <sbrk_aligned>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	4604      	mov	r4, r0
 800ab78:	d155      	bne.n	800ac26 <_malloc_r+0xf2>
 800ab7a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab7e:	4626      	mov	r6, r4
 800ab80:	2e00      	cmp	r6, #0
 800ab82:	d145      	bne.n	800ac10 <_malloc_r+0xdc>
 800ab84:	2c00      	cmp	r4, #0
 800ab86:	d048      	beq.n	800ac1a <_malloc_r+0xe6>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	eb04 0903 	add.w	r9, r4, r3
 800ab92:	f000 fddd 	bl	800b750 <_sbrk_r>
 800ab96:	4581      	cmp	r9, r0
 800ab98:	d13f      	bne.n	800ac1a <_malloc_r+0xe6>
 800ab9a:	6821      	ldr	r1, [r4, #0]
 800ab9c:	1a6d      	subs	r5, r5, r1
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4638      	mov	r0, r7
 800aba2:	f7ff ffa7 	bl	800aaf4 <sbrk_aligned>
 800aba6:	3001      	adds	r0, #1
 800aba8:	d037      	beq.n	800ac1a <_malloc_r+0xe6>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	442b      	add	r3, r5
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	f8d8 3000 	ldr.w	r3, [r8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d038      	beq.n	800ac2a <_malloc_r+0xf6>
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	42a2      	cmp	r2, r4
 800abbc:	d12b      	bne.n	800ac16 <_malloc_r+0xe2>
 800abbe:	2200      	movs	r2, #0
 800abc0:	605a      	str	r2, [r3, #4]
 800abc2:	e00f      	b.n	800abe4 <_malloc_r+0xb0>
 800abc4:	6822      	ldr	r2, [r4, #0]
 800abc6:	1b52      	subs	r2, r2, r5
 800abc8:	d41f      	bmi.n	800ac0a <_malloc_r+0xd6>
 800abca:	2a0b      	cmp	r2, #11
 800abcc:	d917      	bls.n	800abfe <_malloc_r+0xca>
 800abce:	1961      	adds	r1, r4, r5
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	6025      	str	r5, [r4, #0]
 800abd4:	bf18      	it	ne
 800abd6:	6059      	strne	r1, [r3, #4]
 800abd8:	6863      	ldr	r3, [r4, #4]
 800abda:	bf08      	it	eq
 800abdc:	f8c8 1000 	streq.w	r1, [r8]
 800abe0:	5162      	str	r2, [r4, r5]
 800abe2:	604b      	str	r3, [r1, #4]
 800abe4:	4638      	mov	r0, r7
 800abe6:	f104 060b 	add.w	r6, r4, #11
 800abea:	f000 f829 	bl	800ac40 <__malloc_unlock>
 800abee:	f026 0607 	bic.w	r6, r6, #7
 800abf2:	1d23      	adds	r3, r4, #4
 800abf4:	1af2      	subs	r2, r6, r3
 800abf6:	d0ae      	beq.n	800ab56 <_malloc_r+0x22>
 800abf8:	1b9b      	subs	r3, r3, r6
 800abfa:	50a3      	str	r3, [r4, r2]
 800abfc:	e7ab      	b.n	800ab56 <_malloc_r+0x22>
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	6862      	ldr	r2, [r4, #4]
 800ac02:	d1dd      	bne.n	800abc0 <_malloc_r+0x8c>
 800ac04:	f8c8 2000 	str.w	r2, [r8]
 800ac08:	e7ec      	b.n	800abe4 <_malloc_r+0xb0>
 800ac0a:	4623      	mov	r3, r4
 800ac0c:	6864      	ldr	r4, [r4, #4]
 800ac0e:	e7ac      	b.n	800ab6a <_malloc_r+0x36>
 800ac10:	4634      	mov	r4, r6
 800ac12:	6876      	ldr	r6, [r6, #4]
 800ac14:	e7b4      	b.n	800ab80 <_malloc_r+0x4c>
 800ac16:	4613      	mov	r3, r2
 800ac18:	e7cc      	b.n	800abb4 <_malloc_r+0x80>
 800ac1a:	230c      	movs	r3, #12
 800ac1c:	603b      	str	r3, [r7, #0]
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f000 f80e 	bl	800ac40 <__malloc_unlock>
 800ac24:	e797      	b.n	800ab56 <_malloc_r+0x22>
 800ac26:	6025      	str	r5, [r4, #0]
 800ac28:	e7dc      	b.n	800abe4 <_malloc_r+0xb0>
 800ac2a:	605b      	str	r3, [r3, #4]
 800ac2c:	deff      	udf	#255	; 0xff
 800ac2e:	bf00      	nop
 800ac30:	20000950 	.word	0x20000950

0800ac34 <__malloc_lock>:
 800ac34:	4801      	ldr	r0, [pc, #4]	; (800ac3c <__malloc_lock+0x8>)
 800ac36:	f7ff b87d 	b.w	8009d34 <__retarget_lock_acquire_recursive>
 800ac3a:	bf00      	nop
 800ac3c:	2000094c 	.word	0x2000094c

0800ac40 <__malloc_unlock>:
 800ac40:	4801      	ldr	r0, [pc, #4]	; (800ac48 <__malloc_unlock+0x8>)
 800ac42:	f7ff b878 	b.w	8009d36 <__retarget_lock_release_recursive>
 800ac46:	bf00      	nop
 800ac48:	2000094c 	.word	0x2000094c

0800ac4c <_Balloc>:
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	69c6      	ldr	r6, [r0, #28]
 800ac50:	4604      	mov	r4, r0
 800ac52:	460d      	mov	r5, r1
 800ac54:	b976      	cbnz	r6, 800ac74 <_Balloc+0x28>
 800ac56:	2010      	movs	r0, #16
 800ac58:	f7ff ff44 	bl	800aae4 <malloc>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	61e0      	str	r0, [r4, #28]
 800ac60:	b920      	cbnz	r0, 800ac6c <_Balloc+0x20>
 800ac62:	4b18      	ldr	r3, [pc, #96]	; (800acc4 <_Balloc+0x78>)
 800ac64:	4818      	ldr	r0, [pc, #96]	; (800acc8 <_Balloc+0x7c>)
 800ac66:	216b      	movs	r1, #107	; 0x6b
 800ac68:	f000 fd82 	bl	800b770 <__assert_func>
 800ac6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac70:	6006      	str	r6, [r0, #0]
 800ac72:	60c6      	str	r6, [r0, #12]
 800ac74:	69e6      	ldr	r6, [r4, #28]
 800ac76:	68f3      	ldr	r3, [r6, #12]
 800ac78:	b183      	cbz	r3, 800ac9c <_Balloc+0x50>
 800ac7a:	69e3      	ldr	r3, [r4, #28]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac82:	b9b8      	cbnz	r0, 800acb4 <_Balloc+0x68>
 800ac84:	2101      	movs	r1, #1
 800ac86:	fa01 f605 	lsl.w	r6, r1, r5
 800ac8a:	1d72      	adds	r2, r6, #5
 800ac8c:	0092      	lsls	r2, r2, #2
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 fd8c 	bl	800b7ac <_calloc_r>
 800ac94:	b160      	cbz	r0, 800acb0 <_Balloc+0x64>
 800ac96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac9a:	e00e      	b.n	800acba <_Balloc+0x6e>
 800ac9c:	2221      	movs	r2, #33	; 0x21
 800ac9e:	2104      	movs	r1, #4
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fd83 	bl	800b7ac <_calloc_r>
 800aca6:	69e3      	ldr	r3, [r4, #28]
 800aca8:	60f0      	str	r0, [r6, #12]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e4      	bne.n	800ac7a <_Balloc+0x2e>
 800acb0:	2000      	movs	r0, #0
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	6802      	ldr	r2, [r0, #0]
 800acb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acba:	2300      	movs	r3, #0
 800acbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acc0:	e7f7      	b.n	800acb2 <_Balloc+0x66>
 800acc2:	bf00      	nop
 800acc4:	0800dda9 	.word	0x0800dda9
 800acc8:	0800de29 	.word	0x0800de29

0800accc <_Bfree>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	69c6      	ldr	r6, [r0, #28]
 800acd0:	4605      	mov	r5, r0
 800acd2:	460c      	mov	r4, r1
 800acd4:	b976      	cbnz	r6, 800acf4 <_Bfree+0x28>
 800acd6:	2010      	movs	r0, #16
 800acd8:	f7ff ff04 	bl	800aae4 <malloc>
 800acdc:	4602      	mov	r2, r0
 800acde:	61e8      	str	r0, [r5, #28]
 800ace0:	b920      	cbnz	r0, 800acec <_Bfree+0x20>
 800ace2:	4b09      	ldr	r3, [pc, #36]	; (800ad08 <_Bfree+0x3c>)
 800ace4:	4809      	ldr	r0, [pc, #36]	; (800ad0c <_Bfree+0x40>)
 800ace6:	218f      	movs	r1, #143	; 0x8f
 800ace8:	f000 fd42 	bl	800b770 <__assert_func>
 800acec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acf0:	6006      	str	r6, [r0, #0]
 800acf2:	60c6      	str	r6, [r0, #12]
 800acf4:	b13c      	cbz	r4, 800ad06 <_Bfree+0x3a>
 800acf6:	69eb      	ldr	r3, [r5, #28]
 800acf8:	6862      	ldr	r2, [r4, #4]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad00:	6021      	str	r1, [r4, #0]
 800ad02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad06:	bd70      	pop	{r4, r5, r6, pc}
 800ad08:	0800dda9 	.word	0x0800dda9
 800ad0c:	0800de29 	.word	0x0800de29

0800ad10 <__multadd>:
 800ad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad14:	690d      	ldr	r5, [r1, #16]
 800ad16:	4607      	mov	r7, r0
 800ad18:	460c      	mov	r4, r1
 800ad1a:	461e      	mov	r6, r3
 800ad1c:	f101 0c14 	add.w	ip, r1, #20
 800ad20:	2000      	movs	r0, #0
 800ad22:	f8dc 3000 	ldr.w	r3, [ip]
 800ad26:	b299      	uxth	r1, r3
 800ad28:	fb02 6101 	mla	r1, r2, r1, r6
 800ad2c:	0c1e      	lsrs	r6, r3, #16
 800ad2e:	0c0b      	lsrs	r3, r1, #16
 800ad30:	fb02 3306 	mla	r3, r2, r6, r3
 800ad34:	b289      	uxth	r1, r1
 800ad36:	3001      	adds	r0, #1
 800ad38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad3c:	4285      	cmp	r5, r0
 800ad3e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad46:	dcec      	bgt.n	800ad22 <__multadd+0x12>
 800ad48:	b30e      	cbz	r6, 800ad8e <__multadd+0x7e>
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	42ab      	cmp	r3, r5
 800ad4e:	dc19      	bgt.n	800ad84 <__multadd+0x74>
 800ad50:	6861      	ldr	r1, [r4, #4]
 800ad52:	4638      	mov	r0, r7
 800ad54:	3101      	adds	r1, #1
 800ad56:	f7ff ff79 	bl	800ac4c <_Balloc>
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	b928      	cbnz	r0, 800ad6a <__multadd+0x5a>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <__multadd+0x84>)
 800ad62:	480d      	ldr	r0, [pc, #52]	; (800ad98 <__multadd+0x88>)
 800ad64:	21ba      	movs	r1, #186	; 0xba
 800ad66:	f000 fd03 	bl	800b770 <__assert_func>
 800ad6a:	6922      	ldr	r2, [r4, #16]
 800ad6c:	3202      	adds	r2, #2
 800ad6e:	f104 010c 	add.w	r1, r4, #12
 800ad72:	0092      	lsls	r2, r2, #2
 800ad74:	300c      	adds	r0, #12
 800ad76:	f7fe ffdf 	bl	8009d38 <memcpy>
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f7ff ffa5 	bl	800accc <_Bfree>
 800ad82:	4644      	mov	r4, r8
 800ad84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad88:	3501      	adds	r5, #1
 800ad8a:	615e      	str	r6, [r3, #20]
 800ad8c:	6125      	str	r5, [r4, #16]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad94:	0800de18 	.word	0x0800de18
 800ad98:	0800de29 	.word	0x0800de29

0800ad9c <__hi0bits>:
 800ad9c:	0c03      	lsrs	r3, r0, #16
 800ad9e:	041b      	lsls	r3, r3, #16
 800ada0:	b9d3      	cbnz	r3, 800add8 <__hi0bits+0x3c>
 800ada2:	0400      	lsls	r0, r0, #16
 800ada4:	2310      	movs	r3, #16
 800ada6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adaa:	bf04      	itt	eq
 800adac:	0200      	lsleq	r0, r0, #8
 800adae:	3308      	addeq	r3, #8
 800adb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800adb4:	bf04      	itt	eq
 800adb6:	0100      	lsleq	r0, r0, #4
 800adb8:	3304      	addeq	r3, #4
 800adba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adbe:	bf04      	itt	eq
 800adc0:	0080      	lsleq	r0, r0, #2
 800adc2:	3302      	addeq	r3, #2
 800adc4:	2800      	cmp	r0, #0
 800adc6:	db05      	blt.n	800add4 <__hi0bits+0x38>
 800adc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800adcc:	f103 0301 	add.w	r3, r3, #1
 800add0:	bf08      	it	eq
 800add2:	2320      	moveq	r3, #32
 800add4:	4618      	mov	r0, r3
 800add6:	4770      	bx	lr
 800add8:	2300      	movs	r3, #0
 800adda:	e7e4      	b.n	800ada6 <__hi0bits+0xa>

0800addc <__lo0bits>:
 800addc:	6803      	ldr	r3, [r0, #0]
 800adde:	f013 0207 	ands.w	r2, r3, #7
 800ade2:	d00c      	beq.n	800adfe <__lo0bits+0x22>
 800ade4:	07d9      	lsls	r1, r3, #31
 800ade6:	d422      	bmi.n	800ae2e <__lo0bits+0x52>
 800ade8:	079a      	lsls	r2, r3, #30
 800adea:	bf49      	itett	mi
 800adec:	085b      	lsrmi	r3, r3, #1
 800adee:	089b      	lsrpl	r3, r3, #2
 800adf0:	6003      	strmi	r3, [r0, #0]
 800adf2:	2201      	movmi	r2, #1
 800adf4:	bf5c      	itt	pl
 800adf6:	6003      	strpl	r3, [r0, #0]
 800adf8:	2202      	movpl	r2, #2
 800adfa:	4610      	mov	r0, r2
 800adfc:	4770      	bx	lr
 800adfe:	b299      	uxth	r1, r3
 800ae00:	b909      	cbnz	r1, 800ae06 <__lo0bits+0x2a>
 800ae02:	0c1b      	lsrs	r3, r3, #16
 800ae04:	2210      	movs	r2, #16
 800ae06:	b2d9      	uxtb	r1, r3
 800ae08:	b909      	cbnz	r1, 800ae0e <__lo0bits+0x32>
 800ae0a:	3208      	adds	r2, #8
 800ae0c:	0a1b      	lsrs	r3, r3, #8
 800ae0e:	0719      	lsls	r1, r3, #28
 800ae10:	bf04      	itt	eq
 800ae12:	091b      	lsreq	r3, r3, #4
 800ae14:	3204      	addeq	r2, #4
 800ae16:	0799      	lsls	r1, r3, #30
 800ae18:	bf04      	itt	eq
 800ae1a:	089b      	lsreq	r3, r3, #2
 800ae1c:	3202      	addeq	r2, #2
 800ae1e:	07d9      	lsls	r1, r3, #31
 800ae20:	d403      	bmi.n	800ae2a <__lo0bits+0x4e>
 800ae22:	085b      	lsrs	r3, r3, #1
 800ae24:	f102 0201 	add.w	r2, r2, #1
 800ae28:	d003      	beq.n	800ae32 <__lo0bits+0x56>
 800ae2a:	6003      	str	r3, [r0, #0]
 800ae2c:	e7e5      	b.n	800adfa <__lo0bits+0x1e>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	e7e3      	b.n	800adfa <__lo0bits+0x1e>
 800ae32:	2220      	movs	r2, #32
 800ae34:	e7e1      	b.n	800adfa <__lo0bits+0x1e>
	...

0800ae38 <__i2b>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	f7ff ff05 	bl	800ac4c <_Balloc>
 800ae42:	4602      	mov	r2, r0
 800ae44:	b928      	cbnz	r0, 800ae52 <__i2b+0x1a>
 800ae46:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <__i2b+0x24>)
 800ae48:	4805      	ldr	r0, [pc, #20]	; (800ae60 <__i2b+0x28>)
 800ae4a:	f240 1145 	movw	r1, #325	; 0x145
 800ae4e:	f000 fc8f 	bl	800b770 <__assert_func>
 800ae52:	2301      	movs	r3, #1
 800ae54:	6144      	str	r4, [r0, #20]
 800ae56:	6103      	str	r3, [r0, #16]
 800ae58:	bd10      	pop	{r4, pc}
 800ae5a:	bf00      	nop
 800ae5c:	0800de18 	.word	0x0800de18
 800ae60:	0800de29 	.word	0x0800de29

0800ae64 <__multiply>:
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	4691      	mov	r9, r2
 800ae6a:	690a      	ldr	r2, [r1, #16]
 800ae6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	bfb8      	it	lt
 800ae74:	460b      	movlt	r3, r1
 800ae76:	460c      	mov	r4, r1
 800ae78:	bfbc      	itt	lt
 800ae7a:	464c      	movlt	r4, r9
 800ae7c:	4699      	movlt	r9, r3
 800ae7e:	6927      	ldr	r7, [r4, #16]
 800ae80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae84:	68a3      	ldr	r3, [r4, #8]
 800ae86:	6861      	ldr	r1, [r4, #4]
 800ae88:	eb07 060a 	add.w	r6, r7, sl
 800ae8c:	42b3      	cmp	r3, r6
 800ae8e:	b085      	sub	sp, #20
 800ae90:	bfb8      	it	lt
 800ae92:	3101      	addlt	r1, #1
 800ae94:	f7ff feda 	bl	800ac4c <_Balloc>
 800ae98:	b930      	cbnz	r0, 800aea8 <__multiply+0x44>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	4b44      	ldr	r3, [pc, #272]	; (800afb0 <__multiply+0x14c>)
 800ae9e:	4845      	ldr	r0, [pc, #276]	; (800afb4 <__multiply+0x150>)
 800aea0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aea4:	f000 fc64 	bl	800b770 <__assert_func>
 800aea8:	f100 0514 	add.w	r5, r0, #20
 800aeac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	4543      	cmp	r3, r8
 800aeb6:	d321      	bcc.n	800aefc <__multiply+0x98>
 800aeb8:	f104 0314 	add.w	r3, r4, #20
 800aebc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aec0:	f109 0314 	add.w	r3, r9, #20
 800aec4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aec8:	9202      	str	r2, [sp, #8]
 800aeca:	1b3a      	subs	r2, r7, r4
 800aecc:	3a15      	subs	r2, #21
 800aece:	f022 0203 	bic.w	r2, r2, #3
 800aed2:	3204      	adds	r2, #4
 800aed4:	f104 0115 	add.w	r1, r4, #21
 800aed8:	428f      	cmp	r7, r1
 800aeda:	bf38      	it	cc
 800aedc:	2204      	movcc	r2, #4
 800aede:	9201      	str	r2, [sp, #4]
 800aee0:	9a02      	ldr	r2, [sp, #8]
 800aee2:	9303      	str	r3, [sp, #12]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d80c      	bhi.n	800af02 <__multiply+0x9e>
 800aee8:	2e00      	cmp	r6, #0
 800aeea:	dd03      	ble.n	800aef4 <__multiply+0x90>
 800aeec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d05b      	beq.n	800afac <__multiply+0x148>
 800aef4:	6106      	str	r6, [r0, #16]
 800aef6:	b005      	add	sp, #20
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	f843 2b04 	str.w	r2, [r3], #4
 800af00:	e7d8      	b.n	800aeb4 <__multiply+0x50>
 800af02:	f8b3 a000 	ldrh.w	sl, [r3]
 800af06:	f1ba 0f00 	cmp.w	sl, #0
 800af0a:	d024      	beq.n	800af56 <__multiply+0xf2>
 800af0c:	f104 0e14 	add.w	lr, r4, #20
 800af10:	46a9      	mov	r9, r5
 800af12:	f04f 0c00 	mov.w	ip, #0
 800af16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af1a:	f8d9 1000 	ldr.w	r1, [r9]
 800af1e:	fa1f fb82 	uxth.w	fp, r2
 800af22:	b289      	uxth	r1, r1
 800af24:	fb0a 110b 	mla	r1, sl, fp, r1
 800af28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af2c:	f8d9 2000 	ldr.w	r2, [r9]
 800af30:	4461      	add	r1, ip
 800af32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af36:	fb0a c20b 	mla	r2, sl, fp, ip
 800af3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af3e:	b289      	uxth	r1, r1
 800af40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af44:	4577      	cmp	r7, lr
 800af46:	f849 1b04 	str.w	r1, [r9], #4
 800af4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af4e:	d8e2      	bhi.n	800af16 <__multiply+0xb2>
 800af50:	9a01      	ldr	r2, [sp, #4]
 800af52:	f845 c002 	str.w	ip, [r5, r2]
 800af56:	9a03      	ldr	r2, [sp, #12]
 800af58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af5c:	3304      	adds	r3, #4
 800af5e:	f1b9 0f00 	cmp.w	r9, #0
 800af62:	d021      	beq.n	800afa8 <__multiply+0x144>
 800af64:	6829      	ldr	r1, [r5, #0]
 800af66:	f104 0c14 	add.w	ip, r4, #20
 800af6a:	46ae      	mov	lr, r5
 800af6c:	f04f 0a00 	mov.w	sl, #0
 800af70:	f8bc b000 	ldrh.w	fp, [ip]
 800af74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af78:	fb09 220b 	mla	r2, r9, fp, r2
 800af7c:	4452      	add	r2, sl
 800af7e:	b289      	uxth	r1, r1
 800af80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af84:	f84e 1b04 	str.w	r1, [lr], #4
 800af88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af90:	f8be 1000 	ldrh.w	r1, [lr]
 800af94:	fb09 110a 	mla	r1, r9, sl, r1
 800af98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af9c:	4567      	cmp	r7, ip
 800af9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afa2:	d8e5      	bhi.n	800af70 <__multiply+0x10c>
 800afa4:	9a01      	ldr	r2, [sp, #4]
 800afa6:	50a9      	str	r1, [r5, r2]
 800afa8:	3504      	adds	r5, #4
 800afaa:	e799      	b.n	800aee0 <__multiply+0x7c>
 800afac:	3e01      	subs	r6, #1
 800afae:	e79b      	b.n	800aee8 <__multiply+0x84>
 800afb0:	0800de18 	.word	0x0800de18
 800afb4:	0800de29 	.word	0x0800de29

0800afb8 <__pow5mult>:
 800afb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afbc:	4615      	mov	r5, r2
 800afbe:	f012 0203 	ands.w	r2, r2, #3
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	d007      	beq.n	800afd8 <__pow5mult+0x20>
 800afc8:	4c25      	ldr	r4, [pc, #148]	; (800b060 <__pow5mult+0xa8>)
 800afca:	3a01      	subs	r2, #1
 800afcc:	2300      	movs	r3, #0
 800afce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afd2:	f7ff fe9d 	bl	800ad10 <__multadd>
 800afd6:	4607      	mov	r7, r0
 800afd8:	10ad      	asrs	r5, r5, #2
 800afda:	d03d      	beq.n	800b058 <__pow5mult+0xa0>
 800afdc:	69f4      	ldr	r4, [r6, #28]
 800afde:	b97c      	cbnz	r4, 800b000 <__pow5mult+0x48>
 800afe0:	2010      	movs	r0, #16
 800afe2:	f7ff fd7f 	bl	800aae4 <malloc>
 800afe6:	4602      	mov	r2, r0
 800afe8:	61f0      	str	r0, [r6, #28]
 800afea:	b928      	cbnz	r0, 800aff8 <__pow5mult+0x40>
 800afec:	4b1d      	ldr	r3, [pc, #116]	; (800b064 <__pow5mult+0xac>)
 800afee:	481e      	ldr	r0, [pc, #120]	; (800b068 <__pow5mult+0xb0>)
 800aff0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aff4:	f000 fbbc 	bl	800b770 <__assert_func>
 800aff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800affc:	6004      	str	r4, [r0, #0]
 800affe:	60c4      	str	r4, [r0, #12]
 800b000:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b008:	b94c      	cbnz	r4, 800b01e <__pow5mult+0x66>
 800b00a:	f240 2171 	movw	r1, #625	; 0x271
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff12 	bl	800ae38 <__i2b>
 800b014:	2300      	movs	r3, #0
 800b016:	f8c8 0008 	str.w	r0, [r8, #8]
 800b01a:	4604      	mov	r4, r0
 800b01c:	6003      	str	r3, [r0, #0]
 800b01e:	f04f 0900 	mov.w	r9, #0
 800b022:	07eb      	lsls	r3, r5, #31
 800b024:	d50a      	bpl.n	800b03c <__pow5mult+0x84>
 800b026:	4639      	mov	r1, r7
 800b028:	4622      	mov	r2, r4
 800b02a:	4630      	mov	r0, r6
 800b02c:	f7ff ff1a 	bl	800ae64 <__multiply>
 800b030:	4639      	mov	r1, r7
 800b032:	4680      	mov	r8, r0
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff fe49 	bl	800accc <_Bfree>
 800b03a:	4647      	mov	r7, r8
 800b03c:	106d      	asrs	r5, r5, #1
 800b03e:	d00b      	beq.n	800b058 <__pow5mult+0xa0>
 800b040:	6820      	ldr	r0, [r4, #0]
 800b042:	b938      	cbnz	r0, 800b054 <__pow5mult+0x9c>
 800b044:	4622      	mov	r2, r4
 800b046:	4621      	mov	r1, r4
 800b048:	4630      	mov	r0, r6
 800b04a:	f7ff ff0b 	bl	800ae64 <__multiply>
 800b04e:	6020      	str	r0, [r4, #0]
 800b050:	f8c0 9000 	str.w	r9, [r0]
 800b054:	4604      	mov	r4, r0
 800b056:	e7e4      	b.n	800b022 <__pow5mult+0x6a>
 800b058:	4638      	mov	r0, r7
 800b05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05e:	bf00      	nop
 800b060:	0800df78 	.word	0x0800df78
 800b064:	0800dda9 	.word	0x0800dda9
 800b068:	0800de29 	.word	0x0800de29

0800b06c <__lshift>:
 800b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b070:	460c      	mov	r4, r1
 800b072:	6849      	ldr	r1, [r1, #4]
 800b074:	6923      	ldr	r3, [r4, #16]
 800b076:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b07a:	68a3      	ldr	r3, [r4, #8]
 800b07c:	4607      	mov	r7, r0
 800b07e:	4691      	mov	r9, r2
 800b080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b084:	f108 0601 	add.w	r6, r8, #1
 800b088:	42b3      	cmp	r3, r6
 800b08a:	db0b      	blt.n	800b0a4 <__lshift+0x38>
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7ff fddd 	bl	800ac4c <_Balloc>
 800b092:	4605      	mov	r5, r0
 800b094:	b948      	cbnz	r0, 800b0aa <__lshift+0x3e>
 800b096:	4602      	mov	r2, r0
 800b098:	4b28      	ldr	r3, [pc, #160]	; (800b13c <__lshift+0xd0>)
 800b09a:	4829      	ldr	r0, [pc, #164]	; (800b140 <__lshift+0xd4>)
 800b09c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b0a0:	f000 fb66 	bl	800b770 <__assert_func>
 800b0a4:	3101      	adds	r1, #1
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	e7ee      	b.n	800b088 <__lshift+0x1c>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f100 0114 	add.w	r1, r0, #20
 800b0b0:	f100 0210 	add.w	r2, r0, #16
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	4553      	cmp	r3, sl
 800b0b8:	db33      	blt.n	800b122 <__lshift+0xb6>
 800b0ba:	6920      	ldr	r0, [r4, #16]
 800b0bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0c0:	f104 0314 	add.w	r3, r4, #20
 800b0c4:	f019 091f 	ands.w	r9, r9, #31
 800b0c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0d0:	d02b      	beq.n	800b12a <__lshift+0xbe>
 800b0d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b0d6:	468a      	mov	sl, r1
 800b0d8:	2200      	movs	r2, #0
 800b0da:	6818      	ldr	r0, [r3, #0]
 800b0dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b0e0:	4310      	orrs	r0, r2
 800b0e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ea:	459c      	cmp	ip, r3
 800b0ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0f0:	d8f3      	bhi.n	800b0da <__lshift+0x6e>
 800b0f2:	ebac 0304 	sub.w	r3, ip, r4
 800b0f6:	3b15      	subs	r3, #21
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	f104 0015 	add.w	r0, r4, #21
 800b102:	4584      	cmp	ip, r0
 800b104:	bf38      	it	cc
 800b106:	2304      	movcc	r3, #4
 800b108:	50ca      	str	r2, [r1, r3]
 800b10a:	b10a      	cbz	r2, 800b110 <__lshift+0xa4>
 800b10c:	f108 0602 	add.w	r6, r8, #2
 800b110:	3e01      	subs	r6, #1
 800b112:	4638      	mov	r0, r7
 800b114:	612e      	str	r6, [r5, #16]
 800b116:	4621      	mov	r1, r4
 800b118:	f7ff fdd8 	bl	800accc <_Bfree>
 800b11c:	4628      	mov	r0, r5
 800b11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b122:	f842 0f04 	str.w	r0, [r2, #4]!
 800b126:	3301      	adds	r3, #1
 800b128:	e7c5      	b.n	800b0b6 <__lshift+0x4a>
 800b12a:	3904      	subs	r1, #4
 800b12c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b130:	f841 2f04 	str.w	r2, [r1, #4]!
 800b134:	459c      	cmp	ip, r3
 800b136:	d8f9      	bhi.n	800b12c <__lshift+0xc0>
 800b138:	e7ea      	b.n	800b110 <__lshift+0xa4>
 800b13a:	bf00      	nop
 800b13c:	0800de18 	.word	0x0800de18
 800b140:	0800de29 	.word	0x0800de29

0800b144 <__mcmp>:
 800b144:	b530      	push	{r4, r5, lr}
 800b146:	6902      	ldr	r2, [r0, #16]
 800b148:	690c      	ldr	r4, [r1, #16]
 800b14a:	1b12      	subs	r2, r2, r4
 800b14c:	d10e      	bne.n	800b16c <__mcmp+0x28>
 800b14e:	f100 0314 	add.w	r3, r0, #20
 800b152:	3114      	adds	r1, #20
 800b154:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b158:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b15c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b160:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b164:	42a5      	cmp	r5, r4
 800b166:	d003      	beq.n	800b170 <__mcmp+0x2c>
 800b168:	d305      	bcc.n	800b176 <__mcmp+0x32>
 800b16a:	2201      	movs	r2, #1
 800b16c:	4610      	mov	r0, r2
 800b16e:	bd30      	pop	{r4, r5, pc}
 800b170:	4283      	cmp	r3, r0
 800b172:	d3f3      	bcc.n	800b15c <__mcmp+0x18>
 800b174:	e7fa      	b.n	800b16c <__mcmp+0x28>
 800b176:	f04f 32ff 	mov.w	r2, #4294967295
 800b17a:	e7f7      	b.n	800b16c <__mcmp+0x28>

0800b17c <__mdiff>:
 800b17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	460c      	mov	r4, r1
 800b182:	4606      	mov	r6, r0
 800b184:	4611      	mov	r1, r2
 800b186:	4620      	mov	r0, r4
 800b188:	4690      	mov	r8, r2
 800b18a:	f7ff ffdb 	bl	800b144 <__mcmp>
 800b18e:	1e05      	subs	r5, r0, #0
 800b190:	d110      	bne.n	800b1b4 <__mdiff+0x38>
 800b192:	4629      	mov	r1, r5
 800b194:	4630      	mov	r0, r6
 800b196:	f7ff fd59 	bl	800ac4c <_Balloc>
 800b19a:	b930      	cbnz	r0, 800b1aa <__mdiff+0x2e>
 800b19c:	4b3a      	ldr	r3, [pc, #232]	; (800b288 <__mdiff+0x10c>)
 800b19e:	4602      	mov	r2, r0
 800b1a0:	f240 2137 	movw	r1, #567	; 0x237
 800b1a4:	4839      	ldr	r0, [pc, #228]	; (800b28c <__mdiff+0x110>)
 800b1a6:	f000 fae3 	bl	800b770 <__assert_func>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	bfa4      	itt	ge
 800b1b6:	4643      	movge	r3, r8
 800b1b8:	46a0      	movge	r8, r4
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1c0:	bfa6      	itte	ge
 800b1c2:	461c      	movge	r4, r3
 800b1c4:	2500      	movge	r5, #0
 800b1c6:	2501      	movlt	r5, #1
 800b1c8:	f7ff fd40 	bl	800ac4c <_Balloc>
 800b1cc:	b920      	cbnz	r0, 800b1d8 <__mdiff+0x5c>
 800b1ce:	4b2e      	ldr	r3, [pc, #184]	; (800b288 <__mdiff+0x10c>)
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	f240 2145 	movw	r1, #581	; 0x245
 800b1d6:	e7e5      	b.n	800b1a4 <__mdiff+0x28>
 800b1d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1dc:	6926      	ldr	r6, [r4, #16]
 800b1de:	60c5      	str	r5, [r0, #12]
 800b1e0:	f104 0914 	add.w	r9, r4, #20
 800b1e4:	f108 0514 	add.w	r5, r8, #20
 800b1e8:	f100 0e14 	add.w	lr, r0, #20
 800b1ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b1f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b1f4:	f108 0210 	add.w	r2, r8, #16
 800b1f8:	46f2      	mov	sl, lr
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b200:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b204:	fa11 f88b 	uxtah	r8, r1, fp
 800b208:	b299      	uxth	r1, r3
 800b20a:	0c1b      	lsrs	r3, r3, #16
 800b20c:	eba8 0801 	sub.w	r8, r8, r1
 800b210:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b214:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b218:	fa1f f888 	uxth.w	r8, r8
 800b21c:	1419      	asrs	r1, r3, #16
 800b21e:	454e      	cmp	r6, r9
 800b220:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b224:	f84a 3b04 	str.w	r3, [sl], #4
 800b228:	d8e8      	bhi.n	800b1fc <__mdiff+0x80>
 800b22a:	1b33      	subs	r3, r6, r4
 800b22c:	3b15      	subs	r3, #21
 800b22e:	f023 0303 	bic.w	r3, r3, #3
 800b232:	3304      	adds	r3, #4
 800b234:	3415      	adds	r4, #21
 800b236:	42a6      	cmp	r6, r4
 800b238:	bf38      	it	cc
 800b23a:	2304      	movcc	r3, #4
 800b23c:	441d      	add	r5, r3
 800b23e:	4473      	add	r3, lr
 800b240:	469e      	mov	lr, r3
 800b242:	462e      	mov	r6, r5
 800b244:	4566      	cmp	r6, ip
 800b246:	d30e      	bcc.n	800b266 <__mdiff+0xea>
 800b248:	f10c 0203 	add.w	r2, ip, #3
 800b24c:	1b52      	subs	r2, r2, r5
 800b24e:	f022 0203 	bic.w	r2, r2, #3
 800b252:	3d03      	subs	r5, #3
 800b254:	45ac      	cmp	ip, r5
 800b256:	bf38      	it	cc
 800b258:	2200      	movcc	r2, #0
 800b25a:	4413      	add	r3, r2
 800b25c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b260:	b17a      	cbz	r2, 800b282 <__mdiff+0x106>
 800b262:	6107      	str	r7, [r0, #16]
 800b264:	e7a4      	b.n	800b1b0 <__mdiff+0x34>
 800b266:	f856 8b04 	ldr.w	r8, [r6], #4
 800b26a:	fa11 f288 	uxtah	r2, r1, r8
 800b26e:	1414      	asrs	r4, r2, #16
 800b270:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b274:	b292      	uxth	r2, r2
 800b276:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b27a:	f84e 2b04 	str.w	r2, [lr], #4
 800b27e:	1421      	asrs	r1, r4, #16
 800b280:	e7e0      	b.n	800b244 <__mdiff+0xc8>
 800b282:	3f01      	subs	r7, #1
 800b284:	e7ea      	b.n	800b25c <__mdiff+0xe0>
 800b286:	bf00      	nop
 800b288:	0800de18 	.word	0x0800de18
 800b28c:	0800de29 	.word	0x0800de29

0800b290 <__d2b>:
 800b290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b294:	460f      	mov	r7, r1
 800b296:	2101      	movs	r1, #1
 800b298:	ec59 8b10 	vmov	r8, r9, d0
 800b29c:	4616      	mov	r6, r2
 800b29e:	f7ff fcd5 	bl	800ac4c <_Balloc>
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	b930      	cbnz	r0, 800b2b4 <__d2b+0x24>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	4b24      	ldr	r3, [pc, #144]	; (800b33c <__d2b+0xac>)
 800b2aa:	4825      	ldr	r0, [pc, #148]	; (800b340 <__d2b+0xb0>)
 800b2ac:	f240 310f 	movw	r1, #783	; 0x30f
 800b2b0:	f000 fa5e 	bl	800b770 <__assert_func>
 800b2b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2bc:	bb2d      	cbnz	r5, 800b30a <__d2b+0x7a>
 800b2be:	9301      	str	r3, [sp, #4]
 800b2c0:	f1b8 0300 	subs.w	r3, r8, #0
 800b2c4:	d026      	beq.n	800b314 <__d2b+0x84>
 800b2c6:	4668      	mov	r0, sp
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	f7ff fd87 	bl	800addc <__lo0bits>
 800b2ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2d2:	b1e8      	cbz	r0, 800b310 <__d2b+0x80>
 800b2d4:	f1c0 0320 	rsb	r3, r0, #32
 800b2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	40c2      	lsrs	r2, r0
 800b2e0:	6163      	str	r3, [r4, #20]
 800b2e2:	9201      	str	r2, [sp, #4]
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	61a3      	str	r3, [r4, #24]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bf14      	ite	ne
 800b2ec:	2202      	movne	r2, #2
 800b2ee:	2201      	moveq	r2, #1
 800b2f0:	6122      	str	r2, [r4, #16]
 800b2f2:	b1bd      	cbz	r5, 800b324 <__d2b+0x94>
 800b2f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2f8:	4405      	add	r5, r0
 800b2fa:	603d      	str	r5, [r7, #0]
 800b2fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b300:	6030      	str	r0, [r6, #0]
 800b302:	4620      	mov	r0, r4
 800b304:	b003      	add	sp, #12
 800b306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b30a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b30e:	e7d6      	b.n	800b2be <__d2b+0x2e>
 800b310:	6161      	str	r1, [r4, #20]
 800b312:	e7e7      	b.n	800b2e4 <__d2b+0x54>
 800b314:	a801      	add	r0, sp, #4
 800b316:	f7ff fd61 	bl	800addc <__lo0bits>
 800b31a:	9b01      	ldr	r3, [sp, #4]
 800b31c:	6163      	str	r3, [r4, #20]
 800b31e:	3020      	adds	r0, #32
 800b320:	2201      	movs	r2, #1
 800b322:	e7e5      	b.n	800b2f0 <__d2b+0x60>
 800b324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b32c:	6038      	str	r0, [r7, #0]
 800b32e:	6918      	ldr	r0, [r3, #16]
 800b330:	f7ff fd34 	bl	800ad9c <__hi0bits>
 800b334:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b338:	e7e2      	b.n	800b300 <__d2b+0x70>
 800b33a:	bf00      	nop
 800b33c:	0800de18 	.word	0x0800de18
 800b340:	0800de29 	.word	0x0800de29

0800b344 <__ssputs_r>:
 800b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	688e      	ldr	r6, [r1, #8]
 800b34a:	461f      	mov	r7, r3
 800b34c:	42be      	cmp	r6, r7
 800b34e:	680b      	ldr	r3, [r1, #0]
 800b350:	4682      	mov	sl, r0
 800b352:	460c      	mov	r4, r1
 800b354:	4690      	mov	r8, r2
 800b356:	d82c      	bhi.n	800b3b2 <__ssputs_r+0x6e>
 800b358:	898a      	ldrh	r2, [r1, #12]
 800b35a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b35e:	d026      	beq.n	800b3ae <__ssputs_r+0x6a>
 800b360:	6965      	ldr	r5, [r4, #20]
 800b362:	6909      	ldr	r1, [r1, #16]
 800b364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b368:	eba3 0901 	sub.w	r9, r3, r1
 800b36c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b370:	1c7b      	adds	r3, r7, #1
 800b372:	444b      	add	r3, r9
 800b374:	106d      	asrs	r5, r5, #1
 800b376:	429d      	cmp	r5, r3
 800b378:	bf38      	it	cc
 800b37a:	461d      	movcc	r5, r3
 800b37c:	0553      	lsls	r3, r2, #21
 800b37e:	d527      	bpl.n	800b3d0 <__ssputs_r+0x8c>
 800b380:	4629      	mov	r1, r5
 800b382:	f7ff fbd7 	bl	800ab34 <_malloc_r>
 800b386:	4606      	mov	r6, r0
 800b388:	b360      	cbz	r0, 800b3e4 <__ssputs_r+0xa0>
 800b38a:	6921      	ldr	r1, [r4, #16]
 800b38c:	464a      	mov	r2, r9
 800b38e:	f7fe fcd3 	bl	8009d38 <memcpy>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	6126      	str	r6, [r4, #16]
 800b3a0:	6165      	str	r5, [r4, #20]
 800b3a2:	444e      	add	r6, r9
 800b3a4:	eba5 0509 	sub.w	r5, r5, r9
 800b3a8:	6026      	str	r6, [r4, #0]
 800b3aa:	60a5      	str	r5, [r4, #8]
 800b3ac:	463e      	mov	r6, r7
 800b3ae:	42be      	cmp	r6, r7
 800b3b0:	d900      	bls.n	800b3b4 <__ssputs_r+0x70>
 800b3b2:	463e      	mov	r6, r7
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	f7fe fc24 	bl	8009c06 <memmove>
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	1b9b      	subs	r3, r3, r6
 800b3c2:	60a3      	str	r3, [r4, #8]
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	4433      	add	r3, r6
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	462a      	mov	r2, r5
 800b3d2:	f000 fa13 	bl	800b7fc <_realloc_r>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d1e0      	bne.n	800b39e <__ssputs_r+0x5a>
 800b3dc:	6921      	ldr	r1, [r4, #16]
 800b3de:	4650      	mov	r0, sl
 800b3e0:	f7ff fb34 	bl	800aa4c <_free_r>
 800b3e4:	230c      	movs	r3, #12
 800b3e6:	f8ca 3000 	str.w	r3, [sl]
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f6:	e7e9      	b.n	800b3cc <__ssputs_r+0x88>

0800b3f8 <_svfiprintf_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	4698      	mov	r8, r3
 800b3fe:	898b      	ldrh	r3, [r1, #12]
 800b400:	061b      	lsls	r3, r3, #24
 800b402:	b09d      	sub	sp, #116	; 0x74
 800b404:	4607      	mov	r7, r0
 800b406:	460d      	mov	r5, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	d50e      	bpl.n	800b42a <_svfiprintf_r+0x32>
 800b40c:	690b      	ldr	r3, [r1, #16]
 800b40e:	b963      	cbnz	r3, 800b42a <_svfiprintf_r+0x32>
 800b410:	2140      	movs	r1, #64	; 0x40
 800b412:	f7ff fb8f 	bl	800ab34 <_malloc_r>
 800b416:	6028      	str	r0, [r5, #0]
 800b418:	6128      	str	r0, [r5, #16]
 800b41a:	b920      	cbnz	r0, 800b426 <_svfiprintf_r+0x2e>
 800b41c:	230c      	movs	r3, #12
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	e0d0      	b.n	800b5c8 <_svfiprintf_r+0x1d0>
 800b426:	2340      	movs	r3, #64	; 0x40
 800b428:	616b      	str	r3, [r5, #20]
 800b42a:	2300      	movs	r3, #0
 800b42c:	9309      	str	r3, [sp, #36]	; 0x24
 800b42e:	2320      	movs	r3, #32
 800b430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b434:	f8cd 800c 	str.w	r8, [sp, #12]
 800b438:	2330      	movs	r3, #48	; 0x30
 800b43a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b5e0 <_svfiprintf_r+0x1e8>
 800b43e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b442:	f04f 0901 	mov.w	r9, #1
 800b446:	4623      	mov	r3, r4
 800b448:	469a      	mov	sl, r3
 800b44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b44e:	b10a      	cbz	r2, 800b454 <_svfiprintf_r+0x5c>
 800b450:	2a25      	cmp	r2, #37	; 0x25
 800b452:	d1f9      	bne.n	800b448 <_svfiprintf_r+0x50>
 800b454:	ebba 0b04 	subs.w	fp, sl, r4
 800b458:	d00b      	beq.n	800b472 <_svfiprintf_r+0x7a>
 800b45a:	465b      	mov	r3, fp
 800b45c:	4622      	mov	r2, r4
 800b45e:	4629      	mov	r1, r5
 800b460:	4638      	mov	r0, r7
 800b462:	f7ff ff6f 	bl	800b344 <__ssputs_r>
 800b466:	3001      	adds	r0, #1
 800b468:	f000 80a9 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b46e:	445a      	add	r2, fp
 800b470:	9209      	str	r2, [sp, #36]	; 0x24
 800b472:	f89a 3000 	ldrb.w	r3, [sl]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 80a1 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b47c:	2300      	movs	r3, #0
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295
 800b482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b486:	f10a 0a01 	add.w	sl, sl, #1
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	9307      	str	r3, [sp, #28]
 800b48e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b492:	931a      	str	r3, [sp, #104]	; 0x68
 800b494:	4654      	mov	r4, sl
 800b496:	2205      	movs	r2, #5
 800b498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b49c:	4850      	ldr	r0, [pc, #320]	; (800b5e0 <_svfiprintf_r+0x1e8>)
 800b49e:	f7f4 feb7 	bl	8000210 <memchr>
 800b4a2:	9a04      	ldr	r2, [sp, #16]
 800b4a4:	b9d8      	cbnz	r0, 800b4de <_svfiprintf_r+0xe6>
 800b4a6:	06d0      	lsls	r0, r2, #27
 800b4a8:	bf44      	itt	mi
 800b4aa:	2320      	movmi	r3, #32
 800b4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4b0:	0711      	lsls	r1, r2, #28
 800b4b2:	bf44      	itt	mi
 800b4b4:	232b      	movmi	r3, #43	; 0x2b
 800b4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b4be:	2b2a      	cmp	r3, #42	; 0x2a
 800b4c0:	d015      	beq.n	800b4ee <_svfiprintf_r+0xf6>
 800b4c2:	9a07      	ldr	r2, [sp, #28]
 800b4c4:	4654      	mov	r4, sl
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f04f 0c0a 	mov.w	ip, #10
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4d2:	3b30      	subs	r3, #48	; 0x30
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	d94d      	bls.n	800b574 <_svfiprintf_r+0x17c>
 800b4d8:	b1b0      	cbz	r0, 800b508 <_svfiprintf_r+0x110>
 800b4da:	9207      	str	r2, [sp, #28]
 800b4dc:	e014      	b.n	800b508 <_svfiprintf_r+0x110>
 800b4de:	eba0 0308 	sub.w	r3, r0, r8
 800b4e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	9304      	str	r3, [sp, #16]
 800b4ea:	46a2      	mov	sl, r4
 800b4ec:	e7d2      	b.n	800b494 <_svfiprintf_r+0x9c>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	1d19      	adds	r1, r3, #4
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	9103      	str	r1, [sp, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	bfbb      	ittet	lt
 800b4fa:	425b      	neglt	r3, r3
 800b4fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b500:	9307      	strge	r3, [sp, #28]
 800b502:	9307      	strlt	r3, [sp, #28]
 800b504:	bfb8      	it	lt
 800b506:	9204      	strlt	r2, [sp, #16]
 800b508:	7823      	ldrb	r3, [r4, #0]
 800b50a:	2b2e      	cmp	r3, #46	; 0x2e
 800b50c:	d10c      	bne.n	800b528 <_svfiprintf_r+0x130>
 800b50e:	7863      	ldrb	r3, [r4, #1]
 800b510:	2b2a      	cmp	r3, #42	; 0x2a
 800b512:	d134      	bne.n	800b57e <_svfiprintf_r+0x186>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	1d1a      	adds	r2, r3, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	9203      	str	r2, [sp, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfb8      	it	lt
 800b520:	f04f 33ff 	movlt.w	r3, #4294967295
 800b524:	3402      	adds	r4, #2
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b5f0 <_svfiprintf_r+0x1f8>
 800b52c:	7821      	ldrb	r1, [r4, #0]
 800b52e:	2203      	movs	r2, #3
 800b530:	4650      	mov	r0, sl
 800b532:	f7f4 fe6d 	bl	8000210 <memchr>
 800b536:	b138      	cbz	r0, 800b548 <_svfiprintf_r+0x150>
 800b538:	9b04      	ldr	r3, [sp, #16]
 800b53a:	eba0 000a 	sub.w	r0, r0, sl
 800b53e:	2240      	movs	r2, #64	; 0x40
 800b540:	4082      	lsls	r2, r0
 800b542:	4313      	orrs	r3, r2
 800b544:	3401      	adds	r4, #1
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54c:	4825      	ldr	r0, [pc, #148]	; (800b5e4 <_svfiprintf_r+0x1ec>)
 800b54e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b552:	2206      	movs	r2, #6
 800b554:	f7f4 fe5c 	bl	8000210 <memchr>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d038      	beq.n	800b5ce <_svfiprintf_r+0x1d6>
 800b55c:	4b22      	ldr	r3, [pc, #136]	; (800b5e8 <_svfiprintf_r+0x1f0>)
 800b55e:	bb1b      	cbnz	r3, 800b5a8 <_svfiprintf_r+0x1b0>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	3307      	adds	r3, #7
 800b564:	f023 0307 	bic.w	r3, r3, #7
 800b568:	3308      	adds	r3, #8
 800b56a:	9303      	str	r3, [sp, #12]
 800b56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56e:	4433      	add	r3, r6
 800b570:	9309      	str	r3, [sp, #36]	; 0x24
 800b572:	e768      	b.n	800b446 <_svfiprintf_r+0x4e>
 800b574:	fb0c 3202 	mla	r2, ip, r2, r3
 800b578:	460c      	mov	r4, r1
 800b57a:	2001      	movs	r0, #1
 800b57c:	e7a6      	b.n	800b4cc <_svfiprintf_r+0xd4>
 800b57e:	2300      	movs	r3, #0
 800b580:	3401      	adds	r4, #1
 800b582:	9305      	str	r3, [sp, #20]
 800b584:	4619      	mov	r1, r3
 800b586:	f04f 0c0a 	mov.w	ip, #10
 800b58a:	4620      	mov	r0, r4
 800b58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b590:	3a30      	subs	r2, #48	; 0x30
 800b592:	2a09      	cmp	r2, #9
 800b594:	d903      	bls.n	800b59e <_svfiprintf_r+0x1a6>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0c6      	beq.n	800b528 <_svfiprintf_r+0x130>
 800b59a:	9105      	str	r1, [sp, #20]
 800b59c:	e7c4      	b.n	800b528 <_svfiprintf_r+0x130>
 800b59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e7f0      	b.n	800b58a <_svfiprintf_r+0x192>
 800b5a8:	ab03      	add	r3, sp, #12
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <_svfiprintf_r+0x1f4>)
 800b5b0:	a904      	add	r1, sp, #16
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	f7fd fe4e 	bl	8009254 <_printf_float>
 800b5b8:	1c42      	adds	r2, r0, #1
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	d1d6      	bne.n	800b56c <_svfiprintf_r+0x174>
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	065b      	lsls	r3, r3, #25
 800b5c2:	f53f af2d 	bmi.w	800b420 <_svfiprintf_r+0x28>
 800b5c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c8:	b01d      	add	sp, #116	; 0x74
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ce:	ab03      	add	r3, sp, #12
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <_svfiprintf_r+0x1f4>)
 800b5d6:	a904      	add	r1, sp, #16
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7fe f8df 	bl	800979c <_printf_i>
 800b5de:	e7eb      	b.n	800b5b8 <_svfiprintf_r+0x1c0>
 800b5e0:	0800df84 	.word	0x0800df84
 800b5e4:	0800df8e 	.word	0x0800df8e
 800b5e8:	08009255 	.word	0x08009255
 800b5ec:	0800b345 	.word	0x0800b345
 800b5f0:	0800df8a 	.word	0x0800df8a

0800b5f4 <__sflush_r>:
 800b5f4:	898a      	ldrh	r2, [r1, #12]
 800b5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	0710      	lsls	r0, r2, #28
 800b5fe:	460c      	mov	r4, r1
 800b600:	d458      	bmi.n	800b6b4 <__sflush_r+0xc0>
 800b602:	684b      	ldr	r3, [r1, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	dc05      	bgt.n	800b614 <__sflush_r+0x20>
 800b608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dc02      	bgt.n	800b614 <__sflush_r+0x20>
 800b60e:	2000      	movs	r0, #0
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b616:	2e00      	cmp	r6, #0
 800b618:	d0f9      	beq.n	800b60e <__sflush_r+0x1a>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b620:	682f      	ldr	r7, [r5, #0]
 800b622:	6a21      	ldr	r1, [r4, #32]
 800b624:	602b      	str	r3, [r5, #0]
 800b626:	d032      	beq.n	800b68e <__sflush_r+0x9a>
 800b628:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	075a      	lsls	r2, r3, #29
 800b62e:	d505      	bpl.n	800b63c <__sflush_r+0x48>
 800b630:	6863      	ldr	r3, [r4, #4]
 800b632:	1ac0      	subs	r0, r0, r3
 800b634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b636:	b10b      	cbz	r3, 800b63c <__sflush_r+0x48>
 800b638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b63a:	1ac0      	subs	r0, r0, r3
 800b63c:	2300      	movs	r3, #0
 800b63e:	4602      	mov	r2, r0
 800b640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b642:	6a21      	ldr	r1, [r4, #32]
 800b644:	4628      	mov	r0, r5
 800b646:	47b0      	blx	r6
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	d106      	bne.n	800b65c <__sflush_r+0x68>
 800b64e:	6829      	ldr	r1, [r5, #0]
 800b650:	291d      	cmp	r1, #29
 800b652:	d82b      	bhi.n	800b6ac <__sflush_r+0xb8>
 800b654:	4a29      	ldr	r2, [pc, #164]	; (800b6fc <__sflush_r+0x108>)
 800b656:	410a      	asrs	r2, r1
 800b658:	07d6      	lsls	r6, r2, #31
 800b65a:	d427      	bmi.n	800b6ac <__sflush_r+0xb8>
 800b65c:	2200      	movs	r2, #0
 800b65e:	6062      	str	r2, [r4, #4]
 800b660:	04d9      	lsls	r1, r3, #19
 800b662:	6922      	ldr	r2, [r4, #16]
 800b664:	6022      	str	r2, [r4, #0]
 800b666:	d504      	bpl.n	800b672 <__sflush_r+0x7e>
 800b668:	1c42      	adds	r2, r0, #1
 800b66a:	d101      	bne.n	800b670 <__sflush_r+0x7c>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b903      	cbnz	r3, 800b672 <__sflush_r+0x7e>
 800b670:	6560      	str	r0, [r4, #84]	; 0x54
 800b672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b674:	602f      	str	r7, [r5, #0]
 800b676:	2900      	cmp	r1, #0
 800b678:	d0c9      	beq.n	800b60e <__sflush_r+0x1a>
 800b67a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b67e:	4299      	cmp	r1, r3
 800b680:	d002      	beq.n	800b688 <__sflush_r+0x94>
 800b682:	4628      	mov	r0, r5
 800b684:	f7ff f9e2 	bl	800aa4c <_free_r>
 800b688:	2000      	movs	r0, #0
 800b68a:	6360      	str	r0, [r4, #52]	; 0x34
 800b68c:	e7c0      	b.n	800b610 <__sflush_r+0x1c>
 800b68e:	2301      	movs	r3, #1
 800b690:	4628      	mov	r0, r5
 800b692:	47b0      	blx	r6
 800b694:	1c41      	adds	r1, r0, #1
 800b696:	d1c8      	bne.n	800b62a <__sflush_r+0x36>
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0c5      	beq.n	800b62a <__sflush_r+0x36>
 800b69e:	2b1d      	cmp	r3, #29
 800b6a0:	d001      	beq.n	800b6a6 <__sflush_r+0xb2>
 800b6a2:	2b16      	cmp	r3, #22
 800b6a4:	d101      	bne.n	800b6aa <__sflush_r+0xb6>
 800b6a6:	602f      	str	r7, [r5, #0]
 800b6a8:	e7b1      	b.n	800b60e <__sflush_r+0x1a>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	e7ad      	b.n	800b610 <__sflush_r+0x1c>
 800b6b4:	690f      	ldr	r7, [r1, #16]
 800b6b6:	2f00      	cmp	r7, #0
 800b6b8:	d0a9      	beq.n	800b60e <__sflush_r+0x1a>
 800b6ba:	0793      	lsls	r3, r2, #30
 800b6bc:	680e      	ldr	r6, [r1, #0]
 800b6be:	bf08      	it	eq
 800b6c0:	694b      	ldreq	r3, [r1, #20]
 800b6c2:	600f      	str	r7, [r1, #0]
 800b6c4:	bf18      	it	ne
 800b6c6:	2300      	movne	r3, #0
 800b6c8:	eba6 0807 	sub.w	r8, r6, r7
 800b6cc:	608b      	str	r3, [r1, #8]
 800b6ce:	f1b8 0f00 	cmp.w	r8, #0
 800b6d2:	dd9c      	ble.n	800b60e <__sflush_r+0x1a>
 800b6d4:	6a21      	ldr	r1, [r4, #32]
 800b6d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6d8:	4643      	mov	r3, r8
 800b6da:	463a      	mov	r2, r7
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b0      	blx	r6
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	dc06      	bgt.n	800b6f2 <__sflush_r+0xfe>
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	e78e      	b.n	800b610 <__sflush_r+0x1c>
 800b6f2:	4407      	add	r7, r0
 800b6f4:	eba8 0800 	sub.w	r8, r8, r0
 800b6f8:	e7e9      	b.n	800b6ce <__sflush_r+0xda>
 800b6fa:	bf00      	nop
 800b6fc:	dfbffffe 	.word	0xdfbffffe

0800b700 <_fflush_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	690b      	ldr	r3, [r1, #16]
 800b704:	4605      	mov	r5, r0
 800b706:	460c      	mov	r4, r1
 800b708:	b913      	cbnz	r3, 800b710 <_fflush_r+0x10>
 800b70a:	2500      	movs	r5, #0
 800b70c:	4628      	mov	r0, r5
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	b118      	cbz	r0, 800b71a <_fflush_r+0x1a>
 800b712:	6a03      	ldr	r3, [r0, #32]
 800b714:	b90b      	cbnz	r3, 800b71a <_fflush_r+0x1a>
 800b716:	f7fe f9dd 	bl	8009ad4 <__sinit>
 800b71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0f3      	beq.n	800b70a <_fflush_r+0xa>
 800b722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b724:	07d0      	lsls	r0, r2, #31
 800b726:	d404      	bmi.n	800b732 <_fflush_r+0x32>
 800b728:	0599      	lsls	r1, r3, #22
 800b72a:	d402      	bmi.n	800b732 <_fflush_r+0x32>
 800b72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72e:	f7fe fb01 	bl	8009d34 <__retarget_lock_acquire_recursive>
 800b732:	4628      	mov	r0, r5
 800b734:	4621      	mov	r1, r4
 800b736:	f7ff ff5d 	bl	800b5f4 <__sflush_r>
 800b73a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b73c:	07da      	lsls	r2, r3, #31
 800b73e:	4605      	mov	r5, r0
 800b740:	d4e4      	bmi.n	800b70c <_fflush_r+0xc>
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	059b      	lsls	r3, r3, #22
 800b746:	d4e1      	bmi.n	800b70c <_fflush_r+0xc>
 800b748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74a:	f7fe faf4 	bl	8009d36 <__retarget_lock_release_recursive>
 800b74e:	e7dd      	b.n	800b70c <_fflush_r+0xc>

0800b750 <_sbrk_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d06      	ldr	r5, [pc, #24]	; (800b76c <_sbrk_r+0x1c>)
 800b754:	2300      	movs	r3, #0
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	f7f6 f924 	bl	80019a8 <_sbrk>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_sbrk_r+0x1a>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_sbrk_r+0x1a>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	20000948 	.word	0x20000948

0800b770 <__assert_func>:
 800b770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b772:	4614      	mov	r4, r2
 800b774:	461a      	mov	r2, r3
 800b776:	4b09      	ldr	r3, [pc, #36]	; (800b79c <__assert_func+0x2c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4605      	mov	r5, r0
 800b77c:	68d8      	ldr	r0, [r3, #12]
 800b77e:	b14c      	cbz	r4, 800b794 <__assert_func+0x24>
 800b780:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <__assert_func+0x30>)
 800b782:	9100      	str	r1, [sp, #0]
 800b784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b788:	4906      	ldr	r1, [pc, #24]	; (800b7a4 <__assert_func+0x34>)
 800b78a:	462b      	mov	r3, r5
 800b78c:	f000 f872 	bl	800b874 <fiprintf>
 800b790:	f000 f882 	bl	800b898 <abort>
 800b794:	4b04      	ldr	r3, [pc, #16]	; (800b7a8 <__assert_func+0x38>)
 800b796:	461c      	mov	r4, r3
 800b798:	e7f3      	b.n	800b782 <__assert_func+0x12>
 800b79a:	bf00      	nop
 800b79c:	20000098 	.word	0x20000098
 800b7a0:	0800df9f 	.word	0x0800df9f
 800b7a4:	0800dfac 	.word	0x0800dfac
 800b7a8:	0800dfda 	.word	0x0800dfda

0800b7ac <_calloc_r>:
 800b7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ae:	fba1 2402 	umull	r2, r4, r1, r2
 800b7b2:	b94c      	cbnz	r4, 800b7c8 <_calloc_r+0x1c>
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	9201      	str	r2, [sp, #4]
 800b7b8:	f7ff f9bc 	bl	800ab34 <_malloc_r>
 800b7bc:	9a01      	ldr	r2, [sp, #4]
 800b7be:	4605      	mov	r5, r0
 800b7c0:	b930      	cbnz	r0, 800b7d0 <_calloc_r+0x24>
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	b003      	add	sp, #12
 800b7c6:	bd30      	pop	{r4, r5, pc}
 800b7c8:	220c      	movs	r2, #12
 800b7ca:	6002      	str	r2, [r0, #0]
 800b7cc:	2500      	movs	r5, #0
 800b7ce:	e7f8      	b.n	800b7c2 <_calloc_r+0x16>
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	f7fe fa32 	bl	8009c3a <memset>
 800b7d6:	e7f4      	b.n	800b7c2 <_calloc_r+0x16>

0800b7d8 <__ascii_mbtowc>:
 800b7d8:	b082      	sub	sp, #8
 800b7da:	b901      	cbnz	r1, 800b7de <__ascii_mbtowc+0x6>
 800b7dc:	a901      	add	r1, sp, #4
 800b7de:	b142      	cbz	r2, 800b7f2 <__ascii_mbtowc+0x1a>
 800b7e0:	b14b      	cbz	r3, 800b7f6 <__ascii_mbtowc+0x1e>
 800b7e2:	7813      	ldrb	r3, [r2, #0]
 800b7e4:	600b      	str	r3, [r1, #0]
 800b7e6:	7812      	ldrb	r2, [r2, #0]
 800b7e8:	1e10      	subs	r0, r2, #0
 800b7ea:	bf18      	it	ne
 800b7ec:	2001      	movne	r0, #1
 800b7ee:	b002      	add	sp, #8
 800b7f0:	4770      	bx	lr
 800b7f2:	4610      	mov	r0, r2
 800b7f4:	e7fb      	b.n	800b7ee <__ascii_mbtowc+0x16>
 800b7f6:	f06f 0001 	mvn.w	r0, #1
 800b7fa:	e7f8      	b.n	800b7ee <__ascii_mbtowc+0x16>

0800b7fc <_realloc_r>:
 800b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	4680      	mov	r8, r0
 800b802:	4614      	mov	r4, r2
 800b804:	460e      	mov	r6, r1
 800b806:	b921      	cbnz	r1, 800b812 <_realloc_r+0x16>
 800b808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b80c:	4611      	mov	r1, r2
 800b80e:	f7ff b991 	b.w	800ab34 <_malloc_r>
 800b812:	b92a      	cbnz	r2, 800b820 <_realloc_r+0x24>
 800b814:	f7ff f91a 	bl	800aa4c <_free_r>
 800b818:	4625      	mov	r5, r4
 800b81a:	4628      	mov	r0, r5
 800b81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b820:	f000 f841 	bl	800b8a6 <_malloc_usable_size_r>
 800b824:	4284      	cmp	r4, r0
 800b826:	4607      	mov	r7, r0
 800b828:	d802      	bhi.n	800b830 <_realloc_r+0x34>
 800b82a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b82e:	d812      	bhi.n	800b856 <_realloc_r+0x5a>
 800b830:	4621      	mov	r1, r4
 800b832:	4640      	mov	r0, r8
 800b834:	f7ff f97e 	bl	800ab34 <_malloc_r>
 800b838:	4605      	mov	r5, r0
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d0ed      	beq.n	800b81a <_realloc_r+0x1e>
 800b83e:	42bc      	cmp	r4, r7
 800b840:	4622      	mov	r2, r4
 800b842:	4631      	mov	r1, r6
 800b844:	bf28      	it	cs
 800b846:	463a      	movcs	r2, r7
 800b848:	f7fe fa76 	bl	8009d38 <memcpy>
 800b84c:	4631      	mov	r1, r6
 800b84e:	4640      	mov	r0, r8
 800b850:	f7ff f8fc 	bl	800aa4c <_free_r>
 800b854:	e7e1      	b.n	800b81a <_realloc_r+0x1e>
 800b856:	4635      	mov	r5, r6
 800b858:	e7df      	b.n	800b81a <_realloc_r+0x1e>

0800b85a <__ascii_wctomb>:
 800b85a:	b149      	cbz	r1, 800b870 <__ascii_wctomb+0x16>
 800b85c:	2aff      	cmp	r2, #255	; 0xff
 800b85e:	bf85      	ittet	hi
 800b860:	238a      	movhi	r3, #138	; 0x8a
 800b862:	6003      	strhi	r3, [r0, #0]
 800b864:	700a      	strbls	r2, [r1, #0]
 800b866:	f04f 30ff 	movhi.w	r0, #4294967295
 800b86a:	bf98      	it	ls
 800b86c:	2001      	movls	r0, #1
 800b86e:	4770      	bx	lr
 800b870:	4608      	mov	r0, r1
 800b872:	4770      	bx	lr

0800b874 <fiprintf>:
 800b874:	b40e      	push	{r1, r2, r3}
 800b876:	b503      	push	{r0, r1, lr}
 800b878:	4601      	mov	r1, r0
 800b87a:	ab03      	add	r3, sp, #12
 800b87c:	4805      	ldr	r0, [pc, #20]	; (800b894 <fiprintf+0x20>)
 800b87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b882:	6800      	ldr	r0, [r0, #0]
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	f000 f83f 	bl	800b908 <_vfiprintf_r>
 800b88a:	b002      	add	sp, #8
 800b88c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b890:	b003      	add	sp, #12
 800b892:	4770      	bx	lr
 800b894:	20000098 	.word	0x20000098

0800b898 <abort>:
 800b898:	b508      	push	{r3, lr}
 800b89a:	2006      	movs	r0, #6
 800b89c:	f000 fa0c 	bl	800bcb8 <raise>
 800b8a0:	2001      	movs	r0, #1
 800b8a2:	f7f6 f809 	bl	80018b8 <_exit>

0800b8a6 <_malloc_usable_size_r>:
 800b8a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8aa:	1f18      	subs	r0, r3, #4
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	bfbc      	itt	lt
 800b8b0:	580b      	ldrlt	r3, [r1, r0]
 800b8b2:	18c0      	addlt	r0, r0, r3
 800b8b4:	4770      	bx	lr

0800b8b6 <__sfputc_r>:
 800b8b6:	6893      	ldr	r3, [r2, #8]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	b410      	push	{r4}
 800b8be:	6093      	str	r3, [r2, #8]
 800b8c0:	da08      	bge.n	800b8d4 <__sfputc_r+0x1e>
 800b8c2:	6994      	ldr	r4, [r2, #24]
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	db01      	blt.n	800b8cc <__sfputc_r+0x16>
 800b8c8:	290a      	cmp	r1, #10
 800b8ca:	d103      	bne.n	800b8d4 <__sfputc_r+0x1e>
 800b8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d0:	f000 b934 	b.w	800bb3c <__swbuf_r>
 800b8d4:	6813      	ldr	r3, [r2, #0]
 800b8d6:	1c58      	adds	r0, r3, #1
 800b8d8:	6010      	str	r0, [r2, #0]
 800b8da:	7019      	strb	r1, [r3, #0]
 800b8dc:	4608      	mov	r0, r1
 800b8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <__sfputs_r>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	18d5      	adds	r5, r2, r3
 800b8ee:	42ac      	cmp	r4, r5
 800b8f0:	d101      	bne.n	800b8f6 <__sfputs_r+0x12>
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	e007      	b.n	800b906 <__sfputs_r+0x22>
 800b8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fa:	463a      	mov	r2, r7
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff ffda 	bl	800b8b6 <__sfputc_r>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d1f3      	bne.n	800b8ee <__sfputs_r+0xa>
 800b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b908 <_vfiprintf_r>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	460d      	mov	r5, r1
 800b90e:	b09d      	sub	sp, #116	; 0x74
 800b910:	4614      	mov	r4, r2
 800b912:	4698      	mov	r8, r3
 800b914:	4606      	mov	r6, r0
 800b916:	b118      	cbz	r0, 800b920 <_vfiprintf_r+0x18>
 800b918:	6a03      	ldr	r3, [r0, #32]
 800b91a:	b90b      	cbnz	r3, 800b920 <_vfiprintf_r+0x18>
 800b91c:	f7fe f8da 	bl	8009ad4 <__sinit>
 800b920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b922:	07d9      	lsls	r1, r3, #31
 800b924:	d405      	bmi.n	800b932 <_vfiprintf_r+0x2a>
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	059a      	lsls	r2, r3, #22
 800b92a:	d402      	bmi.n	800b932 <_vfiprintf_r+0x2a>
 800b92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b92e:	f7fe fa01 	bl	8009d34 <__retarget_lock_acquire_recursive>
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	071b      	lsls	r3, r3, #28
 800b936:	d501      	bpl.n	800b93c <_vfiprintf_r+0x34>
 800b938:	692b      	ldr	r3, [r5, #16]
 800b93a:	b99b      	cbnz	r3, 800b964 <_vfiprintf_r+0x5c>
 800b93c:	4629      	mov	r1, r5
 800b93e:	4630      	mov	r0, r6
 800b940:	f000 f93a 	bl	800bbb8 <__swsetup_r>
 800b944:	b170      	cbz	r0, 800b964 <_vfiprintf_r+0x5c>
 800b946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b948:	07dc      	lsls	r4, r3, #31
 800b94a:	d504      	bpl.n	800b956 <_vfiprintf_r+0x4e>
 800b94c:	f04f 30ff 	mov.w	r0, #4294967295
 800b950:	b01d      	add	sp, #116	; 0x74
 800b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	0598      	lsls	r0, r3, #22
 800b95a:	d4f7      	bmi.n	800b94c <_vfiprintf_r+0x44>
 800b95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b95e:	f7fe f9ea 	bl	8009d36 <__retarget_lock_release_recursive>
 800b962:	e7f3      	b.n	800b94c <_vfiprintf_r+0x44>
 800b964:	2300      	movs	r3, #0
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
 800b968:	2320      	movs	r3, #32
 800b96a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b96e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b972:	2330      	movs	r3, #48	; 0x30
 800b974:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb28 <_vfiprintf_r+0x220>
 800b978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b97c:	f04f 0901 	mov.w	r9, #1
 800b980:	4623      	mov	r3, r4
 800b982:	469a      	mov	sl, r3
 800b984:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b988:	b10a      	cbz	r2, 800b98e <_vfiprintf_r+0x86>
 800b98a:	2a25      	cmp	r2, #37	; 0x25
 800b98c:	d1f9      	bne.n	800b982 <_vfiprintf_r+0x7a>
 800b98e:	ebba 0b04 	subs.w	fp, sl, r4
 800b992:	d00b      	beq.n	800b9ac <_vfiprintf_r+0xa4>
 800b994:	465b      	mov	r3, fp
 800b996:	4622      	mov	r2, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7ff ffa2 	bl	800b8e4 <__sfputs_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	f000 80a9 	beq.w	800baf8 <_vfiprintf_r+0x1f0>
 800b9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a8:	445a      	add	r2, fp
 800b9aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 80a1 	beq.w	800baf8 <_vfiprintf_r+0x1f0>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c0:	f10a 0a01 	add.w	sl, sl, #1
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d6:	4854      	ldr	r0, [pc, #336]	; (800bb28 <_vfiprintf_r+0x220>)
 800b9d8:	f7f4 fc1a 	bl	8000210 <memchr>
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	b9d8      	cbnz	r0, 800ba18 <_vfiprintf_r+0x110>
 800b9e0:	06d1      	lsls	r1, r2, #27
 800b9e2:	bf44      	itt	mi
 800b9e4:	2320      	movmi	r3, #32
 800b9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ea:	0713      	lsls	r3, r2, #28
 800b9ec:	bf44      	itt	mi
 800b9ee:	232b      	movmi	r3, #43	; 0x2b
 800b9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9fa:	d015      	beq.n	800ba28 <_vfiprintf_r+0x120>
 800b9fc:	9a07      	ldr	r2, [sp, #28]
 800b9fe:	4654      	mov	r4, sl
 800ba00:	2000      	movs	r0, #0
 800ba02:	f04f 0c0a 	mov.w	ip, #10
 800ba06:	4621      	mov	r1, r4
 800ba08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba0c:	3b30      	subs	r3, #48	; 0x30
 800ba0e:	2b09      	cmp	r3, #9
 800ba10:	d94d      	bls.n	800baae <_vfiprintf_r+0x1a6>
 800ba12:	b1b0      	cbz	r0, 800ba42 <_vfiprintf_r+0x13a>
 800ba14:	9207      	str	r2, [sp, #28]
 800ba16:	e014      	b.n	800ba42 <_vfiprintf_r+0x13a>
 800ba18:	eba0 0308 	sub.w	r3, r0, r8
 800ba1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba20:	4313      	orrs	r3, r2
 800ba22:	9304      	str	r3, [sp, #16]
 800ba24:	46a2      	mov	sl, r4
 800ba26:	e7d2      	b.n	800b9ce <_vfiprintf_r+0xc6>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	1d19      	adds	r1, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9103      	str	r1, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfbb      	ittet	lt
 800ba34:	425b      	neglt	r3, r3
 800ba36:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3a:	9307      	strge	r3, [sp, #28]
 800ba3c:	9307      	strlt	r3, [sp, #28]
 800ba3e:	bfb8      	it	lt
 800ba40:	9204      	strlt	r2, [sp, #16]
 800ba42:	7823      	ldrb	r3, [r4, #0]
 800ba44:	2b2e      	cmp	r3, #46	; 0x2e
 800ba46:	d10c      	bne.n	800ba62 <_vfiprintf_r+0x15a>
 800ba48:	7863      	ldrb	r3, [r4, #1]
 800ba4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4c:	d134      	bne.n	800bab8 <_vfiprintf_r+0x1b0>
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	1d1a      	adds	r2, r3, #4
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	9203      	str	r2, [sp, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bfb8      	it	lt
 800ba5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba5e:	3402      	adds	r4, #2
 800ba60:	9305      	str	r3, [sp, #20]
 800ba62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb38 <_vfiprintf_r+0x230>
 800ba66:	7821      	ldrb	r1, [r4, #0]
 800ba68:	2203      	movs	r2, #3
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	f7f4 fbd0 	bl	8000210 <memchr>
 800ba70:	b138      	cbz	r0, 800ba82 <_vfiprintf_r+0x17a>
 800ba72:	9b04      	ldr	r3, [sp, #16]
 800ba74:	eba0 000a 	sub.w	r0, r0, sl
 800ba78:	2240      	movs	r2, #64	; 0x40
 800ba7a:	4082      	lsls	r2, r0
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	3401      	adds	r4, #1
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	4829      	ldr	r0, [pc, #164]	; (800bb2c <_vfiprintf_r+0x224>)
 800ba88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba8c:	2206      	movs	r2, #6
 800ba8e:	f7f4 fbbf 	bl	8000210 <memchr>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d03f      	beq.n	800bb16 <_vfiprintf_r+0x20e>
 800ba96:	4b26      	ldr	r3, [pc, #152]	; (800bb30 <_vfiprintf_r+0x228>)
 800ba98:	bb1b      	cbnz	r3, 800bae2 <_vfiprintf_r+0x1da>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	3307      	adds	r3, #7
 800ba9e:	f023 0307 	bic.w	r3, r3, #7
 800baa2:	3308      	adds	r3, #8
 800baa4:	9303      	str	r3, [sp, #12]
 800baa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa8:	443b      	add	r3, r7
 800baaa:	9309      	str	r3, [sp, #36]	; 0x24
 800baac:	e768      	b.n	800b980 <_vfiprintf_r+0x78>
 800baae:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab2:	460c      	mov	r4, r1
 800bab4:	2001      	movs	r0, #1
 800bab6:	e7a6      	b.n	800ba06 <_vfiprintf_r+0xfe>
 800bab8:	2300      	movs	r3, #0
 800baba:	3401      	adds	r4, #1
 800babc:	9305      	str	r3, [sp, #20]
 800babe:	4619      	mov	r1, r3
 800bac0:	f04f 0c0a 	mov.w	ip, #10
 800bac4:	4620      	mov	r0, r4
 800bac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baca:	3a30      	subs	r2, #48	; 0x30
 800bacc:	2a09      	cmp	r2, #9
 800bace:	d903      	bls.n	800bad8 <_vfiprintf_r+0x1d0>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0c6      	beq.n	800ba62 <_vfiprintf_r+0x15a>
 800bad4:	9105      	str	r1, [sp, #20]
 800bad6:	e7c4      	b.n	800ba62 <_vfiprintf_r+0x15a>
 800bad8:	fb0c 2101 	mla	r1, ip, r1, r2
 800badc:	4604      	mov	r4, r0
 800bade:	2301      	movs	r3, #1
 800bae0:	e7f0      	b.n	800bac4 <_vfiprintf_r+0x1bc>
 800bae2:	ab03      	add	r3, sp, #12
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	462a      	mov	r2, r5
 800bae8:	4b12      	ldr	r3, [pc, #72]	; (800bb34 <_vfiprintf_r+0x22c>)
 800baea:	a904      	add	r1, sp, #16
 800baec:	4630      	mov	r0, r6
 800baee:	f7fd fbb1 	bl	8009254 <_printf_float>
 800baf2:	4607      	mov	r7, r0
 800baf4:	1c78      	adds	r0, r7, #1
 800baf6:	d1d6      	bne.n	800baa6 <_vfiprintf_r+0x19e>
 800baf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bafa:	07d9      	lsls	r1, r3, #31
 800bafc:	d405      	bmi.n	800bb0a <_vfiprintf_r+0x202>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	059a      	lsls	r2, r3, #22
 800bb02:	d402      	bmi.n	800bb0a <_vfiprintf_r+0x202>
 800bb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb06:	f7fe f916 	bl	8009d36 <__retarget_lock_release_recursive>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	065b      	lsls	r3, r3, #25
 800bb0e:	f53f af1d 	bmi.w	800b94c <_vfiprintf_r+0x44>
 800bb12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb14:	e71c      	b.n	800b950 <_vfiprintf_r+0x48>
 800bb16:	ab03      	add	r3, sp, #12
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	462a      	mov	r2, r5
 800bb1c:	4b05      	ldr	r3, [pc, #20]	; (800bb34 <_vfiprintf_r+0x22c>)
 800bb1e:	a904      	add	r1, sp, #16
 800bb20:	4630      	mov	r0, r6
 800bb22:	f7fd fe3b 	bl	800979c <_printf_i>
 800bb26:	e7e4      	b.n	800baf2 <_vfiprintf_r+0x1ea>
 800bb28:	0800df84 	.word	0x0800df84
 800bb2c:	0800df8e 	.word	0x0800df8e
 800bb30:	08009255 	.word	0x08009255
 800bb34:	0800b8e5 	.word	0x0800b8e5
 800bb38:	0800df8a 	.word	0x0800df8a

0800bb3c <__swbuf_r>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	460e      	mov	r6, r1
 800bb40:	4614      	mov	r4, r2
 800bb42:	4605      	mov	r5, r0
 800bb44:	b118      	cbz	r0, 800bb4e <__swbuf_r+0x12>
 800bb46:	6a03      	ldr	r3, [r0, #32]
 800bb48:	b90b      	cbnz	r3, 800bb4e <__swbuf_r+0x12>
 800bb4a:	f7fd ffc3 	bl	8009ad4 <__sinit>
 800bb4e:	69a3      	ldr	r3, [r4, #24]
 800bb50:	60a3      	str	r3, [r4, #8]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	071a      	lsls	r2, r3, #28
 800bb56:	d525      	bpl.n	800bba4 <__swbuf_r+0x68>
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	b31b      	cbz	r3, 800bba4 <__swbuf_r+0x68>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	6922      	ldr	r2, [r4, #16]
 800bb60:	1a98      	subs	r0, r3, r2
 800bb62:	6963      	ldr	r3, [r4, #20]
 800bb64:	b2f6      	uxtb	r6, r6
 800bb66:	4283      	cmp	r3, r0
 800bb68:	4637      	mov	r7, r6
 800bb6a:	dc04      	bgt.n	800bb76 <__swbuf_r+0x3a>
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7ff fdc6 	bl	800b700 <_fflush_r>
 800bb74:	b9e0      	cbnz	r0, 800bbb0 <__swbuf_r+0x74>
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	60a3      	str	r3, [r4, #8]
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	6022      	str	r2, [r4, #0]
 800bb82:	701e      	strb	r6, [r3, #0]
 800bb84:	6962      	ldr	r2, [r4, #20]
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d004      	beq.n	800bb96 <__swbuf_r+0x5a>
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	07db      	lsls	r3, r3, #31
 800bb90:	d506      	bpl.n	800bba0 <__swbuf_r+0x64>
 800bb92:	2e0a      	cmp	r6, #10
 800bb94:	d104      	bne.n	800bba0 <__swbuf_r+0x64>
 800bb96:	4621      	mov	r1, r4
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f7ff fdb1 	bl	800b700 <_fflush_r>
 800bb9e:	b938      	cbnz	r0, 800bbb0 <__swbuf_r+0x74>
 800bba0:	4638      	mov	r0, r7
 800bba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba4:	4621      	mov	r1, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	f000 f806 	bl	800bbb8 <__swsetup_r>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d0d5      	beq.n	800bb5c <__swbuf_r+0x20>
 800bbb0:	f04f 37ff 	mov.w	r7, #4294967295
 800bbb4:	e7f4      	b.n	800bba0 <__swbuf_r+0x64>
	...

0800bbb8 <__swsetup_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4b2a      	ldr	r3, [pc, #168]	; (800bc64 <__swsetup_r+0xac>)
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	6818      	ldr	r0, [r3, #0]
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	b118      	cbz	r0, 800bbcc <__swsetup_r+0x14>
 800bbc4:	6a03      	ldr	r3, [r0, #32]
 800bbc6:	b90b      	cbnz	r3, 800bbcc <__swsetup_r+0x14>
 800bbc8:	f7fd ff84 	bl	8009ad4 <__sinit>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbd2:	0718      	lsls	r0, r3, #28
 800bbd4:	d422      	bmi.n	800bc1c <__swsetup_r+0x64>
 800bbd6:	06d9      	lsls	r1, r3, #27
 800bbd8:	d407      	bmi.n	800bbea <__swsetup_r+0x32>
 800bbda:	2309      	movs	r3, #9
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbe2:	81a3      	strh	r3, [r4, #12]
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	e034      	b.n	800bc54 <__swsetup_r+0x9c>
 800bbea:	0758      	lsls	r0, r3, #29
 800bbec:	d512      	bpl.n	800bc14 <__swsetup_r+0x5c>
 800bbee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbf0:	b141      	cbz	r1, 800bc04 <__swsetup_r+0x4c>
 800bbf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbf6:	4299      	cmp	r1, r3
 800bbf8:	d002      	beq.n	800bc00 <__swsetup_r+0x48>
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f7fe ff26 	bl	800aa4c <_free_r>
 800bc00:	2300      	movs	r3, #0
 800bc02:	6363      	str	r3, [r4, #52]	; 0x34
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	6063      	str	r3, [r4, #4]
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f043 0308 	orr.w	r3, r3, #8
 800bc1a:	81a3      	strh	r3, [r4, #12]
 800bc1c:	6923      	ldr	r3, [r4, #16]
 800bc1e:	b94b      	cbnz	r3, 800bc34 <__swsetup_r+0x7c>
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc2a:	d003      	beq.n	800bc34 <__swsetup_r+0x7c>
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 f884 	bl	800bd3c <__smakebuf_r>
 800bc34:	89a0      	ldrh	r0, [r4, #12]
 800bc36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc3a:	f010 0301 	ands.w	r3, r0, #1
 800bc3e:	d00a      	beq.n	800bc56 <__swsetup_r+0x9e>
 800bc40:	2300      	movs	r3, #0
 800bc42:	60a3      	str	r3, [r4, #8]
 800bc44:	6963      	ldr	r3, [r4, #20]
 800bc46:	425b      	negs	r3, r3
 800bc48:	61a3      	str	r3, [r4, #24]
 800bc4a:	6923      	ldr	r3, [r4, #16]
 800bc4c:	b943      	cbnz	r3, 800bc60 <__swsetup_r+0xa8>
 800bc4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc52:	d1c4      	bne.n	800bbde <__swsetup_r+0x26>
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
 800bc56:	0781      	lsls	r1, r0, #30
 800bc58:	bf58      	it	pl
 800bc5a:	6963      	ldrpl	r3, [r4, #20]
 800bc5c:	60a3      	str	r3, [r4, #8]
 800bc5e:	e7f4      	b.n	800bc4a <__swsetup_r+0x92>
 800bc60:	2000      	movs	r0, #0
 800bc62:	e7f7      	b.n	800bc54 <__swsetup_r+0x9c>
 800bc64:	20000098 	.word	0x20000098

0800bc68 <_raise_r>:
 800bc68:	291f      	cmp	r1, #31
 800bc6a:	b538      	push	{r3, r4, r5, lr}
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	460d      	mov	r5, r1
 800bc70:	d904      	bls.n	800bc7c <_raise_r+0x14>
 800bc72:	2316      	movs	r3, #22
 800bc74:	6003      	str	r3, [r0, #0]
 800bc76:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc7e:	b112      	cbz	r2, 800bc86 <_raise_r+0x1e>
 800bc80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc84:	b94b      	cbnz	r3, 800bc9a <_raise_r+0x32>
 800bc86:	4620      	mov	r0, r4
 800bc88:	f000 f830 	bl	800bcec <_getpid_r>
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	4601      	mov	r1, r0
 800bc90:	4620      	mov	r0, r4
 800bc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc96:	f000 b817 	b.w	800bcc8 <_kill_r>
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d00a      	beq.n	800bcb4 <_raise_r+0x4c>
 800bc9e:	1c59      	adds	r1, r3, #1
 800bca0:	d103      	bne.n	800bcaa <_raise_r+0x42>
 800bca2:	2316      	movs	r3, #22
 800bca4:	6003      	str	r3, [r0, #0]
 800bca6:	2001      	movs	r0, #1
 800bca8:	e7e7      	b.n	800bc7a <_raise_r+0x12>
 800bcaa:	2400      	movs	r4, #0
 800bcac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	4798      	blx	r3
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7e0      	b.n	800bc7a <_raise_r+0x12>

0800bcb8 <raise>:
 800bcb8:	4b02      	ldr	r3, [pc, #8]	; (800bcc4 <raise+0xc>)
 800bcba:	4601      	mov	r1, r0
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	f7ff bfd3 	b.w	800bc68 <_raise_r>
 800bcc2:	bf00      	nop
 800bcc4:	20000098 	.word	0x20000098

0800bcc8 <_kill_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d07      	ldr	r5, [pc, #28]	; (800bce8 <_kill_r+0x20>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	f7f5 fddf 	bl	8001898 <_kill>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	d102      	bne.n	800bce4 <_kill_r+0x1c>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	b103      	cbz	r3, 800bce4 <_kill_r+0x1c>
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	bd38      	pop	{r3, r4, r5, pc}
 800bce6:	bf00      	nop
 800bce8:	20000948 	.word	0x20000948

0800bcec <_getpid_r>:
 800bcec:	f7f5 bdcc 	b.w	8001888 <_getpid>

0800bcf0 <__swhatbuf_r>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf8:	2900      	cmp	r1, #0
 800bcfa:	b096      	sub	sp, #88	; 0x58
 800bcfc:	4615      	mov	r5, r2
 800bcfe:	461e      	mov	r6, r3
 800bd00:	da0d      	bge.n	800bd1e <__swhatbuf_r+0x2e>
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd08:	f04f 0100 	mov.w	r1, #0
 800bd0c:	bf0c      	ite	eq
 800bd0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd12:	2340      	movne	r3, #64	; 0x40
 800bd14:	2000      	movs	r0, #0
 800bd16:	6031      	str	r1, [r6, #0]
 800bd18:	602b      	str	r3, [r5, #0]
 800bd1a:	b016      	add	sp, #88	; 0x58
 800bd1c:	bd70      	pop	{r4, r5, r6, pc}
 800bd1e:	466a      	mov	r2, sp
 800bd20:	f000 f848 	bl	800bdb4 <_fstat_r>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	dbec      	blt.n	800bd02 <__swhatbuf_r+0x12>
 800bd28:	9901      	ldr	r1, [sp, #4]
 800bd2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd32:	4259      	negs	r1, r3
 800bd34:	4159      	adcs	r1, r3
 800bd36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd3a:	e7eb      	b.n	800bd14 <__swhatbuf_r+0x24>

0800bd3c <__smakebuf_r>:
 800bd3c:	898b      	ldrh	r3, [r1, #12]
 800bd3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd40:	079d      	lsls	r5, r3, #30
 800bd42:	4606      	mov	r6, r0
 800bd44:	460c      	mov	r4, r1
 800bd46:	d507      	bpl.n	800bd58 <__smakebuf_r+0x1c>
 800bd48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	6123      	str	r3, [r4, #16]
 800bd50:	2301      	movs	r3, #1
 800bd52:	6163      	str	r3, [r4, #20]
 800bd54:	b002      	add	sp, #8
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
 800bd58:	ab01      	add	r3, sp, #4
 800bd5a:	466a      	mov	r2, sp
 800bd5c:	f7ff ffc8 	bl	800bcf0 <__swhatbuf_r>
 800bd60:	9900      	ldr	r1, [sp, #0]
 800bd62:	4605      	mov	r5, r0
 800bd64:	4630      	mov	r0, r6
 800bd66:	f7fe fee5 	bl	800ab34 <_malloc_r>
 800bd6a:	b948      	cbnz	r0, 800bd80 <__smakebuf_r+0x44>
 800bd6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd70:	059a      	lsls	r2, r3, #22
 800bd72:	d4ef      	bmi.n	800bd54 <__smakebuf_r+0x18>
 800bd74:	f023 0303 	bic.w	r3, r3, #3
 800bd78:	f043 0302 	orr.w	r3, r3, #2
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	e7e3      	b.n	800bd48 <__smakebuf_r+0xc>
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	6020      	str	r0, [r4, #0]
 800bd84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd88:	81a3      	strh	r3, [r4, #12]
 800bd8a:	9b00      	ldr	r3, [sp, #0]
 800bd8c:	6163      	str	r3, [r4, #20]
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	6120      	str	r0, [r4, #16]
 800bd92:	b15b      	cbz	r3, 800bdac <__smakebuf_r+0x70>
 800bd94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f000 f81d 	bl	800bdd8 <_isatty_r>
 800bd9e:	b128      	cbz	r0, 800bdac <__smakebuf_r+0x70>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f023 0303 	bic.w	r3, r3, #3
 800bda6:	f043 0301 	orr.w	r3, r3, #1
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	431d      	orrs	r5, r3
 800bdb0:	81a5      	strh	r5, [r4, #12]
 800bdb2:	e7cf      	b.n	800bd54 <__smakebuf_r+0x18>

0800bdb4 <_fstat_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	; (800bdd4 <_fstat_r+0x20>)
 800bdb8:	2300      	movs	r3, #0
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	602b      	str	r3, [r5, #0]
 800bdc2:	f7f5 fdc8 	bl	8001956 <_fstat>
 800bdc6:	1c43      	adds	r3, r0, #1
 800bdc8:	d102      	bne.n	800bdd0 <_fstat_r+0x1c>
 800bdca:	682b      	ldr	r3, [r5, #0]
 800bdcc:	b103      	cbz	r3, 800bdd0 <_fstat_r+0x1c>
 800bdce:	6023      	str	r3, [r4, #0]
 800bdd0:	bd38      	pop	{r3, r4, r5, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20000948 	.word	0x20000948

0800bdd8 <_isatty_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d06      	ldr	r5, [pc, #24]	; (800bdf4 <_isatty_r+0x1c>)
 800bddc:	2300      	movs	r3, #0
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	f7f5 fdc7 	bl	8001976 <_isatty>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	d102      	bne.n	800bdf2 <_isatty_r+0x1a>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	b103      	cbz	r3, 800bdf2 <_isatty_r+0x1a>
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	20000948 	.word	0x20000948

0800bdf8 <_init>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr

0800be04 <_fini>:
 800be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be06:	bf00      	nop
 800be08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0a:	bc08      	pop	{r3}
 800be0c:	469e      	mov	lr, r3
 800be0e:	4770      	bx	lr
